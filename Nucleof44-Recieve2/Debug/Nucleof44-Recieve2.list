
Nucleof44-Recieve2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000546c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000cc  0800563c  0800563c  0000663c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005708  08005708  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08005708  08005708  00006708  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005710  08005710  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005710  08005710  00006710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005714  08005714  00006714  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08005718  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000584  20000068  08005780  00007068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005ec  08005780  000075ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ea3b  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029fb  00000000  00000000  00015ad3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c70  00000000  00000000  000184d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000968  00000000  00000000  00019140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023e45  00000000  00000000  00019aa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010d75  00000000  00000000  0003d8ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d3099  00000000  00000000  0004e662  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  001216fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a98  00000000  00000000  00121740  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006e  00000000  00000000  001251d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08005624 	.word	0x08005624

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08005624 	.word	0x08005624

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	78fa      	ldrb	r2, [r7, #3]
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fb39 	bl	8000c68 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fb54 	bl	8000ca8 <SX1278_hw_SPIReadByte>
 8000600:	4603      	mov	r3, r0
 8000602:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2101      	movs	r1, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f000 faf1 	bl	8000bf2 <SX1278_hw_SetNSS>
	return tmp;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	70fb      	strb	r3, [r7, #3]
 8000626:	4613      	mov	r3, r2
 8000628:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fade 	bl	8000bf2 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	4610      	mov	r0, r2
 8000646:	f000 fb0f 	bl	8000c68 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	78ba      	ldrb	r2, [r7, #2]
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fb08 	bl	8000c68 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2101      	movs	r1, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fac7 	bl	8000bf2 <SX1278_hw_SetNSS>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b087      	sub	sp, #28
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	607a      	str	r2, [r7, #4]
 8000676:	461a      	mov	r2, r3
 8000678:	460b      	mov	r3, r1
 800067a:	72fb      	strb	r3, [r7, #11]
 800067c:	4613      	mov	r3, r2
 800067e:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000680:	7abb      	ldrb	r3, [r7, #10]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d927      	bls.n	80006d6 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fab0 	bl	8000bf2 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	7afa      	ldrb	r2, [r7, #11]
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fae4 	bl	8000c68 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80006a0:	2300      	movs	r3, #0
 80006a2:	75fb      	strb	r3, [r7, #23]
 80006a4:	e00c      	b.n	80006c0 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6819      	ldr	r1, [r3, #0]
 80006aa:	7dfb      	ldrb	r3, [r7, #23]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	18d4      	adds	r4, r2, r3
 80006b0:	4608      	mov	r0, r1
 80006b2:	f000 faf9 	bl	8000ca8 <SX1278_hw_SPIReadByte>
 80006b6:	4603      	mov	r3, r0
 80006b8:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
 80006bc:	3301      	adds	r3, #1
 80006be:	75fb      	strb	r3, [r7, #23]
 80006c0:	7dfa      	ldrb	r2, [r7, #23]
 80006c2:	7abb      	ldrb	r3, [r7, #10]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d3ee      	bcc.n	80006a6 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2101      	movs	r1, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fa8f 	bl	8000bf2 <SX1278_hw_SetNSS>
 80006d4:	e000      	b.n	80006d8 <SX1278_SPIBurstRead+0x6c>
		return;
 80006d6:	bf00      	nop
	}
}
 80006d8:	371c      	adds	r7, #28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd90      	pop	{r4, r7, pc}

080006de <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	461a      	mov	r2, r3
 80006ea:	460b      	mov	r3, r1
 80006ec:	72fb      	strb	r3, [r7, #11]
 80006ee:	4613      	mov	r3, r2
 80006f0:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80006f2:	7abb      	ldrb	r3, [r7, #10]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d929      	bls.n	800074c <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fa77 	bl	8000bf2 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	7afb      	ldrb	r3, [r7, #11]
 800070a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800070e:	b2db      	uxtb	r3, r3
 8000710:	4619      	mov	r1, r3
 8000712:	4610      	mov	r0, r2
 8000714:	f000 faa8 	bl	8000c68 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	75fb      	strb	r3, [r7, #23]
 800071c:	e00b      	b.n	8000736 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	7dfb      	ldrb	r3, [r7, #23]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4619      	mov	r1, r3
 800072c:	f000 fa9c 	bl	8000c68 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	3301      	adds	r3, #1
 8000734:	75fb      	strb	r3, [r7, #23]
 8000736:	7dfa      	ldrb	r2, [r7, #23]
 8000738:	7abb      	ldrb	r3, [r7, #10]
 800073a:	429a      	cmp	r2, r3
 800073c:	d3ef      	bcc.n	800071e <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2101      	movs	r1, #1
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fa54 	bl	8000bf2 <SX1278_hw_SetNSS>
 800074a:	e000      	b.n	800074e <SX1278_SPIBurstWrite+0x70>
		return;
 800074c:	bf00      	nop
	}
}
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f90d 	bl	800097c <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000762:	200f      	movs	r0, #15
 8000764:	f000 fac6 	bl	8000cf4 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f917 	bl	800099c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	f04f 0100 	mov.w	r1, #0
 800077c:	04d9      	lsls	r1, r3, #19
 800077e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000782:	04d0      	lsls	r0, r2, #19
 8000784:	4a6f      	ldr	r2, [pc, #444]	@ (8000944 <SX1278_config+0x1f0>)
 8000786:	f04f 0300 	mov.w	r3, #0
 800078a:	f7ff fd91 	bl	80002b0 <__aeabi_uldivmod>
 800078e:	4602      	mov	r2, r0
 8000790:	460b      	mov	r3, r1
 8000792:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000796:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800079a:	f04f 0200 	mov.w	r2, #0
 800079e:	f04f 0300 	mov.w	r3, #0
 80007a2:	0c02      	lsrs	r2, r0, #16
 80007a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007a8:	0c0b      	lsrs	r3, r1, #16
 80007aa:	b2d3      	uxtb	r3, r2
 80007ac:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80007ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80007b2:	f04f 0200 	mov.w	r2, #0
 80007b6:	f04f 0300 	mov.w	r3, #0
 80007ba:	0a02      	lsrs	r2, r0, #8
 80007bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80007c0:	0a0b      	lsrs	r3, r1, #8
 80007c2:	b2d3      	uxtb	r3, r2
 80007c4:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80007c6:	7c3b      	ldrb	r3, [r7, #16]
 80007c8:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80007ca:	f107 020c 	add.w	r2, r7, #12
 80007ce:	2303      	movs	r3, #3
 80007d0:	2106      	movs	r1, #6
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ff83 	bl	80006de <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 80007d8:	2234      	movs	r2, #52	@ 0x34
 80007da:	2139      	movs	r1, #57	@ 0x39
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff1c 	bl	800061a <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7c1b      	ldrb	r3, [r3, #16]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b57      	ldr	r3, [pc, #348]	@ (8000948 <SX1278_config+0x1f4>)
 80007ea:	5c9b      	ldrb	r3, [r3, r2]
 80007ec:	461a      	mov	r2, r3
 80007ee:	2109      	movs	r1, #9
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff12 	bl	800061a <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80007f6:	220b      	movs	r2, #11
 80007f8:	210b      	movs	r1, #11
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff0d 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000800:	2223      	movs	r2, #35	@ 0x23
 8000802:	210c      	movs	r1, #12
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff08 	bl	800061a <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7c5b      	ldrb	r3, [r3, #17]
 800080e:	461a      	mov	r2, r3
 8000810:	4b4e      	ldr	r3, [pc, #312]	@ (800094c <SX1278_config+0x1f8>)
 8000812:	5c9b      	ldrb	r3, [r3, r2]
 8000814:	2b06      	cmp	r3, #6
 8000816:	d147      	bne.n	80008a8 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7c9b      	ldrb	r3, [r3, #18]
 800081c:	461a      	mov	r2, r3
 800081e:	4b4c      	ldr	r3, [pc, #304]	@ (8000950 <SX1278_config+0x1fc>)
 8000820:	5c9b      	ldrb	r3, [r3, r2]
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7cdb      	ldrb	r3, [r3, #19]
 800082a:	4619      	mov	r1, r3
 800082c:	4b49      	ldr	r3, [pc, #292]	@ (8000954 <SX1278_config+0x200>)
 800082e:	5c5b      	ldrb	r3, [r3, r1]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	4413      	add	r3, r2
 8000836:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000838:	3301      	adds	r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	461a      	mov	r2, r3
 800083e:	211d      	movs	r1, #29
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff feea 	bl	800061a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7c5b      	ldrb	r3, [r3, #17]
 800084a:	461a      	mov	r2, r3
 800084c:	4b3f      	ldr	r3, [pc, #252]	@ (800094c <SX1278_config+0x1f8>)
 800084e:	5c9b      	ldrb	r3, [r3, r2]
 8000850:	011b      	lsls	r3, r3, #4
 8000852:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7d1b      	ldrb	r3, [r3, #20]
 8000858:	4619      	mov	r1, r3
 800085a:	4b3f      	ldr	r3, [pc, #252]	@ (8000958 <SX1278_config+0x204>)
 800085c:	5c5b      	ldrb	r3, [r3, r1]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4413      	add	r3, r2
 8000864:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000866:	3303      	adds	r3, #3
 8000868:	b2db      	uxtb	r3, r3
 800086a:	461a      	mov	r2, r3
 800086c:	211e      	movs	r1, #30
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff fed3 	bl	800061a <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000874:	2131      	movs	r1, #49	@ 0x31
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff feb0 	bl	80005dc <SX1278_SPIRead>
 800087c:	4603      	mov	r3, r0
 800087e:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	f023 0307 	bic.w	r3, r3, #7
 8000886:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f043 0305 	orr.w	r3, r3, #5
 800088e:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	461a      	mov	r2, r3
 8000894:	2131      	movs	r1, #49	@ 0x31
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff febf 	bl	800061a <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800089c:	220c      	movs	r2, #12
 800089e:	2137      	movs	r1, #55	@ 0x37
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff feba 	bl	800061a <SX1278_SPIWrite>
 80008a6:	e029      	b.n	80008fc <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7c9b      	ldrb	r3, [r3, #18]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <SX1278_config+0x1fc>)
 80008b0:	5c9b      	ldrb	r3, [r3, r2]
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	7cdb      	ldrb	r3, [r3, #19]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <SX1278_config+0x200>)
 80008be:	5c5b      	ldrb	r3, [r3, r1]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80008c4:	4413      	add	r3, r2
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	211d      	movs	r1, #29
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff fea4 	bl	800061a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7c5b      	ldrb	r3, [r3, #17]
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <SX1278_config+0x1f8>)
 80008da:	5c9b      	ldrb	r3, [r3, r2]
 80008dc:	011b      	lsls	r3, r3, #4
 80008de:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7d1b      	ldrb	r3, [r3, #20]
 80008e4:	4619      	mov	r1, r3
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <SX1278_config+0x204>)
 80008e8:	5c5b      	ldrb	r3, [r3, r1]
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80008ee:	4413      	add	r3, r2
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	461a      	mov	r2, r3
 80008f4:	211e      	movs	r1, #30
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fe8f 	bl	800061a <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80008fc:	2204      	movs	r2, #4
 80008fe:	2126      	movs	r1, #38	@ 0x26
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fe8a 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000906:	2208      	movs	r2, #8
 8000908:	211f      	movs	r1, #31
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fe85 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000910:	2200      	movs	r2, #0
 8000912:	2120      	movs	r1, #32
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fe80 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800091a:	2208      	movs	r2, #8
 800091c:	2121      	movs	r1, #33	@ 0x21
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fe7b 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000924:	2201      	movs	r2, #1
 8000926:	2141      	movs	r1, #65	@ 0x41
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fe76 	bl	800061a <SX1278_SPIWrite>
	module->readBytes = 0;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 f810 	bl	800095c <SX1278_standby>
}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	01e84800 	.word	0x01e84800
 8000948:	08005698 	.word	0x08005698
 800094c:	080056a0 	.word	0x080056a0
 8000950:	080056a8 	.word	0x080056a8
 8000954:	080056b4 	.word	0x080056b4
 8000958:	080056b8 	.word	0x080056b8

0800095c <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000964:	2209      	movs	r2, #9
 8000966:	2101      	movs	r1, #1
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff fe56 	bl	800061a <SX1278_SPIWrite>
	module->status = STANDBY;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2201      	movs	r2, #1
 8000972:	759a      	strb	r2, [r3, #22]
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000984:	2208      	movs	r2, #8
 8000986:	2101      	movs	r1, #1
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff fe46 	bl	800061a <SX1278_SPIWrite>
	module->status = SLEEP;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	759a      	strb	r2, [r3, #22]
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80009a4:	2288      	movs	r2, #136	@ 0x88
 80009a6:	2101      	movs	r1, #1
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fe36 	bl	800061a <SX1278_SPIWrite>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80009be:	22ff      	movs	r2, #255	@ 0xff
 80009c0:	2112      	movs	r1, #18
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fe29 	bl	800061a <SX1278_SPIWrite>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	460b      	mov	r3, r1
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	7afa      	ldrb	r2, [r7, #11]
 80009e2:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff feb5 	bl	8000754 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80009ea:	2284      	movs	r2, #132	@ 0x84
 80009ec:	214d      	movs	r1, #77	@ 0x4d
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f7ff fe13 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80009f4:	22ff      	movs	r2, #255	@ 0xff
 80009f6:	2124      	movs	r1, #36	@ 0x24
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f7ff fe0e 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80009fe:	2201      	movs	r2, #1
 8000a00:	2140      	movs	r1, #64	@ 0x40
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f7ff fe09 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000a08:	223f      	movs	r2, #63	@ 0x3f
 8000a0a:	2111      	movs	r1, #17
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff fe04 	bl	800061a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff ffcf 	bl	80009b6 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000a18:	7afb      	ldrb	r3, [r7, #11]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	2122      	movs	r1, #34	@ 0x22
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f7ff fdfb 	bl	800061a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000a24:	210f      	movs	r1, #15
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f7ff fdd8 	bl	80005dc <SX1278_SPIRead>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000a30:	7dfb      	ldrb	r3, [r7, #23]
 8000a32:	461a      	mov	r2, r3
 8000a34:	210d      	movs	r1, #13
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f7ff fdef 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000a3c:	228d      	movs	r2, #141	@ 0x8d
 8000a3e:	2101      	movs	r1, #1
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f7ff fdea 	bl	800061a <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000a4e:	2118      	movs	r1, #24
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f7ff fdc3 	bl	80005dc <SX1278_SPIRead>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d104      	bne.n	8000a6a <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2203      	movs	r2, #3
 8000a64:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e013      	b.n	8000a92 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d109      	bne.n	8000a8a <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f8d0 	bl	8000c20 <SX1278_hw_Reset>
			SX1278_config(module);
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f7ff fe67 	bl	8000754 <SX1278_config>
			return 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e003      	b.n	8000a92 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f000 f932 	bl	8000cf4 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000a90:	e7dd      	b.n	8000a4e <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f92f 	bl	8000d0a <SX1278_hw_GetDIO0>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d030      	beq.n	8000b14 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3317      	adds	r3, #23
 8000ab6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f003 fe79 	bl	80047b4 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fd89 	bl	80005dc <SX1278_SPIRead>
 8000aca:	4603      	mov	r3, r0
 8000acc:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	210d      	movs	r1, #13
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fda0 	bl	800061a <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7c5b      	ldrb	r3, [r3, #17]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d103      	bne.n	8000aea <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7d5b      	ldrb	r3, [r3, #21]
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	e005      	b.n	8000af6 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000aea:	2113      	movs	r1, #19
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fd75 	bl	80005dc <SX1278_SPIRead>
 8000af2:	4603      	mov	r3, r0
 8000af4:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f103 0217 	add.w	r2, r3, #23
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2100      	movs	r1, #0
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fdb3 	bl	800066c <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7bfa      	ldrb	r2, [r7, #15]
 8000b0a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ff51 	bl	80009b6 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <SX1278_init>:
	}
}

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f848 	bl	8000bc8 <SX1278_hw_init>
	module->frequency = frequency;
 8000b38:	68f9      	ldr	r1, [r7, #12]
 8000b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	7e3a      	ldrb	r2, [r7, #24]
 8000b46:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	7f3a      	ldrb	r2, [r7, #28]
 8000b4c:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b54:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000b5c:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000b64:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000b6c:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f7ff fdf0 	bl	8000754 <SX1278_config>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	4613      	mov	r3, r2
 8000b88:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b90:	79fa      	ldrb	r2, [r7, #7]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d003      	beq.n	8000b9e <SX1278_read+0x22>
		length = module->readBytes;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b9c:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3317      	adds	r3, #23
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	68b8      	ldr	r0, [r7, #8]
 8000ba8:	f003 fe7f 	bl	80048aa <memcpy>
	rxBuf[length] = '\0';
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f000 f80d 	bl	8000bf2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6858      	ldr	r0, [r3, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	f001 f8cb 	bl	8001d80 <HAL_GPIO_WritePin>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6958      	ldr	r0, [r3, #20]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	b299      	uxth	r1, r3
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	bf0c      	ite	eq
 8000c0c:	2301      	moveq	r3, #1
 8000c0e:	2300      	movne	r3, #0
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	f001 f8b4 	bl	8001d80 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000c28:	2101      	movs	r1, #1
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffe1 	bl	8000bf2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6858      	ldr	r0, [r3, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f001 f89f 	bl	8001d80 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000c42:	2001      	movs	r0, #1
 8000c44:	f000 f856 	bl	8000cf4 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6858      	ldr	r0, [r3, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	2201      	movs	r2, #1
 8000c54:	4619      	mov	r1, r3
 8000c56:	f001 f893 	bl	8001d80 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000c5a:	2064      	movs	r0, #100	@ 0x64
 8000c5c:	f000 f84a 	bl	8000cf4 <SX1278_hw_DelayMs>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c74:	2100      	movs	r1, #0
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffbb 	bl	8000bf2 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6998      	ldr	r0, [r3, #24]
 8000c80:	1cf9      	adds	r1, r7, #3
 8000c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c86:	2201      	movs	r2, #1
 8000c88:	f002 fb9b 	bl	80033c2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c8c:	bf00      	nop
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f002 ff8c 	bl	8003bb0 <HAL_SPI_GetState>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d1f7      	bne.n	8000c8e <SX1278_hw_SPICommand+0x26>
		;
}
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ff99 	bl	8000bf2 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6998      	ldr	r0, [r3, #24]
 8000cc4:	f107 020e 	add.w	r2, r7, #14
 8000cc8:	f107 010f 	add.w	r1, r7, #15
 8000ccc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f002 fcb9 	bl	800364a <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000cd8:	bf00      	nop
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f002 ff66 	bl	8003bb0 <HAL_SPI_GetState>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d1f7      	bne.n	8000cda <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 fd3b 	bl	8001778 <HAL_Delay>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4610      	mov	r0, r2
 8000d20:	f001 f816 	bl	8001d50 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	bf0c      	ite	eq
 8000d2a:	2301      	moveq	r3, #1
 8000d2c:	2300      	movne	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08a      	sub	sp, #40	@ 0x28
 8000d3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 0314 	add.w	r3, r7, #20
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	613b      	str	r3, [r7, #16]
 8000d52:	4b44      	ldr	r3, [pc, #272]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a43      	ldr	r2, [pc, #268]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b41      	ldr	r3, [pc, #260]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	613b      	str	r3, [r7, #16]
 8000d68:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	60fb      	str	r3, [r7, #12]
 8000d6e:	4b3d      	ldr	r3, [pc, #244]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a3c      	ldr	r2, [pc, #240]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b3a      	ldr	r3, [pc, #232]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	60bb      	str	r3, [r7, #8]
 8000d8a:	4b36      	ldr	r3, [pc, #216]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a35      	ldr	r2, [pc, #212]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b33      	ldr	r3, [pc, #204]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	60bb      	str	r3, [r7, #8]
 8000da0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	607b      	str	r3, [r7, #4]
 8000da6:	4b2f      	ldr	r3, [pc, #188]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a2e      	ldr	r2, [pc, #184]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b2c      	ldr	r3, [pc, #176]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	607b      	str	r3, [r7, #4]
 8000dbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	603b      	str	r3, [r7, #0]
 8000dc2:	4b28      	ldr	r3, [pc, #160]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a27      	ldr	r2, [pc, #156]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b25      	ldr	r3, [pc, #148]	@ (8000e64 <MX_GPIO_Init+0x12c>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	603b      	str	r3, [r7, #0]
 8000dd8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000dda:	2201      	movs	r2, #1
 8000ddc:	2110      	movs	r1, #16
 8000dde:	4822      	ldr	r0, [pc, #136]	@ (8000e68 <MX_GPIO_Init+0x130>)
 8000de0:	f000 ffce 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LED_GPIO_Port, LED_Pin, GPIO_PIN_RESET);
 8000de4:	2200      	movs	r2, #0
 8000de6:	2101      	movs	r1, #1
 8000de8:	4820      	ldr	r0, [pc, #128]	@ (8000e6c <MX_GPIO_Init+0x134>)
 8000dea:	f000 ffc9 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000dee:	2201      	movs	r2, #1
 8000df0:	2110      	movs	r1, #16
 8000df2:	481e      	ldr	r0, [pc, #120]	@ (8000e6c <MX_GPIO_Init+0x134>)
 8000df4:	f000 ffc4 	bl	8001d80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000df8:	2310      	movs	r3, #16
 8000dfa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dfc:	2301      	movs	r3, #1
 8000dfe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e04:	2300      	movs	r3, #0
 8000e06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000e08:	f107 0314 	add.w	r3, r7, #20
 8000e0c:	4619      	mov	r1, r3
 8000e0e:	4816      	ldr	r0, [pc, #88]	@ (8000e68 <MX_GPIO_Init+0x130>)
 8000e10:	f000 fe0a 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pins : LED_Pin RESET_Pin */
  GPIO_InitStruct.Pin = LED_Pin|RESET_Pin;
 8000e14:	2311      	movs	r3, #17
 8000e16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e18:	2301      	movs	r3, #1
 8000e1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e20:	2300      	movs	r3, #0
 8000e22:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e24:	f107 0314 	add.w	r3, r7, #20
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4810      	ldr	r0, [pc, #64]	@ (8000e6c <MX_GPIO_Init+0x134>)
 8000e2c:	f000 fdfc 	bl	8001a28 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000e30:	2302      	movs	r3, #2
 8000e32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e34:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e38:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	4809      	ldr	r0, [pc, #36]	@ (8000e6c <MX_GPIO_Init+0x134>)
 8000e46:	f000 fdef 	bl	8001a28 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	2100      	movs	r1, #0
 8000e4e:	2007      	movs	r0, #7
 8000e50:	f000 fd91 	bl	8001976 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e54:	2007      	movs	r0, #7
 8000e56:	f000 fdaa 	bl	80019ae <HAL_NVIC_EnableIRQ>

}
 8000e5a:	bf00      	nop
 8000e5c:	3728      	adds	r7, #40	@ 0x28
 8000e5e:	46bd      	mov	sp, r7
 8000e60:	bd80      	pop	{r7, pc}
 8000e62:	bf00      	nop
 8000e64:	40023800 	.word	0x40023800
 8000e68:	40020000 	.word	0x40020000
 8000e6c:	40020400 	.word	0x40020400

08000e70 <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000e70:	b480      	push	{r7}
 8000e72:	b087      	sub	sp, #28
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	60f8      	str	r0, [r7, #12]
 8000e78:	60b9      	str	r1, [r7, #8]
 8000e7a:	607a      	str	r2, [r7, #4]
	for (int idx = 0; idx < len; idx++) {
 8000e7c:	2300      	movs	r3, #0
 8000e7e:	617b      	str	r3, [r7, #20]
 8000e80:	e00f      	b.n	8000ea2 <_write+0x32>
			while(!(USART3 -> SR & USART_SR_TXE));
 8000e82:	bf00      	nop
 8000e84:	4b0c      	ldr	r3, [pc, #48]	@ (8000eb8 <_write+0x48>)
 8000e86:	681b      	ldr	r3, [r3, #0]
 8000e88:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d0f9      	beq.n	8000e84 <_write+0x14>
			USART3->DR = (uint8_t)ptr[idx];
 8000e90:	697b      	ldr	r3, [r7, #20]
 8000e92:	68ba      	ldr	r2, [r7, #8]
 8000e94:	4413      	add	r3, r2
 8000e96:	781a      	ldrb	r2, [r3, #0]
 8000e98:	4b07      	ldr	r3, [pc, #28]	@ (8000eb8 <_write+0x48>)
 8000e9a:	605a      	str	r2, [r3, #4]
	for (int idx = 0; idx < len; idx++) {
 8000e9c:	697b      	ldr	r3, [r7, #20]
 8000e9e:	3301      	adds	r3, #1
 8000ea0:	617b      	str	r3, [r7, #20]
 8000ea2:	697a      	ldr	r2, [r7, #20]
 8000ea4:	687b      	ldr	r3, [r7, #4]
 8000ea6:	429a      	cmp	r2, r3
 8000ea8:	dbeb      	blt.n	8000e82 <_write+0x12>
	}
	return len;
 8000eaa:	687b      	ldr	r3, [r7, #4]
}
 8000eac:	4618      	mov	r0, r3
 8000eae:	371c      	adds	r7, #28
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr
 8000eb8:	40004800 	.word	0x40004800

08000ebc <get_timestamp_string>:

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

void get_timestamp_string(char *timestamp_str, uint32_t max_len)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b084      	sub	sp, #16
 8000ec0:	af02      	add	r7, sp, #8
 8000ec2:	6078      	str	r0, [r7, #4]
 8000ec4:	6039      	str	r1, [r7, #0]
  // Get current time and date from RTC
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	490e      	ldr	r1, [pc, #56]	@ (8000f04 <get_timestamp_string+0x48>)
 8000eca:	480f      	ldr	r0, [pc, #60]	@ (8000f08 <get_timestamp_string+0x4c>)
 8000ecc:	f002 f8a3 	bl	8003016 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // This is necessary after HAL_RTC_GetTime
 8000ed0:	2200      	movs	r2, #0
 8000ed2:	490e      	ldr	r1, [pc, #56]	@ (8000f0c <get_timestamp_string+0x50>)
 8000ed4:	480c      	ldr	r0, [pc, #48]	@ (8000f08 <get_timestamp_string+0x4c>)
 8000ed6:	f002 f8fc 	bl	80030d2 <HAL_RTC_GetDate>

  // Format the timestamp string as "YYYY-MM-DD HH:MM:SS"
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
           sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000eda:	4b0a      	ldr	r3, [pc, #40]	@ (8000f04 <get_timestamp_string+0x48>)
 8000edc:	781b      	ldrb	r3, [r3, #0]
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000ede:	4619      	mov	r1, r3
           sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000ee0:	4b08      	ldr	r3, [pc, #32]	@ (8000f04 <get_timestamp_string+0x48>)
 8000ee2:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000ee4:	461a      	mov	r2, r3
           sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000ee6:	4b07      	ldr	r3, [pc, #28]	@ (8000f04 <get_timestamp_string+0x48>)
 8000ee8:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000eea:	9301      	str	r3, [sp, #4]
 8000eec:	9200      	str	r2, [sp, #0]
 8000eee:	460b      	mov	r3, r1
 8000ef0:	4a07      	ldr	r2, [pc, #28]	@ (8000f10 <get_timestamp_string+0x54>)
 8000ef2:	6839      	ldr	r1, [r7, #0]
 8000ef4:	6878      	ldr	r0, [r7, #4]
 8000ef6:	f003 fb4f 	bl	8004598 <sniprintf>
}
 8000efa:	bf00      	nop
 8000efc:	3708      	adds	r7, #8
 8000efe:	46bd      	mov	sp, r7
 8000f00:	bd80      	pop	{r7, pc}
 8000f02:	bf00      	nop
 8000f04:	20000084 	.word	0x20000084
 8000f08:	200003d8 	.word	0x200003d8
 8000f0c:	20000098 	.word	0x20000098
 8000f10:	0800563c 	.word	0x0800563c
 8000f14:	00000000 	.word	0x00000000

08000f18 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f18:	b580      	push	{r7, lr}
 8000f1a:	b08c      	sub	sp, #48	@ 0x30
 8000f1c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f1e:	f000 fbb9 	bl	8001694 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f22:	f000 f88d 	bl	8001040 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f26:	f7ff ff07 	bl	8000d38 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f2a:	f000 faf7 	bl	800151c <MX_USART3_UART_Init>
  MX_SPI2_Init();
 8000f2e:	f000 f94d 	bl	80011cc <MX_SPI2_Init>
  MX_RTC_Init();
 8000f32:	f000 f8fb 	bl	800112c <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
    	//initialize LoRa module
    	SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000f36:	4b36      	ldr	r3, [pc, #216]	@ (8001010 <main+0xf8>)
 8000f38:	4a36      	ldr	r2, [pc, #216]	@ (8001014 <main+0xfc>)
 8000f3a:	60da      	str	r2, [r3, #12]
    	SX1278_hw.dio0.pin = DIO0_Pin;
 8000f3c:	4b34      	ldr	r3, [pc, #208]	@ (8001010 <main+0xf8>)
 8000f3e:	2202      	movs	r2, #2
 8000f40:	609a      	str	r2, [r3, #8]
    	SX1278_hw.nss.port = NSS_GPIO_Port;
 8000f42:	4b33      	ldr	r3, [pc, #204]	@ (8001010 <main+0xf8>)
 8000f44:	4a34      	ldr	r2, [pc, #208]	@ (8001018 <main+0x100>)
 8000f46:	615a      	str	r2, [r3, #20]
    	SX1278_hw.nss.pin = NSS_Pin;
 8000f48:	4b31      	ldr	r3, [pc, #196]	@ (8001010 <main+0xf8>)
 8000f4a:	2210      	movs	r2, #16
 8000f4c:	611a      	str	r2, [r3, #16]
    	SX1278_hw.reset.port = RESET_GPIO_Port;
 8000f4e:	4b30      	ldr	r3, [pc, #192]	@ (8001010 <main+0xf8>)
 8000f50:	4a30      	ldr	r2, [pc, #192]	@ (8001014 <main+0xfc>)
 8000f52:	605a      	str	r2, [r3, #4]
    	SX1278_hw.reset.pin = RESET_Pin;
 8000f54:	4b2e      	ldr	r3, [pc, #184]	@ (8001010 <main+0xf8>)
 8000f56:	2210      	movs	r2, #16
 8000f58:	601a      	str	r2, [r3, #0]
    	SX1278_hw.spi = &hspi2;
 8000f5a:	4b2d      	ldr	r3, [pc, #180]	@ (8001010 <main+0xf8>)
 8000f5c:	4a2f      	ldr	r2, [pc, #188]	@ (800101c <main+0x104>)
 8000f5e:	619a      	str	r2, [r3, #24]

    	SX1278.hw = &SX1278_hw;
 8000f60:	4b2f      	ldr	r3, [pc, #188]	@ (8001020 <main+0x108>)
 8000f62:	4a2b      	ldr	r2, [pc, #172]	@ (8001010 <main+0xf8>)
 8000f64:	601a      	str	r2, [r3, #0]

    	printf("Configuring LoRa module\r\n");
 8000f66:	482f      	ldr	r0, [pc, #188]	@ (8001024 <main+0x10c>)
 8000f68:	f003 fb0e 	bl	8004588 <puts>
    	SX1278_hw_Reset(SX1278.hw);
 8000f6c:	4b2c      	ldr	r3, [pc, #176]	@ (8001020 <main+0x108>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4618      	mov	r0, r3
 8000f72:	f7ff fe55 	bl	8000c20 <SX1278_hw_Reset>
    	SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_9,
 8000f76:	23fa      	movs	r3, #250	@ 0xfa
 8000f78:	9305      	str	r3, [sp, #20]
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	9304      	str	r3, [sp, #16]
 8000f7e:	2300      	movs	r3, #0
 8000f80:	9303      	str	r3, [sp, #12]
 8000f82:	2307      	movs	r3, #7
 8000f84:	9302      	str	r3, [sp, #8]
 8000f86:	2303      	movs	r3, #3
 8000f88:	9301      	str	r3, [sp, #4]
 8000f8a:	2301      	movs	r3, #1
 8000f8c:	9300      	str	r3, [sp, #0]
 8000f8e:	a31e      	add	r3, pc, #120	@ (adr r3, 8001008 <main+0xf0>)
 8000f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000f94:	4822      	ldr	r0, [pc, #136]	@ (8001020 <main+0x108>)
 8000f96:	f7ff fdc4 	bl	8000b22 <SX1278_init>
//  			printf("Transmission: %d\r\n", ret);
//			ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
//					message_length, 2000);
//
//			ret = SX1278_LoRaEntryRx(&SX1278, 18, 2000);
    	printf("Done configuring LoRaModule\r\n");
 8000f9a:	4823      	ldr	r0, [pc, #140]	@ (8001028 <main+0x110>)
 8000f9c:	f003 faf4 	bl	8004588 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  			ret = SX1278_LoRaRxPacket(&SX1278);
 8000fa0:	481f      	ldr	r0, [pc, #124]	@ (8001020 <main+0x108>)
 8000fa2:	f7ff fd7a 	bl	8000a9a <SX1278_LoRaRxPacket>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	461a      	mov	r2, r3
 8000faa:	4b20      	ldr	r3, [pc, #128]	@ (800102c <main+0x114>)
 8000fac:	601a      	str	r2, [r3, #0]
	  			char timestamp[24]; // Buffer for timestamp string

	  			if (ret > 0) {
 8000fae:	4b1f      	ldr	r3, [pc, #124]	@ (800102c <main+0x114>)
 8000fb0:	681b      	ldr	r3, [r3, #0]
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	ddf4      	ble.n	8000fa0 <main+0x88>
	  				SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8000fb6:	4b1d      	ldr	r3, [pc, #116]	@ (800102c <main+0x114>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	b2db      	uxtb	r3, r3
 8000fbc:	461a      	mov	r2, r3
 8000fbe:	491c      	ldr	r1, [pc, #112]	@ (8001030 <main+0x118>)
 8000fc0:	4817      	ldr	r0, [pc, #92]	@ (8001020 <main+0x108>)
 8000fc2:	f7ff fddb 	bl	8000b7c <SX1278_read>
	  				printf("%s\r\n", buffer);
 8000fc6:	491a      	ldr	r1, [pc, #104]	@ (8001030 <main+0x118>)
 8000fc8:	481a      	ldr	r0, [pc, #104]	@ (8001034 <main+0x11c>)
 8000fca:	f003 fa75 	bl	80044b8 <iprintf>
		  			counter++;
 8000fce:	4b1a      	ldr	r3, [pc, #104]	@ (8001038 <main+0x120>)
 8000fd0:	681b      	ldr	r3, [r3, #0]
 8000fd2:	3301      	adds	r3, #1
 8000fd4:	4a18      	ldr	r2, [pc, #96]	@ (8001038 <main+0x120>)
 8000fd6:	6013      	str	r3, [r2, #0]
	  				get_timestamp_string(timestamp, sizeof(timestamp));
 8000fd8:	463b      	mov	r3, r7
 8000fda:	2118      	movs	r1, #24
 8000fdc:	4618      	mov	r0, r3
 8000fde:	f7ff ff6d 	bl	8000ebc <get_timestamp_string>
	  				printf("%-8s \r\n", timestamp);
 8000fe2:	463b      	mov	r3, r7
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4815      	ldr	r0, [pc, #84]	@ (800103c <main+0x124>)
 8000fe8:	f003 fa66 	bl	80044b8 <iprintf>
	  				HAL_Delay(800);
 8000fec:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000ff0:	f000 fbc2 	bl	8001778 <HAL_Delay>
		  		  	ret = SX1278_LoRaEntryRx(&SX1278, 18, 2000);
 8000ff4:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 8000ff8:	2112      	movs	r1, #18
 8000ffa:	4809      	ldr	r0, [pc, #36]	@ (8001020 <main+0x108>)
 8000ffc:	f7ff fce8 	bl	80009d0 <SX1278_LoRaEntryRx>
 8001000:	4603      	mov	r3, r0
 8001002:	4a0a      	ldr	r2, [pc, #40]	@ (800102c <main+0x114>)
 8001004:	6013      	str	r3, [r2, #0]
  {
 8001006:	e7cb      	b.n	8000fa0 <main+0x88>
 8001008:	19cf0e40 	.word	0x19cf0e40
 800100c:	00000000 	.word	0x00000000
 8001010:	2000009c 	.word	0x2000009c
 8001014:	40020400 	.word	0x40020400
 8001018:	40020000 	.word	0x40020000
 800101c:	200003f8 	.word	0x200003f8
 8001020:	200000b8 	.word	0x200000b8
 8001024:	0800564c 	.word	0x0800564c
 8001028:	08005668 	.word	0x08005668
 800102c:	200001d0 	.word	0x200001d0
 8001030:	200001d4 	.word	0x200001d4
 8001034:	08005688 	.word	0x08005688
 8001038:	200003d4 	.word	0x200003d4
 800103c:	08005690 	.word	0x08005690

08001040 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b094      	sub	sp, #80	@ 0x50
 8001044:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001046:	f107 031c 	add.w	r3, r7, #28
 800104a:	2234      	movs	r2, #52	@ 0x34
 800104c:	2100      	movs	r1, #0
 800104e:	4618      	mov	r0, r3
 8001050:	f003 fbb0 	bl	80047b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001054:	f107 0308 	add.w	r3, r7, #8
 8001058:	2200      	movs	r2, #0
 800105a:	601a      	str	r2, [r3, #0]
 800105c:	605a      	str	r2, [r3, #4]
 800105e:	609a      	str	r2, [r3, #8]
 8001060:	60da      	str	r2, [r3, #12]
 8001062:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001064:	2300      	movs	r3, #0
 8001066:	607b      	str	r3, [r7, #4]
 8001068:	4b2b      	ldr	r3, [pc, #172]	@ (8001118 <SystemClock_Config+0xd8>)
 800106a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800106c:	4a2a      	ldr	r2, [pc, #168]	@ (8001118 <SystemClock_Config+0xd8>)
 800106e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001072:	6413      	str	r3, [r2, #64]	@ 0x40
 8001074:	4b28      	ldr	r3, [pc, #160]	@ (8001118 <SystemClock_Config+0xd8>)
 8001076:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001078:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800107c:	607b      	str	r3, [r7, #4]
 800107e:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001080:	2300      	movs	r3, #0
 8001082:	603b      	str	r3, [r7, #0]
 8001084:	4b25      	ldr	r3, [pc, #148]	@ (800111c <SystemClock_Config+0xdc>)
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a24      	ldr	r2, [pc, #144]	@ (800111c <SystemClock_Config+0xdc>)
 800108a:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800108e:	6013      	str	r3, [r2, #0]
 8001090:	4b22      	ldr	r3, [pc, #136]	@ (800111c <SystemClock_Config+0xdc>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001098:	603b      	str	r3, [r7, #0]
 800109a:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSI;
 800109c:	230a      	movs	r3, #10
 800109e:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80010a0:	2301      	movs	r3, #1
 80010a2:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010a4:	2301      	movs	r3, #1
 80010a6:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010a8:	2310      	movs	r3, #16
 80010aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80010ac:	2301      	movs	r3, #1
 80010ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010b0:	2302      	movs	r3, #2
 80010b2:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010b4:	2300      	movs	r3, #0
 80010b6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010b8:	2308      	movs	r3, #8
 80010ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010bc:	23a8      	movs	r3, #168	@ 0xa8
 80010be:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010c0:	2302      	movs	r3, #2
 80010c2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 80010c4:	2302      	movs	r3, #2
 80010c6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 80010c8:	2302      	movs	r3, #2
 80010ca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010cc:	f107 031c 	add.w	r3, r7, #28
 80010d0:	4618      	mov	r0, r3
 80010d2:	f001 fc81 	bl	80029d8 <HAL_RCC_OscConfig>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <SystemClock_Config+0xa0>
  {
    Error_Handler();
 80010dc:	f000 f820 	bl	8001120 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010e0:	230f      	movs	r3, #15
 80010e2:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80010e4:	2302      	movs	r3, #2
 80010e6:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80010e8:	2300      	movs	r3, #0
 80010ea:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80010ec:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80010f0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80010f2:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80010f6:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80010f8:	f107 0308 	add.w	r3, r7, #8
 80010fc:	2105      	movs	r1, #5
 80010fe:	4618      	mov	r0, r3
 8001100:	f000 fe7c 	bl	8001dfc <HAL_RCC_ClockConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0xce>
  {
    Error_Handler();
 800110a:	f000 f809 	bl	8001120 <Error_Handler>
  }
}
 800110e:	bf00      	nop
 8001110:	3750      	adds	r7, #80	@ 0x50
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	40023800 	.word	0x40023800
 800111c:	40007000 	.word	0x40007000

08001120 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001120:	b480      	push	{r7}
 8001122:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001124:	b672      	cpsid	i
}
 8001126:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001128:	bf00      	nop
 800112a:	e7fd      	b.n	8001128 <Error_Handler+0x8>

0800112c <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001130:	4b0f      	ldr	r3, [pc, #60]	@ (8001170 <MX_RTC_Init+0x44>)
 8001132:	4a10      	ldr	r2, [pc, #64]	@ (8001174 <MX_RTC_Init+0x48>)
 8001134:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8001136:	4b0e      	ldr	r3, [pc, #56]	@ (8001170 <MX_RTC_Init+0x44>)
 8001138:	2200      	movs	r2, #0
 800113a:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 800113c:	4b0c      	ldr	r3, [pc, #48]	@ (8001170 <MX_RTC_Init+0x44>)
 800113e:	227f      	movs	r2, #127	@ 0x7f
 8001140:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8001142:	4b0b      	ldr	r3, [pc, #44]	@ (8001170 <MX_RTC_Init+0x44>)
 8001144:	22ff      	movs	r2, #255	@ 0xff
 8001146:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8001148:	4b09      	ldr	r3, [pc, #36]	@ (8001170 <MX_RTC_Init+0x44>)
 800114a:	2200      	movs	r2, #0
 800114c:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 800114e:	4b08      	ldr	r3, [pc, #32]	@ (8001170 <MX_RTC_Init+0x44>)
 8001150:	2200      	movs	r2, #0
 8001152:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8001154:	4b06      	ldr	r3, [pc, #24]	@ (8001170 <MX_RTC_Init+0x44>)
 8001156:	2200      	movs	r2, #0
 8001158:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 800115a:	4805      	ldr	r0, [pc, #20]	@ (8001170 <MX_RTC_Init+0x44>)
 800115c:	f001 feda 	bl	8002f14 <HAL_RTC_Init>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001166:	f7ff ffdb 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 800116a:	bf00      	nop
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	200003d8 	.word	0x200003d8
 8001174:	40002800 	.word	0x40002800

08001178 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b09a      	sub	sp, #104	@ 0x68
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	225c      	movs	r2, #92	@ 0x5c
 8001186:	2100      	movs	r1, #0
 8001188:	4618      	mov	r0, r3
 800118a:	f003 fb13 	bl	80047b4 <memset>
  if(rtcHandle->Instance==RTC)
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	681b      	ldr	r3, [r3, #0]
 8001192:	4a0c      	ldr	r2, [pc, #48]	@ (80011c4 <HAL_RTC_MspInit+0x4c>)
 8001194:	4293      	cmp	r3, r2
 8001196:	d111      	bne.n	80011bc <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001198:	2320      	movs	r3, #32
 800119a:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 800119c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80011a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80011a2:	f107 030c 	add.w	r3, r7, #12
 80011a6:	4618      	mov	r0, r3
 80011a8:	f000 ff42 	bl	8002030 <HAL_RCCEx_PeriphCLKConfig>
 80011ac:	4603      	mov	r3, r0
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d001      	beq.n	80011b6 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 80011b2:	f7ff ffb5 	bl	8001120 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 80011b6:	4b04      	ldr	r3, [pc, #16]	@ (80011c8 <HAL_RTC_MspInit+0x50>)
 80011b8:	2201      	movs	r2, #1
 80011ba:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 80011bc:	bf00      	nop
 80011be:	3768      	adds	r7, #104	@ 0x68
 80011c0:	46bd      	mov	sp, r7
 80011c2:	bd80      	pop	{r7, pc}
 80011c4:	40002800 	.word	0x40002800
 80011c8:	42470e3c 	.word	0x42470e3c

080011cc <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80011cc:	b580      	push	{r7, lr}
 80011ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80011d0:	4b17      	ldr	r3, [pc, #92]	@ (8001230 <MX_SPI2_Init+0x64>)
 80011d2:	4a18      	ldr	r2, [pc, #96]	@ (8001234 <MX_SPI2_Init+0x68>)
 80011d4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80011d6:	4b16      	ldr	r3, [pc, #88]	@ (8001230 <MX_SPI2_Init+0x64>)
 80011d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80011dc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80011de:	4b14      	ldr	r3, [pc, #80]	@ (8001230 <MX_SPI2_Init+0x64>)
 80011e0:	2200      	movs	r2, #0
 80011e2:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80011e4:	4b12      	ldr	r3, [pc, #72]	@ (8001230 <MX_SPI2_Init+0x64>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ea:	4b11      	ldr	r3, [pc, #68]	@ (8001230 <MX_SPI2_Init+0x64>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011f0:	4b0f      	ldr	r3, [pc, #60]	@ (8001230 <MX_SPI2_Init+0x64>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80011f6:	4b0e      	ldr	r3, [pc, #56]	@ (8001230 <MX_SPI2_Init+0x64>)
 80011f8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80011fc:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011fe:	4b0c      	ldr	r3, [pc, #48]	@ (8001230 <MX_SPI2_Init+0x64>)
 8001200:	2200      	movs	r2, #0
 8001202:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001204:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <MX_SPI2_Init+0x64>)
 8001206:	2200      	movs	r2, #0
 8001208:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800120a:	4b09      	ldr	r3, [pc, #36]	@ (8001230 <MX_SPI2_Init+0x64>)
 800120c:	2200      	movs	r2, #0
 800120e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001210:	4b07      	ldr	r3, [pc, #28]	@ (8001230 <MX_SPI2_Init+0x64>)
 8001212:	2200      	movs	r2, #0
 8001214:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 8001216:	4b06      	ldr	r3, [pc, #24]	@ (8001230 <MX_SPI2_Init+0x64>)
 8001218:	220a      	movs	r2, #10
 800121a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800121c:	4804      	ldr	r0, [pc, #16]	@ (8001230 <MX_SPI2_Init+0x64>)
 800121e:	f002 f847 	bl	80032b0 <HAL_SPI_Init>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001228:	f7ff ff7a 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800122c:	bf00      	nop
 800122e:	bd80      	pop	{r7, pc}
 8001230:	200003f8 	.word	0x200003f8
 8001234:	40003800 	.word	0x40003800

08001238 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	b08a      	sub	sp, #40	@ 0x28
 800123c:	af00      	add	r7, sp, #0
 800123e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001240:	f107 0314 	add.w	r3, r7, #20
 8001244:	2200      	movs	r2, #0
 8001246:	601a      	str	r2, [r3, #0]
 8001248:	605a      	str	r2, [r3, #4]
 800124a:	609a      	str	r2, [r3, #8]
 800124c:	60da      	str	r2, [r3, #12]
 800124e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	4a2c      	ldr	r2, [pc, #176]	@ (8001308 <HAL_SPI_MspInit+0xd0>)
 8001256:	4293      	cmp	r3, r2
 8001258:	d152      	bne.n	8001300 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800125a:	2300      	movs	r3, #0
 800125c:	613b      	str	r3, [r7, #16]
 800125e:	4b2b      	ldr	r3, [pc, #172]	@ (800130c <HAL_SPI_MspInit+0xd4>)
 8001260:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001262:	4a2a      	ldr	r2, [pc, #168]	@ (800130c <HAL_SPI_MspInit+0xd4>)
 8001264:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001268:	6413      	str	r3, [r2, #64]	@ 0x40
 800126a:	4b28      	ldr	r3, [pc, #160]	@ (800130c <HAL_SPI_MspInit+0xd4>)
 800126c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800126e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001272:	613b      	str	r3, [r7, #16]
 8001274:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001276:	2300      	movs	r3, #0
 8001278:	60fb      	str	r3, [r7, #12]
 800127a:	4b24      	ldr	r3, [pc, #144]	@ (800130c <HAL_SPI_MspInit+0xd4>)
 800127c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800127e:	4a23      	ldr	r2, [pc, #140]	@ (800130c <HAL_SPI_MspInit+0xd4>)
 8001280:	f043 0304 	orr.w	r3, r3, #4
 8001284:	6313      	str	r3, [r2, #48]	@ 0x30
 8001286:	4b21      	ldr	r3, [pc, #132]	@ (800130c <HAL_SPI_MspInit+0xd4>)
 8001288:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800128a:	f003 0304 	and.w	r3, r3, #4
 800128e:	60fb      	str	r3, [r7, #12]
 8001290:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001292:	2300      	movs	r3, #0
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	4b1d      	ldr	r3, [pc, #116]	@ (800130c <HAL_SPI_MspInit+0xd4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800129a:	4a1c      	ldr	r2, [pc, #112]	@ (800130c <HAL_SPI_MspInit+0xd4>)
 800129c:	f043 0302 	orr.w	r3, r3, #2
 80012a0:	6313      	str	r3, [r2, #48]	@ 0x30
 80012a2:	4b1a      	ldr	r3, [pc, #104]	@ (800130c <HAL_SPI_MspInit+0xd4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012a6:	f003 0302 	and.w	r3, r3, #2
 80012aa:	60bb      	str	r3, [r7, #8]
 80012ac:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80012ae:	2304      	movs	r3, #4
 80012b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012b6:	2300      	movs	r3, #0
 80012b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012ba:	2303      	movs	r3, #3
 80012bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012be:	2305      	movs	r3, #5
 80012c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80012c2:	f107 0314 	add.w	r3, r7, #20
 80012c6:	4619      	mov	r1, r3
 80012c8:	4811      	ldr	r0, [pc, #68]	@ (8001310 <HAL_SPI_MspInit+0xd8>)
 80012ca:	f000 fbad 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 80012ce:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80012d2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012d4:	2302      	movs	r3, #2
 80012d6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012d8:	2300      	movs	r3, #0
 80012da:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012dc:	2303      	movs	r3, #3
 80012de:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80012e0:	2305      	movs	r3, #5
 80012e2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	480a      	ldr	r0, [pc, #40]	@ (8001314 <HAL_SPI_MspInit+0xdc>)
 80012ec:	f000 fb9c 	bl	8001a28 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 80012f0:	2200      	movs	r2, #0
 80012f2:	2100      	movs	r1, #0
 80012f4:	2024      	movs	r0, #36	@ 0x24
 80012f6:	f000 fb3e 	bl	8001976 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 80012fa:	2024      	movs	r0, #36	@ 0x24
 80012fc:	f000 fb57 	bl	80019ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001300:	bf00      	nop
 8001302:	3728      	adds	r7, #40	@ 0x28
 8001304:	46bd      	mov	sp, r7
 8001306:	bd80      	pop	{r7, pc}
 8001308:	40003800 	.word	0x40003800
 800130c:	40023800 	.word	0x40023800
 8001310:	40020800 	.word	0x40020800
 8001314:	40020400 	.word	0x40020400

08001318 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800131e:	2300      	movs	r3, #0
 8001320:	607b      	str	r3, [r7, #4]
 8001322:	4b10      	ldr	r3, [pc, #64]	@ (8001364 <HAL_MspInit+0x4c>)
 8001324:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001326:	4a0f      	ldr	r2, [pc, #60]	@ (8001364 <HAL_MspInit+0x4c>)
 8001328:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800132c:	6453      	str	r3, [r2, #68]	@ 0x44
 800132e:	4b0d      	ldr	r3, [pc, #52]	@ (8001364 <HAL_MspInit+0x4c>)
 8001330:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001332:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001336:	607b      	str	r3, [r7, #4]
 8001338:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800133a:	2300      	movs	r3, #0
 800133c:	603b      	str	r3, [r7, #0]
 800133e:	4b09      	ldr	r3, [pc, #36]	@ (8001364 <HAL_MspInit+0x4c>)
 8001340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001342:	4a08      	ldr	r2, [pc, #32]	@ (8001364 <HAL_MspInit+0x4c>)
 8001344:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001348:	6413      	str	r3, [r2, #64]	@ 0x40
 800134a:	4b06      	ldr	r3, [pc, #24]	@ (8001364 <HAL_MspInit+0x4c>)
 800134c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800134e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001352:	603b      	str	r3, [r7, #0]
 8001354:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001356:	bf00      	nop
 8001358:	370c      	adds	r7, #12
 800135a:	46bd      	mov	sp, r7
 800135c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001360:	4770      	bx	lr
 8001362:	bf00      	nop
 8001364:	40023800 	.word	0x40023800

08001368 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001368:	b480      	push	{r7}
 800136a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800136c:	bf00      	nop
 800136e:	e7fd      	b.n	800136c <NMI_Handler+0x4>

08001370 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001370:	b480      	push	{r7}
 8001372:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001374:	bf00      	nop
 8001376:	e7fd      	b.n	8001374 <HardFault_Handler+0x4>

08001378 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800137c:	bf00      	nop
 800137e:	e7fd      	b.n	800137c <MemManage_Handler+0x4>

08001380 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001380:	b480      	push	{r7}
 8001382:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001384:	bf00      	nop
 8001386:	e7fd      	b.n	8001384 <BusFault_Handler+0x4>

08001388 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001388:	b480      	push	{r7}
 800138a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800138c:	bf00      	nop
 800138e:	e7fd      	b.n	800138c <UsageFault_Handler+0x4>

08001390 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001390:	b480      	push	{r7}
 8001392:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001394:	bf00      	nop
 8001396:	46bd      	mov	sp, r7
 8001398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139c:	4770      	bx	lr

0800139e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800139e:	b480      	push	{r7}
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80013a2:	bf00      	nop
 80013a4:	46bd      	mov	sp, r7
 80013a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013aa:	4770      	bx	lr

080013ac <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80013ac:	b480      	push	{r7}
 80013ae:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80013b0:	bf00      	nop
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80013ba:	b580      	push	{r7, lr}
 80013bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80013be:	f000 f9bb 	bl	8001738 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80013c2:	bf00      	nop
 80013c4:	bd80      	pop	{r7, pc}

080013c6 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 80013c6:	b580      	push	{r7, lr}
 80013c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 80013ca:	2002      	movs	r0, #2
 80013cc:	f000 fcf2 	bl	8001db4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 80013d4:	b580      	push	{r7, lr}
 80013d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 80013d8:	4802      	ldr	r0, [pc, #8]	@ (80013e4 <SPI2_IRQHandler+0x10>)
 80013da:	f002 fadf 	bl	800399c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 80013de:	bf00      	nop
 80013e0:	bd80      	pop	{r7, pc}
 80013e2:	bf00      	nop
 80013e4:	200003f8 	.word	0x200003f8

080013e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b086      	sub	sp, #24
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	60f8      	str	r0, [r7, #12]
 80013f0:	60b9      	str	r1, [r7, #8]
 80013f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
 80013f8:	e00a      	b.n	8001410 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80013fa:	f3af 8000 	nop.w
 80013fe:	4601      	mov	r1, r0
 8001400:	68bb      	ldr	r3, [r7, #8]
 8001402:	1c5a      	adds	r2, r3, #1
 8001404:	60ba      	str	r2, [r7, #8]
 8001406:	b2ca      	uxtb	r2, r1
 8001408:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800140a:	697b      	ldr	r3, [r7, #20]
 800140c:	3301      	adds	r3, #1
 800140e:	617b      	str	r3, [r7, #20]
 8001410:	697a      	ldr	r2, [r7, #20]
 8001412:	687b      	ldr	r3, [r7, #4]
 8001414:	429a      	cmp	r2, r3
 8001416:	dbf0      	blt.n	80013fa <_read+0x12>
  }

  return len;
 8001418:	687b      	ldr	r3, [r7, #4]
}
 800141a:	4618      	mov	r0, r3
 800141c:	3718      	adds	r7, #24
 800141e:	46bd      	mov	sp, r7
 8001420:	bd80      	pop	{r7, pc}

08001422 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001422:	b480      	push	{r7}
 8001424:	b083      	sub	sp, #12
 8001426:	af00      	add	r7, sp, #0
 8001428:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800142a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800142e:	4618      	mov	r0, r3
 8001430:	370c      	adds	r7, #12
 8001432:	46bd      	mov	sp, r7
 8001434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001438:	4770      	bx	lr

0800143a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800143a:	b480      	push	{r7}
 800143c:	b083      	sub	sp, #12
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
 8001442:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001444:	683b      	ldr	r3, [r7, #0]
 8001446:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800144a:	605a      	str	r2, [r3, #4]
  return 0;
 800144c:	2300      	movs	r3, #0
}
 800144e:	4618      	mov	r0, r3
 8001450:	370c      	adds	r7, #12
 8001452:	46bd      	mov	sp, r7
 8001454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001458:	4770      	bx	lr

0800145a <_isatty>:

int _isatty(int file)
{
 800145a:	b480      	push	{r7}
 800145c:	b083      	sub	sp, #12
 800145e:	af00      	add	r7, sp, #0
 8001460:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001462:	2301      	movs	r3, #1
}
 8001464:	4618      	mov	r0, r3
 8001466:	370c      	adds	r7, #12
 8001468:	46bd      	mov	sp, r7
 800146a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800146e:	4770      	bx	lr

08001470 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001470:	b480      	push	{r7}
 8001472:	b085      	sub	sp, #20
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800147c:	2300      	movs	r3, #0
}
 800147e:	4618      	mov	r0, r3
 8001480:	3714      	adds	r7, #20
 8001482:	46bd      	mov	sp, r7
 8001484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001488:	4770      	bx	lr
	...

0800148c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b086      	sub	sp, #24
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001494:	4a14      	ldr	r2, [pc, #80]	@ (80014e8 <_sbrk+0x5c>)
 8001496:	4b15      	ldr	r3, [pc, #84]	@ (80014ec <_sbrk+0x60>)
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800149c:	697b      	ldr	r3, [r7, #20]
 800149e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80014a0:	4b13      	ldr	r3, [pc, #76]	@ (80014f0 <_sbrk+0x64>)
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	2b00      	cmp	r3, #0
 80014a6:	d102      	bne.n	80014ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80014a8:	4b11      	ldr	r3, [pc, #68]	@ (80014f0 <_sbrk+0x64>)
 80014aa:	4a12      	ldr	r2, [pc, #72]	@ (80014f4 <_sbrk+0x68>)
 80014ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80014ae:	4b10      	ldr	r3, [pc, #64]	@ (80014f0 <_sbrk+0x64>)
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	4413      	add	r3, r2
 80014b6:	693a      	ldr	r2, [r7, #16]
 80014b8:	429a      	cmp	r2, r3
 80014ba:	d207      	bcs.n	80014cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80014bc:	f003 f9c8 	bl	8004850 <__errno>
 80014c0:	4603      	mov	r3, r0
 80014c2:	220c      	movs	r2, #12
 80014c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80014c6:	f04f 33ff 	mov.w	r3, #4294967295
 80014ca:	e009      	b.n	80014e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80014cc:	4b08      	ldr	r3, [pc, #32]	@ (80014f0 <_sbrk+0x64>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80014d2:	4b07      	ldr	r3, [pc, #28]	@ (80014f0 <_sbrk+0x64>)
 80014d4:	681a      	ldr	r2, [r3, #0]
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	4413      	add	r3, r2
 80014da:	4a05      	ldr	r2, [pc, #20]	@ (80014f0 <_sbrk+0x64>)
 80014dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80014de:	68fb      	ldr	r3, [r7, #12]
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3718      	adds	r7, #24
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	20020000 	.word	0x20020000
 80014ec:	00000400 	.word	0x00000400
 80014f0:	20000450 	.word	0x20000450
 80014f4:	200005f0 	.word	0x200005f0

080014f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80014fc:	4b06      	ldr	r3, [pc, #24]	@ (8001518 <SystemInit+0x20>)
 80014fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001502:	4a05      	ldr	r2, [pc, #20]	@ (8001518 <SystemInit+0x20>)
 8001504:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001508:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800150c:	bf00      	nop
 800150e:	46bd      	mov	sp, r7
 8001510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001514:	4770      	bx	lr
 8001516:	bf00      	nop
 8001518:	e000ed00 	.word	0xe000ed00

0800151c <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001520:	4b11      	ldr	r3, [pc, #68]	@ (8001568 <MX_USART3_UART_Init+0x4c>)
 8001522:	4a12      	ldr	r2, [pc, #72]	@ (800156c <MX_USART3_UART_Init+0x50>)
 8001524:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001526:	4b10      	ldr	r3, [pc, #64]	@ (8001568 <MX_USART3_UART_Init+0x4c>)
 8001528:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 800152c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800152e:	4b0e      	ldr	r3, [pc, #56]	@ (8001568 <MX_USART3_UART_Init+0x4c>)
 8001530:	2200      	movs	r2, #0
 8001532:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001534:	4b0c      	ldr	r3, [pc, #48]	@ (8001568 <MX_USART3_UART_Init+0x4c>)
 8001536:	2200      	movs	r2, #0
 8001538:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800153a:	4b0b      	ldr	r3, [pc, #44]	@ (8001568 <MX_USART3_UART_Init+0x4c>)
 800153c:	2200      	movs	r2, #0
 800153e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001540:	4b09      	ldr	r3, [pc, #36]	@ (8001568 <MX_USART3_UART_Init+0x4c>)
 8001542:	220c      	movs	r2, #12
 8001544:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001546:	4b08      	ldr	r3, [pc, #32]	@ (8001568 <MX_USART3_UART_Init+0x4c>)
 8001548:	2200      	movs	r2, #0
 800154a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800154c:	4b06      	ldr	r3, [pc, #24]	@ (8001568 <MX_USART3_UART_Init+0x4c>)
 800154e:	2200      	movs	r2, #0
 8001550:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001552:	4805      	ldr	r0, [pc, #20]	@ (8001568 <MX_USART3_UART_Init+0x4c>)
 8001554:	f002 fc2a 	bl	8003dac <HAL_UART_Init>
 8001558:	4603      	mov	r3, r0
 800155a:	2b00      	cmp	r3, #0
 800155c:	d001      	beq.n	8001562 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800155e:	f7ff fddf 	bl	8001120 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001562:	bf00      	nop
 8001564:	bd80      	pop	{r7, pc}
 8001566:	bf00      	nop
 8001568:	20000454 	.word	0x20000454
 800156c:	40004800 	.word	0x40004800

08001570 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	b08a      	sub	sp, #40	@ 0x28
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001578:	f107 0314 	add.w	r3, r7, #20
 800157c:	2200      	movs	r2, #0
 800157e:	601a      	str	r2, [r3, #0]
 8001580:	605a      	str	r2, [r3, #4]
 8001582:	609a      	str	r2, [r3, #8]
 8001584:	60da      	str	r2, [r3, #12]
 8001586:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	4a28      	ldr	r2, [pc, #160]	@ (8001630 <HAL_UART_MspInit+0xc0>)
 800158e:	4293      	cmp	r3, r2
 8001590:	d14a      	bne.n	8001628 <HAL_UART_MspInit+0xb8>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001592:	2300      	movs	r3, #0
 8001594:	613b      	str	r3, [r7, #16]
 8001596:	4b27      	ldr	r3, [pc, #156]	@ (8001634 <HAL_UART_MspInit+0xc4>)
 8001598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800159a:	4a26      	ldr	r2, [pc, #152]	@ (8001634 <HAL_UART_MspInit+0xc4>)
 800159c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80015a0:	6413      	str	r3, [r2, #64]	@ 0x40
 80015a2:	4b24      	ldr	r3, [pc, #144]	@ (8001634 <HAL_UART_MspInit+0xc4>)
 80015a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015a6:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80015aa:	613b      	str	r3, [r7, #16]
 80015ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015ae:	2300      	movs	r3, #0
 80015b0:	60fb      	str	r3, [r7, #12]
 80015b2:	4b20      	ldr	r3, [pc, #128]	@ (8001634 <HAL_UART_MspInit+0xc4>)
 80015b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015b6:	4a1f      	ldr	r2, [pc, #124]	@ (8001634 <HAL_UART_MspInit+0xc4>)
 80015b8:	f043 0304 	orr.w	r3, r3, #4
 80015bc:	6313      	str	r3, [r2, #48]	@ 0x30
 80015be:	4b1d      	ldr	r3, [pc, #116]	@ (8001634 <HAL_UART_MspInit+0xc4>)
 80015c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015c2:	f003 0304 	and.w	r3, r3, #4
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015ca:	2300      	movs	r3, #0
 80015cc:	60bb      	str	r3, [r7, #8]
 80015ce:	4b19      	ldr	r3, [pc, #100]	@ (8001634 <HAL_UART_MspInit+0xc4>)
 80015d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015d2:	4a18      	ldr	r2, [pc, #96]	@ (8001634 <HAL_UART_MspInit+0xc4>)
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	6313      	str	r3, [r2, #48]	@ 0x30
 80015da:	4b16      	ldr	r3, [pc, #88]	@ (8001634 <HAL_UART_MspInit+0xc4>)
 80015dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80015de:	f003 0308 	and.w	r3, r3, #8
 80015e2:	60bb      	str	r3, [r7, #8]
 80015e4:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PC5     ------> USART3_RX
    PD8     ------> USART3_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80015e6:	2320      	movs	r3, #32
 80015e8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015ea:	2302      	movs	r3, #2
 80015ec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ee:	2300      	movs	r3, #0
 80015f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f2:	2303      	movs	r3, #3
 80015f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015f6:	2307      	movs	r3, #7
 80015f8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	480d      	ldr	r0, [pc, #52]	@ (8001638 <HAL_UART_MspInit+0xc8>)
 8001602:	f000 fa11 	bl	8001a28 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001606:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800160a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001614:	2303      	movs	r3, #3
 8001616:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001618:	2307      	movs	r3, #7
 800161a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800161c:	f107 0314 	add.w	r3, r7, #20
 8001620:	4619      	mov	r1, r3
 8001622:	4806      	ldr	r0, [pc, #24]	@ (800163c <HAL_UART_MspInit+0xcc>)
 8001624:	f000 fa00 	bl	8001a28 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001628:	bf00      	nop
 800162a:	3728      	adds	r7, #40	@ 0x28
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40004800 	.word	0x40004800
 8001634:	40023800 	.word	0x40023800
 8001638:	40020800 	.word	0x40020800
 800163c:	40020c00 	.word	0x40020c00

08001640 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001640:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001678 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001644:	f7ff ff58 	bl	80014f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001648:	480c      	ldr	r0, [pc, #48]	@ (800167c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800164a:	490d      	ldr	r1, [pc, #52]	@ (8001680 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800164c:	4a0d      	ldr	r2, [pc, #52]	@ (8001684 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800164e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001650:	e002      	b.n	8001658 <LoopCopyDataInit>

08001652 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001652:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001654:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001656:	3304      	adds	r3, #4

08001658 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001658:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800165a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800165c:	d3f9      	bcc.n	8001652 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800165e:	4a0a      	ldr	r2, [pc, #40]	@ (8001688 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001660:	4c0a      	ldr	r4, [pc, #40]	@ (800168c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001662:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001664:	e001      	b.n	800166a <LoopFillZerobss>

08001666 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001666:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001668:	3204      	adds	r2, #4

0800166a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800166a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800166c:	d3fb      	bcc.n	8001666 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800166e:	f003 f8f5 	bl	800485c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001672:	f7ff fc51 	bl	8000f18 <main>
  bx  lr    
 8001676:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001678:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800167c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001680:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001684:	08005718 	.word	0x08005718
  ldr r2, =_sbss
 8001688:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800168c:	200005ec 	.word	0x200005ec

08001690 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001690:	e7fe      	b.n	8001690 <ADC_IRQHandler>
	...

08001694 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001694:	b580      	push	{r7, lr}
 8001696:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001698:	4b0e      	ldr	r3, [pc, #56]	@ (80016d4 <HAL_Init+0x40>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	4a0d      	ldr	r2, [pc, #52]	@ (80016d4 <HAL_Init+0x40>)
 800169e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016a2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016a4:	4b0b      	ldr	r3, [pc, #44]	@ (80016d4 <HAL_Init+0x40>)
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	4a0a      	ldr	r2, [pc, #40]	@ (80016d4 <HAL_Init+0x40>)
 80016aa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80016ae:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80016b0:	4b08      	ldr	r3, [pc, #32]	@ (80016d4 <HAL_Init+0x40>)
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a07      	ldr	r2, [pc, #28]	@ (80016d4 <HAL_Init+0x40>)
 80016b6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016ba:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80016bc:	2003      	movs	r0, #3
 80016be:	f000 f94f 	bl	8001960 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80016c2:	200f      	movs	r0, #15
 80016c4:	f000 f808 	bl	80016d8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80016c8:	f7ff fe26 	bl	8001318 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80016cc:	2300      	movs	r3, #0
}
 80016ce:	4618      	mov	r0, r3
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	40023c00 	.word	0x40023c00

080016d8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80016d8:	b580      	push	{r7, lr}
 80016da:	b082      	sub	sp, #8
 80016dc:	af00      	add	r7, sp, #0
 80016de:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80016e0:	4b12      	ldr	r3, [pc, #72]	@ (800172c <HAL_InitTick+0x54>)
 80016e2:	681a      	ldr	r2, [r3, #0]
 80016e4:	4b12      	ldr	r3, [pc, #72]	@ (8001730 <HAL_InitTick+0x58>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	4619      	mov	r1, r3
 80016ea:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80016ee:	fbb3 f3f1 	udiv	r3, r3, r1
 80016f2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016f6:	4618      	mov	r0, r3
 80016f8:	f000 f967 	bl	80019ca <HAL_SYSTICK_Config>
 80016fc:	4603      	mov	r3, r0
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d001      	beq.n	8001706 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001702:	2301      	movs	r3, #1
 8001704:	e00e      	b.n	8001724 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	2b0f      	cmp	r3, #15
 800170a:	d80a      	bhi.n	8001722 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800170c:	2200      	movs	r2, #0
 800170e:	6879      	ldr	r1, [r7, #4]
 8001710:	f04f 30ff 	mov.w	r0, #4294967295
 8001714:	f000 f92f 	bl	8001976 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001718:	4a06      	ldr	r2, [pc, #24]	@ (8001734 <HAL_InitTick+0x5c>)
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800171e:	2300      	movs	r3, #0
 8001720:	e000      	b.n	8001724 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001722:	2301      	movs	r3, #1
}
 8001724:	4618      	mov	r0, r3
 8001726:	3708      	adds	r7, #8
 8001728:	46bd      	mov	sp, r7
 800172a:	bd80      	pop	{r7, pc}
 800172c:	20000000 	.word	0x20000000
 8001730:	20000008 	.word	0x20000008
 8001734:	20000004 	.word	0x20000004

08001738 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001738:	b480      	push	{r7}
 800173a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800173c:	4b06      	ldr	r3, [pc, #24]	@ (8001758 <HAL_IncTick+0x20>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	461a      	mov	r2, r3
 8001742:	4b06      	ldr	r3, [pc, #24]	@ (800175c <HAL_IncTick+0x24>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4413      	add	r3, r2
 8001748:	4a04      	ldr	r2, [pc, #16]	@ (800175c <HAL_IncTick+0x24>)
 800174a:	6013      	str	r3, [r2, #0]
}
 800174c:	bf00      	nop
 800174e:	46bd      	mov	sp, r7
 8001750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001754:	4770      	bx	lr
 8001756:	bf00      	nop
 8001758:	20000008 	.word	0x20000008
 800175c:	2000049c 	.word	0x2000049c

08001760 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001760:	b480      	push	{r7}
 8001762:	af00      	add	r7, sp, #0
  return uwTick;
 8001764:	4b03      	ldr	r3, [pc, #12]	@ (8001774 <HAL_GetTick+0x14>)
 8001766:	681b      	ldr	r3, [r3, #0]
}
 8001768:	4618      	mov	r0, r3
 800176a:	46bd      	mov	sp, r7
 800176c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001770:	4770      	bx	lr
 8001772:	bf00      	nop
 8001774:	2000049c 	.word	0x2000049c

08001778 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001778:	b580      	push	{r7, lr}
 800177a:	b084      	sub	sp, #16
 800177c:	af00      	add	r7, sp, #0
 800177e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001780:	f7ff ffee 	bl	8001760 <HAL_GetTick>
 8001784:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001790:	d005      	beq.n	800179e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001792:	4b0a      	ldr	r3, [pc, #40]	@ (80017bc <HAL_Delay+0x44>)
 8001794:	781b      	ldrb	r3, [r3, #0]
 8001796:	461a      	mov	r2, r3
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	4413      	add	r3, r2
 800179c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800179e:	bf00      	nop
 80017a0:	f7ff ffde 	bl	8001760 <HAL_GetTick>
 80017a4:	4602      	mov	r2, r0
 80017a6:	68bb      	ldr	r3, [r7, #8]
 80017a8:	1ad3      	subs	r3, r2, r3
 80017aa:	68fa      	ldr	r2, [r7, #12]
 80017ac:	429a      	cmp	r2, r3
 80017ae:	d8f7      	bhi.n	80017a0 <HAL_Delay+0x28>
  {
  }
}
 80017b0:	bf00      	nop
 80017b2:	bf00      	nop
 80017b4:	3710      	adds	r7, #16
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20000008 	.word	0x20000008

080017c0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80017c0:	b480      	push	{r7}
 80017c2:	b085      	sub	sp, #20
 80017c4:	af00      	add	r7, sp, #0
 80017c6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	f003 0307 	and.w	r3, r3, #7
 80017ce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80017d0:	4b0c      	ldr	r3, [pc, #48]	@ (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017d2:	68db      	ldr	r3, [r3, #12]
 80017d4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80017d6:	68ba      	ldr	r2, [r7, #8]
 80017d8:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80017dc:	4013      	ands	r3, r2
 80017de:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80017e0:	68fb      	ldr	r3, [r7, #12]
 80017e2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80017e4:	68bb      	ldr	r3, [r7, #8]
 80017e6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80017e8:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80017ec:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017f0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80017f2:	4a04      	ldr	r2, [pc, #16]	@ (8001804 <__NVIC_SetPriorityGrouping+0x44>)
 80017f4:	68bb      	ldr	r3, [r7, #8]
 80017f6:	60d3      	str	r3, [r2, #12]
}
 80017f8:	bf00      	nop
 80017fa:	3714      	adds	r7, #20
 80017fc:	46bd      	mov	sp, r7
 80017fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001802:	4770      	bx	lr
 8001804:	e000ed00 	.word	0xe000ed00

08001808 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800180c:	4b04      	ldr	r3, [pc, #16]	@ (8001820 <__NVIC_GetPriorityGrouping+0x18>)
 800180e:	68db      	ldr	r3, [r3, #12]
 8001810:	0a1b      	lsrs	r3, r3, #8
 8001812:	f003 0307 	and.w	r3, r3, #7
}
 8001816:	4618      	mov	r0, r3
 8001818:	46bd      	mov	sp, r7
 800181a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181e:	4770      	bx	lr
 8001820:	e000ed00 	.word	0xe000ed00

08001824 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001824:	b480      	push	{r7}
 8001826:	b083      	sub	sp, #12
 8001828:	af00      	add	r7, sp, #0
 800182a:	4603      	mov	r3, r0
 800182c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800182e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001832:	2b00      	cmp	r3, #0
 8001834:	db0b      	blt.n	800184e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001836:	79fb      	ldrb	r3, [r7, #7]
 8001838:	f003 021f 	and.w	r2, r3, #31
 800183c:	4907      	ldr	r1, [pc, #28]	@ (800185c <__NVIC_EnableIRQ+0x38>)
 800183e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001842:	095b      	lsrs	r3, r3, #5
 8001844:	2001      	movs	r0, #1
 8001846:	fa00 f202 	lsl.w	r2, r0, r2
 800184a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800184e:	bf00      	nop
 8001850:	370c      	adds	r7, #12
 8001852:	46bd      	mov	sp, r7
 8001854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001858:	4770      	bx	lr
 800185a:	bf00      	nop
 800185c:	e000e100 	.word	0xe000e100

08001860 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001860:	b480      	push	{r7}
 8001862:	b083      	sub	sp, #12
 8001864:	af00      	add	r7, sp, #0
 8001866:	4603      	mov	r3, r0
 8001868:	6039      	str	r1, [r7, #0]
 800186a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800186c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001870:	2b00      	cmp	r3, #0
 8001872:	db0a      	blt.n	800188a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001874:	683b      	ldr	r3, [r7, #0]
 8001876:	b2da      	uxtb	r2, r3
 8001878:	490c      	ldr	r1, [pc, #48]	@ (80018ac <__NVIC_SetPriority+0x4c>)
 800187a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800187e:	0112      	lsls	r2, r2, #4
 8001880:	b2d2      	uxtb	r2, r2
 8001882:	440b      	add	r3, r1
 8001884:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001888:	e00a      	b.n	80018a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800188a:	683b      	ldr	r3, [r7, #0]
 800188c:	b2da      	uxtb	r2, r3
 800188e:	4908      	ldr	r1, [pc, #32]	@ (80018b0 <__NVIC_SetPriority+0x50>)
 8001890:	79fb      	ldrb	r3, [r7, #7]
 8001892:	f003 030f 	and.w	r3, r3, #15
 8001896:	3b04      	subs	r3, #4
 8001898:	0112      	lsls	r2, r2, #4
 800189a:	b2d2      	uxtb	r2, r2
 800189c:	440b      	add	r3, r1
 800189e:	761a      	strb	r2, [r3, #24]
}
 80018a0:	bf00      	nop
 80018a2:	370c      	adds	r7, #12
 80018a4:	46bd      	mov	sp, r7
 80018a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018aa:	4770      	bx	lr
 80018ac:	e000e100 	.word	0xe000e100
 80018b0:	e000ed00 	.word	0xe000ed00

080018b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018b4:	b480      	push	{r7}
 80018b6:	b089      	sub	sp, #36	@ 0x24
 80018b8:	af00      	add	r7, sp, #0
 80018ba:	60f8      	str	r0, [r7, #12]
 80018bc:	60b9      	str	r1, [r7, #8]
 80018be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80018c0:	68fb      	ldr	r3, [r7, #12]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	f1c3 0307 	rsb	r3, r3, #7
 80018ce:	2b04      	cmp	r3, #4
 80018d0:	bf28      	it	cs
 80018d2:	2304      	movcs	r3, #4
 80018d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80018d6:	69fb      	ldr	r3, [r7, #28]
 80018d8:	3304      	adds	r3, #4
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d902      	bls.n	80018e4 <NVIC_EncodePriority+0x30>
 80018de:	69fb      	ldr	r3, [r7, #28]
 80018e0:	3b03      	subs	r3, #3
 80018e2:	e000      	b.n	80018e6 <NVIC_EncodePriority+0x32>
 80018e4:	2300      	movs	r3, #0
 80018e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018e8:	f04f 32ff 	mov.w	r2, #4294967295
 80018ec:	69bb      	ldr	r3, [r7, #24]
 80018ee:	fa02 f303 	lsl.w	r3, r2, r3
 80018f2:	43da      	mvns	r2, r3
 80018f4:	68bb      	ldr	r3, [r7, #8]
 80018f6:	401a      	ands	r2, r3
 80018f8:	697b      	ldr	r3, [r7, #20]
 80018fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018fc:	f04f 31ff 	mov.w	r1, #4294967295
 8001900:	697b      	ldr	r3, [r7, #20]
 8001902:	fa01 f303 	lsl.w	r3, r1, r3
 8001906:	43d9      	mvns	r1, r3
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800190c:	4313      	orrs	r3, r2
         );
}
 800190e:	4618      	mov	r0, r3
 8001910:	3724      	adds	r7, #36	@ 0x24
 8001912:	46bd      	mov	sp, r7
 8001914:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001918:	4770      	bx	lr
	...

0800191c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	3b01      	subs	r3, #1
 8001928:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800192c:	d301      	bcc.n	8001932 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800192e:	2301      	movs	r3, #1
 8001930:	e00f      	b.n	8001952 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001932:	4a0a      	ldr	r2, [pc, #40]	@ (800195c <SysTick_Config+0x40>)
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	3b01      	subs	r3, #1
 8001938:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800193a:	210f      	movs	r1, #15
 800193c:	f04f 30ff 	mov.w	r0, #4294967295
 8001940:	f7ff ff8e 	bl	8001860 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001944:	4b05      	ldr	r3, [pc, #20]	@ (800195c <SysTick_Config+0x40>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800194a:	4b04      	ldr	r3, [pc, #16]	@ (800195c <SysTick_Config+0x40>)
 800194c:	2207      	movs	r2, #7
 800194e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001950:	2300      	movs	r3, #0
}
 8001952:	4618      	mov	r0, r3
 8001954:	3708      	adds	r7, #8
 8001956:	46bd      	mov	sp, r7
 8001958:	bd80      	pop	{r7, pc}
 800195a:	bf00      	nop
 800195c:	e000e010 	.word	0xe000e010

08001960 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001960:	b580      	push	{r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f7ff ff29 	bl	80017c0 <__NVIC_SetPriorityGrouping>
}
 800196e:	bf00      	nop
 8001970:	3708      	adds	r7, #8
 8001972:	46bd      	mov	sp, r7
 8001974:	bd80      	pop	{r7, pc}

08001976 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001976:	b580      	push	{r7, lr}
 8001978:	b086      	sub	sp, #24
 800197a:	af00      	add	r7, sp, #0
 800197c:	4603      	mov	r3, r0
 800197e:	60b9      	str	r1, [r7, #8]
 8001980:	607a      	str	r2, [r7, #4]
 8001982:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001988:	f7ff ff3e 	bl	8001808 <__NVIC_GetPriorityGrouping>
 800198c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800198e:	687a      	ldr	r2, [r7, #4]
 8001990:	68b9      	ldr	r1, [r7, #8]
 8001992:	6978      	ldr	r0, [r7, #20]
 8001994:	f7ff ff8e 	bl	80018b4 <NVIC_EncodePriority>
 8001998:	4602      	mov	r2, r0
 800199a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800199e:	4611      	mov	r1, r2
 80019a0:	4618      	mov	r0, r3
 80019a2:	f7ff ff5d 	bl	8001860 <__NVIC_SetPriority>
}
 80019a6:	bf00      	nop
 80019a8:	3718      	adds	r7, #24
 80019aa:	46bd      	mov	sp, r7
 80019ac:	bd80      	pop	{r7, pc}

080019ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019ae:	b580      	push	{r7, lr}
 80019b0:	b082      	sub	sp, #8
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	4603      	mov	r3, r0
 80019b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80019b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019bc:	4618      	mov	r0, r3
 80019be:	f7ff ff31 	bl	8001824 <__NVIC_EnableIRQ>
}
 80019c2:	bf00      	nop
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}

080019ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80019ca:	b580      	push	{r7, lr}
 80019cc:	b082      	sub	sp, #8
 80019ce:	af00      	add	r7, sp, #0
 80019d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80019d2:	6878      	ldr	r0, [r7, #4]
 80019d4:	f7ff ffa2 	bl	800191c <SysTick_Config>
 80019d8:	4603      	mov	r3, r0
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3708      	adds	r7, #8
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}

080019e2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80019e2:	b480      	push	{r7}
 80019e4:	b083      	sub	sp, #12
 80019e6:	af00      	add	r7, sp, #0
 80019e8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80019f0:	b2db      	uxtb	r3, r3
 80019f2:	2b02      	cmp	r3, #2
 80019f4:	d004      	beq.n	8001a00 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	2280      	movs	r2, #128	@ 0x80
 80019fa:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e00c      	b.n	8001a1a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2205      	movs	r2, #5
 8001a04:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	681a      	ldr	r2, [r3, #0]
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f022 0201 	bic.w	r2, r2, #1
 8001a16:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001a18:	2300      	movs	r3, #0
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a28:	b480      	push	{r7}
 8001a2a:	b089      	sub	sp, #36	@ 0x24
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
 8001a30:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a36:	2300      	movs	r3, #0
 8001a38:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a3e:	2300      	movs	r3, #0
 8001a40:	61fb      	str	r3, [r7, #28]
 8001a42:	e165      	b.n	8001d10 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a44:	2201      	movs	r2, #1
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	fa02 f303 	lsl.w	r3, r2, r3
 8001a4c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	697a      	ldr	r2, [r7, #20]
 8001a54:	4013      	ands	r3, r2
 8001a56:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a58:	693a      	ldr	r2, [r7, #16]
 8001a5a:	697b      	ldr	r3, [r7, #20]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	f040 8154 	bne.w	8001d0a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	685b      	ldr	r3, [r3, #4]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	2b01      	cmp	r3, #1
 8001a6c:	d005      	beq.n	8001a7a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a6e:	683b      	ldr	r3, [r7, #0]
 8001a70:	685b      	ldr	r3, [r3, #4]
 8001a72:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d130      	bne.n	8001adc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	689b      	ldr	r3, [r3, #8]
 8001a7e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a80:	69fb      	ldr	r3, [r7, #28]
 8001a82:	005b      	lsls	r3, r3, #1
 8001a84:	2203      	movs	r2, #3
 8001a86:	fa02 f303 	lsl.w	r3, r2, r3
 8001a8a:	43db      	mvns	r3, r3
 8001a8c:	69ba      	ldr	r2, [r7, #24]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001a92:	683b      	ldr	r3, [r7, #0]
 8001a94:	68da      	ldr	r2, [r3, #12]
 8001a96:	69fb      	ldr	r3, [r7, #28]
 8001a98:	005b      	lsls	r3, r3, #1
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	69ba      	ldr	r2, [r7, #24]
 8001aa0:	4313      	orrs	r3, r2
 8001aa2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69ba      	ldr	r2, [r7, #24]
 8001aa8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	685b      	ldr	r3, [r3, #4]
 8001aae:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	69fb      	ldr	r3, [r7, #28]
 8001ab4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab8:	43db      	mvns	r3, r3
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	4013      	ands	r3, r2
 8001abe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ac0:	683b      	ldr	r3, [r7, #0]
 8001ac2:	685b      	ldr	r3, [r3, #4]
 8001ac4:	091b      	lsrs	r3, r3, #4
 8001ac6:	f003 0201 	and.w	r2, r3, #1
 8001aca:	69fb      	ldr	r3, [r7, #28]
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4313      	orrs	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	69ba      	ldr	r2, [r7, #24]
 8001ada:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	685b      	ldr	r3, [r3, #4]
 8001ae0:	f003 0303 	and.w	r3, r3, #3
 8001ae4:	2b03      	cmp	r3, #3
 8001ae6:	d017      	beq.n	8001b18 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	68db      	ldr	r3, [r3, #12]
 8001aec:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001aee:	69fb      	ldr	r3, [r7, #28]
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	2203      	movs	r2, #3
 8001af4:	fa02 f303 	lsl.w	r3, r2, r3
 8001af8:	43db      	mvns	r3, r3
 8001afa:	69ba      	ldr	r2, [r7, #24]
 8001afc:	4013      	ands	r3, r2
 8001afe:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	689a      	ldr	r2, [r3, #8]
 8001b04:	69fb      	ldr	r3, [r7, #28]
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	69ba      	ldr	r2, [r7, #24]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b12:	687b      	ldr	r3, [r7, #4]
 8001b14:	69ba      	ldr	r2, [r7, #24]
 8001b16:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	685b      	ldr	r3, [r3, #4]
 8001b1c:	f003 0303 	and.w	r3, r3, #3
 8001b20:	2b02      	cmp	r3, #2
 8001b22:	d123      	bne.n	8001b6c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b24:	69fb      	ldr	r3, [r7, #28]
 8001b26:	08da      	lsrs	r2, r3, #3
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	3208      	adds	r2, #8
 8001b2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b32:	69fb      	ldr	r3, [r7, #28]
 8001b34:	f003 0307 	and.w	r3, r3, #7
 8001b38:	009b      	lsls	r3, r3, #2
 8001b3a:	220f      	movs	r2, #15
 8001b3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b40:	43db      	mvns	r3, r3
 8001b42:	69ba      	ldr	r2, [r7, #24]
 8001b44:	4013      	ands	r3, r2
 8001b46:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	691a      	ldr	r2, [r3, #16]
 8001b4c:	69fb      	ldr	r3, [r7, #28]
 8001b4e:	f003 0307 	and.w	r3, r3, #7
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	fa02 f303 	lsl.w	r3, r2, r3
 8001b58:	69ba      	ldr	r2, [r7, #24]
 8001b5a:	4313      	orrs	r3, r2
 8001b5c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b5e:	69fb      	ldr	r3, [r7, #28]
 8001b60:	08da      	lsrs	r2, r3, #3
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	3208      	adds	r2, #8
 8001b66:	69b9      	ldr	r1, [r7, #24]
 8001b68:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	005b      	lsls	r3, r3, #1
 8001b76:	2203      	movs	r2, #3
 8001b78:	fa02 f303 	lsl.w	r3, r2, r3
 8001b7c:	43db      	mvns	r3, r3
 8001b7e:	69ba      	ldr	r2, [r7, #24]
 8001b80:	4013      	ands	r3, r2
 8001b82:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b84:	683b      	ldr	r3, [r7, #0]
 8001b86:	685b      	ldr	r3, [r3, #4]
 8001b88:	f003 0203 	and.w	r2, r3, #3
 8001b8c:	69fb      	ldr	r3, [r7, #28]
 8001b8e:	005b      	lsls	r3, r3, #1
 8001b90:	fa02 f303 	lsl.w	r3, r2, r3
 8001b94:	69ba      	ldr	r2, [r7, #24]
 8001b96:	4313      	orrs	r3, r2
 8001b98:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69ba      	ldr	r2, [r7, #24]
 8001b9e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001ba0:	683b      	ldr	r3, [r7, #0]
 8001ba2:	685b      	ldr	r3, [r3, #4]
 8001ba4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	f000 80ae 	beq.w	8001d0a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bae:	2300      	movs	r3, #0
 8001bb0:	60fb      	str	r3, [r7, #12]
 8001bb2:	4b5d      	ldr	r3, [pc, #372]	@ (8001d28 <HAL_GPIO_Init+0x300>)
 8001bb4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bb6:	4a5c      	ldr	r2, [pc, #368]	@ (8001d28 <HAL_GPIO_Init+0x300>)
 8001bb8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bbc:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bbe:	4b5a      	ldr	r3, [pc, #360]	@ (8001d28 <HAL_GPIO_Init+0x300>)
 8001bc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bc2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bc6:	60fb      	str	r3, [r7, #12]
 8001bc8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bca:	4a58      	ldr	r2, [pc, #352]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001bcc:	69fb      	ldr	r3, [r7, #28]
 8001bce:	089b      	lsrs	r3, r3, #2
 8001bd0:	3302      	adds	r3, #2
 8001bd2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bd6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bd8:	69fb      	ldr	r3, [r7, #28]
 8001bda:	f003 0303 	and.w	r3, r3, #3
 8001bde:	009b      	lsls	r3, r3, #2
 8001be0:	220f      	movs	r2, #15
 8001be2:	fa02 f303 	lsl.w	r3, r2, r3
 8001be6:	43db      	mvns	r3, r3
 8001be8:	69ba      	ldr	r2, [r7, #24]
 8001bea:	4013      	ands	r3, r2
 8001bec:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	4a4f      	ldr	r2, [pc, #316]	@ (8001d30 <HAL_GPIO_Init+0x308>)
 8001bf2:	4293      	cmp	r3, r2
 8001bf4:	d025      	beq.n	8001c42 <HAL_GPIO_Init+0x21a>
 8001bf6:	687b      	ldr	r3, [r7, #4]
 8001bf8:	4a4e      	ldr	r2, [pc, #312]	@ (8001d34 <HAL_GPIO_Init+0x30c>)
 8001bfa:	4293      	cmp	r3, r2
 8001bfc:	d01f      	beq.n	8001c3e <HAL_GPIO_Init+0x216>
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	4a4d      	ldr	r2, [pc, #308]	@ (8001d38 <HAL_GPIO_Init+0x310>)
 8001c02:	4293      	cmp	r3, r2
 8001c04:	d019      	beq.n	8001c3a <HAL_GPIO_Init+0x212>
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	4a4c      	ldr	r2, [pc, #304]	@ (8001d3c <HAL_GPIO_Init+0x314>)
 8001c0a:	4293      	cmp	r3, r2
 8001c0c:	d013      	beq.n	8001c36 <HAL_GPIO_Init+0x20e>
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	4a4b      	ldr	r2, [pc, #300]	@ (8001d40 <HAL_GPIO_Init+0x318>)
 8001c12:	4293      	cmp	r3, r2
 8001c14:	d00d      	beq.n	8001c32 <HAL_GPIO_Init+0x20a>
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	4a4a      	ldr	r2, [pc, #296]	@ (8001d44 <HAL_GPIO_Init+0x31c>)
 8001c1a:	4293      	cmp	r3, r2
 8001c1c:	d007      	beq.n	8001c2e <HAL_GPIO_Init+0x206>
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	4a49      	ldr	r2, [pc, #292]	@ (8001d48 <HAL_GPIO_Init+0x320>)
 8001c22:	4293      	cmp	r3, r2
 8001c24:	d101      	bne.n	8001c2a <HAL_GPIO_Init+0x202>
 8001c26:	2306      	movs	r3, #6
 8001c28:	e00c      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c2a:	2307      	movs	r3, #7
 8001c2c:	e00a      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c2e:	2305      	movs	r3, #5
 8001c30:	e008      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c32:	2304      	movs	r3, #4
 8001c34:	e006      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c36:	2303      	movs	r3, #3
 8001c38:	e004      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c3a:	2302      	movs	r3, #2
 8001c3c:	e002      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <HAL_GPIO_Init+0x21c>
 8001c42:	2300      	movs	r3, #0
 8001c44:	69fa      	ldr	r2, [r7, #28]
 8001c46:	f002 0203 	and.w	r2, r2, #3
 8001c4a:	0092      	lsls	r2, r2, #2
 8001c4c:	4093      	lsls	r3, r2
 8001c4e:	69ba      	ldr	r2, [r7, #24]
 8001c50:	4313      	orrs	r3, r2
 8001c52:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c54:	4935      	ldr	r1, [pc, #212]	@ (8001d2c <HAL_GPIO_Init+0x304>)
 8001c56:	69fb      	ldr	r3, [r7, #28]
 8001c58:	089b      	lsrs	r3, r3, #2
 8001c5a:	3302      	adds	r3, #2
 8001c5c:	69ba      	ldr	r2, [r7, #24]
 8001c5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c62:	4b3a      	ldr	r3, [pc, #232]	@ (8001d4c <HAL_GPIO_Init+0x324>)
 8001c64:	689b      	ldr	r3, [r3, #8]
 8001c66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c68:	693b      	ldr	r3, [r7, #16]
 8001c6a:	43db      	mvns	r3, r3
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	4013      	ands	r3, r2
 8001c70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	685b      	ldr	r3, [r3, #4]
 8001c76:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c7e:	69ba      	ldr	r2, [r7, #24]
 8001c80:	693b      	ldr	r3, [r7, #16]
 8001c82:	4313      	orrs	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c86:	4a31      	ldr	r2, [pc, #196]	@ (8001d4c <HAL_GPIO_Init+0x324>)
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001c8c:	4b2f      	ldr	r3, [pc, #188]	@ (8001d4c <HAL_GPIO_Init+0x324>)
 8001c8e:	68db      	ldr	r3, [r3, #12]
 8001c90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c92:	693b      	ldr	r3, [r7, #16]
 8001c94:	43db      	mvns	r3, r3
 8001c96:	69ba      	ldr	r2, [r7, #24]
 8001c98:	4013      	ands	r3, r2
 8001c9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001c9c:	683b      	ldr	r3, [r7, #0]
 8001c9e:	685b      	ldr	r3, [r3, #4]
 8001ca0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ca4:	2b00      	cmp	r3, #0
 8001ca6:	d003      	beq.n	8001cb0 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001ca8:	69ba      	ldr	r2, [r7, #24]
 8001caa:	693b      	ldr	r3, [r7, #16]
 8001cac:	4313      	orrs	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cb0:	4a26      	ldr	r2, [pc, #152]	@ (8001d4c <HAL_GPIO_Init+0x324>)
 8001cb2:	69bb      	ldr	r3, [r7, #24]
 8001cb4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cb6:	4b25      	ldr	r3, [pc, #148]	@ (8001d4c <HAL_GPIO_Init+0x324>)
 8001cb8:	685b      	ldr	r3, [r3, #4]
 8001cba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	43db      	mvns	r3, r3
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	4013      	ands	r3, r2
 8001cc4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cc6:	683b      	ldr	r3, [r7, #0]
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d003      	beq.n	8001cda <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001cd2:	69ba      	ldr	r2, [r7, #24]
 8001cd4:	693b      	ldr	r3, [r7, #16]
 8001cd6:	4313      	orrs	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cda:	4a1c      	ldr	r2, [pc, #112]	@ (8001d4c <HAL_GPIO_Init+0x324>)
 8001cdc:	69bb      	ldr	r3, [r7, #24]
 8001cde:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001ce0:	4b1a      	ldr	r3, [pc, #104]	@ (8001d4c <HAL_GPIO_Init+0x324>)
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ce6:	693b      	ldr	r3, [r7, #16]
 8001ce8:	43db      	mvns	r3, r3
 8001cea:	69ba      	ldr	r2, [r7, #24]
 8001cec:	4013      	ands	r3, r2
 8001cee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	685b      	ldr	r3, [r3, #4]
 8001cf4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf8:	2b00      	cmp	r3, #0
 8001cfa:	d003      	beq.n	8001d04 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001cfc:	69ba      	ldr	r2, [r7, #24]
 8001cfe:	693b      	ldr	r3, [r7, #16]
 8001d00:	4313      	orrs	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d04:	4a11      	ldr	r2, [pc, #68]	@ (8001d4c <HAL_GPIO_Init+0x324>)
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	3301      	adds	r3, #1
 8001d0e:	61fb      	str	r3, [r7, #28]
 8001d10:	69fb      	ldr	r3, [r7, #28]
 8001d12:	2b0f      	cmp	r3, #15
 8001d14:	f67f ae96 	bls.w	8001a44 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3724      	adds	r7, #36	@ 0x24
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d24:	4770      	bx	lr
 8001d26:	bf00      	nop
 8001d28:	40023800 	.word	0x40023800
 8001d2c:	40013800 	.word	0x40013800
 8001d30:	40020000 	.word	0x40020000
 8001d34:	40020400 	.word	0x40020400
 8001d38:	40020800 	.word	0x40020800
 8001d3c:	40020c00 	.word	0x40020c00
 8001d40:	40021000 	.word	0x40021000
 8001d44:	40021400 	.word	0x40021400
 8001d48:	40021800 	.word	0x40021800
 8001d4c:	40013c00 	.word	0x40013c00

08001d50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b085      	sub	sp, #20
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	6078      	str	r0, [r7, #4]
 8001d58:	460b      	mov	r3, r1
 8001d5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	691a      	ldr	r2, [r3, #16]
 8001d60:	887b      	ldrh	r3, [r7, #2]
 8001d62:	4013      	ands	r3, r2
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d002      	beq.n	8001d6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	73fb      	strb	r3, [r7, #15]
 8001d6c:	e001      	b.n	8001d72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d6e:	2300      	movs	r3, #0
 8001d70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d74:	4618      	mov	r0, r3
 8001d76:	3714      	adds	r7, #20
 8001d78:	46bd      	mov	sp, r7
 8001d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d7e:	4770      	bx	lr

08001d80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d80:	b480      	push	{r7}
 8001d82:	b083      	sub	sp, #12
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	6078      	str	r0, [r7, #4]
 8001d88:	460b      	mov	r3, r1
 8001d8a:	807b      	strh	r3, [r7, #2]
 8001d8c:	4613      	mov	r3, r2
 8001d8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001d90:	787b      	ldrb	r3, [r7, #1]
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d003      	beq.n	8001d9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001d96:	887a      	ldrh	r2, [r7, #2]
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001d9c:	e003      	b.n	8001da6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001d9e:	887b      	ldrh	r3, [r7, #2]
 8001da0:	041a      	lsls	r2, r3, #16
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	619a      	str	r2, [r3, #24]
}
 8001da6:	bf00      	nop
 8001da8:	370c      	adds	r7, #12
 8001daa:	46bd      	mov	sp, r7
 8001dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001db0:	4770      	bx	lr
	...

08001db4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	4603      	mov	r3, r0
 8001dbc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dbe:	4b08      	ldr	r3, [pc, #32]	@ (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dc0:	695a      	ldr	r2, [r3, #20]
 8001dc2:	88fb      	ldrh	r3, [r7, #6]
 8001dc4:	4013      	ands	r3, r2
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d006      	beq.n	8001dd8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dca:	4a05      	ldr	r2, [pc, #20]	@ (8001de0 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dcc:	88fb      	ldrh	r3, [r7, #6]
 8001dce:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	4618      	mov	r0, r3
 8001dd4:	f000 f806 	bl	8001de4 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dd8:	bf00      	nop
 8001dda:	3708      	adds	r7, #8
 8001ddc:	46bd      	mov	sp, r7
 8001dde:	bd80      	pop	{r7, pc}
 8001de0:	40013c00 	.word	0x40013c00

08001de4 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001dee:	bf00      	nop
 8001df0:	370c      	adds	r7, #12
 8001df2:	46bd      	mov	sp, r7
 8001df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001df8:	4770      	bx	lr
	...

08001dfc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b084      	sub	sp, #16
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
 8001e04:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d101      	bne.n	8001e10 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e0cc      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e10:	4b68      	ldr	r3, [pc, #416]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 030f 	and.w	r3, r3, #15
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d90c      	bls.n	8001e38 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e1e:	4b65      	ldr	r3, [pc, #404]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e20:	683a      	ldr	r2, [r7, #0]
 8001e22:	b2d2      	uxtb	r2, r2
 8001e24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e26:	4b63      	ldr	r3, [pc, #396]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f003 030f 	and.w	r3, r3, #15
 8001e2e:	683a      	ldr	r2, [r7, #0]
 8001e30:	429a      	cmp	r2, r3
 8001e32:	d001      	beq.n	8001e38 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e0b8      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	f003 0302 	and.w	r3, r3, #2
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d020      	beq.n	8001e86 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f003 0304 	and.w	r3, r3, #4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d005      	beq.n	8001e5c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e50:	4b59      	ldr	r3, [pc, #356]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e52:	689b      	ldr	r3, [r3, #8]
 8001e54:	4a58      	ldr	r2, [pc, #352]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e5a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	681b      	ldr	r3, [r3, #0]
 8001e60:	f003 0308 	and.w	r3, r3, #8
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d005      	beq.n	8001e74 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e68:	4b53      	ldr	r3, [pc, #332]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	689b      	ldr	r3, [r3, #8]
 8001e6c:	4a52      	ldr	r2, [pc, #328]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e6e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e72:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e74:	4b50      	ldr	r3, [pc, #320]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e76:	689b      	ldr	r3, [r3, #8]
 8001e78:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	494d      	ldr	r1, [pc, #308]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	4313      	orrs	r3, r2
 8001e84:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f003 0301 	and.w	r3, r3, #1
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d044      	beq.n	8001f1c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	685b      	ldr	r3, [r3, #4]
 8001e96:	2b01      	cmp	r3, #1
 8001e98:	d107      	bne.n	8001eaa <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9a:	4b47      	ldr	r3, [pc, #284]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d119      	bne.n	8001eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	e07f      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	685b      	ldr	r3, [r3, #4]
 8001eae:	2b02      	cmp	r3, #2
 8001eb0:	d003      	beq.n	8001eba <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	d107      	bne.n	8001eca <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001eba:	4b3f      	ldr	r3, [pc, #252]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ebc:	681b      	ldr	r3, [r3, #0]
 8001ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ec2:	2b00      	cmp	r3, #0
 8001ec4:	d109      	bne.n	8001eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ec6:	2301      	movs	r3, #1
 8001ec8:	e06f      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eca:	4b3b      	ldr	r3, [pc, #236]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	f003 0302 	and.w	r3, r3, #2
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d101      	bne.n	8001eda <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ed6:	2301      	movs	r3, #1
 8001ed8:	e067      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eda:	4b37      	ldr	r3, [pc, #220]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001edc:	689b      	ldr	r3, [r3, #8]
 8001ede:	f023 0203 	bic.w	r2, r3, #3
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	685b      	ldr	r3, [r3, #4]
 8001ee6:	4934      	ldr	r1, [pc, #208]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001ee8:	4313      	orrs	r3, r2
 8001eea:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001eec:	f7ff fc38 	bl	8001760 <HAL_GetTick>
 8001ef0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001ef2:	e00a      	b.n	8001f0a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001ef4:	f7ff fc34 	bl	8001760 <HAL_GetTick>
 8001ef8:	4602      	mov	r2, r0
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	1ad3      	subs	r3, r2, r3
 8001efe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d901      	bls.n	8001f0a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f06:	2303      	movs	r3, #3
 8001f08:	e04f      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f0a:	4b2b      	ldr	r3, [pc, #172]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	f003 020c 	and.w	r2, r3, #12
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	685b      	ldr	r3, [r3, #4]
 8001f16:	009b      	lsls	r3, r3, #2
 8001f18:	429a      	cmp	r2, r3
 8001f1a:	d1eb      	bne.n	8001ef4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f1c:	4b25      	ldr	r3, [pc, #148]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	f003 030f 	and.w	r3, r3, #15
 8001f24:	683a      	ldr	r2, [r7, #0]
 8001f26:	429a      	cmp	r2, r3
 8001f28:	d20c      	bcs.n	8001f44 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f2a:	4b22      	ldr	r3, [pc, #136]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f2c:	683a      	ldr	r2, [r7, #0]
 8001f2e:	b2d2      	uxtb	r2, r2
 8001f30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f32:	4b20      	ldr	r3, [pc, #128]	@ (8001fb4 <HAL_RCC_ClockConfig+0x1b8>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 030f 	and.w	r3, r3, #15
 8001f3a:	683a      	ldr	r2, [r7, #0]
 8001f3c:	429a      	cmp	r2, r3
 8001f3e:	d001      	beq.n	8001f44 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f40:	2301      	movs	r3, #1
 8001f42:	e032      	b.n	8001faa <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	681b      	ldr	r3, [r3, #0]
 8001f48:	f003 0304 	and.w	r3, r3, #4
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d008      	beq.n	8001f62 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f50:	4b19      	ldr	r3, [pc, #100]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f52:	689b      	ldr	r3, [r3, #8]
 8001f54:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	68db      	ldr	r3, [r3, #12]
 8001f5c:	4916      	ldr	r1, [pc, #88]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f5e:	4313      	orrs	r3, r2
 8001f60:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	f003 0308 	and.w	r3, r3, #8
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d009      	beq.n	8001f82 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f6e:	4b12      	ldr	r3, [pc, #72]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f70:	689b      	ldr	r3, [r3, #8]
 8001f72:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	691b      	ldr	r3, [r3, #16]
 8001f7a:	00db      	lsls	r3, r3, #3
 8001f7c:	490e      	ldr	r1, [pc, #56]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f7e:	4313      	orrs	r3, r2
 8001f80:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f82:	f000 fb7f 	bl	8002684 <HAL_RCC_GetSysClockFreq>
 8001f86:	4602      	mov	r2, r0
 8001f88:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <HAL_RCC_ClockConfig+0x1bc>)
 8001f8a:	689b      	ldr	r3, [r3, #8]
 8001f8c:	091b      	lsrs	r3, r3, #4
 8001f8e:	f003 030f 	and.w	r3, r3, #15
 8001f92:	490a      	ldr	r1, [pc, #40]	@ (8001fbc <HAL_RCC_ClockConfig+0x1c0>)
 8001f94:	5ccb      	ldrb	r3, [r1, r3]
 8001f96:	fa22 f303 	lsr.w	r3, r2, r3
 8001f9a:	4a09      	ldr	r2, [pc, #36]	@ (8001fc0 <HAL_RCC_ClockConfig+0x1c4>)
 8001f9c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001f9e:	4b09      	ldr	r3, [pc, #36]	@ (8001fc4 <HAL_RCC_ClockConfig+0x1c8>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f7ff fb98 	bl	80016d8 <HAL_InitTick>

  return HAL_OK;
 8001fa8:	2300      	movs	r3, #0
}
 8001faa:	4618      	mov	r0, r3
 8001fac:	3710      	adds	r7, #16
 8001fae:	46bd      	mov	sp, r7
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	40023c00 	.word	0x40023c00
 8001fb8:	40023800 	.word	0x40023800
 8001fbc:	080056bc 	.word	0x080056bc
 8001fc0:	20000000 	.word	0x20000000
 8001fc4:	20000004 	.word	0x20000004

08001fc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fc8:	b480      	push	{r7}
 8001fca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fcc:	4b03      	ldr	r3, [pc, #12]	@ (8001fdc <HAL_RCC_GetHCLKFreq+0x14>)
 8001fce:	681b      	ldr	r3, [r3, #0]
}
 8001fd0:	4618      	mov	r0, r3
 8001fd2:	46bd      	mov	sp, r7
 8001fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd8:	4770      	bx	lr
 8001fda:	bf00      	nop
 8001fdc:	20000000 	.word	0x20000000

08001fe0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001fe4:	f7ff fff0 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001fec:	689b      	ldr	r3, [r3, #8]
 8001fee:	0a9b      	lsrs	r3, r3, #10
 8001ff0:	f003 0307 	and.w	r3, r3, #7
 8001ff4:	4903      	ldr	r1, [pc, #12]	@ (8002004 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001ff6:	5ccb      	ldrb	r3, [r1, r3]
 8001ff8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001ffc:	4618      	mov	r0, r3
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40023800 	.word	0x40023800
 8002004:	080056cc 	.word	0x080056cc

08002008 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800200c:	f7ff ffdc 	bl	8001fc8 <HAL_RCC_GetHCLKFreq>
 8002010:	4602      	mov	r2, r0
 8002012:	4b05      	ldr	r3, [pc, #20]	@ (8002028 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002014:	689b      	ldr	r3, [r3, #8]
 8002016:	0b5b      	lsrs	r3, r3, #13
 8002018:	f003 0307 	and.w	r3, r3, #7
 800201c:	4903      	ldr	r1, [pc, #12]	@ (800202c <HAL_RCC_GetPCLK2Freq+0x24>)
 800201e:	5ccb      	ldrb	r3, [r1, r3]
 8002020:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002024:	4618      	mov	r0, r3
 8002026:	bd80      	pop	{r7, pc}
 8002028:	40023800 	.word	0x40023800
 800202c:	080056cc 	.word	0x080056cc

08002030 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	b08c      	sub	sp, #48	@ 0x30
 8002034:	af00      	add	r7, sp, #0
 8002036:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8002038:	2300      	movs	r3, #0
 800203a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 800203c:	2300      	movs	r3, #0
 800203e:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002040:	2300      	movs	r3, #0
 8002042:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002044:	2300      	movs	r3, #0
 8002046:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 8002048:	2300      	movs	r3, #0
 800204a:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	f003 0301 	and.w	r3, r3, #1
 8002064:	2b00      	cmp	r3, #0
 8002066:	d010      	beq.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 8002068:	4b6f      	ldr	r3, [pc, #444]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800206a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800206e:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002076:	496c      	ldr	r1, [pc, #432]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002078:	4313      	orrs	r3, r2
 800207a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002082:	2b00      	cmp	r3, #0
 8002084:	d101      	bne.n	800208a <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 8002086:	2301      	movs	r3, #1
 8002088:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f003 0302 	and.w	r3, r3, #2
 8002092:	2b00      	cmp	r3, #0
 8002094:	d010      	beq.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 8002096:	4b64      	ldr	r3, [pc, #400]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002098:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800209c:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020a4:	4960      	ldr	r1, [pc, #384]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020a6:	4313      	orrs	r3, r2
 80020a8:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b0:	2b00      	cmp	r3, #0
 80020b2:	d101      	bne.n	80020b8 <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80020b4:	2301      	movs	r3, #1
 80020b6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	f003 0304 	and.w	r3, r3, #4
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	d017      	beq.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020c4:	4b58      	ldr	r3, [pc, #352]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020c6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020ca:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020d2:	4955      	ldr	r1, [pc, #340]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020d4:	4313      	orrs	r3, r2
 80020d6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020de:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020e2:	d101      	bne.n	80020e8 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80020e4:	2301      	movs	r3, #1
 80020e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ec:	2b00      	cmp	r3, #0
 80020ee:	d101      	bne.n	80020f4 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80020f0:	2301      	movs	r3, #1
 80020f2:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	f003 0308 	and.w	r3, r3, #8
 80020fc:	2b00      	cmp	r3, #0
 80020fe:	d017      	beq.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002100:	4b49      	ldr	r3, [pc, #292]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002102:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002106:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800210e:	4946      	ldr	r1, [pc, #280]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002110:	4313      	orrs	r3, r2
 8002112:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800211a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800211e:	d101      	bne.n	8002124 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002120:	2301      	movs	r3, #1
 8002122:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002128:	2b00      	cmp	r3, #0
 800212a:	d101      	bne.n	8002130 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 800212c:	2301      	movs	r3, #1
 800212e:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f003 0320 	and.w	r3, r3, #32
 8002138:	2b00      	cmp	r3, #0
 800213a:	f000 808a 	beq.w	8002252 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800213e:	2300      	movs	r3, #0
 8002140:	60bb      	str	r3, [r7, #8]
 8002142:	4b39      	ldr	r3, [pc, #228]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002144:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002146:	4a38      	ldr	r2, [pc, #224]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002148:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800214c:	6413      	str	r3, [r2, #64]	@ 0x40
 800214e:	4b36      	ldr	r3, [pc, #216]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002150:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002152:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002156:	60bb      	str	r3, [r7, #8]
 8002158:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800215a:	4b34      	ldr	r3, [pc, #208]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 800215c:	681b      	ldr	r3, [r3, #0]
 800215e:	4a33      	ldr	r2, [pc, #204]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002160:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002164:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002166:	f7ff fafb 	bl	8001760 <HAL_GetTick>
 800216a:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 800216c:	e008      	b.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800216e:	f7ff faf7 	bl	8001760 <HAL_GetTick>
 8002172:	4602      	mov	r2, r0
 8002174:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002176:	1ad3      	subs	r3, r2, r3
 8002178:	2b02      	cmp	r3, #2
 800217a:	d901      	bls.n	8002180 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 800217c:	2303      	movs	r3, #3
 800217e:	e278      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002180:	4b2a      	ldr	r3, [pc, #168]	@ (800222c <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002188:	2b00      	cmp	r3, #0
 800218a:	d0f0      	beq.n	800216e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800218c:	4b26      	ldr	r3, [pc, #152]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800218e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002190:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002194:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002196:	6a3b      	ldr	r3, [r7, #32]
 8002198:	2b00      	cmp	r3, #0
 800219a:	d02f      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021a0:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021a4:	6a3a      	ldr	r2, [r7, #32]
 80021a6:	429a      	cmp	r2, r3
 80021a8:	d028      	beq.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021aa:	4b1f      	ldr	r3, [pc, #124]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ae:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021b2:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021b4:	4b1e      	ldr	r3, [pc, #120]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80021b6:	2201      	movs	r2, #1
 80021b8:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ba:	4b1d      	ldr	r3, [pc, #116]	@ (8002230 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80021c0:	4a19      	ldr	r2, [pc, #100]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021c2:	6a3b      	ldr	r3, [r7, #32]
 80021c4:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021c6:	4b18      	ldr	r3, [pc, #96]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021c8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	2b01      	cmp	r3, #1
 80021d0:	d114      	bne.n	80021fc <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80021d2:	f7ff fac5 	bl	8001760 <HAL_GetTick>
 80021d6:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021d8:	e00a      	b.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021da:	f7ff fac1 	bl	8001760 <HAL_GetTick>
 80021de:	4602      	mov	r2, r0
 80021e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021e2:	1ad3      	subs	r3, r2, r3
 80021e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021e8:	4293      	cmp	r3, r2
 80021ea:	d901      	bls.n	80021f0 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80021ec:	2303      	movs	r3, #3
 80021ee:	e240      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021f0:	4b0d      	ldr	r3, [pc, #52]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021f2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021f4:	f003 0302 	and.w	r3, r3, #2
 80021f8:	2b00      	cmp	r3, #0
 80021fa:	d0ee      	beq.n	80021da <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002200:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002204:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002208:	d114      	bne.n	8002234 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800220a:	4b07      	ldr	r3, [pc, #28]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800220c:	689b      	ldr	r3, [r3, #8]
 800220e:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002216:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800221a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800221e:	4902      	ldr	r1, [pc, #8]	@ (8002228 <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002220:	4313      	orrs	r3, r2
 8002222:	608b      	str	r3, [r1, #8]
 8002224:	e00c      	b.n	8002240 <HAL_RCCEx_PeriphCLKConfig+0x210>
 8002226:	bf00      	nop
 8002228:	40023800 	.word	0x40023800
 800222c:	40007000 	.word	0x40007000
 8002230:	42470e40 	.word	0x42470e40
 8002234:	4b4a      	ldr	r3, [pc, #296]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002236:	689b      	ldr	r3, [r3, #8]
 8002238:	4a49      	ldr	r2, [pc, #292]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800223a:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 800223e:	6093      	str	r3, [r2, #8]
 8002240:	4b47      	ldr	r3, [pc, #284]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002242:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002248:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800224c:	4944      	ldr	r1, [pc, #272]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800224e:	4313      	orrs	r3, r2
 8002250:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f003 0310 	and.w	r3, r3, #16
 800225a:	2b00      	cmp	r3, #0
 800225c:	d004      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002264:	4b3f      	ldr	r3, [pc, #252]	@ (8002364 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 8002266:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002274:	4b3a      	ldr	r3, [pc, #232]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002276:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800227a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002282:	4937      	ldr	r1, [pc, #220]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002296:	4b32      	ldr	r3, [pc, #200]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002298:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800229c:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022a4:	492e      	ldr	r1, [pc, #184]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d011      	beq.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022b8:	4b29      	ldr	r3, [pc, #164]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022ba:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022be:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022c6:	4926      	ldr	r1, [pc, #152]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022d2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022d6:	d101      	bne.n	80022dc <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80022d8:	2301      	movs	r3, #1
 80022da:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022e4:	2b00      	cmp	r3, #0
 80022e6:	d00a      	beq.n	80022fe <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80022e8:	4b1d      	ldr	r3, [pc, #116]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022ea:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022ee:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022f6:	491a      	ldr	r1, [pc, #104]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022f8:	4313      	orrs	r3, r2
 80022fa:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002306:	2b00      	cmp	r3, #0
 8002308:	d011      	beq.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800230a:	4b15      	ldr	r3, [pc, #84]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800230c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002310:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002318:	4911      	ldr	r1, [pc, #68]	@ (8002360 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800231a:	4313      	orrs	r3, r2
 800231c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002324:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002328:	d101      	bne.n	800232e <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800232a:	2301      	movs	r3, #1
 800232c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 800232e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002330:	2b01      	cmp	r3, #1
 8002332:	d005      	beq.n	8002340 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800233c:	f040 80ff 	bne.w	800253e <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002340:	4b09      	ldr	r3, [pc, #36]	@ (8002368 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002342:	2200      	movs	r2, #0
 8002344:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002346:	f7ff fa0b 	bl	8001760 <HAL_GetTick>
 800234a:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800234c:	e00e      	b.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800234e:	f7ff fa07 	bl	8001760 <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d907      	bls.n	800236c <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e188      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002360:	40023800 	.word	0x40023800
 8002364:	424711e0 	.word	0x424711e0
 8002368:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 800236c:	4b7e      	ldr	r3, [pc, #504]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002374:	2b00      	cmp	r3, #0
 8002376:	d1ea      	bne.n	800234e <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f003 0301 	and.w	r3, r3, #1
 8002380:	2b00      	cmp	r3, #0
 8002382:	d003      	beq.n	800238c <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002388:	2b00      	cmp	r3, #0
 800238a:	d009      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002394:	2b00      	cmp	r3, #0
 8002396:	d028      	beq.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800239c:	2b00      	cmp	r3, #0
 800239e:	d124      	bne.n	80023ea <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80023a0:	4b71      	ldr	r3, [pc, #452]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023a6:	0c1b      	lsrs	r3, r3, #16
 80023a8:	f003 0303 	and.w	r3, r3, #3
 80023ac:	3301      	adds	r3, #1
 80023ae:	005b      	lsls	r3, r3, #1
 80023b0:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023b2:	4b6d      	ldr	r3, [pc, #436]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023b4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023b8:	0e1b      	lsrs	r3, r3, #24
 80023ba:	f003 030f 	and.w	r3, r3, #15
 80023be:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	685a      	ldr	r2, [r3, #4]
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	689b      	ldr	r3, [r3, #8]
 80023c8:	019b      	lsls	r3, r3, #6
 80023ca:	431a      	orrs	r2, r3
 80023cc:	69fb      	ldr	r3, [r7, #28]
 80023ce:	085b      	lsrs	r3, r3, #1
 80023d0:	3b01      	subs	r3, #1
 80023d2:	041b      	lsls	r3, r3, #16
 80023d4:	431a      	orrs	r2, r3
 80023d6:	69bb      	ldr	r3, [r7, #24]
 80023d8:	061b      	lsls	r3, r3, #24
 80023da:	431a      	orrs	r2, r3
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	695b      	ldr	r3, [r3, #20]
 80023e0:	071b      	lsls	r3, r3, #28
 80023e2:	4961      	ldr	r1, [pc, #388]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023e4:	4313      	orrs	r3, r2
 80023e6:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	f003 0304 	and.w	r3, r3, #4
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d004      	beq.n	8002400 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80023fa:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80023fe:	d00a      	beq.n	8002416 <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8002408:	2b00      	cmp	r3, #0
 800240a:	d035      	beq.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800240c:	687b      	ldr	r3, [r7, #4]
 800240e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002410:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002414:	d130      	bne.n	8002478 <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002416:	4b54      	ldr	r3, [pc, #336]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002418:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800241c:	0c1b      	lsrs	r3, r3, #16
 800241e:	f003 0303 	and.w	r3, r3, #3
 8002422:	3301      	adds	r3, #1
 8002424:	005b      	lsls	r3, r3, #1
 8002426:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002428:	4b4f      	ldr	r3, [pc, #316]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800242a:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800242e:	0f1b      	lsrs	r3, r3, #28
 8002430:	f003 0307 	and.w	r3, r3, #7
 8002434:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	685a      	ldr	r2, [r3, #4]
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	689b      	ldr	r3, [r3, #8]
 800243e:	019b      	lsls	r3, r3, #6
 8002440:	431a      	orrs	r2, r3
 8002442:	69fb      	ldr	r3, [r7, #28]
 8002444:	085b      	lsrs	r3, r3, #1
 8002446:	3b01      	subs	r3, #1
 8002448:	041b      	lsls	r3, r3, #16
 800244a:	431a      	orrs	r2, r3
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	061b      	lsls	r3, r3, #24
 8002452:	431a      	orrs	r2, r3
 8002454:	697b      	ldr	r3, [r7, #20]
 8002456:	071b      	lsls	r3, r3, #28
 8002458:	4943      	ldr	r1, [pc, #268]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800245a:	4313      	orrs	r3, r2
 800245c:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002460:	4b41      	ldr	r3, [pc, #260]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002462:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002466:	f023 021f 	bic.w	r2, r3, #31
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800246e:	3b01      	subs	r3, #1
 8002470:	493d      	ldr	r1, [pc, #244]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002472:	4313      	orrs	r3, r2
 8002474:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002480:	2b00      	cmp	r3, #0
 8002482:	d029      	beq.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002488:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800248c:	d124      	bne.n	80024d8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800248e:	4b36      	ldr	r3, [pc, #216]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002490:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002494:	0c1b      	lsrs	r3, r3, #16
 8002496:	f003 0303 	and.w	r3, r3, #3
 800249a:	3301      	adds	r3, #1
 800249c:	005b      	lsls	r3, r3, #1
 800249e:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024a0:	4b31      	ldr	r3, [pc, #196]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a6:	0f1b      	lsrs	r3, r3, #28
 80024a8:	f003 0307 	and.w	r3, r3, #7
 80024ac:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	685a      	ldr	r2, [r3, #4]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	019b      	lsls	r3, r3, #6
 80024b8:	431a      	orrs	r2, r3
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	68db      	ldr	r3, [r3, #12]
 80024be:	085b      	lsrs	r3, r3, #1
 80024c0:	3b01      	subs	r3, #1
 80024c2:	041b      	lsls	r3, r3, #16
 80024c4:	431a      	orrs	r2, r3
 80024c6:	69bb      	ldr	r3, [r7, #24]
 80024c8:	061b      	lsls	r3, r3, #24
 80024ca:	431a      	orrs	r2, r3
 80024cc:	697b      	ldr	r3, [r7, #20]
 80024ce:	071b      	lsls	r3, r3, #28
 80024d0:	4925      	ldr	r1, [pc, #148]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024d2:	4313      	orrs	r3, r2
 80024d4:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d016      	beq.n	8002512 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	685a      	ldr	r2, [r3, #4]
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	019b      	lsls	r3, r3, #6
 80024ee:	431a      	orrs	r2, r3
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	68db      	ldr	r3, [r3, #12]
 80024f4:	085b      	lsrs	r3, r3, #1
 80024f6:	3b01      	subs	r3, #1
 80024f8:	041b      	lsls	r3, r3, #16
 80024fa:	431a      	orrs	r2, r3
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	691b      	ldr	r3, [r3, #16]
 8002500:	061b      	lsls	r3, r3, #24
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	695b      	ldr	r3, [r3, #20]
 8002508:	071b      	lsls	r3, r3, #28
 800250a:	4917      	ldr	r1, [pc, #92]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800250c:	4313      	orrs	r3, r2
 800250e:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002512:	4b16      	ldr	r3, [pc, #88]	@ (800256c <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002514:	2201      	movs	r2, #1
 8002516:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002518:	f7ff f922 	bl	8001760 <HAL_GetTick>
 800251c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800251e:	e008      	b.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002520:	f7ff f91e 	bl	8001760 <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	2b02      	cmp	r3, #2
 800252c:	d901      	bls.n	8002532 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800252e:	2303      	movs	r3, #3
 8002530:	e09f      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002532:	4b0d      	ldr	r3, [pc, #52]	@ (8002568 <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800253a:	2b00      	cmp	r3, #0
 800253c:	d0f0      	beq.n	8002520 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 800253e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002540:	2b01      	cmp	r3, #1
 8002542:	f040 8095 	bne.w	8002670 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8002546:	4b0a      	ldr	r3, [pc, #40]	@ (8002570 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 8002548:	2200      	movs	r2, #0
 800254a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800254c:	f7ff f908 	bl	8001760 <HAL_GetTick>
 8002550:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002552:	e00f      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002554:	f7ff f904 	bl	8001760 <HAL_GetTick>
 8002558:	4602      	mov	r2, r0
 800255a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255c:	1ad3      	subs	r3, r2, r3
 800255e:	2b02      	cmp	r3, #2
 8002560:	d908      	bls.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002562:	2303      	movs	r3, #3
 8002564:	e085      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002566:	bf00      	nop
 8002568:	40023800 	.word	0x40023800
 800256c:	42470068 	.word	0x42470068
 8002570:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002574:	4b41      	ldr	r3, [pc, #260]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800257c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002580:	d0e8      	beq.n	8002554 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f003 0304 	and.w	r3, r3, #4
 800258a:	2b00      	cmp	r3, #0
 800258c:	d003      	beq.n	8002596 <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002592:	2b00      	cmp	r3, #0
 8002594:	d009      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d02b      	beq.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d127      	bne.n	80025fa <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80025aa:	4b34      	ldr	r3, [pc, #208]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025b0:	0c1b      	lsrs	r3, r3, #16
 80025b2:	f003 0303 	and.w	r3, r3, #3
 80025b6:	3301      	adds	r3, #1
 80025b8:	005b      	lsls	r3, r3, #1
 80025ba:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	699a      	ldr	r2, [r3, #24]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	69db      	ldr	r3, [r3, #28]
 80025c4:	019b      	lsls	r3, r3, #6
 80025c6:	431a      	orrs	r2, r3
 80025c8:	693b      	ldr	r3, [r7, #16]
 80025ca:	085b      	lsrs	r3, r3, #1
 80025cc:	3b01      	subs	r3, #1
 80025ce:	041b      	lsls	r3, r3, #16
 80025d0:	431a      	orrs	r2, r3
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025d6:	061b      	lsls	r3, r3, #24
 80025d8:	4928      	ldr	r1, [pc, #160]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025da:	4313      	orrs	r3, r2
 80025dc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025e0:	4b26      	ldr	r3, [pc, #152]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025e6:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80025ee:	3b01      	subs	r3, #1
 80025f0:	021b      	lsls	r3, r3, #8
 80025f2:	4922      	ldr	r1, [pc, #136]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025f4:	4313      	orrs	r3, r2
 80025f6:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002602:	2b00      	cmp	r3, #0
 8002604:	d01d      	beq.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800260a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800260e:	d118      	bne.n	8002642 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002610:	4b1a      	ldr	r3, [pc, #104]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002612:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002616:	0e1b      	lsrs	r3, r3, #24
 8002618:	f003 030f 	and.w	r3, r3, #15
 800261c:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	699a      	ldr	r2, [r3, #24]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	69db      	ldr	r3, [r3, #28]
 8002626:	019b      	lsls	r3, r3, #6
 8002628:	431a      	orrs	r2, r3
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	6a1b      	ldr	r3, [r3, #32]
 800262e:	085b      	lsrs	r3, r3, #1
 8002630:	3b01      	subs	r3, #1
 8002632:	041b      	lsls	r3, r3, #16
 8002634:	431a      	orrs	r2, r3
 8002636:	68fb      	ldr	r3, [r7, #12]
 8002638:	061b      	lsls	r3, r3, #24
 800263a:	4910      	ldr	r1, [pc, #64]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800263c:	4313      	orrs	r3, r2
 800263e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002642:	4b0f      	ldr	r3, [pc, #60]	@ (8002680 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002644:	2201      	movs	r2, #1
 8002646:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002648:	f7ff f88a 	bl	8001760 <HAL_GetTick>
 800264c:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800264e:	e008      	b.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002650:	f7ff f886 	bl	8001760 <HAL_GetTick>
 8002654:	4602      	mov	r2, r0
 8002656:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002658:	1ad3      	subs	r3, r2, r3
 800265a:	2b02      	cmp	r3, #2
 800265c:	d901      	bls.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e007      	b.n	8002672 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002662:	4b06      	ldr	r3, [pc, #24]	@ (800267c <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800266a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800266e:	d1ef      	bne.n	8002650 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002670:	2300      	movs	r3, #0
}
 8002672:	4618      	mov	r0, r3
 8002674:	3730      	adds	r7, #48	@ 0x30
 8002676:	46bd      	mov	sp, r7
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	40023800 	.word	0x40023800
 8002680:	42470070 	.word	0x42470070

08002684 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002684:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002688:	b0a6      	sub	sp, #152	@ 0x98
 800268a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
  uint32_t pllvco = 0U;
 8002692:	2300      	movs	r3, #0
 8002694:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  uint32_t pllp = 0U;
 8002698:	2300      	movs	r3, #0
 800269a:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  uint32_t pllr = 0U;
 800269e:	2300      	movs	r3, #0
 80026a0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  uint32_t sysclockfreq = 0U;
 80026a4:	2300      	movs	r3, #0
 80026a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026aa:	4bc8      	ldr	r3, [pc, #800]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x348>)
 80026ac:	689b      	ldr	r3, [r3, #8]
 80026ae:	f003 030c 	and.w	r3, r3, #12
 80026b2:	2b0c      	cmp	r3, #12
 80026b4:	f200 817e 	bhi.w	80029b4 <HAL_RCC_GetSysClockFreq+0x330>
 80026b8:	a201      	add	r2, pc, #4	@ (adr r2, 80026c0 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026be:	bf00      	nop
 80026c0:	080026f5 	.word	0x080026f5
 80026c4:	080029b5 	.word	0x080029b5
 80026c8:	080029b5 	.word	0x080029b5
 80026cc:	080029b5 	.word	0x080029b5
 80026d0:	080026fd 	.word	0x080026fd
 80026d4:	080029b5 	.word	0x080029b5
 80026d8:	080029b5 	.word	0x080029b5
 80026dc:	080029b5 	.word	0x080029b5
 80026e0:	08002705 	.word	0x08002705
 80026e4:	080029b5 	.word	0x080029b5
 80026e8:	080029b5 	.word	0x080029b5
 80026ec:	080029b5 	.word	0x080029b5
 80026f0:	0800286f 	.word	0x0800286f
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80026f4:	4bb6      	ldr	r3, [pc, #728]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80026f6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80026fa:	e15f      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80026fc:	4bb5      	ldr	r3, [pc, #724]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80026fe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 8002702:	e15b      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002704:	4bb1      	ldr	r3, [pc, #708]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800270c:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002710:	4bae      	ldr	r3, [pc, #696]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002712:	685b      	ldr	r3, [r3, #4]
 8002714:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002718:	2b00      	cmp	r3, #0
 800271a:	d031      	beq.n	8002780 <HAL_RCC_GetSysClockFreq+0xfc>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800271c:	4bab      	ldr	r3, [pc, #684]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x348>)
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	099b      	lsrs	r3, r3, #6
 8002722:	2200      	movs	r2, #0
 8002724:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002726:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002728:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800272a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800272e:	663b      	str	r3, [r7, #96]	@ 0x60
 8002730:	2300      	movs	r3, #0
 8002732:	667b      	str	r3, [r7, #100]	@ 0x64
 8002734:	4ba7      	ldr	r3, [pc, #668]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x350>)
 8002736:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800273a:	462a      	mov	r2, r5
 800273c:	fb03 f202 	mul.w	r2, r3, r2
 8002740:	2300      	movs	r3, #0
 8002742:	4621      	mov	r1, r4
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	4aa2      	ldr	r2, [pc, #648]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800274c:	4621      	mov	r1, r4
 800274e:	fba1 1202 	umull	r1, r2, r1, r2
 8002752:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002754:	460a      	mov	r2, r1
 8002756:	67ba      	str	r2, [r7, #120]	@ 0x78
 8002758:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800275a:	4413      	add	r3, r2
 800275c:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800275e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002762:	2200      	movs	r2, #0
 8002764:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002766:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002768:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800276c:	e9d7 011e 	ldrd	r0, r1, [r7, #120]	@ 0x78
 8002770:	f7fd fd9e 	bl	80002b0 <__aeabi_uldivmod>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4613      	mov	r3, r2
 800277a:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800277e:	e064      	b.n	800284a <HAL_RCC_GetSysClockFreq+0x1c6>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002780:	4b92      	ldr	r3, [pc, #584]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	099b      	lsrs	r3, r3, #6
 8002786:	2200      	movs	r2, #0
 8002788:	653b      	str	r3, [r7, #80]	@ 0x50
 800278a:	657a      	str	r2, [r7, #84]	@ 0x54
 800278c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800278e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002792:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002794:	2300      	movs	r3, #0
 8002796:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002798:	e9d7 4512 	ldrd	r4, r5, [r7, #72]	@ 0x48
 800279c:	4622      	mov	r2, r4
 800279e:	462b      	mov	r3, r5
 80027a0:	f04f 0000 	mov.w	r0, #0
 80027a4:	f04f 0100 	mov.w	r1, #0
 80027a8:	0159      	lsls	r1, r3, #5
 80027aa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80027ae:	0150      	lsls	r0, r2, #5
 80027b0:	4602      	mov	r2, r0
 80027b2:	460b      	mov	r3, r1
 80027b4:	4621      	mov	r1, r4
 80027b6:	1a51      	subs	r1, r2, r1
 80027b8:	6139      	str	r1, [r7, #16]
 80027ba:	4629      	mov	r1, r5
 80027bc:	eb63 0301 	sbc.w	r3, r3, r1
 80027c0:	617b      	str	r3, [r7, #20]
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	f04f 0300 	mov.w	r3, #0
 80027ca:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80027ce:	4659      	mov	r1, fp
 80027d0:	018b      	lsls	r3, r1, #6
 80027d2:	4651      	mov	r1, sl
 80027d4:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80027d8:	4651      	mov	r1, sl
 80027da:	018a      	lsls	r2, r1, #6
 80027dc:	4651      	mov	r1, sl
 80027de:	ebb2 0801 	subs.w	r8, r2, r1
 80027e2:	4659      	mov	r1, fp
 80027e4:	eb63 0901 	sbc.w	r9, r3, r1
 80027e8:	f04f 0200 	mov.w	r2, #0
 80027ec:	f04f 0300 	mov.w	r3, #0
 80027f0:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80027f4:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80027f8:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80027fc:	4690      	mov	r8, r2
 80027fe:	4699      	mov	r9, r3
 8002800:	4623      	mov	r3, r4
 8002802:	eb18 0303 	adds.w	r3, r8, r3
 8002806:	60bb      	str	r3, [r7, #8]
 8002808:	462b      	mov	r3, r5
 800280a:	eb49 0303 	adc.w	r3, r9, r3
 800280e:	60fb      	str	r3, [r7, #12]
 8002810:	f04f 0200 	mov.w	r2, #0
 8002814:	f04f 0300 	mov.w	r3, #0
 8002818:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800281c:	4629      	mov	r1, r5
 800281e:	028b      	lsls	r3, r1, #10
 8002820:	4621      	mov	r1, r4
 8002822:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002826:	4621      	mov	r1, r4
 8002828:	028a      	lsls	r2, r1, #10
 800282a:	4610      	mov	r0, r2
 800282c:	4619      	mov	r1, r3
 800282e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002832:	2200      	movs	r2, #0
 8002834:	643b      	str	r3, [r7, #64]	@ 0x40
 8002836:	647a      	str	r2, [r7, #68]	@ 0x44
 8002838:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800283c:	f7fd fd38 	bl	80002b0 <__aeabi_uldivmod>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4613      	mov	r3, r2
 8002846:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800284a:	4b60      	ldr	r3, [pc, #384]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x348>)
 800284c:	685b      	ldr	r3, [r3, #4]
 800284e:	0c1b      	lsrs	r3, r3, #16
 8002850:	f003 0303 	and.w	r3, r3, #3
 8002854:	3301      	adds	r3, #1
 8002856:	005b      	lsls	r3, r3, #1
 8002858:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88

      sysclockfreq = pllvco / pllp;
 800285c:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002860:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002864:	fbb2 f3f3 	udiv	r3, r2, r3
 8002868:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 800286c:	e0a6      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800286e:	4b57      	ldr	r3, [pc, #348]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002870:	685b      	ldr	r3, [r3, #4]
 8002872:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002876:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800287a:	4b54      	ldr	r3, [pc, #336]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x348>)
 800287c:	685b      	ldr	r3, [r3, #4]
 800287e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d02a      	beq.n	80028dc <HAL_RCC_GetSysClockFreq+0x258>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002886:	4b51      	ldr	r3, [pc, #324]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	099b      	lsrs	r3, r3, #6
 800288c:	2200      	movs	r2, #0
 800288e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002890:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002892:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002894:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002898:	2100      	movs	r1, #0
 800289a:	4b4e      	ldr	r3, [pc, #312]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x350>)
 800289c:	fb03 f201 	mul.w	r2, r3, r1
 80028a0:	2300      	movs	r3, #0
 80028a2:	fb00 f303 	mul.w	r3, r0, r3
 80028a6:	4413      	add	r3, r2
 80028a8:	4a4a      	ldr	r2, [pc, #296]	@ (80029d4 <HAL_RCC_GetSysClockFreq+0x350>)
 80028aa:	fba0 1202 	umull	r1, r2, r0, r2
 80028ae:	677a      	str	r2, [r7, #116]	@ 0x74
 80028b0:	460a      	mov	r2, r1
 80028b2:	673a      	str	r2, [r7, #112]	@ 0x70
 80028b4:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 80028b6:	4413      	add	r3, r2
 80028b8:	677b      	str	r3, [r7, #116]	@ 0x74
 80028ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80028be:	2200      	movs	r2, #0
 80028c0:	633b      	str	r3, [r7, #48]	@ 0x30
 80028c2:	637a      	str	r2, [r7, #52]	@ 0x34
 80028c4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	@ 0x30
 80028c8:	e9d7 011c 	ldrd	r0, r1, [r7, #112]	@ 0x70
 80028cc:	f7fd fcf0 	bl	80002b0 <__aeabi_uldivmod>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4613      	mov	r3, r2
 80028d6:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80028da:	e05b      	b.n	8002994 <HAL_RCC_GetSysClockFreq+0x310>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80028dc:	4b3b      	ldr	r3, [pc, #236]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x348>)
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	099b      	lsrs	r3, r3, #6
 80028e2:	2200      	movs	r2, #0
 80028e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80028e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80028e8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80028ea:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80028ee:	623b      	str	r3, [r7, #32]
 80028f0:	2300      	movs	r3, #0
 80028f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80028f4:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80028f8:	4642      	mov	r2, r8
 80028fa:	464b      	mov	r3, r9
 80028fc:	f04f 0000 	mov.w	r0, #0
 8002900:	f04f 0100 	mov.w	r1, #0
 8002904:	0159      	lsls	r1, r3, #5
 8002906:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800290a:	0150      	lsls	r0, r2, #5
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4641      	mov	r1, r8
 8002912:	ebb2 0a01 	subs.w	sl, r2, r1
 8002916:	4649      	mov	r1, r9
 8002918:	eb63 0b01 	sbc.w	fp, r3, r1
 800291c:	f04f 0200 	mov.w	r2, #0
 8002920:	f04f 0300 	mov.w	r3, #0
 8002924:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002928:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800292c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002930:	ebb2 040a 	subs.w	r4, r2, sl
 8002934:	eb63 050b 	sbc.w	r5, r3, fp
 8002938:	f04f 0200 	mov.w	r2, #0
 800293c:	f04f 0300 	mov.w	r3, #0
 8002940:	00eb      	lsls	r3, r5, #3
 8002942:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002946:	00e2      	lsls	r2, r4, #3
 8002948:	4614      	mov	r4, r2
 800294a:	461d      	mov	r5, r3
 800294c:	4643      	mov	r3, r8
 800294e:	18e3      	adds	r3, r4, r3
 8002950:	603b      	str	r3, [r7, #0]
 8002952:	464b      	mov	r3, r9
 8002954:	eb45 0303 	adc.w	r3, r5, r3
 8002958:	607b      	str	r3, [r7, #4]
 800295a:	f04f 0200 	mov.w	r2, #0
 800295e:	f04f 0300 	mov.w	r3, #0
 8002962:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002966:	4629      	mov	r1, r5
 8002968:	028b      	lsls	r3, r1, #10
 800296a:	4621      	mov	r1, r4
 800296c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002970:	4621      	mov	r1, r4
 8002972:	028a      	lsls	r2, r1, #10
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800297c:	2200      	movs	r2, #0
 800297e:	61bb      	str	r3, [r7, #24]
 8002980:	61fa      	str	r2, [r7, #28]
 8002982:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002986:	f7fd fc93 	bl	80002b0 <__aeabi_uldivmod>
 800298a:	4602      	mov	r2, r0
 800298c:	460b      	mov	r3, r1
 800298e:	4613      	mov	r3, r2
 8002990:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002994:	4b0d      	ldr	r3, [pc, #52]	@ (80029cc <HAL_RCC_GetSysClockFreq+0x348>)
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	0f1b      	lsrs	r3, r3, #28
 800299a:	f003 0307 	and.w	r3, r3, #7
 800299e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84

      sysclockfreq = pllvco / pllr;
 80029a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80029a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80029aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80029ae:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80029b2:	e003      	b.n	80029bc <HAL_RCC_GetSysClockFreq+0x338>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80029b4:	4b06      	ldr	r3, [pc, #24]	@ (80029d0 <HAL_RCC_GetSysClockFreq+0x34c>)
 80029b6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
      break;
 80029ba:	bf00      	nop
    }
  }
  return sysclockfreq;
 80029bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
}
 80029c0:	4618      	mov	r0, r3
 80029c2:	3798      	adds	r7, #152	@ 0x98
 80029c4:	46bd      	mov	sp, r7
 80029c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ca:	bf00      	nop
 80029cc:	40023800 	.word	0x40023800
 80029d0:	00f42400 	.word	0x00f42400
 80029d4:	017d7840 	.word	0x017d7840

080029d8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80029d8:	b580      	push	{r7, lr}
 80029da:	b086      	sub	sp, #24
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2b00      	cmp	r3, #0
 80029e4:	d101      	bne.n	80029ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80029e6:	2301      	movs	r3, #1
 80029e8:	e28d      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f003 0301 	and.w	r3, r3, #1
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	f000 8083 	beq.w	8002afe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80029f8:	4b94      	ldr	r3, [pc, #592]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 80029fa:	689b      	ldr	r3, [r3, #8]
 80029fc:	f003 030c 	and.w	r3, r3, #12
 8002a00:	2b04      	cmp	r3, #4
 8002a02:	d019      	beq.n	8002a38 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a04:	4b91      	ldr	r3, [pc, #580]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f003 030c 	and.w	r3, r3, #12
        || \
 8002a0c:	2b08      	cmp	r3, #8
 8002a0e:	d106      	bne.n	8002a1e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a10:	4b8e      	ldr	r3, [pc, #568]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a12:	685b      	ldr	r3, [r3, #4]
 8002a14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a1c:	d00c      	beq.n	8002a38 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a1e:	4b8b      	ldr	r3, [pc, #556]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a20:	689b      	ldr	r3, [r3, #8]
 8002a22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002a26:	2b0c      	cmp	r3, #12
 8002a28:	d112      	bne.n	8002a50 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002a2a:	4b88      	ldr	r3, [pc, #544]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002a32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002a36:	d10b      	bne.n	8002a50 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a38:	4b84      	ldr	r3, [pc, #528]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d05b      	beq.n	8002afc <HAL_RCC_OscConfig+0x124>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	685b      	ldr	r3, [r3, #4]
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	d157      	bne.n	8002afc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	e25a      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002a58:	d106      	bne.n	8002a68 <HAL_RCC_OscConfig+0x90>
 8002a5a:	4b7c      	ldr	r3, [pc, #496]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	4a7b      	ldr	r2, [pc, #492]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a64:	6013      	str	r3, [r2, #0]
 8002a66:	e01d      	b.n	8002aa4 <HAL_RCC_OscConfig+0xcc>
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002a70:	d10c      	bne.n	8002a8c <HAL_RCC_OscConfig+0xb4>
 8002a72:	4b76      	ldr	r3, [pc, #472]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4a75      	ldr	r2, [pc, #468]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002a7c:	6013      	str	r3, [r2, #0]
 8002a7e:	4b73      	ldr	r3, [pc, #460]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a72      	ldr	r2, [pc, #456]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002a88:	6013      	str	r3, [r2, #0]
 8002a8a:	e00b      	b.n	8002aa4 <HAL_RCC_OscConfig+0xcc>
 8002a8c:	4b6f      	ldr	r3, [pc, #444]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	4a6e      	ldr	r2, [pc, #440]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002a96:	6013      	str	r3, [r2, #0]
 8002a98:	4b6c      	ldr	r3, [pc, #432]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4a6b      	ldr	r2, [pc, #428]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002a9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002aa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	685b      	ldr	r3, [r3, #4]
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d013      	beq.n	8002ad4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aac:	f7fe fe58 	bl	8001760 <HAL_GetTick>
 8002ab0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ab2:	e008      	b.n	8002ac6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ab4:	f7fe fe54 	bl	8001760 <HAL_GetTick>
 8002ab8:	4602      	mov	r2, r0
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	1ad3      	subs	r3, r2, r3
 8002abe:	2b64      	cmp	r3, #100	@ 0x64
 8002ac0:	d901      	bls.n	8002ac6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	e21f      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ac6:	4b61      	ldr	r3, [pc, #388]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d0f0      	beq.n	8002ab4 <HAL_RCC_OscConfig+0xdc>
 8002ad2:	e014      	b.n	8002afe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ad4:	f7fe fe44 	bl	8001760 <HAL_GetTick>
 8002ad8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ada:	e008      	b.n	8002aee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002adc:	f7fe fe40 	bl	8001760 <HAL_GetTick>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	693b      	ldr	r3, [r7, #16]
 8002ae4:	1ad3      	subs	r3, r2, r3
 8002ae6:	2b64      	cmp	r3, #100	@ 0x64
 8002ae8:	d901      	bls.n	8002aee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002aea:	2303      	movs	r3, #3
 8002aec:	e20b      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002aee:	4b57      	ldr	r3, [pc, #348]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	d1f0      	bne.n	8002adc <HAL_RCC_OscConfig+0x104>
 8002afa:	e000      	b.n	8002afe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002afc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	f003 0302 	and.w	r3, r3, #2
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d06f      	beq.n	8002bea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002b0a:	4b50      	ldr	r3, [pc, #320]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b0c:	689b      	ldr	r3, [r3, #8]
 8002b0e:	f003 030c 	and.w	r3, r3, #12
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d017      	beq.n	8002b46 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b16:	4b4d      	ldr	r3, [pc, #308]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b18:	689b      	ldr	r3, [r3, #8]
 8002b1a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b1e:	2b08      	cmp	r3, #8
 8002b20:	d105      	bne.n	8002b2e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b22:	4b4a      	ldr	r3, [pc, #296]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b24:	685b      	ldr	r3, [r3, #4]
 8002b26:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d00b      	beq.n	8002b46 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b2e:	4b47      	ldr	r3, [pc, #284]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b30:	689b      	ldr	r3, [r3, #8]
 8002b32:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002b36:	2b0c      	cmp	r3, #12
 8002b38:	d11c      	bne.n	8002b74 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002b3a:	4b44      	ldr	r3, [pc, #272]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b3c:	685b      	ldr	r3, [r3, #4]
 8002b3e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d116      	bne.n	8002b74 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b46:	4b41      	ldr	r3, [pc, #260]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	f003 0302 	and.w	r3, r3, #2
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d005      	beq.n	8002b5e <HAL_RCC_OscConfig+0x186>
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	68db      	ldr	r3, [r3, #12]
 8002b56:	2b01      	cmp	r3, #1
 8002b58:	d001      	beq.n	8002b5e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002b5a:	2301      	movs	r3, #1
 8002b5c:	e1d3      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	691b      	ldr	r3, [r3, #16]
 8002b6a:	00db      	lsls	r3, r3, #3
 8002b6c:	4937      	ldr	r1, [pc, #220]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b6e:	4313      	orrs	r3, r2
 8002b70:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002b72:	e03a      	b.n	8002bea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	68db      	ldr	r3, [r3, #12]
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d020      	beq.n	8002bbe <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002b7c:	4b34      	ldr	r3, [pc, #208]	@ (8002c50 <HAL_RCC_OscConfig+0x278>)
 8002b7e:	2201      	movs	r2, #1
 8002b80:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002b82:	f7fe fded 	bl	8001760 <HAL_GetTick>
 8002b86:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b88:	e008      	b.n	8002b9c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002b8a:	f7fe fde9 	bl	8001760 <HAL_GetTick>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	693b      	ldr	r3, [r7, #16]
 8002b92:	1ad3      	subs	r3, r2, r3
 8002b94:	2b02      	cmp	r3, #2
 8002b96:	d901      	bls.n	8002b9c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002b98:	2303      	movs	r3, #3
 8002b9a:	e1b4      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002b9c:	4b2b      	ldr	r3, [pc, #172]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0302 	and.w	r3, r3, #2
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	d0f0      	beq.n	8002b8a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ba8:	4b28      	ldr	r3, [pc, #160]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	691b      	ldr	r3, [r3, #16]
 8002bb4:	00db      	lsls	r3, r3, #3
 8002bb6:	4925      	ldr	r1, [pc, #148]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002bb8:	4313      	orrs	r3, r2
 8002bba:	600b      	str	r3, [r1, #0]
 8002bbc:	e015      	b.n	8002bea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002bbe:	4b24      	ldr	r3, [pc, #144]	@ (8002c50 <HAL_RCC_OscConfig+0x278>)
 8002bc0:	2200      	movs	r2, #0
 8002bc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bc4:	f7fe fdcc 	bl	8001760 <HAL_GetTick>
 8002bc8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bca:	e008      	b.n	8002bde <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002bcc:	f7fe fdc8 	bl	8001760 <HAL_GetTick>
 8002bd0:	4602      	mov	r2, r0
 8002bd2:	693b      	ldr	r3, [r7, #16]
 8002bd4:	1ad3      	subs	r3, r2, r3
 8002bd6:	2b02      	cmp	r3, #2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e193      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002bde:	4b1b      	ldr	r3, [pc, #108]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0302 	and.w	r3, r3, #2
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d1f0      	bne.n	8002bcc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	681b      	ldr	r3, [r3, #0]
 8002bee:	f003 0308 	and.w	r3, r3, #8
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d036      	beq.n	8002c64 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	695b      	ldr	r3, [r3, #20]
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d016      	beq.n	8002c2c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002bfe:	4b15      	ldr	r3, [pc, #84]	@ (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002c00:	2201      	movs	r2, #1
 8002c02:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c04:	f7fe fdac 	bl	8001760 <HAL_GetTick>
 8002c08:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c0a:	e008      	b.n	8002c1e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c0c:	f7fe fda8 	bl	8001760 <HAL_GetTick>
 8002c10:	4602      	mov	r2, r0
 8002c12:	693b      	ldr	r3, [r7, #16]
 8002c14:	1ad3      	subs	r3, r2, r3
 8002c16:	2b02      	cmp	r3, #2
 8002c18:	d901      	bls.n	8002c1e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002c1a:	2303      	movs	r3, #3
 8002c1c:	e173      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002c1e:	4b0b      	ldr	r3, [pc, #44]	@ (8002c4c <HAL_RCC_OscConfig+0x274>)
 8002c20:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d0f0      	beq.n	8002c0c <HAL_RCC_OscConfig+0x234>
 8002c2a:	e01b      	b.n	8002c64 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <HAL_RCC_OscConfig+0x27c>)
 8002c2e:	2200      	movs	r2, #0
 8002c30:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c32:	f7fe fd95 	bl	8001760 <HAL_GetTick>
 8002c36:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c38:	e00e      	b.n	8002c58 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002c3a:	f7fe fd91 	bl	8001760 <HAL_GetTick>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	1ad3      	subs	r3, r2, r3
 8002c44:	2b02      	cmp	r3, #2
 8002c46:	d907      	bls.n	8002c58 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002c48:	2303      	movs	r3, #3
 8002c4a:	e15c      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
 8002c4c:	40023800 	.word	0x40023800
 8002c50:	42470000 	.word	0x42470000
 8002c54:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002c58:	4b8a      	ldr	r3, [pc, #552]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002c5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002c5c:	f003 0302 	and.w	r3, r3, #2
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1ea      	bne.n	8002c3a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f003 0304 	and.w	r3, r3, #4
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	f000 8097 	beq.w	8002da0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002c72:	2300      	movs	r3, #0
 8002c74:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002c76:	4b83      	ldr	r3, [pc, #524]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c7a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c7e:	2b00      	cmp	r3, #0
 8002c80:	d10f      	bne.n	8002ca2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002c82:	2300      	movs	r3, #0
 8002c84:	60bb      	str	r3, [r7, #8]
 8002c86:	4b7f      	ldr	r3, [pc, #508]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002c88:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8a:	4a7e      	ldr	r2, [pc, #504]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002c8c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002c90:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c92:	4b7c      	ldr	r3, [pc, #496]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002c94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c96:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002c9a:	60bb      	str	r3, [r7, #8]
 8002c9c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ca2:	4b79      	ldr	r3, [pc, #484]	@ (8002e88 <HAL_RCC_OscConfig+0x4b0>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d118      	bne.n	8002ce0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002cae:	4b76      	ldr	r3, [pc, #472]	@ (8002e88 <HAL_RCC_OscConfig+0x4b0>)
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	4a75      	ldr	r2, [pc, #468]	@ (8002e88 <HAL_RCC_OscConfig+0x4b0>)
 8002cb4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cb8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002cba:	f7fe fd51 	bl	8001760 <HAL_GetTick>
 8002cbe:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cc0:	e008      	b.n	8002cd4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002cc2:	f7fe fd4d 	bl	8001760 <HAL_GetTick>
 8002cc6:	4602      	mov	r2, r0
 8002cc8:	693b      	ldr	r3, [r7, #16]
 8002cca:	1ad3      	subs	r3, r2, r3
 8002ccc:	2b02      	cmp	r3, #2
 8002cce:	d901      	bls.n	8002cd4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002cd0:	2303      	movs	r3, #3
 8002cd2:	e118      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002cd4:	4b6c      	ldr	r3, [pc, #432]	@ (8002e88 <HAL_RCC_OscConfig+0x4b0>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d0f0      	beq.n	8002cc2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	689b      	ldr	r3, [r3, #8]
 8002ce4:	2b01      	cmp	r3, #1
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x31e>
 8002ce8:	4b66      	ldr	r3, [pc, #408]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002cea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002cec:	4a65      	ldr	r2, [pc, #404]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002cee:	f043 0301 	orr.w	r3, r3, #1
 8002cf2:	6713      	str	r3, [r2, #112]	@ 0x70
 8002cf4:	e01c      	b.n	8002d30 <HAL_RCC_OscConfig+0x358>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	689b      	ldr	r3, [r3, #8]
 8002cfa:	2b05      	cmp	r3, #5
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x340>
 8002cfe:	4b61      	ldr	r3, [pc, #388]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d00:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d02:	4a60      	ldr	r2, [pc, #384]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d04:	f043 0304 	orr.w	r3, r3, #4
 8002d08:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d0a:	4b5e      	ldr	r3, [pc, #376]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d0e:	4a5d      	ldr	r2, [pc, #372]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d10:	f043 0301 	orr.w	r3, r3, #1
 8002d14:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d16:	e00b      	b.n	8002d30 <HAL_RCC_OscConfig+0x358>
 8002d18:	4b5a      	ldr	r3, [pc, #360]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d1a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d1c:	4a59      	ldr	r2, [pc, #356]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d1e:	f023 0301 	bic.w	r3, r3, #1
 8002d22:	6713      	str	r3, [r2, #112]	@ 0x70
 8002d24:	4b57      	ldr	r3, [pc, #348]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d26:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d28:	4a56      	ldr	r2, [pc, #344]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d2a:	f023 0304 	bic.w	r3, r3, #4
 8002d2e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	689b      	ldr	r3, [r3, #8]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d015      	beq.n	8002d64 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d38:	f7fe fd12 	bl	8001760 <HAL_GetTick>
 8002d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d40:	f7fe fd0e 	bl	8001760 <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	693b      	ldr	r3, [r7, #16]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e0d7      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002d56:	4b4b      	ldr	r3, [pc, #300]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d58:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d5a:	f003 0302 	and.w	r3, r3, #2
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d0ee      	beq.n	8002d40 <HAL_RCC_OscConfig+0x368>
 8002d62:	e014      	b.n	8002d8e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d64:	f7fe fcfc 	bl	8001760 <HAL_GetTick>
 8002d68:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d6a:	e00a      	b.n	8002d82 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002d6c:	f7fe fcf8 	bl	8001760 <HAL_GetTick>
 8002d70:	4602      	mov	r2, r0
 8002d72:	693b      	ldr	r3, [r7, #16]
 8002d74:	1ad3      	subs	r3, r2, r3
 8002d76:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002d7a:	4293      	cmp	r3, r2
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e0c1      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002d82:	4b40      	ldr	r3, [pc, #256]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d84:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002d86:	f003 0302 	and.w	r3, r3, #2
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1ee      	bne.n	8002d6c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002d8e:	7dfb      	ldrb	r3, [r7, #23]
 8002d90:	2b01      	cmp	r3, #1
 8002d92:	d105      	bne.n	8002da0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002d94:	4b3b      	ldr	r3, [pc, #236]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d98:	4a3a      	ldr	r2, [pc, #232]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002d9a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	699b      	ldr	r3, [r3, #24]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	f000 80ad 	beq.w	8002f04 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002daa:	4b36      	ldr	r3, [pc, #216]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d060      	beq.n	8002e78 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	699b      	ldr	r3, [r3, #24]
 8002dba:	2b02      	cmp	r3, #2
 8002dbc:	d145      	bne.n	8002e4a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002dbe:	4b33      	ldr	r3, [pc, #204]	@ (8002e8c <HAL_RCC_OscConfig+0x4b4>)
 8002dc0:	2200      	movs	r2, #0
 8002dc2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dc4:	f7fe fccc 	bl	8001760 <HAL_GetTick>
 8002dc8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dca:	e008      	b.n	8002dde <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002dcc:	f7fe fcc8 	bl	8001760 <HAL_GetTick>
 8002dd0:	4602      	mov	r2, r0
 8002dd2:	693b      	ldr	r3, [r7, #16]
 8002dd4:	1ad3      	subs	r3, r2, r3
 8002dd6:	2b02      	cmp	r3, #2
 8002dd8:	d901      	bls.n	8002dde <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002dda:	2303      	movs	r3, #3
 8002ddc:	e093      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002dde:	4b29      	ldr	r3, [pc, #164]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d1f0      	bne.n	8002dcc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	69da      	ldr	r2, [r3, #28]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	6a1b      	ldr	r3, [r3, #32]
 8002df2:	431a      	orrs	r2, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002df8:	019b      	lsls	r3, r3, #6
 8002dfa:	431a      	orrs	r2, r3
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002e00:	085b      	lsrs	r3, r3, #1
 8002e02:	3b01      	subs	r3, #1
 8002e04:	041b      	lsls	r3, r3, #16
 8002e06:	431a      	orrs	r2, r3
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002e0c:	061b      	lsls	r3, r3, #24
 8002e0e:	431a      	orrs	r2, r3
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002e14:	071b      	lsls	r3, r3, #28
 8002e16:	491b      	ldr	r1, [pc, #108]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002e1c:	4b1b      	ldr	r3, [pc, #108]	@ (8002e8c <HAL_RCC_OscConfig+0x4b4>)
 8002e1e:	2201      	movs	r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e22:	f7fe fc9d 	bl	8001760 <HAL_GetTick>
 8002e26:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e28:	e008      	b.n	8002e3c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e2a:	f7fe fc99 	bl	8001760 <HAL_GetTick>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	693b      	ldr	r3, [r7, #16]
 8002e32:	1ad3      	subs	r3, r2, r3
 8002e34:	2b02      	cmp	r3, #2
 8002e36:	d901      	bls.n	8002e3c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002e38:	2303      	movs	r3, #3
 8002e3a:	e064      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002e3c:	4b11      	ldr	r3, [pc, #68]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d0f0      	beq.n	8002e2a <HAL_RCC_OscConfig+0x452>
 8002e48:	e05c      	b.n	8002f04 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e4a:	4b10      	ldr	r3, [pc, #64]	@ (8002e8c <HAL_RCC_OscConfig+0x4b4>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e50:	f7fe fc86 	bl	8001760 <HAL_GetTick>
 8002e54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e56:	e008      	b.n	8002e6a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002e58:	f7fe fc82 	bl	8001760 <HAL_GetTick>
 8002e5c:	4602      	mov	r2, r0
 8002e5e:	693b      	ldr	r3, [r7, #16]
 8002e60:	1ad3      	subs	r3, r2, r3
 8002e62:	2b02      	cmp	r3, #2
 8002e64:	d901      	bls.n	8002e6a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002e66:	2303      	movs	r3, #3
 8002e68:	e04d      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002e6a:	4b06      	ldr	r3, [pc, #24]	@ (8002e84 <HAL_RCC_OscConfig+0x4ac>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d1f0      	bne.n	8002e58 <HAL_RCC_OscConfig+0x480>
 8002e76:	e045      	b.n	8002f04 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	699b      	ldr	r3, [r3, #24]
 8002e7c:	2b01      	cmp	r3, #1
 8002e7e:	d107      	bne.n	8002e90 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002e80:	2301      	movs	r3, #1
 8002e82:	e040      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40007000 	.word	0x40007000
 8002e8c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002e90:	4b1f      	ldr	r3, [pc, #124]	@ (8002f10 <HAL_RCC_OscConfig+0x538>)
 8002e92:	685b      	ldr	r3, [r3, #4]
 8002e94:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	699b      	ldr	r3, [r3, #24]
 8002e9a:	2b01      	cmp	r3, #1
 8002e9c:	d030      	beq.n	8002f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002ea8:	429a      	cmp	r2, r3
 8002eaa:	d129      	bne.n	8002f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002eb6:	429a      	cmp	r2, r3
 8002eb8:	d122      	bne.n	8002f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002eba:	68fa      	ldr	r2, [r7, #12]
 8002ebc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	687a      	ldr	r2, [r7, #4]
 8002ec4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002ec6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d119      	bne.n	8002f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ed6:	085b      	lsrs	r3, r3, #1
 8002ed8:	3b01      	subs	r3, #1
 8002eda:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002edc:	429a      	cmp	r2, r3
 8002ede:	d10f      	bne.n	8002f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002eea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d107      	bne.n	8002f00 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d001      	beq.n	8002f04 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	3718      	adds	r7, #24
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	bd80      	pop	{r7, pc}
 8002f0e:	bf00      	nop
 8002f10:	40023800 	.word	0x40023800

08002f14 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8002f14:	b580      	push	{r7, lr}
 8002f16:	b084      	sub	sp, #16
 8002f18:	af00      	add	r7, sp, #0
 8002f1a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d101      	bne.n	8002f26 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8002f22:	2301      	movs	r3, #1
 8002f24:	e073      	b.n	800300e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	7f5b      	ldrb	r3, [r3, #29]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d105      	bne.n	8002f3c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2200      	movs	r2, #0
 8002f34:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8002f36:	6878      	ldr	r0, [r7, #4]
 8002f38:	f7fe f91e 	bl	8001178 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	2202      	movs	r2, #2
 8002f40:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	68db      	ldr	r3, [r3, #12]
 8002f48:	f003 0310 	and.w	r3, r3, #16
 8002f4c:	2b10      	cmp	r3, #16
 8002f4e:	d055      	beq.n	8002ffc <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	22ca      	movs	r2, #202	@ 0xca
 8002f56:	625a      	str	r2, [r3, #36]	@ 0x24
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2253      	movs	r2, #83	@ 0x53
 8002f5e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8002f60:	6878      	ldr	r0, [r7, #4]
 8002f62:	f000 f92b 	bl	80031bc <RTC_EnterInitMode>
 8002f66:	4603      	mov	r3, r0
 8002f68:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 8002f6a:	7bfb      	ldrb	r3, [r7, #15]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d12c      	bne.n	8002fca <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	681b      	ldr	r3, [r3, #0]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	687a      	ldr	r2, [r7, #4]
 8002f78:	6812      	ldr	r2, [r2, #0]
 8002f7a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8002f7e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002f82:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	6899      	ldr	r1, [r3, #8]
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	685a      	ldr	r2, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	691b      	ldr	r3, [r3, #16]
 8002f92:	431a      	orrs	r2, r3
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	695b      	ldr	r3, [r3, #20]
 8002f98:	431a      	orrs	r2, r3
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	430a      	orrs	r2, r1
 8002fa0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	687a      	ldr	r2, [r7, #4]
 8002fa8:	68d2      	ldr	r2, [r2, #12]
 8002faa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	6919      	ldr	r1, [r3, #16]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	689b      	ldr	r3, [r3, #8]
 8002fb6:	041a      	lsls	r2, r3, #16
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	430a      	orrs	r2, r1
 8002fbe:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 8002fc0:	6878      	ldr	r0, [r7, #4]
 8002fc2:	f000 f932 	bl	800322a <RTC_ExitInitMode>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 8002fca:	7bfb      	ldrb	r3, [r7, #15]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d110      	bne.n	8002ff2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 8002fde:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	699a      	ldr	r2, [r3, #24]
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	430a      	orrs	r2, r1
 8002ff0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	22ff      	movs	r2, #255	@ 0xff
 8002ff8:	625a      	str	r2, [r3, #36]	@ 0x24
 8002ffa:	e001      	b.n	8003000 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003000:	7bfb      	ldrb	r3, [r7, #15]
 8003002:	2b00      	cmp	r3, #0
 8003004:	d102      	bne.n	800300c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	2201      	movs	r2, #1
 800300a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800300c:	7bfb      	ldrb	r3, [r7, #15]
}
 800300e:	4618      	mov	r0, r3
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}

08003016 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003016:	b580      	push	{r7, lr}
 8003018:	b086      	sub	sp, #24
 800301a:	af00      	add	r7, sp, #0
 800301c:	60f8      	str	r0, [r7, #12]
 800301e:	60b9      	str	r1, [r7, #8]
 8003020:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003022:	2300      	movs	r3, #0
 8003024:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800302c:	68bb      	ldr	r3, [r7, #8]
 800302e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691b      	ldr	r3, [r3, #16]
 8003036:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800303a:	68bb      	ldr	r3, [r7, #8]
 800303c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003048:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800304c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800304e:	697b      	ldr	r3, [r7, #20]
 8003050:	0c1b      	lsrs	r3, r3, #16
 8003052:	b2db      	uxtb	r3, r3
 8003054:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003058:	b2da      	uxtb	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800305e:	697b      	ldr	r3, [r7, #20]
 8003060:	0a1b      	lsrs	r3, r3, #8
 8003062:	b2db      	uxtb	r3, r3
 8003064:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003068:	b2da      	uxtb	r2, r3
 800306a:	68bb      	ldr	r3, [r7, #8]
 800306c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003076:	b2da      	uxtb	r2, r3
 8003078:	68bb      	ldr	r3, [r7, #8]
 800307a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800307c:	697b      	ldr	r3, [r7, #20]
 800307e:	0d9b      	lsrs	r3, r3, #22
 8003080:	b2db      	uxtb	r3, r3
 8003082:	f003 0301 	and.w	r3, r3, #1
 8003086:	b2da      	uxtb	r2, r3
 8003088:	68bb      	ldr	r3, [r7, #8]
 800308a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2b00      	cmp	r3, #0
 8003090:	d11a      	bne.n	80030c8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003092:	68bb      	ldr	r3, [r7, #8]
 8003094:	781b      	ldrb	r3, [r3, #0]
 8003096:	4618      	mov	r0, r3
 8003098:	f000 f8ec 	bl	8003274 <RTC_Bcd2ToByte>
 800309c:	4603      	mov	r3, r0
 800309e:	461a      	mov	r2, r3
 80030a0:	68bb      	ldr	r3, [r7, #8]
 80030a2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80030a4:	68bb      	ldr	r3, [r7, #8]
 80030a6:	785b      	ldrb	r3, [r3, #1]
 80030a8:	4618      	mov	r0, r3
 80030aa:	f000 f8e3 	bl	8003274 <RTC_Bcd2ToByte>
 80030ae:	4603      	mov	r3, r0
 80030b0:	461a      	mov	r2, r3
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80030b6:	68bb      	ldr	r3, [r7, #8]
 80030b8:	789b      	ldrb	r3, [r3, #2]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f000 f8da 	bl	8003274 <RTC_Bcd2ToByte>
 80030c0:	4603      	mov	r3, r0
 80030c2:	461a      	mov	r2, r3
 80030c4:	68bb      	ldr	r3, [r7, #8]
 80030c6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80030c8:	2300      	movs	r3, #0
}
 80030ca:	4618      	mov	r0, r3
 80030cc:	3718      	adds	r7, #24
 80030ce:	46bd      	mov	sp, r7
 80030d0:	bd80      	pop	{r7, pc}

080030d2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80030d2:	b580      	push	{r7, lr}
 80030d4:	b086      	sub	sp, #24
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	60f8      	str	r0, [r7, #12]
 80030da:	60b9      	str	r1, [r7, #8]
 80030dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80030de:	2300      	movs	r3, #0
 80030e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80030ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80030f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80030f2:	697b      	ldr	r3, [r7, #20]
 80030f4:	0c1b      	lsrs	r3, r3, #16
 80030f6:	b2da      	uxtb	r2, r3
 80030f8:	68bb      	ldr	r3, [r7, #8]
 80030fa:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80030fc:	697b      	ldr	r3, [r7, #20]
 80030fe:	0a1b      	lsrs	r3, r3, #8
 8003100:	b2db      	uxtb	r3, r3
 8003102:	f003 031f 	and.w	r3, r3, #31
 8003106:	b2da      	uxtb	r2, r3
 8003108:	68bb      	ldr	r3, [r7, #8]
 800310a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800310c:	697b      	ldr	r3, [r7, #20]
 800310e:	b2db      	uxtb	r3, r3
 8003110:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003114:	b2da      	uxtb	r2, r3
 8003116:	68bb      	ldr	r3, [r7, #8]
 8003118:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800311a:	697b      	ldr	r3, [r7, #20]
 800311c:	0b5b      	lsrs	r3, r3, #13
 800311e:	b2db      	uxtb	r3, r3
 8003120:	f003 0307 	and.w	r3, r3, #7
 8003124:	b2da      	uxtb	r2, r3
 8003126:	68bb      	ldr	r3, [r7, #8]
 8003128:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d11a      	bne.n	8003166 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	78db      	ldrb	r3, [r3, #3]
 8003134:	4618      	mov	r0, r3
 8003136:	f000 f89d 	bl	8003274 <RTC_Bcd2ToByte>
 800313a:	4603      	mov	r3, r0
 800313c:	461a      	mov	r2, r3
 800313e:	68bb      	ldr	r3, [r7, #8]
 8003140:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	785b      	ldrb	r3, [r3, #1]
 8003146:	4618      	mov	r0, r3
 8003148:	f000 f894 	bl	8003274 <RTC_Bcd2ToByte>
 800314c:	4603      	mov	r3, r0
 800314e:	461a      	mov	r2, r3
 8003150:	68bb      	ldr	r3, [r7, #8]
 8003152:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003154:	68bb      	ldr	r3, [r7, #8]
 8003156:	789b      	ldrb	r3, [r3, #2]
 8003158:	4618      	mov	r0, r3
 800315a:	f000 f88b 	bl	8003274 <RTC_Bcd2ToByte>
 800315e:	4603      	mov	r3, r0
 8003160:	461a      	mov	r2, r3
 8003162:	68bb      	ldr	r3, [r7, #8]
 8003164:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003166:	2300      	movs	r3, #0
}
 8003168:	4618      	mov	r0, r3
 800316a:	3718      	adds	r7, #24
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}

08003170 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003170:	b580      	push	{r7, lr}
 8003172:	b084      	sub	sp, #16
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	4a0d      	ldr	r2, [pc, #52]	@ (80031b8 <HAL_RTC_WaitForSynchro+0x48>)
 8003182:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003184:	f7fe faec 	bl	8001760 <HAL_GetTick>
 8003188:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800318a:	e009      	b.n	80031a0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800318c:	f7fe fae8 	bl	8001760 <HAL_GetTick>
 8003190:	4602      	mov	r2, r0
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	1ad3      	subs	r3, r2, r3
 8003196:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800319a:	d901      	bls.n	80031a0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800319c:	2303      	movs	r3, #3
 800319e:	e007      	b.n	80031b0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	f003 0320 	and.w	r3, r3, #32
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d0ee      	beq.n	800318c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80031ae:	2300      	movs	r3, #0
}
 80031b0:	4618      	mov	r0, r3
 80031b2:	3710      	adds	r7, #16
 80031b4:	46bd      	mov	sp, r7
 80031b6:	bd80      	pop	{r7, pc}
 80031b8:	00017f5f 	.word	0x00017f5f

080031bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b084      	sub	sp, #16
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80031c4:	2300      	movs	r3, #0
 80031c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80031c8:	2300      	movs	r3, #0
 80031ca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	68db      	ldr	r3, [r3, #12]
 80031d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d122      	bne.n	8003220 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	681b      	ldr	r3, [r3, #0]
 80031de:	68da      	ldr	r2, [r3, #12]
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80031e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80031ea:	f7fe fab9 	bl	8001760 <HAL_GetTick>
 80031ee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80031f0:	e00c      	b.n	800320c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80031f2:	f7fe fab5 	bl	8001760 <HAL_GetTick>
 80031f6:	4602      	mov	r2, r0
 80031f8:	68bb      	ldr	r3, [r7, #8]
 80031fa:	1ad3      	subs	r3, r2, r3
 80031fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003200:	d904      	bls.n	800320c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2204      	movs	r2, #4
 8003206:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	68db      	ldr	r3, [r3, #12]
 8003212:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003216:	2b00      	cmp	r3, #0
 8003218:	d102      	bne.n	8003220 <RTC_EnterInitMode+0x64>
 800321a:	7bfb      	ldrb	r3, [r7, #15]
 800321c:	2b01      	cmp	r3, #1
 800321e:	d1e8      	bne.n	80031f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003220:	7bfb      	ldrb	r3, [r7, #15]
}
 8003222:	4618      	mov	r0, r3
 8003224:	3710      	adds	r7, #16
 8003226:	46bd      	mov	sp, r7
 8003228:	bd80      	pop	{r7, pc}

0800322a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800322a:	b580      	push	{r7, lr}
 800322c:	b084      	sub	sp, #16
 800322e:	af00      	add	r7, sp, #0
 8003230:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003232:	2300      	movs	r3, #0
 8003234:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	68da      	ldr	r2, [r3, #12]
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003244:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f003 0320 	and.w	r3, r3, #32
 8003250:	2b00      	cmp	r3, #0
 8003252:	d10a      	bne.n	800326a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003254:	6878      	ldr	r0, [r7, #4]
 8003256:	f7ff ff8b 	bl	8003170 <HAL_RTC_WaitForSynchro>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d004      	beq.n	800326a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2204      	movs	r2, #4
 8003264:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800326a:	7bfb      	ldrb	r3, [r7, #15]
}
 800326c:	4618      	mov	r0, r3
 800326e:	3710      	adds	r7, #16
 8003270:	46bd      	mov	sp, r7
 8003272:	bd80      	pop	{r7, pc}

08003274 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003274:	b480      	push	{r7}
 8003276:	b085      	sub	sp, #20
 8003278:	af00      	add	r7, sp, #0
 800327a:	4603      	mov	r3, r0
 800327c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003282:	79fb      	ldrb	r3, [r7, #7]
 8003284:	091b      	lsrs	r3, r3, #4
 8003286:	b2db      	uxtb	r3, r3
 8003288:	461a      	mov	r2, r3
 800328a:	4613      	mov	r3, r2
 800328c:	009b      	lsls	r3, r3, #2
 800328e:	4413      	add	r3, r2
 8003290:	005b      	lsls	r3, r3, #1
 8003292:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	b2da      	uxtb	r2, r3
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	b2db      	uxtb	r3, r3
 80032a0:	4413      	add	r3, r2
 80032a2:	b2db      	uxtb	r3, r3
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3714      	adds	r7, #20
 80032a8:	46bd      	mov	sp, r7
 80032aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ae:	4770      	bx	lr

080032b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b082      	sub	sp, #8
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	d101      	bne.n	80032c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80032be:	2301      	movs	r3, #1
 80032c0:	e07b      	b.n	80033ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d108      	bne.n	80032dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	685b      	ldr	r3, [r3, #4]
 80032ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032d2:	d009      	beq.n	80032e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	2200      	movs	r2, #0
 80032d8:	61da      	str	r2, [r3, #28]
 80032da:	e005      	b.n	80032e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2200      	movs	r2, #0
 80032e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	2200      	movs	r2, #0
 80032e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2200      	movs	r2, #0
 80032ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032f4:	b2db      	uxtb	r3, r3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d106      	bne.n	8003308 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f7fd ff98 	bl	8001238 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	2202      	movs	r2, #2
 800330c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800331e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	689b      	ldr	r3, [r3, #8]
 800332c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003330:	431a      	orrs	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	68db      	ldr	r3, [r3, #12]
 8003336:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800333a:	431a      	orrs	r2, r3
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	691b      	ldr	r3, [r3, #16]
 8003340:	f003 0302 	and.w	r3, r3, #2
 8003344:	431a      	orrs	r2, r3
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	695b      	ldr	r3, [r3, #20]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	431a      	orrs	r2, r3
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	699b      	ldr	r3, [r3, #24]
 8003354:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003358:	431a      	orrs	r2, r3
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	69db      	ldr	r3, [r3, #28]
 800335e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003362:	431a      	orrs	r2, r3
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	6a1b      	ldr	r3, [r3, #32]
 8003368:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800336c:	ea42 0103 	orr.w	r1, r2, r3
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003374:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	430a      	orrs	r2, r1
 800337e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	699b      	ldr	r3, [r3, #24]
 8003384:	0c1b      	lsrs	r3, r3, #16
 8003386:	f003 0104 	and.w	r1, r3, #4
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800338e:	f003 0210 	and.w	r2, r3, #16
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	430a      	orrs	r2, r1
 8003398:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	69da      	ldr	r2, [r3, #28]
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80033a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80033b8:	2300      	movs	r3, #0
}
 80033ba:	4618      	mov	r0, r3
 80033bc:	3708      	adds	r7, #8
 80033be:	46bd      	mov	sp, r7
 80033c0:	bd80      	pop	{r7, pc}

080033c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033c2:	b580      	push	{r7, lr}
 80033c4:	b088      	sub	sp, #32
 80033c6:	af00      	add	r7, sp, #0
 80033c8:	60f8      	str	r0, [r7, #12]
 80033ca:	60b9      	str	r1, [r7, #8]
 80033cc:	603b      	str	r3, [r7, #0]
 80033ce:	4613      	mov	r3, r2
 80033d0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80033d2:	f7fe f9c5 	bl	8001760 <HAL_GetTick>
 80033d6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80033d8:	88fb      	ldrh	r3, [r7, #6]
 80033da:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80033e2:	b2db      	uxtb	r3, r3
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d001      	beq.n	80033ec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
 80033ea:	e12a      	b.n	8003642 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d002      	beq.n	80033f8 <HAL_SPI_Transmit+0x36>
 80033f2:	88fb      	ldrh	r3, [r7, #6]
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d101      	bne.n	80033fc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80033f8:	2301      	movs	r3, #1
 80033fa:	e122      	b.n	8003642 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003402:	2b01      	cmp	r3, #1
 8003404:	d101      	bne.n	800340a <HAL_SPI_Transmit+0x48>
 8003406:	2302      	movs	r3, #2
 8003408:	e11b      	b.n	8003642 <HAL_SPI_Transmit+0x280>
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	2201      	movs	r2, #1
 800340e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003412:	68fb      	ldr	r3, [r7, #12]
 8003414:	2203      	movs	r2, #3
 8003416:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	68ba      	ldr	r2, [r7, #8]
 8003424:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	88fa      	ldrh	r2, [r7, #6]
 800342a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	88fa      	ldrh	r2, [r7, #6]
 8003430:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003432:	68fb      	ldr	r3, [r7, #12]
 8003434:	2200      	movs	r2, #0
 8003436:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	2200      	movs	r2, #0
 800343c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	2200      	movs	r2, #0
 8003442:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2200      	movs	r2, #0
 8003448:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	2200      	movs	r2, #0
 800344e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	689b      	ldr	r3, [r3, #8]
 8003454:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003458:	d10f      	bne.n	800347a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	681a      	ldr	r2, [r3, #0]
 8003460:	68fb      	ldr	r3, [r7, #12]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003468:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	681b      	ldr	r3, [r3, #0]
 800346e:	681a      	ldr	r2, [r3, #0]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003478:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003484:	2b40      	cmp	r3, #64	@ 0x40
 8003486:	d007      	beq.n	8003498 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003488:	68fb      	ldr	r3, [r7, #12]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	681a      	ldr	r2, [r3, #0]
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003496:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	68db      	ldr	r3, [r3, #12]
 800349c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80034a0:	d152      	bne.n	8003548 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	685b      	ldr	r3, [r3, #4]
 80034a6:	2b00      	cmp	r3, #0
 80034a8:	d002      	beq.n	80034b0 <HAL_SPI_Transmit+0xee>
 80034aa:	8b7b      	ldrh	r3, [r7, #26]
 80034ac:	2b01      	cmp	r3, #1
 80034ae:	d145      	bne.n	800353c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b4:	881a      	ldrh	r2, [r3, #0]
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034c0:	1c9a      	adds	r2, r3, #2
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034ca:	b29b      	uxth	r3, r3
 80034cc:	3b01      	subs	r3, #1
 80034ce:	b29a      	uxth	r2, r3
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80034d4:	e032      	b.n	800353c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	689b      	ldr	r3, [r3, #8]
 80034dc:	f003 0302 	and.w	r3, r3, #2
 80034e0:	2b02      	cmp	r3, #2
 80034e2:	d112      	bne.n	800350a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034e8:	881a      	ldrh	r2, [r3, #0]
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034f4:	1c9a      	adds	r2, r3, #2
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034fe:	b29b      	uxth	r3, r3
 8003500:	3b01      	subs	r3, #1
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003508:	e018      	b.n	800353c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800350a:	f7fe f929 	bl	8001760 <HAL_GetTick>
 800350e:	4602      	mov	r2, r0
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	1ad3      	subs	r3, r2, r3
 8003514:	683a      	ldr	r2, [r7, #0]
 8003516:	429a      	cmp	r2, r3
 8003518:	d803      	bhi.n	8003522 <HAL_SPI_Transmit+0x160>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003520:	d102      	bne.n	8003528 <HAL_SPI_Transmit+0x166>
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	2b00      	cmp	r3, #0
 8003526:	d109      	bne.n	800353c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	2201      	movs	r2, #1
 800352c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	2200      	movs	r2, #0
 8003534:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e082      	b.n	8003642 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003540:	b29b      	uxth	r3, r3
 8003542:	2b00      	cmp	r3, #0
 8003544:	d1c7      	bne.n	80034d6 <HAL_SPI_Transmit+0x114>
 8003546:	e053      	b.n	80035f0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	2b00      	cmp	r3, #0
 800354e:	d002      	beq.n	8003556 <HAL_SPI_Transmit+0x194>
 8003550:	8b7b      	ldrh	r3, [r7, #26]
 8003552:	2b01      	cmp	r3, #1
 8003554:	d147      	bne.n	80035e6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	330c      	adds	r3, #12
 8003560:	7812      	ldrb	r2, [r2, #0]
 8003562:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003568:	1c5a      	adds	r2, r3, #1
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003572:	b29b      	uxth	r3, r3
 8003574:	3b01      	subs	r3, #1
 8003576:	b29a      	uxth	r2, r3
 8003578:	68fb      	ldr	r3, [r7, #12]
 800357a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800357c:	e033      	b.n	80035e6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	689b      	ldr	r3, [r3, #8]
 8003584:	f003 0302 	and.w	r3, r3, #2
 8003588:	2b02      	cmp	r3, #2
 800358a:	d113      	bne.n	80035b4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	330c      	adds	r3, #12
 8003596:	7812      	ldrb	r2, [r2, #0]
 8003598:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800359e:	1c5a      	adds	r2, r3, #1
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	3b01      	subs	r3, #1
 80035ac:	b29a      	uxth	r2, r3
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80035b2:	e018      	b.n	80035e6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80035b4:	f7fe f8d4 	bl	8001760 <HAL_GetTick>
 80035b8:	4602      	mov	r2, r0
 80035ba:	69fb      	ldr	r3, [r7, #28]
 80035bc:	1ad3      	subs	r3, r2, r3
 80035be:	683a      	ldr	r2, [r7, #0]
 80035c0:	429a      	cmp	r2, r3
 80035c2:	d803      	bhi.n	80035cc <HAL_SPI_Transmit+0x20a>
 80035c4:	683b      	ldr	r3, [r7, #0]
 80035c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035ca:	d102      	bne.n	80035d2 <HAL_SPI_Transmit+0x210>
 80035cc:	683b      	ldr	r3, [r7, #0]
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d109      	bne.n	80035e6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	2201      	movs	r2, #1
 80035d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80035e2:	2303      	movs	r3, #3
 80035e4:	e02d      	b.n	8003642 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1c6      	bne.n	800357e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80035f0:	69fa      	ldr	r2, [r7, #28]
 80035f2:	6839      	ldr	r1, [r7, #0]
 80035f4:	68f8      	ldr	r0, [r7, #12]
 80035f6:	f000 fb85 	bl	8003d04 <SPI_EndRxTxTransaction>
 80035fa:	4603      	mov	r3, r0
 80035fc:	2b00      	cmp	r3, #0
 80035fe:	d002      	beq.n	8003606 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003600:	68fb      	ldr	r3, [r7, #12]
 8003602:	2220      	movs	r2, #32
 8003604:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	2b00      	cmp	r3, #0
 800360c:	d10a      	bne.n	8003624 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800360e:	2300      	movs	r3, #0
 8003610:	617b      	str	r3, [r7, #20]
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	617b      	str	r3, [r7, #20]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	689b      	ldr	r3, [r3, #8]
 8003620:	617b      	str	r3, [r7, #20]
 8003622:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	2200      	movs	r2, #0
 8003630:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003638:	2b00      	cmp	r3, #0
 800363a:	d001      	beq.n	8003640 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e000      	b.n	8003642 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003640:	2300      	movs	r3, #0
  }
}
 8003642:	4618      	mov	r0, r3
 8003644:	3720      	adds	r7, #32
 8003646:	46bd      	mov	sp, r7
 8003648:	bd80      	pop	{r7, pc}

0800364a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800364a:	b580      	push	{r7, lr}
 800364c:	b08a      	sub	sp, #40	@ 0x28
 800364e:	af00      	add	r7, sp, #0
 8003650:	60f8      	str	r0, [r7, #12]
 8003652:	60b9      	str	r1, [r7, #8]
 8003654:	607a      	str	r2, [r7, #4]
 8003656:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003658:	2301      	movs	r3, #1
 800365a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800365c:	f7fe f880 	bl	8001760 <HAL_GetTick>
 8003660:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003668:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	685b      	ldr	r3, [r3, #4]
 800366e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003670:	887b      	ldrh	r3, [r7, #2]
 8003672:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003674:	7ffb      	ldrb	r3, [r7, #31]
 8003676:	2b01      	cmp	r3, #1
 8003678:	d00c      	beq.n	8003694 <HAL_SPI_TransmitReceive+0x4a>
 800367a:	69bb      	ldr	r3, [r7, #24]
 800367c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003680:	d106      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	689b      	ldr	r3, [r3, #8]
 8003686:	2b00      	cmp	r3, #0
 8003688:	d102      	bne.n	8003690 <HAL_SPI_TransmitReceive+0x46>
 800368a:	7ffb      	ldrb	r3, [r7, #31]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d001      	beq.n	8003694 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003690:	2302      	movs	r3, #2
 8003692:	e17f      	b.n	8003994 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003694:	68bb      	ldr	r3, [r7, #8]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d005      	beq.n	80036a6 <HAL_SPI_TransmitReceive+0x5c>
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d002      	beq.n	80036a6 <HAL_SPI_TransmitReceive+0x5c>
 80036a0:	887b      	ldrh	r3, [r7, #2]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d101      	bne.n	80036aa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e174      	b.n	8003994 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80036b0:	2b01      	cmp	r3, #1
 80036b2:	d101      	bne.n	80036b8 <HAL_SPI_TransmitReceive+0x6e>
 80036b4:	2302      	movs	r3, #2
 80036b6:	e16d      	b.n	8003994 <HAL_SPI_TransmitReceive+0x34a>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	2201      	movs	r2, #1
 80036bc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036c6:	b2db      	uxtb	r3, r3
 80036c8:	2b04      	cmp	r3, #4
 80036ca:	d003      	beq.n	80036d4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	2205      	movs	r2, #5
 80036d0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	2200      	movs	r2, #0
 80036d8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	687a      	ldr	r2, [r7, #4]
 80036de:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	887a      	ldrh	r2, [r7, #2]
 80036e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	887a      	ldrh	r2, [r7, #2]
 80036ea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	68ba      	ldr	r2, [r7, #8]
 80036f0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	887a      	ldrh	r2, [r7, #2]
 80036f6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	887a      	ldrh	r2, [r7, #2]
 80036fc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	2200      	movs	r2, #0
 8003702:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	2200      	movs	r2, #0
 8003708:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003714:	2b40      	cmp	r3, #64	@ 0x40
 8003716:	d007      	beq.n	8003728 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003726:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	68db      	ldr	r3, [r3, #12]
 800372c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003730:	d17e      	bne.n	8003830 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d002      	beq.n	8003740 <HAL_SPI_TransmitReceive+0xf6>
 800373a:	8afb      	ldrh	r3, [r7, #22]
 800373c:	2b01      	cmp	r3, #1
 800373e:	d16c      	bne.n	800381a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003744:	881a      	ldrh	r2, [r3, #0]
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003750:	1c9a      	adds	r2, r3, #2
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800375a:	b29b      	uxth	r3, r3
 800375c:	3b01      	subs	r3, #1
 800375e:	b29a      	uxth	r2, r3
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003764:	e059      	b.n	800381a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	681b      	ldr	r3, [r3, #0]
 800376a:	689b      	ldr	r3, [r3, #8]
 800376c:	f003 0302 	and.w	r3, r3, #2
 8003770:	2b02      	cmp	r3, #2
 8003772:	d11b      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x162>
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003778:	b29b      	uxth	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d016      	beq.n	80037ac <HAL_SPI_TransmitReceive+0x162>
 800377e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003780:	2b01      	cmp	r3, #1
 8003782:	d113      	bne.n	80037ac <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003788:	881a      	ldrh	r2, [r3, #0]
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	1c9a      	adds	r2, r3, #2
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037a8:	2300      	movs	r3, #0
 80037aa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	f003 0301 	and.w	r3, r3, #1
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d119      	bne.n	80037ee <HAL_SPI_TransmitReceive+0x1a4>
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037be:	b29b      	uxth	r3, r3
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d014      	beq.n	80037ee <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037ce:	b292      	uxth	r2, r2
 80037d0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80037d6:	1c9a      	adds	r2, r3, #2
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80037ea:	2301      	movs	r3, #1
 80037ec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80037ee:	f7fd ffb7 	bl	8001760 <HAL_GetTick>
 80037f2:	4602      	mov	r2, r0
 80037f4:	6a3b      	ldr	r3, [r7, #32]
 80037f6:	1ad3      	subs	r3, r2, r3
 80037f8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80037fa:	429a      	cmp	r2, r3
 80037fc:	d80d      	bhi.n	800381a <HAL_SPI_TransmitReceive+0x1d0>
 80037fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003804:	d009      	beq.n	800381a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	2201      	movs	r2, #1
 800380a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	2200      	movs	r2, #0
 8003812:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e0bc      	b.n	8003994 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800381e:	b29b      	uxth	r3, r3
 8003820:	2b00      	cmp	r3, #0
 8003822:	d1a0      	bne.n	8003766 <HAL_SPI_TransmitReceive+0x11c>
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003828:	b29b      	uxth	r3, r3
 800382a:	2b00      	cmp	r3, #0
 800382c:	d19b      	bne.n	8003766 <HAL_SPI_TransmitReceive+0x11c>
 800382e:	e082      	b.n	8003936 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	2b00      	cmp	r3, #0
 8003836:	d002      	beq.n	800383e <HAL_SPI_TransmitReceive+0x1f4>
 8003838:	8afb      	ldrh	r3, [r7, #22]
 800383a:	2b01      	cmp	r3, #1
 800383c:	d171      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	330c      	adds	r3, #12
 8003848:	7812      	ldrb	r2, [r2, #0]
 800384a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003850:	1c5a      	adds	r2, r3, #1
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800385a:	b29b      	uxth	r3, r3
 800385c:	3b01      	subs	r3, #1
 800385e:	b29a      	uxth	r2, r3
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003864:	e05d      	b.n	8003922 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	689b      	ldr	r3, [r3, #8]
 800386c:	f003 0302 	and.w	r3, r3, #2
 8003870:	2b02      	cmp	r3, #2
 8003872:	d11c      	bne.n	80038ae <HAL_SPI_TransmitReceive+0x264>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003878:	b29b      	uxth	r3, r3
 800387a:	2b00      	cmp	r3, #0
 800387c:	d017      	beq.n	80038ae <HAL_SPI_TransmitReceive+0x264>
 800387e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003880:	2b01      	cmp	r3, #1
 8003882:	d114      	bne.n	80038ae <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	330c      	adds	r3, #12
 800388e:	7812      	ldrb	r2, [r2, #0]
 8003890:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003892:	68fb      	ldr	r3, [r7, #12]
 8003894:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003896:	1c5a      	adds	r2, r3, #1
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	3b01      	subs	r3, #1
 80038a4:	b29a      	uxth	r2, r3
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038aa:	2300      	movs	r3, #0
 80038ac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	689b      	ldr	r3, [r3, #8]
 80038b4:	f003 0301 	and.w	r3, r3, #1
 80038b8:	2b01      	cmp	r3, #1
 80038ba:	d119      	bne.n	80038f0 <HAL_SPI_TransmitReceive+0x2a6>
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038c0:	b29b      	uxth	r3, r3
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d014      	beq.n	80038f0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80038c6:	68fb      	ldr	r3, [r7, #12]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	68da      	ldr	r2, [r3, #12]
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d0:	b2d2      	uxtb	r2, r2
 80038d2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038d8:	1c5a      	adds	r2, r3, #1
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038e2:	b29b      	uxth	r3, r3
 80038e4:	3b01      	subs	r3, #1
 80038e6:	b29a      	uxth	r2, r3
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80038ec:	2301      	movs	r3, #1
 80038ee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80038f0:	f7fd ff36 	bl	8001760 <HAL_GetTick>
 80038f4:	4602      	mov	r2, r0
 80038f6:	6a3b      	ldr	r3, [r7, #32]
 80038f8:	1ad3      	subs	r3, r2, r3
 80038fa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80038fc:	429a      	cmp	r2, r3
 80038fe:	d803      	bhi.n	8003908 <HAL_SPI_TransmitReceive+0x2be>
 8003900:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003902:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003906:	d102      	bne.n	800390e <HAL_SPI_TransmitReceive+0x2c4>
 8003908:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800390a:	2b00      	cmp	r3, #0
 800390c:	d109      	bne.n	8003922 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	2201      	movs	r2, #1
 8003912:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	2200      	movs	r2, #0
 800391a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e038      	b.n	8003994 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003926:	b29b      	uxth	r3, r3
 8003928:	2b00      	cmp	r3, #0
 800392a:	d19c      	bne.n	8003866 <HAL_SPI_TransmitReceive+0x21c>
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003930:	b29b      	uxth	r3, r3
 8003932:	2b00      	cmp	r3, #0
 8003934:	d197      	bne.n	8003866 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003936:	6a3a      	ldr	r2, [r7, #32]
 8003938:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800393a:	68f8      	ldr	r0, [r7, #12]
 800393c:	f000 f9e2 	bl	8003d04 <SPI_EndRxTxTransaction>
 8003940:	4603      	mov	r3, r0
 8003942:	2b00      	cmp	r3, #0
 8003944:	d008      	beq.n	8003958 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	2220      	movs	r2, #32
 800394a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800394c:	68fb      	ldr	r3, [r7, #12]
 800394e:	2200      	movs	r2, #0
 8003950:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003954:	2301      	movs	r3, #1
 8003956:	e01d      	b.n	8003994 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003958:	68fb      	ldr	r3, [r7, #12]
 800395a:	689b      	ldr	r3, [r3, #8]
 800395c:	2b00      	cmp	r3, #0
 800395e:	d10a      	bne.n	8003976 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003960:	2300      	movs	r3, #0
 8003962:	613b      	str	r3, [r7, #16]
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	68db      	ldr	r3, [r3, #12]
 800396a:	613b      	str	r3, [r7, #16]
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	613b      	str	r3, [r7, #16]
 8003974:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	2201      	movs	r2, #1
 800397a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800397e:	68fb      	ldr	r3, [r7, #12]
 8003980:	2200      	movs	r2, #0
 8003982:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800398a:	2b00      	cmp	r3, #0
 800398c:	d001      	beq.n	8003992 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800398e:	2301      	movs	r3, #1
 8003990:	e000      	b.n	8003994 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003992:	2300      	movs	r3, #0
  }
}
 8003994:	4618      	mov	r0, r3
 8003996:	3728      	adds	r7, #40	@ 0x28
 8003998:	46bd      	mov	sp, r7
 800399a:	bd80      	pop	{r7, pc}

0800399c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b088      	sub	sp, #32
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	685b      	ldr	r3, [r3, #4]
 80039aa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	689b      	ldr	r3, [r3, #8]
 80039b2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039b4:	69bb      	ldr	r3, [r7, #24]
 80039b6:	099b      	lsrs	r3, r3, #6
 80039b8:	f003 0301 	and.w	r3, r3, #1
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d10f      	bne.n	80039e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039c0:	69bb      	ldr	r3, [r7, #24]
 80039c2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d00a      	beq.n	80039e0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	099b      	lsrs	r3, r3, #6
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d004      	beq.n	80039e0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039da:	6878      	ldr	r0, [r7, #4]
 80039dc:	4798      	blx	r3
    return;
 80039de:	e0d7      	b.n	8003b90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	085b      	lsrs	r3, r3, #1
 80039e4:	f003 0301 	and.w	r3, r3, #1
 80039e8:	2b00      	cmp	r3, #0
 80039ea:	d00a      	beq.n	8003a02 <HAL_SPI_IRQHandler+0x66>
 80039ec:	69fb      	ldr	r3, [r7, #28]
 80039ee:	09db      	lsrs	r3, r3, #7
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d004      	beq.n	8003a02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80039fc:	6878      	ldr	r0, [r7, #4]
 80039fe:	4798      	blx	r3
    return;
 8003a00:	e0c6      	b.n	8003b90 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a02:	69bb      	ldr	r3, [r7, #24]
 8003a04:	095b      	lsrs	r3, r3, #5
 8003a06:	f003 0301 	and.w	r3, r3, #1
 8003a0a:	2b00      	cmp	r3, #0
 8003a0c:	d10c      	bne.n	8003a28 <HAL_SPI_IRQHandler+0x8c>
 8003a0e:	69bb      	ldr	r3, [r7, #24]
 8003a10:	099b      	lsrs	r3, r3, #6
 8003a12:	f003 0301 	and.w	r3, r3, #1
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d106      	bne.n	8003a28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	0a1b      	lsrs	r3, r3, #8
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	f000 80b4 	beq.w	8003b90 <HAL_SPI_IRQHandler+0x1f4>
 8003a28:	69fb      	ldr	r3, [r7, #28]
 8003a2a:	095b      	lsrs	r3, r3, #5
 8003a2c:	f003 0301 	and.w	r3, r3, #1
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f000 80ad 	beq.w	8003b90 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a36:	69bb      	ldr	r3, [r7, #24]
 8003a38:	099b      	lsrs	r3, r3, #6
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d023      	beq.n	8003a8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a48:	b2db      	uxtb	r3, r3
 8003a4a:	2b03      	cmp	r3, #3
 8003a4c:	d011      	beq.n	8003a72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a52:	f043 0204 	orr.w	r2, r3, #4
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a5a:	2300      	movs	r3, #0
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	617b      	str	r3, [r7, #20]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	689b      	ldr	r3, [r3, #8]
 8003a6c:	617b      	str	r3, [r7, #20]
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	e00b      	b.n	8003a8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a72:	2300      	movs	r3, #0
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	68db      	ldr	r3, [r3, #12]
 8003a7c:	613b      	str	r3, [r7, #16]
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	613b      	str	r3, [r7, #16]
 8003a86:	693b      	ldr	r3, [r7, #16]
        return;
 8003a88:	e082      	b.n	8003b90 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003a8a:	69bb      	ldr	r3, [r7, #24]
 8003a8c:	095b      	lsrs	r3, r3, #5
 8003a8e:	f003 0301 	and.w	r3, r3, #1
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d014      	beq.n	8003ac0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a9a:	f043 0201 	orr.w	r2, r3, #1
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003aa2:	2300      	movs	r3, #0
 8003aa4:	60fb      	str	r3, [r7, #12]
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	689b      	ldr	r3, [r3, #8]
 8003aac:	60fb      	str	r3, [r7, #12]
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	681a      	ldr	r2, [r3, #0]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003abc:	601a      	str	r2, [r3, #0]
 8003abe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003ac0:	69bb      	ldr	r3, [r7, #24]
 8003ac2:	0a1b      	lsrs	r3, r3, #8
 8003ac4:	f003 0301 	and.w	r3, r3, #1
 8003ac8:	2b00      	cmp	r3, #0
 8003aca:	d00c      	beq.n	8003ae6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003ad0:	f043 0208 	orr.w	r2, r3, #8
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003ad8:	2300      	movs	r3, #0
 8003ada:	60bb      	str	r3, [r7, #8]
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	60bb      	str	r3, [r7, #8]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d04f      	beq.n	8003b8e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	685a      	ldr	r2, [r3, #4]
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	681b      	ldr	r3, [r3, #0]
 8003af8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003afc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003b06:	69fb      	ldr	r3, [r7, #28]
 8003b08:	f003 0302 	and.w	r3, r3, #2
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d104      	bne.n	8003b1a <HAL_SPI_IRQHandler+0x17e>
 8003b10:	69fb      	ldr	r3, [r7, #28]
 8003b12:	f003 0301 	and.w	r3, r3, #1
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d034      	beq.n	8003b84 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f022 0203 	bic.w	r2, r2, #3
 8003b28:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b2e:	2b00      	cmp	r3, #0
 8003b30:	d011      	beq.n	8003b56 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b36:	4a18      	ldr	r2, [pc, #96]	@ (8003b98 <HAL_SPI_IRQHandler+0x1fc>)
 8003b38:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b3e:	4618      	mov	r0, r3
 8003b40:	f7fd ff4f 	bl	80019e2 <HAL_DMA_Abort_IT>
 8003b44:	4603      	mov	r3, r0
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d005      	beq.n	8003b56 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b4e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d016      	beq.n	8003b8c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b62:	4a0d      	ldr	r2, [pc, #52]	@ (8003b98 <HAL_SPI_IRQHandler+0x1fc>)
 8003b64:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f7fd ff39 	bl	80019e2 <HAL_DMA_Abort_IT>
 8003b70:	4603      	mov	r3, r0
 8003b72:	2b00      	cmp	r3, #0
 8003b74:	d00a      	beq.n	8003b8c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b7a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003b82:	e003      	b.n	8003b8c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003b84:	6878      	ldr	r0, [r7, #4]
 8003b86:	f000 f809 	bl	8003b9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003b8a:	e000      	b.n	8003b8e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003b8c:	bf00      	nop
    return;
 8003b8e:	bf00      	nop
  }
}
 8003b90:	3720      	adds	r7, #32
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	08003bcd 	.word	0x08003bcd

08003b9c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003b9c:	b480      	push	{r7}
 8003b9e:	b083      	sub	sp, #12
 8003ba0:	af00      	add	r7, sp, #0
 8003ba2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003ba4:	bf00      	nop
 8003ba6:	370c      	adds	r7, #12
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b083      	sub	sp, #12
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bbe:	b2db      	uxtb	r3, r3
}
 8003bc0:	4618      	mov	r0, r3
 8003bc2:	370c      	adds	r7, #12
 8003bc4:	46bd      	mov	sp, r7
 8003bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bca:	4770      	bx	lr

08003bcc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b084      	sub	sp, #16
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003bd8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7ff ffd8 	bl	8003b9c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bec:	bf00      	nop
 8003bee:	3710      	adds	r7, #16
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b088      	sub	sp, #32
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	60f8      	str	r0, [r7, #12]
 8003bfc:	60b9      	str	r1, [r7, #8]
 8003bfe:	603b      	str	r3, [r7, #0]
 8003c00:	4613      	mov	r3, r2
 8003c02:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c04:	f7fd fdac 	bl	8001760 <HAL_GetTick>
 8003c08:	4602      	mov	r2, r0
 8003c0a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c0c:	1a9b      	subs	r3, r3, r2
 8003c0e:	683a      	ldr	r2, [r7, #0]
 8003c10:	4413      	add	r3, r2
 8003c12:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c14:	f7fd fda4 	bl	8001760 <HAL_GetTick>
 8003c18:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c1a:	4b39      	ldr	r3, [pc, #228]	@ (8003d00 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	015b      	lsls	r3, r3, #5
 8003c20:	0d1b      	lsrs	r3, r3, #20
 8003c22:	69fa      	ldr	r2, [r7, #28]
 8003c24:	fb02 f303 	mul.w	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c2a:	e055      	b.n	8003cd8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c2c:	683b      	ldr	r3, [r7, #0]
 8003c2e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c32:	d051      	beq.n	8003cd8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c34:	f7fd fd94 	bl	8001760 <HAL_GetTick>
 8003c38:	4602      	mov	r2, r0
 8003c3a:	69bb      	ldr	r3, [r7, #24]
 8003c3c:	1ad3      	subs	r3, r2, r3
 8003c3e:	69fa      	ldr	r2, [r7, #28]
 8003c40:	429a      	cmp	r2, r3
 8003c42:	d902      	bls.n	8003c4a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c44:	69fb      	ldr	r3, [r7, #28]
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d13d      	bne.n	8003cc6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c58:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	685b      	ldr	r3, [r3, #4]
 8003c5e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c62:	d111      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	689b      	ldr	r3, [r3, #8]
 8003c68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003c6c:	d004      	beq.n	8003c78 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c76:	d107      	bne.n	8003c88 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003c86:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003c8c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003c90:	d10f      	bne.n	8003cb2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003c92:	68fb      	ldr	r3, [r7, #12]
 8003c94:	681b      	ldr	r3, [r3, #0]
 8003c96:	681a      	ldr	r2, [r3, #0]
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003ca0:	601a      	str	r2, [r3, #0]
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	681a      	ldr	r2, [r3, #0]
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cb0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	2201      	movs	r2, #1
 8003cb6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	2200      	movs	r2, #0
 8003cbe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e018      	b.n	8003cf8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003cc6:	697b      	ldr	r3, [r7, #20]
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	d102      	bne.n	8003cd2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	61fb      	str	r3, [r7, #28]
 8003cd0:	e002      	b.n	8003cd8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003cd2:	697b      	ldr	r3, [r7, #20]
 8003cd4:	3b01      	subs	r3, #1
 8003cd6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	689a      	ldr	r2, [r3, #8]
 8003cde:	68bb      	ldr	r3, [r7, #8]
 8003ce0:	4013      	ands	r3, r2
 8003ce2:	68ba      	ldr	r2, [r7, #8]
 8003ce4:	429a      	cmp	r2, r3
 8003ce6:	bf0c      	ite	eq
 8003ce8:	2301      	moveq	r3, #1
 8003cea:	2300      	movne	r3, #0
 8003cec:	b2db      	uxtb	r3, r3
 8003cee:	461a      	mov	r2, r3
 8003cf0:	79fb      	ldrb	r3, [r7, #7]
 8003cf2:	429a      	cmp	r2, r3
 8003cf4:	d19a      	bne.n	8003c2c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	3720      	adds	r7, #32
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	20000000 	.word	0x20000000

08003d04 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b088      	sub	sp, #32
 8003d08:	af02      	add	r7, sp, #8
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	9300      	str	r3, [sp, #0]
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	2201      	movs	r2, #1
 8003d18:	2102      	movs	r1, #2
 8003d1a:	68f8      	ldr	r0, [r7, #12]
 8003d1c:	f7ff ff6a 	bl	8003bf4 <SPI_WaitFlagStateUntilTimeout>
 8003d20:	4603      	mov	r3, r0
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d007      	beq.n	8003d36 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d2a:	f043 0220 	orr.w	r2, r3, #32
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d32:	2303      	movs	r3, #3
 8003d34:	e032      	b.n	8003d9c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d36:	4b1b      	ldr	r3, [pc, #108]	@ (8003da4 <SPI_EndRxTxTransaction+0xa0>)
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	4a1b      	ldr	r2, [pc, #108]	@ (8003da8 <SPI_EndRxTxTransaction+0xa4>)
 8003d3c:	fba2 2303 	umull	r2, r3, r2, r3
 8003d40:	0d5b      	lsrs	r3, r3, #21
 8003d42:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d46:	fb02 f303 	mul.w	r3, r2, r3
 8003d4a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	685b      	ldr	r3, [r3, #4]
 8003d50:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d54:	d112      	bne.n	8003d7c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	2180      	movs	r1, #128	@ 0x80
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f7ff ff47 	bl	8003bf4 <SPI_WaitFlagStateUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d016      	beq.n	8003d9a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d70:	f043 0220 	orr.w	r2, r3, #32
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e00f      	b.n	8003d9c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003d7c:	697b      	ldr	r3, [r7, #20]
 8003d7e:	2b00      	cmp	r3, #0
 8003d80:	d00a      	beq.n	8003d98 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003d82:	697b      	ldr	r3, [r7, #20]
 8003d84:	3b01      	subs	r3, #1
 8003d86:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	689b      	ldr	r3, [r3, #8]
 8003d8e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d92:	2b80      	cmp	r3, #128	@ 0x80
 8003d94:	d0f2      	beq.n	8003d7c <SPI_EndRxTxTransaction+0x78>
 8003d96:	e000      	b.n	8003d9a <SPI_EndRxTxTransaction+0x96>
        break;
 8003d98:	bf00      	nop
  }

  return HAL_OK;
 8003d9a:	2300      	movs	r3, #0
}
 8003d9c:	4618      	mov	r0, r3
 8003d9e:	3718      	adds	r7, #24
 8003da0:	46bd      	mov	sp, r7
 8003da2:	bd80      	pop	{r7, pc}
 8003da4:	20000000 	.word	0x20000000
 8003da8:	165e9f81 	.word	0x165e9f81

08003dac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b082      	sub	sp, #8
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d101      	bne.n	8003dbe <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003dba:	2301      	movs	r3, #1
 8003dbc:	e042      	b.n	8003e44 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003dc4:	b2db      	uxtb	r3, r3
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f7fd fbcc 	bl	8001570 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	2224      	movs	r2, #36	@ 0x24
 8003ddc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	68da      	ldr	r2, [r3, #12]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003dee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003df0:	6878      	ldr	r0, [r7, #4]
 8003df2:	f000 f82b 	bl	8003e4c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	691a      	ldr	r2, [r3, #16]
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003e04:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	695a      	ldr	r2, [r3, #20]
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003e14:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68da      	ldr	r2, [r3, #12]
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003e24:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2220      	movs	r2, #32
 8003e30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2220      	movs	r2, #32
 8003e38:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2200      	movs	r2, #0
 8003e40:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003e42:	2300      	movs	r3, #0
}
 8003e44:	4618      	mov	r0, r3
 8003e46:	3708      	adds	r7, #8
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	bd80      	pop	{r7, pc}

08003e4c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003e4c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003e50:	b0c0      	sub	sp, #256	@ 0x100
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	691b      	ldr	r3, [r3, #16]
 8003e60:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e68:	68d9      	ldr	r1, [r3, #12]
 8003e6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e6e:	681a      	ldr	r2, [r3, #0]
 8003e70:	ea40 0301 	orr.w	r3, r0, r1
 8003e74:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003e76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e7a:	689a      	ldr	r2, [r3, #8]
 8003e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e80:	691b      	ldr	r3, [r3, #16]
 8003e82:	431a      	orrs	r2, r3
 8003e84:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e88:	695b      	ldr	r3, [r3, #20]
 8003e8a:	431a      	orrs	r2, r3
 8003e8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e90:	69db      	ldr	r3, [r3, #28]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003e98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	68db      	ldr	r3, [r3, #12]
 8003ea0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003ea4:	f021 010c 	bic.w	r1, r1, #12
 8003ea8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eac:	681a      	ldr	r2, [r3, #0]
 8003eae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003eb2:	430b      	orrs	r3, r1
 8003eb4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003eb6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003ec2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ec6:	6999      	ldr	r1, [r3, #24]
 8003ec8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ecc:	681a      	ldr	r2, [r3, #0]
 8003ece:	ea40 0301 	orr.w	r3, r0, r1
 8003ed2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	4b8f      	ldr	r3, [pc, #572]	@ (8004118 <UART_SetConfig+0x2cc>)
 8003edc:	429a      	cmp	r2, r3
 8003ede:	d005      	beq.n	8003eec <UART_SetConfig+0xa0>
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	4b8d      	ldr	r3, [pc, #564]	@ (800411c <UART_SetConfig+0x2d0>)
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d104      	bne.n	8003ef6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003eec:	f7fe f88c 	bl	8002008 <HAL_RCC_GetPCLK2Freq>
 8003ef0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003ef4:	e003      	b.n	8003efe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003ef6:	f7fe f873 	bl	8001fe0 <HAL_RCC_GetPCLK1Freq>
 8003efa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003efe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f02:	69db      	ldr	r3, [r3, #28]
 8003f04:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003f08:	f040 810c 	bne.w	8004124 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003f0c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f10:	2200      	movs	r2, #0
 8003f12:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003f16:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003f1a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003f1e:	4622      	mov	r2, r4
 8003f20:	462b      	mov	r3, r5
 8003f22:	1891      	adds	r1, r2, r2
 8003f24:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003f26:	415b      	adcs	r3, r3
 8003f28:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003f2a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003f2e:	4621      	mov	r1, r4
 8003f30:	eb12 0801 	adds.w	r8, r2, r1
 8003f34:	4629      	mov	r1, r5
 8003f36:	eb43 0901 	adc.w	r9, r3, r1
 8003f3a:	f04f 0200 	mov.w	r2, #0
 8003f3e:	f04f 0300 	mov.w	r3, #0
 8003f42:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003f46:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003f4a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003f4e:	4690      	mov	r8, r2
 8003f50:	4699      	mov	r9, r3
 8003f52:	4623      	mov	r3, r4
 8003f54:	eb18 0303 	adds.w	r3, r8, r3
 8003f58:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003f5c:	462b      	mov	r3, r5
 8003f5e:	eb49 0303 	adc.w	r3, r9, r3
 8003f62:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003f66:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003f6a:	685b      	ldr	r3, [r3, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003f72:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003f76:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	18db      	adds	r3, r3, r3
 8003f7e:	653b      	str	r3, [r7, #80]	@ 0x50
 8003f80:	4613      	mov	r3, r2
 8003f82:	eb42 0303 	adc.w	r3, r2, r3
 8003f86:	657b      	str	r3, [r7, #84]	@ 0x54
 8003f88:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003f8c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003f90:	f7fc f98e 	bl	80002b0 <__aeabi_uldivmod>
 8003f94:	4602      	mov	r2, r0
 8003f96:	460b      	mov	r3, r1
 8003f98:	4b61      	ldr	r3, [pc, #388]	@ (8004120 <UART_SetConfig+0x2d4>)
 8003f9a:	fba3 2302 	umull	r2, r3, r3, r2
 8003f9e:	095b      	lsrs	r3, r3, #5
 8003fa0:	011c      	lsls	r4, r3, #4
 8003fa2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003fac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003fb0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003fb4:	4642      	mov	r2, r8
 8003fb6:	464b      	mov	r3, r9
 8003fb8:	1891      	adds	r1, r2, r2
 8003fba:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003fbc:	415b      	adcs	r3, r3
 8003fbe:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003fc0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003fc4:	4641      	mov	r1, r8
 8003fc6:	eb12 0a01 	adds.w	sl, r2, r1
 8003fca:	4649      	mov	r1, r9
 8003fcc:	eb43 0b01 	adc.w	fp, r3, r1
 8003fd0:	f04f 0200 	mov.w	r2, #0
 8003fd4:	f04f 0300 	mov.w	r3, #0
 8003fd8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003fdc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003fe0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003fe4:	4692      	mov	sl, r2
 8003fe6:	469b      	mov	fp, r3
 8003fe8:	4643      	mov	r3, r8
 8003fea:	eb1a 0303 	adds.w	r3, sl, r3
 8003fee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ff2:	464b      	mov	r3, r9
 8003ff4:	eb4b 0303 	adc.w	r3, fp, r3
 8003ff8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004000:	685b      	ldr	r3, [r3, #4]
 8004002:	2200      	movs	r2, #0
 8004004:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004008:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800400c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004010:	460b      	mov	r3, r1
 8004012:	18db      	adds	r3, r3, r3
 8004014:	643b      	str	r3, [r7, #64]	@ 0x40
 8004016:	4613      	mov	r3, r2
 8004018:	eb42 0303 	adc.w	r3, r2, r3
 800401c:	647b      	str	r3, [r7, #68]	@ 0x44
 800401e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004022:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004026:	f7fc f943 	bl	80002b0 <__aeabi_uldivmod>
 800402a:	4602      	mov	r2, r0
 800402c:	460b      	mov	r3, r1
 800402e:	4611      	mov	r1, r2
 8004030:	4b3b      	ldr	r3, [pc, #236]	@ (8004120 <UART_SetConfig+0x2d4>)
 8004032:	fba3 2301 	umull	r2, r3, r3, r1
 8004036:	095b      	lsrs	r3, r3, #5
 8004038:	2264      	movs	r2, #100	@ 0x64
 800403a:	fb02 f303 	mul.w	r3, r2, r3
 800403e:	1acb      	subs	r3, r1, r3
 8004040:	00db      	lsls	r3, r3, #3
 8004042:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004046:	4b36      	ldr	r3, [pc, #216]	@ (8004120 <UART_SetConfig+0x2d4>)
 8004048:	fba3 2302 	umull	r2, r3, r3, r2
 800404c:	095b      	lsrs	r3, r3, #5
 800404e:	005b      	lsls	r3, r3, #1
 8004050:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004054:	441c      	add	r4, r3
 8004056:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800405a:	2200      	movs	r2, #0
 800405c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004060:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004064:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004068:	4642      	mov	r2, r8
 800406a:	464b      	mov	r3, r9
 800406c:	1891      	adds	r1, r2, r2
 800406e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004070:	415b      	adcs	r3, r3
 8004072:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004074:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004078:	4641      	mov	r1, r8
 800407a:	1851      	adds	r1, r2, r1
 800407c:	6339      	str	r1, [r7, #48]	@ 0x30
 800407e:	4649      	mov	r1, r9
 8004080:	414b      	adcs	r3, r1
 8004082:	637b      	str	r3, [r7, #52]	@ 0x34
 8004084:	f04f 0200 	mov.w	r2, #0
 8004088:	f04f 0300 	mov.w	r3, #0
 800408c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004090:	4659      	mov	r1, fp
 8004092:	00cb      	lsls	r3, r1, #3
 8004094:	4651      	mov	r1, sl
 8004096:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800409a:	4651      	mov	r1, sl
 800409c:	00ca      	lsls	r2, r1, #3
 800409e:	4610      	mov	r0, r2
 80040a0:	4619      	mov	r1, r3
 80040a2:	4603      	mov	r3, r0
 80040a4:	4642      	mov	r2, r8
 80040a6:	189b      	adds	r3, r3, r2
 80040a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80040ac:	464b      	mov	r3, r9
 80040ae:	460a      	mov	r2, r1
 80040b0:	eb42 0303 	adc.w	r3, r2, r3
 80040b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80040b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80040bc:	685b      	ldr	r3, [r3, #4]
 80040be:	2200      	movs	r2, #0
 80040c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80040c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80040c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80040cc:	460b      	mov	r3, r1
 80040ce:	18db      	adds	r3, r3, r3
 80040d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80040d2:	4613      	mov	r3, r2
 80040d4:	eb42 0303 	adc.w	r3, r2, r3
 80040d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80040da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80040de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80040e2:	f7fc f8e5 	bl	80002b0 <__aeabi_uldivmod>
 80040e6:	4602      	mov	r2, r0
 80040e8:	460b      	mov	r3, r1
 80040ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004120 <UART_SetConfig+0x2d4>)
 80040ec:	fba3 1302 	umull	r1, r3, r3, r2
 80040f0:	095b      	lsrs	r3, r3, #5
 80040f2:	2164      	movs	r1, #100	@ 0x64
 80040f4:	fb01 f303 	mul.w	r3, r1, r3
 80040f8:	1ad3      	subs	r3, r2, r3
 80040fa:	00db      	lsls	r3, r3, #3
 80040fc:	3332      	adds	r3, #50	@ 0x32
 80040fe:	4a08      	ldr	r2, [pc, #32]	@ (8004120 <UART_SetConfig+0x2d4>)
 8004100:	fba2 2303 	umull	r2, r3, r2, r3
 8004104:	095b      	lsrs	r3, r3, #5
 8004106:	f003 0207 	and.w	r2, r3, #7
 800410a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	4422      	add	r2, r4
 8004112:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004114:	e106      	b.n	8004324 <UART_SetConfig+0x4d8>
 8004116:	bf00      	nop
 8004118:	40011000 	.word	0x40011000
 800411c:	40011400 	.word	0x40011400
 8004120:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004124:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004128:	2200      	movs	r2, #0
 800412a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800412e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004132:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004136:	4642      	mov	r2, r8
 8004138:	464b      	mov	r3, r9
 800413a:	1891      	adds	r1, r2, r2
 800413c:	6239      	str	r1, [r7, #32]
 800413e:	415b      	adcs	r3, r3
 8004140:	627b      	str	r3, [r7, #36]	@ 0x24
 8004142:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004146:	4641      	mov	r1, r8
 8004148:	1854      	adds	r4, r2, r1
 800414a:	4649      	mov	r1, r9
 800414c:	eb43 0501 	adc.w	r5, r3, r1
 8004150:	f04f 0200 	mov.w	r2, #0
 8004154:	f04f 0300 	mov.w	r3, #0
 8004158:	00eb      	lsls	r3, r5, #3
 800415a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800415e:	00e2      	lsls	r2, r4, #3
 8004160:	4614      	mov	r4, r2
 8004162:	461d      	mov	r5, r3
 8004164:	4643      	mov	r3, r8
 8004166:	18e3      	adds	r3, r4, r3
 8004168:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800416c:	464b      	mov	r3, r9
 800416e:	eb45 0303 	adc.w	r3, r5, r3
 8004172:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800417a:	685b      	ldr	r3, [r3, #4]
 800417c:	2200      	movs	r2, #0
 800417e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004182:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004186:	f04f 0200 	mov.w	r2, #0
 800418a:	f04f 0300 	mov.w	r3, #0
 800418e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004192:	4629      	mov	r1, r5
 8004194:	008b      	lsls	r3, r1, #2
 8004196:	4621      	mov	r1, r4
 8004198:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800419c:	4621      	mov	r1, r4
 800419e:	008a      	lsls	r2, r1, #2
 80041a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80041a4:	f7fc f884 	bl	80002b0 <__aeabi_uldivmod>
 80041a8:	4602      	mov	r2, r0
 80041aa:	460b      	mov	r3, r1
 80041ac:	4b60      	ldr	r3, [pc, #384]	@ (8004330 <UART_SetConfig+0x4e4>)
 80041ae:	fba3 2302 	umull	r2, r3, r3, r2
 80041b2:	095b      	lsrs	r3, r3, #5
 80041b4:	011c      	lsls	r4, r3, #4
 80041b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80041ba:	2200      	movs	r2, #0
 80041bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80041c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80041c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80041c8:	4642      	mov	r2, r8
 80041ca:	464b      	mov	r3, r9
 80041cc:	1891      	adds	r1, r2, r2
 80041ce:	61b9      	str	r1, [r7, #24]
 80041d0:	415b      	adcs	r3, r3
 80041d2:	61fb      	str	r3, [r7, #28]
 80041d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80041d8:	4641      	mov	r1, r8
 80041da:	1851      	adds	r1, r2, r1
 80041dc:	6139      	str	r1, [r7, #16]
 80041de:	4649      	mov	r1, r9
 80041e0:	414b      	adcs	r3, r1
 80041e2:	617b      	str	r3, [r7, #20]
 80041e4:	f04f 0200 	mov.w	r2, #0
 80041e8:	f04f 0300 	mov.w	r3, #0
 80041ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80041f0:	4659      	mov	r1, fp
 80041f2:	00cb      	lsls	r3, r1, #3
 80041f4:	4651      	mov	r1, sl
 80041f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041fa:	4651      	mov	r1, sl
 80041fc:	00ca      	lsls	r2, r1, #3
 80041fe:	4610      	mov	r0, r2
 8004200:	4619      	mov	r1, r3
 8004202:	4603      	mov	r3, r0
 8004204:	4642      	mov	r2, r8
 8004206:	189b      	adds	r3, r3, r2
 8004208:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800420c:	464b      	mov	r3, r9
 800420e:	460a      	mov	r2, r1
 8004210:	eb42 0303 	adc.w	r3, r2, r3
 8004214:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800421c:	685b      	ldr	r3, [r3, #4]
 800421e:	2200      	movs	r2, #0
 8004220:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004222:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004224:	f04f 0200 	mov.w	r2, #0
 8004228:	f04f 0300 	mov.w	r3, #0
 800422c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004230:	4649      	mov	r1, r9
 8004232:	008b      	lsls	r3, r1, #2
 8004234:	4641      	mov	r1, r8
 8004236:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800423a:	4641      	mov	r1, r8
 800423c:	008a      	lsls	r2, r1, #2
 800423e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004242:	f7fc f835 	bl	80002b0 <__aeabi_uldivmod>
 8004246:	4602      	mov	r2, r0
 8004248:	460b      	mov	r3, r1
 800424a:	4611      	mov	r1, r2
 800424c:	4b38      	ldr	r3, [pc, #224]	@ (8004330 <UART_SetConfig+0x4e4>)
 800424e:	fba3 2301 	umull	r2, r3, r3, r1
 8004252:	095b      	lsrs	r3, r3, #5
 8004254:	2264      	movs	r2, #100	@ 0x64
 8004256:	fb02 f303 	mul.w	r3, r2, r3
 800425a:	1acb      	subs	r3, r1, r3
 800425c:	011b      	lsls	r3, r3, #4
 800425e:	3332      	adds	r3, #50	@ 0x32
 8004260:	4a33      	ldr	r2, [pc, #204]	@ (8004330 <UART_SetConfig+0x4e4>)
 8004262:	fba2 2303 	umull	r2, r3, r2, r3
 8004266:	095b      	lsrs	r3, r3, #5
 8004268:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800426c:	441c      	add	r4, r3
 800426e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004272:	2200      	movs	r2, #0
 8004274:	673b      	str	r3, [r7, #112]	@ 0x70
 8004276:	677a      	str	r2, [r7, #116]	@ 0x74
 8004278:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800427c:	4642      	mov	r2, r8
 800427e:	464b      	mov	r3, r9
 8004280:	1891      	adds	r1, r2, r2
 8004282:	60b9      	str	r1, [r7, #8]
 8004284:	415b      	adcs	r3, r3
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800428c:	4641      	mov	r1, r8
 800428e:	1851      	adds	r1, r2, r1
 8004290:	6039      	str	r1, [r7, #0]
 8004292:	4649      	mov	r1, r9
 8004294:	414b      	adcs	r3, r1
 8004296:	607b      	str	r3, [r7, #4]
 8004298:	f04f 0200 	mov.w	r2, #0
 800429c:	f04f 0300 	mov.w	r3, #0
 80042a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80042a4:	4659      	mov	r1, fp
 80042a6:	00cb      	lsls	r3, r1, #3
 80042a8:	4651      	mov	r1, sl
 80042aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80042ae:	4651      	mov	r1, sl
 80042b0:	00ca      	lsls	r2, r1, #3
 80042b2:	4610      	mov	r0, r2
 80042b4:	4619      	mov	r1, r3
 80042b6:	4603      	mov	r3, r0
 80042b8:	4642      	mov	r2, r8
 80042ba:	189b      	adds	r3, r3, r2
 80042bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80042be:	464b      	mov	r3, r9
 80042c0:	460a      	mov	r2, r1
 80042c2:	eb42 0303 	adc.w	r3, r2, r3
 80042c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80042c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	2200      	movs	r2, #0
 80042d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80042d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80042d4:	f04f 0200 	mov.w	r2, #0
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80042e0:	4649      	mov	r1, r9
 80042e2:	008b      	lsls	r3, r1, #2
 80042e4:	4641      	mov	r1, r8
 80042e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80042ea:	4641      	mov	r1, r8
 80042ec:	008a      	lsls	r2, r1, #2
 80042ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80042f2:	f7fb ffdd 	bl	80002b0 <__aeabi_uldivmod>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004330 <UART_SetConfig+0x4e4>)
 80042fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004300:	095b      	lsrs	r3, r3, #5
 8004302:	2164      	movs	r1, #100	@ 0x64
 8004304:	fb01 f303 	mul.w	r3, r1, r3
 8004308:	1ad3      	subs	r3, r2, r3
 800430a:	011b      	lsls	r3, r3, #4
 800430c:	3332      	adds	r3, #50	@ 0x32
 800430e:	4a08      	ldr	r2, [pc, #32]	@ (8004330 <UART_SetConfig+0x4e4>)
 8004310:	fba2 2303 	umull	r2, r3, r2, r3
 8004314:	095b      	lsrs	r3, r3, #5
 8004316:	f003 020f 	and.w	r2, r3, #15
 800431a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	4422      	add	r2, r4
 8004322:	609a      	str	r2, [r3, #8]
}
 8004324:	bf00      	nop
 8004326:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800432a:	46bd      	mov	sp, r7
 800432c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004330:	51eb851f 	.word	0x51eb851f

08004334 <std>:
 8004334:	2300      	movs	r3, #0
 8004336:	b510      	push	{r4, lr}
 8004338:	4604      	mov	r4, r0
 800433a:	e9c0 3300 	strd	r3, r3, [r0]
 800433e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004342:	6083      	str	r3, [r0, #8]
 8004344:	8181      	strh	r1, [r0, #12]
 8004346:	6643      	str	r3, [r0, #100]	@ 0x64
 8004348:	81c2      	strh	r2, [r0, #14]
 800434a:	6183      	str	r3, [r0, #24]
 800434c:	4619      	mov	r1, r3
 800434e:	2208      	movs	r2, #8
 8004350:	305c      	adds	r0, #92	@ 0x5c
 8004352:	f000 fa2f 	bl	80047b4 <memset>
 8004356:	4b0d      	ldr	r3, [pc, #52]	@ (800438c <std+0x58>)
 8004358:	6263      	str	r3, [r4, #36]	@ 0x24
 800435a:	4b0d      	ldr	r3, [pc, #52]	@ (8004390 <std+0x5c>)
 800435c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800435e:	4b0d      	ldr	r3, [pc, #52]	@ (8004394 <std+0x60>)
 8004360:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004362:	4b0d      	ldr	r3, [pc, #52]	@ (8004398 <std+0x64>)
 8004364:	6323      	str	r3, [r4, #48]	@ 0x30
 8004366:	4b0d      	ldr	r3, [pc, #52]	@ (800439c <std+0x68>)
 8004368:	6224      	str	r4, [r4, #32]
 800436a:	429c      	cmp	r4, r3
 800436c:	d006      	beq.n	800437c <std+0x48>
 800436e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004372:	4294      	cmp	r4, r2
 8004374:	d002      	beq.n	800437c <std+0x48>
 8004376:	33d0      	adds	r3, #208	@ 0xd0
 8004378:	429c      	cmp	r4, r3
 800437a:	d105      	bne.n	8004388 <std+0x54>
 800437c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004380:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004384:	f000 ba8e 	b.w	80048a4 <__retarget_lock_init_recursive>
 8004388:	bd10      	pop	{r4, pc}
 800438a:	bf00      	nop
 800438c:	08004605 	.word	0x08004605
 8004390:	08004627 	.word	0x08004627
 8004394:	0800465f 	.word	0x0800465f
 8004398:	08004683 	.word	0x08004683
 800439c:	200004a0 	.word	0x200004a0

080043a0 <stdio_exit_handler>:
 80043a0:	4a02      	ldr	r2, [pc, #8]	@ (80043ac <stdio_exit_handler+0xc>)
 80043a2:	4903      	ldr	r1, [pc, #12]	@ (80043b0 <stdio_exit_handler+0x10>)
 80043a4:	4803      	ldr	r0, [pc, #12]	@ (80043b4 <stdio_exit_handler+0x14>)
 80043a6:	f000 b869 	b.w	800447c <_fwalk_sglue>
 80043aa:	bf00      	nop
 80043ac:	2000000c 	.word	0x2000000c
 80043b0:	0800540d 	.word	0x0800540d
 80043b4:	2000001c 	.word	0x2000001c

080043b8 <cleanup_stdio>:
 80043b8:	6841      	ldr	r1, [r0, #4]
 80043ba:	4b0c      	ldr	r3, [pc, #48]	@ (80043ec <cleanup_stdio+0x34>)
 80043bc:	4299      	cmp	r1, r3
 80043be:	b510      	push	{r4, lr}
 80043c0:	4604      	mov	r4, r0
 80043c2:	d001      	beq.n	80043c8 <cleanup_stdio+0x10>
 80043c4:	f001 f822 	bl	800540c <_fflush_r>
 80043c8:	68a1      	ldr	r1, [r4, #8]
 80043ca:	4b09      	ldr	r3, [pc, #36]	@ (80043f0 <cleanup_stdio+0x38>)
 80043cc:	4299      	cmp	r1, r3
 80043ce:	d002      	beq.n	80043d6 <cleanup_stdio+0x1e>
 80043d0:	4620      	mov	r0, r4
 80043d2:	f001 f81b 	bl	800540c <_fflush_r>
 80043d6:	68e1      	ldr	r1, [r4, #12]
 80043d8:	4b06      	ldr	r3, [pc, #24]	@ (80043f4 <cleanup_stdio+0x3c>)
 80043da:	4299      	cmp	r1, r3
 80043dc:	d004      	beq.n	80043e8 <cleanup_stdio+0x30>
 80043de:	4620      	mov	r0, r4
 80043e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80043e4:	f001 b812 	b.w	800540c <_fflush_r>
 80043e8:	bd10      	pop	{r4, pc}
 80043ea:	bf00      	nop
 80043ec:	200004a0 	.word	0x200004a0
 80043f0:	20000508 	.word	0x20000508
 80043f4:	20000570 	.word	0x20000570

080043f8 <global_stdio_init.part.0>:
 80043f8:	b510      	push	{r4, lr}
 80043fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004428 <global_stdio_init.part.0+0x30>)
 80043fc:	4c0b      	ldr	r4, [pc, #44]	@ (800442c <global_stdio_init.part.0+0x34>)
 80043fe:	4a0c      	ldr	r2, [pc, #48]	@ (8004430 <global_stdio_init.part.0+0x38>)
 8004400:	601a      	str	r2, [r3, #0]
 8004402:	4620      	mov	r0, r4
 8004404:	2200      	movs	r2, #0
 8004406:	2104      	movs	r1, #4
 8004408:	f7ff ff94 	bl	8004334 <std>
 800440c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004410:	2201      	movs	r2, #1
 8004412:	2109      	movs	r1, #9
 8004414:	f7ff ff8e 	bl	8004334 <std>
 8004418:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800441c:	2202      	movs	r2, #2
 800441e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004422:	2112      	movs	r1, #18
 8004424:	f7ff bf86 	b.w	8004334 <std>
 8004428:	200005d8 	.word	0x200005d8
 800442c:	200004a0 	.word	0x200004a0
 8004430:	080043a1 	.word	0x080043a1

08004434 <__sfp_lock_acquire>:
 8004434:	4801      	ldr	r0, [pc, #4]	@ (800443c <__sfp_lock_acquire+0x8>)
 8004436:	f000 ba36 	b.w	80048a6 <__retarget_lock_acquire_recursive>
 800443a:	bf00      	nop
 800443c:	200005e1 	.word	0x200005e1

08004440 <__sfp_lock_release>:
 8004440:	4801      	ldr	r0, [pc, #4]	@ (8004448 <__sfp_lock_release+0x8>)
 8004442:	f000 ba31 	b.w	80048a8 <__retarget_lock_release_recursive>
 8004446:	bf00      	nop
 8004448:	200005e1 	.word	0x200005e1

0800444c <__sinit>:
 800444c:	b510      	push	{r4, lr}
 800444e:	4604      	mov	r4, r0
 8004450:	f7ff fff0 	bl	8004434 <__sfp_lock_acquire>
 8004454:	6a23      	ldr	r3, [r4, #32]
 8004456:	b11b      	cbz	r3, 8004460 <__sinit+0x14>
 8004458:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800445c:	f7ff bff0 	b.w	8004440 <__sfp_lock_release>
 8004460:	4b04      	ldr	r3, [pc, #16]	@ (8004474 <__sinit+0x28>)
 8004462:	6223      	str	r3, [r4, #32]
 8004464:	4b04      	ldr	r3, [pc, #16]	@ (8004478 <__sinit+0x2c>)
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d1f5      	bne.n	8004458 <__sinit+0xc>
 800446c:	f7ff ffc4 	bl	80043f8 <global_stdio_init.part.0>
 8004470:	e7f2      	b.n	8004458 <__sinit+0xc>
 8004472:	bf00      	nop
 8004474:	080043b9 	.word	0x080043b9
 8004478:	200005d8 	.word	0x200005d8

0800447c <_fwalk_sglue>:
 800447c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004480:	4607      	mov	r7, r0
 8004482:	4688      	mov	r8, r1
 8004484:	4614      	mov	r4, r2
 8004486:	2600      	movs	r6, #0
 8004488:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800448c:	f1b9 0901 	subs.w	r9, r9, #1
 8004490:	d505      	bpl.n	800449e <_fwalk_sglue+0x22>
 8004492:	6824      	ldr	r4, [r4, #0]
 8004494:	2c00      	cmp	r4, #0
 8004496:	d1f7      	bne.n	8004488 <_fwalk_sglue+0xc>
 8004498:	4630      	mov	r0, r6
 800449a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800449e:	89ab      	ldrh	r3, [r5, #12]
 80044a0:	2b01      	cmp	r3, #1
 80044a2:	d907      	bls.n	80044b4 <_fwalk_sglue+0x38>
 80044a4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80044a8:	3301      	adds	r3, #1
 80044aa:	d003      	beq.n	80044b4 <_fwalk_sglue+0x38>
 80044ac:	4629      	mov	r1, r5
 80044ae:	4638      	mov	r0, r7
 80044b0:	47c0      	blx	r8
 80044b2:	4306      	orrs	r6, r0
 80044b4:	3568      	adds	r5, #104	@ 0x68
 80044b6:	e7e9      	b.n	800448c <_fwalk_sglue+0x10>

080044b8 <iprintf>:
 80044b8:	b40f      	push	{r0, r1, r2, r3}
 80044ba:	b507      	push	{r0, r1, r2, lr}
 80044bc:	4906      	ldr	r1, [pc, #24]	@ (80044d8 <iprintf+0x20>)
 80044be:	ab04      	add	r3, sp, #16
 80044c0:	6808      	ldr	r0, [r1, #0]
 80044c2:	f853 2b04 	ldr.w	r2, [r3], #4
 80044c6:	6881      	ldr	r1, [r0, #8]
 80044c8:	9301      	str	r3, [sp, #4]
 80044ca:	f000 fc77 	bl	8004dbc <_vfiprintf_r>
 80044ce:	b003      	add	sp, #12
 80044d0:	f85d eb04 	ldr.w	lr, [sp], #4
 80044d4:	b004      	add	sp, #16
 80044d6:	4770      	bx	lr
 80044d8:	20000018 	.word	0x20000018

080044dc <_puts_r>:
 80044dc:	6a03      	ldr	r3, [r0, #32]
 80044de:	b570      	push	{r4, r5, r6, lr}
 80044e0:	6884      	ldr	r4, [r0, #8]
 80044e2:	4605      	mov	r5, r0
 80044e4:	460e      	mov	r6, r1
 80044e6:	b90b      	cbnz	r3, 80044ec <_puts_r+0x10>
 80044e8:	f7ff ffb0 	bl	800444c <__sinit>
 80044ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80044ee:	07db      	lsls	r3, r3, #31
 80044f0:	d405      	bmi.n	80044fe <_puts_r+0x22>
 80044f2:	89a3      	ldrh	r3, [r4, #12]
 80044f4:	0598      	lsls	r0, r3, #22
 80044f6:	d402      	bmi.n	80044fe <_puts_r+0x22>
 80044f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80044fa:	f000 f9d4 	bl	80048a6 <__retarget_lock_acquire_recursive>
 80044fe:	89a3      	ldrh	r3, [r4, #12]
 8004500:	0719      	lsls	r1, r3, #28
 8004502:	d502      	bpl.n	800450a <_puts_r+0x2e>
 8004504:	6923      	ldr	r3, [r4, #16]
 8004506:	2b00      	cmp	r3, #0
 8004508:	d135      	bne.n	8004576 <_puts_r+0x9a>
 800450a:	4621      	mov	r1, r4
 800450c:	4628      	mov	r0, r5
 800450e:	f000 f8fb 	bl	8004708 <__swsetup_r>
 8004512:	b380      	cbz	r0, 8004576 <_puts_r+0x9a>
 8004514:	f04f 35ff 	mov.w	r5, #4294967295
 8004518:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800451a:	07da      	lsls	r2, r3, #31
 800451c:	d405      	bmi.n	800452a <_puts_r+0x4e>
 800451e:	89a3      	ldrh	r3, [r4, #12]
 8004520:	059b      	lsls	r3, r3, #22
 8004522:	d402      	bmi.n	800452a <_puts_r+0x4e>
 8004524:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004526:	f000 f9bf 	bl	80048a8 <__retarget_lock_release_recursive>
 800452a:	4628      	mov	r0, r5
 800452c:	bd70      	pop	{r4, r5, r6, pc}
 800452e:	2b00      	cmp	r3, #0
 8004530:	da04      	bge.n	800453c <_puts_r+0x60>
 8004532:	69a2      	ldr	r2, [r4, #24]
 8004534:	429a      	cmp	r2, r3
 8004536:	dc17      	bgt.n	8004568 <_puts_r+0x8c>
 8004538:	290a      	cmp	r1, #10
 800453a:	d015      	beq.n	8004568 <_puts_r+0x8c>
 800453c:	6823      	ldr	r3, [r4, #0]
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	6022      	str	r2, [r4, #0]
 8004542:	7019      	strb	r1, [r3, #0]
 8004544:	68a3      	ldr	r3, [r4, #8]
 8004546:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800454a:	3b01      	subs	r3, #1
 800454c:	60a3      	str	r3, [r4, #8]
 800454e:	2900      	cmp	r1, #0
 8004550:	d1ed      	bne.n	800452e <_puts_r+0x52>
 8004552:	2b00      	cmp	r3, #0
 8004554:	da11      	bge.n	800457a <_puts_r+0x9e>
 8004556:	4622      	mov	r2, r4
 8004558:	210a      	movs	r1, #10
 800455a:	4628      	mov	r0, r5
 800455c:	f000 f895 	bl	800468a <__swbuf_r>
 8004560:	3001      	adds	r0, #1
 8004562:	d0d7      	beq.n	8004514 <_puts_r+0x38>
 8004564:	250a      	movs	r5, #10
 8004566:	e7d7      	b.n	8004518 <_puts_r+0x3c>
 8004568:	4622      	mov	r2, r4
 800456a:	4628      	mov	r0, r5
 800456c:	f000 f88d 	bl	800468a <__swbuf_r>
 8004570:	3001      	adds	r0, #1
 8004572:	d1e7      	bne.n	8004544 <_puts_r+0x68>
 8004574:	e7ce      	b.n	8004514 <_puts_r+0x38>
 8004576:	3e01      	subs	r6, #1
 8004578:	e7e4      	b.n	8004544 <_puts_r+0x68>
 800457a:	6823      	ldr	r3, [r4, #0]
 800457c:	1c5a      	adds	r2, r3, #1
 800457e:	6022      	str	r2, [r4, #0]
 8004580:	220a      	movs	r2, #10
 8004582:	701a      	strb	r2, [r3, #0]
 8004584:	e7ee      	b.n	8004564 <_puts_r+0x88>
	...

08004588 <puts>:
 8004588:	4b02      	ldr	r3, [pc, #8]	@ (8004594 <puts+0xc>)
 800458a:	4601      	mov	r1, r0
 800458c:	6818      	ldr	r0, [r3, #0]
 800458e:	f7ff bfa5 	b.w	80044dc <_puts_r>
 8004592:	bf00      	nop
 8004594:	20000018 	.word	0x20000018

08004598 <sniprintf>:
 8004598:	b40c      	push	{r2, r3}
 800459a:	b530      	push	{r4, r5, lr}
 800459c:	4b18      	ldr	r3, [pc, #96]	@ (8004600 <sniprintf+0x68>)
 800459e:	1e0c      	subs	r4, r1, #0
 80045a0:	681d      	ldr	r5, [r3, #0]
 80045a2:	b09d      	sub	sp, #116	@ 0x74
 80045a4:	da08      	bge.n	80045b8 <sniprintf+0x20>
 80045a6:	238b      	movs	r3, #139	@ 0x8b
 80045a8:	602b      	str	r3, [r5, #0]
 80045aa:	f04f 30ff 	mov.w	r0, #4294967295
 80045ae:	b01d      	add	sp, #116	@ 0x74
 80045b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80045b4:	b002      	add	sp, #8
 80045b6:	4770      	bx	lr
 80045b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80045bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80045c0:	f04f 0300 	mov.w	r3, #0
 80045c4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80045c6:	bf14      	ite	ne
 80045c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80045cc:	4623      	moveq	r3, r4
 80045ce:	9304      	str	r3, [sp, #16]
 80045d0:	9307      	str	r3, [sp, #28]
 80045d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80045d6:	9002      	str	r0, [sp, #8]
 80045d8:	9006      	str	r0, [sp, #24]
 80045da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80045de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80045e0:	ab21      	add	r3, sp, #132	@ 0x84
 80045e2:	a902      	add	r1, sp, #8
 80045e4:	4628      	mov	r0, r5
 80045e6:	9301      	str	r3, [sp, #4]
 80045e8:	f000 fac2 	bl	8004b70 <_svfiprintf_r>
 80045ec:	1c43      	adds	r3, r0, #1
 80045ee:	bfbc      	itt	lt
 80045f0:	238b      	movlt	r3, #139	@ 0x8b
 80045f2:	602b      	strlt	r3, [r5, #0]
 80045f4:	2c00      	cmp	r4, #0
 80045f6:	d0da      	beq.n	80045ae <sniprintf+0x16>
 80045f8:	9b02      	ldr	r3, [sp, #8]
 80045fa:	2200      	movs	r2, #0
 80045fc:	701a      	strb	r2, [r3, #0]
 80045fe:	e7d6      	b.n	80045ae <sniprintf+0x16>
 8004600:	20000018 	.word	0x20000018

08004604 <__sread>:
 8004604:	b510      	push	{r4, lr}
 8004606:	460c      	mov	r4, r1
 8004608:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800460c:	f000 f8fc 	bl	8004808 <_read_r>
 8004610:	2800      	cmp	r0, #0
 8004612:	bfab      	itete	ge
 8004614:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004616:	89a3      	ldrhlt	r3, [r4, #12]
 8004618:	181b      	addge	r3, r3, r0
 800461a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800461e:	bfac      	ite	ge
 8004620:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004622:	81a3      	strhlt	r3, [r4, #12]
 8004624:	bd10      	pop	{r4, pc}

08004626 <__swrite>:
 8004626:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800462a:	461f      	mov	r7, r3
 800462c:	898b      	ldrh	r3, [r1, #12]
 800462e:	05db      	lsls	r3, r3, #23
 8004630:	4605      	mov	r5, r0
 8004632:	460c      	mov	r4, r1
 8004634:	4616      	mov	r6, r2
 8004636:	d505      	bpl.n	8004644 <__swrite+0x1e>
 8004638:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800463c:	2302      	movs	r3, #2
 800463e:	2200      	movs	r2, #0
 8004640:	f000 f8d0 	bl	80047e4 <_lseek_r>
 8004644:	89a3      	ldrh	r3, [r4, #12]
 8004646:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800464a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800464e:	81a3      	strh	r3, [r4, #12]
 8004650:	4632      	mov	r2, r6
 8004652:	463b      	mov	r3, r7
 8004654:	4628      	mov	r0, r5
 8004656:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800465a:	f000 b8e7 	b.w	800482c <_write_r>

0800465e <__sseek>:
 800465e:	b510      	push	{r4, lr}
 8004660:	460c      	mov	r4, r1
 8004662:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004666:	f000 f8bd 	bl	80047e4 <_lseek_r>
 800466a:	1c43      	adds	r3, r0, #1
 800466c:	89a3      	ldrh	r3, [r4, #12]
 800466e:	bf15      	itete	ne
 8004670:	6560      	strne	r0, [r4, #84]	@ 0x54
 8004672:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8004676:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800467a:	81a3      	strheq	r3, [r4, #12]
 800467c:	bf18      	it	ne
 800467e:	81a3      	strhne	r3, [r4, #12]
 8004680:	bd10      	pop	{r4, pc}

08004682 <__sclose>:
 8004682:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004686:	f000 b89d 	b.w	80047c4 <_close_r>

0800468a <__swbuf_r>:
 800468a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800468c:	460e      	mov	r6, r1
 800468e:	4614      	mov	r4, r2
 8004690:	4605      	mov	r5, r0
 8004692:	b118      	cbz	r0, 800469c <__swbuf_r+0x12>
 8004694:	6a03      	ldr	r3, [r0, #32]
 8004696:	b90b      	cbnz	r3, 800469c <__swbuf_r+0x12>
 8004698:	f7ff fed8 	bl	800444c <__sinit>
 800469c:	69a3      	ldr	r3, [r4, #24]
 800469e:	60a3      	str	r3, [r4, #8]
 80046a0:	89a3      	ldrh	r3, [r4, #12]
 80046a2:	071a      	lsls	r2, r3, #28
 80046a4:	d501      	bpl.n	80046aa <__swbuf_r+0x20>
 80046a6:	6923      	ldr	r3, [r4, #16]
 80046a8:	b943      	cbnz	r3, 80046bc <__swbuf_r+0x32>
 80046aa:	4621      	mov	r1, r4
 80046ac:	4628      	mov	r0, r5
 80046ae:	f000 f82b 	bl	8004708 <__swsetup_r>
 80046b2:	b118      	cbz	r0, 80046bc <__swbuf_r+0x32>
 80046b4:	f04f 37ff 	mov.w	r7, #4294967295
 80046b8:	4638      	mov	r0, r7
 80046ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80046bc:	6823      	ldr	r3, [r4, #0]
 80046be:	6922      	ldr	r2, [r4, #16]
 80046c0:	1a98      	subs	r0, r3, r2
 80046c2:	6963      	ldr	r3, [r4, #20]
 80046c4:	b2f6      	uxtb	r6, r6
 80046c6:	4283      	cmp	r3, r0
 80046c8:	4637      	mov	r7, r6
 80046ca:	dc05      	bgt.n	80046d8 <__swbuf_r+0x4e>
 80046cc:	4621      	mov	r1, r4
 80046ce:	4628      	mov	r0, r5
 80046d0:	f000 fe9c 	bl	800540c <_fflush_r>
 80046d4:	2800      	cmp	r0, #0
 80046d6:	d1ed      	bne.n	80046b4 <__swbuf_r+0x2a>
 80046d8:	68a3      	ldr	r3, [r4, #8]
 80046da:	3b01      	subs	r3, #1
 80046dc:	60a3      	str	r3, [r4, #8]
 80046de:	6823      	ldr	r3, [r4, #0]
 80046e0:	1c5a      	adds	r2, r3, #1
 80046e2:	6022      	str	r2, [r4, #0]
 80046e4:	701e      	strb	r6, [r3, #0]
 80046e6:	6962      	ldr	r2, [r4, #20]
 80046e8:	1c43      	adds	r3, r0, #1
 80046ea:	429a      	cmp	r2, r3
 80046ec:	d004      	beq.n	80046f8 <__swbuf_r+0x6e>
 80046ee:	89a3      	ldrh	r3, [r4, #12]
 80046f0:	07db      	lsls	r3, r3, #31
 80046f2:	d5e1      	bpl.n	80046b8 <__swbuf_r+0x2e>
 80046f4:	2e0a      	cmp	r6, #10
 80046f6:	d1df      	bne.n	80046b8 <__swbuf_r+0x2e>
 80046f8:	4621      	mov	r1, r4
 80046fa:	4628      	mov	r0, r5
 80046fc:	f000 fe86 	bl	800540c <_fflush_r>
 8004700:	2800      	cmp	r0, #0
 8004702:	d0d9      	beq.n	80046b8 <__swbuf_r+0x2e>
 8004704:	e7d6      	b.n	80046b4 <__swbuf_r+0x2a>
	...

08004708 <__swsetup_r>:
 8004708:	b538      	push	{r3, r4, r5, lr}
 800470a:	4b29      	ldr	r3, [pc, #164]	@ (80047b0 <__swsetup_r+0xa8>)
 800470c:	4605      	mov	r5, r0
 800470e:	6818      	ldr	r0, [r3, #0]
 8004710:	460c      	mov	r4, r1
 8004712:	b118      	cbz	r0, 800471c <__swsetup_r+0x14>
 8004714:	6a03      	ldr	r3, [r0, #32]
 8004716:	b90b      	cbnz	r3, 800471c <__swsetup_r+0x14>
 8004718:	f7ff fe98 	bl	800444c <__sinit>
 800471c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004720:	0719      	lsls	r1, r3, #28
 8004722:	d422      	bmi.n	800476a <__swsetup_r+0x62>
 8004724:	06da      	lsls	r2, r3, #27
 8004726:	d407      	bmi.n	8004738 <__swsetup_r+0x30>
 8004728:	2209      	movs	r2, #9
 800472a:	602a      	str	r2, [r5, #0]
 800472c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004730:	81a3      	strh	r3, [r4, #12]
 8004732:	f04f 30ff 	mov.w	r0, #4294967295
 8004736:	e033      	b.n	80047a0 <__swsetup_r+0x98>
 8004738:	0758      	lsls	r0, r3, #29
 800473a:	d512      	bpl.n	8004762 <__swsetup_r+0x5a>
 800473c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800473e:	b141      	cbz	r1, 8004752 <__swsetup_r+0x4a>
 8004740:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004744:	4299      	cmp	r1, r3
 8004746:	d002      	beq.n	800474e <__swsetup_r+0x46>
 8004748:	4628      	mov	r0, r5
 800474a:	f000 f8bd 	bl	80048c8 <_free_r>
 800474e:	2300      	movs	r3, #0
 8004750:	6363      	str	r3, [r4, #52]	@ 0x34
 8004752:	89a3      	ldrh	r3, [r4, #12]
 8004754:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004758:	81a3      	strh	r3, [r4, #12]
 800475a:	2300      	movs	r3, #0
 800475c:	6063      	str	r3, [r4, #4]
 800475e:	6923      	ldr	r3, [r4, #16]
 8004760:	6023      	str	r3, [r4, #0]
 8004762:	89a3      	ldrh	r3, [r4, #12]
 8004764:	f043 0308 	orr.w	r3, r3, #8
 8004768:	81a3      	strh	r3, [r4, #12]
 800476a:	6923      	ldr	r3, [r4, #16]
 800476c:	b94b      	cbnz	r3, 8004782 <__swsetup_r+0x7a>
 800476e:	89a3      	ldrh	r3, [r4, #12]
 8004770:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004774:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004778:	d003      	beq.n	8004782 <__swsetup_r+0x7a>
 800477a:	4621      	mov	r1, r4
 800477c:	4628      	mov	r0, r5
 800477e:	f000 fe93 	bl	80054a8 <__smakebuf_r>
 8004782:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004786:	f013 0201 	ands.w	r2, r3, #1
 800478a:	d00a      	beq.n	80047a2 <__swsetup_r+0x9a>
 800478c:	2200      	movs	r2, #0
 800478e:	60a2      	str	r2, [r4, #8]
 8004790:	6962      	ldr	r2, [r4, #20]
 8004792:	4252      	negs	r2, r2
 8004794:	61a2      	str	r2, [r4, #24]
 8004796:	6922      	ldr	r2, [r4, #16]
 8004798:	b942      	cbnz	r2, 80047ac <__swsetup_r+0xa4>
 800479a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800479e:	d1c5      	bne.n	800472c <__swsetup_r+0x24>
 80047a0:	bd38      	pop	{r3, r4, r5, pc}
 80047a2:	0799      	lsls	r1, r3, #30
 80047a4:	bf58      	it	pl
 80047a6:	6962      	ldrpl	r2, [r4, #20]
 80047a8:	60a2      	str	r2, [r4, #8]
 80047aa:	e7f4      	b.n	8004796 <__swsetup_r+0x8e>
 80047ac:	2000      	movs	r0, #0
 80047ae:	e7f7      	b.n	80047a0 <__swsetup_r+0x98>
 80047b0:	20000018 	.word	0x20000018

080047b4 <memset>:
 80047b4:	4402      	add	r2, r0
 80047b6:	4603      	mov	r3, r0
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d100      	bne.n	80047be <memset+0xa>
 80047bc:	4770      	bx	lr
 80047be:	f803 1b01 	strb.w	r1, [r3], #1
 80047c2:	e7f9      	b.n	80047b8 <memset+0x4>

080047c4 <_close_r>:
 80047c4:	b538      	push	{r3, r4, r5, lr}
 80047c6:	4d06      	ldr	r5, [pc, #24]	@ (80047e0 <_close_r+0x1c>)
 80047c8:	2300      	movs	r3, #0
 80047ca:	4604      	mov	r4, r0
 80047cc:	4608      	mov	r0, r1
 80047ce:	602b      	str	r3, [r5, #0]
 80047d0:	f7fc fe27 	bl	8001422 <_close>
 80047d4:	1c43      	adds	r3, r0, #1
 80047d6:	d102      	bne.n	80047de <_close_r+0x1a>
 80047d8:	682b      	ldr	r3, [r5, #0]
 80047da:	b103      	cbz	r3, 80047de <_close_r+0x1a>
 80047dc:	6023      	str	r3, [r4, #0]
 80047de:	bd38      	pop	{r3, r4, r5, pc}
 80047e0:	200005dc 	.word	0x200005dc

080047e4 <_lseek_r>:
 80047e4:	b538      	push	{r3, r4, r5, lr}
 80047e6:	4d07      	ldr	r5, [pc, #28]	@ (8004804 <_lseek_r+0x20>)
 80047e8:	4604      	mov	r4, r0
 80047ea:	4608      	mov	r0, r1
 80047ec:	4611      	mov	r1, r2
 80047ee:	2200      	movs	r2, #0
 80047f0:	602a      	str	r2, [r5, #0]
 80047f2:	461a      	mov	r2, r3
 80047f4:	f7fc fe3c 	bl	8001470 <_lseek>
 80047f8:	1c43      	adds	r3, r0, #1
 80047fa:	d102      	bne.n	8004802 <_lseek_r+0x1e>
 80047fc:	682b      	ldr	r3, [r5, #0]
 80047fe:	b103      	cbz	r3, 8004802 <_lseek_r+0x1e>
 8004800:	6023      	str	r3, [r4, #0]
 8004802:	bd38      	pop	{r3, r4, r5, pc}
 8004804:	200005dc 	.word	0x200005dc

08004808 <_read_r>:
 8004808:	b538      	push	{r3, r4, r5, lr}
 800480a:	4d07      	ldr	r5, [pc, #28]	@ (8004828 <_read_r+0x20>)
 800480c:	4604      	mov	r4, r0
 800480e:	4608      	mov	r0, r1
 8004810:	4611      	mov	r1, r2
 8004812:	2200      	movs	r2, #0
 8004814:	602a      	str	r2, [r5, #0]
 8004816:	461a      	mov	r2, r3
 8004818:	f7fc fde6 	bl	80013e8 <_read>
 800481c:	1c43      	adds	r3, r0, #1
 800481e:	d102      	bne.n	8004826 <_read_r+0x1e>
 8004820:	682b      	ldr	r3, [r5, #0]
 8004822:	b103      	cbz	r3, 8004826 <_read_r+0x1e>
 8004824:	6023      	str	r3, [r4, #0]
 8004826:	bd38      	pop	{r3, r4, r5, pc}
 8004828:	200005dc 	.word	0x200005dc

0800482c <_write_r>:
 800482c:	b538      	push	{r3, r4, r5, lr}
 800482e:	4d07      	ldr	r5, [pc, #28]	@ (800484c <_write_r+0x20>)
 8004830:	4604      	mov	r4, r0
 8004832:	4608      	mov	r0, r1
 8004834:	4611      	mov	r1, r2
 8004836:	2200      	movs	r2, #0
 8004838:	602a      	str	r2, [r5, #0]
 800483a:	461a      	mov	r2, r3
 800483c:	f7fc fb18 	bl	8000e70 <_write>
 8004840:	1c43      	adds	r3, r0, #1
 8004842:	d102      	bne.n	800484a <_write_r+0x1e>
 8004844:	682b      	ldr	r3, [r5, #0]
 8004846:	b103      	cbz	r3, 800484a <_write_r+0x1e>
 8004848:	6023      	str	r3, [r4, #0]
 800484a:	bd38      	pop	{r3, r4, r5, pc}
 800484c:	200005dc 	.word	0x200005dc

08004850 <__errno>:
 8004850:	4b01      	ldr	r3, [pc, #4]	@ (8004858 <__errno+0x8>)
 8004852:	6818      	ldr	r0, [r3, #0]
 8004854:	4770      	bx	lr
 8004856:	bf00      	nop
 8004858:	20000018 	.word	0x20000018

0800485c <__libc_init_array>:
 800485c:	b570      	push	{r4, r5, r6, lr}
 800485e:	4d0d      	ldr	r5, [pc, #52]	@ (8004894 <__libc_init_array+0x38>)
 8004860:	4c0d      	ldr	r4, [pc, #52]	@ (8004898 <__libc_init_array+0x3c>)
 8004862:	1b64      	subs	r4, r4, r5
 8004864:	10a4      	asrs	r4, r4, #2
 8004866:	2600      	movs	r6, #0
 8004868:	42a6      	cmp	r6, r4
 800486a:	d109      	bne.n	8004880 <__libc_init_array+0x24>
 800486c:	4d0b      	ldr	r5, [pc, #44]	@ (800489c <__libc_init_array+0x40>)
 800486e:	4c0c      	ldr	r4, [pc, #48]	@ (80048a0 <__libc_init_array+0x44>)
 8004870:	f000 fed8 	bl	8005624 <_init>
 8004874:	1b64      	subs	r4, r4, r5
 8004876:	10a4      	asrs	r4, r4, #2
 8004878:	2600      	movs	r6, #0
 800487a:	42a6      	cmp	r6, r4
 800487c:	d105      	bne.n	800488a <__libc_init_array+0x2e>
 800487e:	bd70      	pop	{r4, r5, r6, pc}
 8004880:	f855 3b04 	ldr.w	r3, [r5], #4
 8004884:	4798      	blx	r3
 8004886:	3601      	adds	r6, #1
 8004888:	e7ee      	b.n	8004868 <__libc_init_array+0xc>
 800488a:	f855 3b04 	ldr.w	r3, [r5], #4
 800488e:	4798      	blx	r3
 8004890:	3601      	adds	r6, #1
 8004892:	e7f2      	b.n	800487a <__libc_init_array+0x1e>
 8004894:	08005710 	.word	0x08005710
 8004898:	08005710 	.word	0x08005710
 800489c:	08005710 	.word	0x08005710
 80048a0:	08005714 	.word	0x08005714

080048a4 <__retarget_lock_init_recursive>:
 80048a4:	4770      	bx	lr

080048a6 <__retarget_lock_acquire_recursive>:
 80048a6:	4770      	bx	lr

080048a8 <__retarget_lock_release_recursive>:
 80048a8:	4770      	bx	lr

080048aa <memcpy>:
 80048aa:	440a      	add	r2, r1
 80048ac:	4291      	cmp	r1, r2
 80048ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80048b2:	d100      	bne.n	80048b6 <memcpy+0xc>
 80048b4:	4770      	bx	lr
 80048b6:	b510      	push	{r4, lr}
 80048b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80048bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80048c0:	4291      	cmp	r1, r2
 80048c2:	d1f9      	bne.n	80048b8 <memcpy+0xe>
 80048c4:	bd10      	pop	{r4, pc}
	...

080048c8 <_free_r>:
 80048c8:	b538      	push	{r3, r4, r5, lr}
 80048ca:	4605      	mov	r5, r0
 80048cc:	2900      	cmp	r1, #0
 80048ce:	d041      	beq.n	8004954 <_free_r+0x8c>
 80048d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80048d4:	1f0c      	subs	r4, r1, #4
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	bfb8      	it	lt
 80048da:	18e4      	addlt	r4, r4, r3
 80048dc:	f000 f8e0 	bl	8004aa0 <__malloc_lock>
 80048e0:	4a1d      	ldr	r2, [pc, #116]	@ (8004958 <_free_r+0x90>)
 80048e2:	6813      	ldr	r3, [r2, #0]
 80048e4:	b933      	cbnz	r3, 80048f4 <_free_r+0x2c>
 80048e6:	6063      	str	r3, [r4, #4]
 80048e8:	6014      	str	r4, [r2, #0]
 80048ea:	4628      	mov	r0, r5
 80048ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80048f0:	f000 b8dc 	b.w	8004aac <__malloc_unlock>
 80048f4:	42a3      	cmp	r3, r4
 80048f6:	d908      	bls.n	800490a <_free_r+0x42>
 80048f8:	6820      	ldr	r0, [r4, #0]
 80048fa:	1821      	adds	r1, r4, r0
 80048fc:	428b      	cmp	r3, r1
 80048fe:	bf01      	itttt	eq
 8004900:	6819      	ldreq	r1, [r3, #0]
 8004902:	685b      	ldreq	r3, [r3, #4]
 8004904:	1809      	addeq	r1, r1, r0
 8004906:	6021      	streq	r1, [r4, #0]
 8004908:	e7ed      	b.n	80048e6 <_free_r+0x1e>
 800490a:	461a      	mov	r2, r3
 800490c:	685b      	ldr	r3, [r3, #4]
 800490e:	b10b      	cbz	r3, 8004914 <_free_r+0x4c>
 8004910:	42a3      	cmp	r3, r4
 8004912:	d9fa      	bls.n	800490a <_free_r+0x42>
 8004914:	6811      	ldr	r1, [r2, #0]
 8004916:	1850      	adds	r0, r2, r1
 8004918:	42a0      	cmp	r0, r4
 800491a:	d10b      	bne.n	8004934 <_free_r+0x6c>
 800491c:	6820      	ldr	r0, [r4, #0]
 800491e:	4401      	add	r1, r0
 8004920:	1850      	adds	r0, r2, r1
 8004922:	4283      	cmp	r3, r0
 8004924:	6011      	str	r1, [r2, #0]
 8004926:	d1e0      	bne.n	80048ea <_free_r+0x22>
 8004928:	6818      	ldr	r0, [r3, #0]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	6053      	str	r3, [r2, #4]
 800492e:	4408      	add	r0, r1
 8004930:	6010      	str	r0, [r2, #0]
 8004932:	e7da      	b.n	80048ea <_free_r+0x22>
 8004934:	d902      	bls.n	800493c <_free_r+0x74>
 8004936:	230c      	movs	r3, #12
 8004938:	602b      	str	r3, [r5, #0]
 800493a:	e7d6      	b.n	80048ea <_free_r+0x22>
 800493c:	6820      	ldr	r0, [r4, #0]
 800493e:	1821      	adds	r1, r4, r0
 8004940:	428b      	cmp	r3, r1
 8004942:	bf04      	itt	eq
 8004944:	6819      	ldreq	r1, [r3, #0]
 8004946:	685b      	ldreq	r3, [r3, #4]
 8004948:	6063      	str	r3, [r4, #4]
 800494a:	bf04      	itt	eq
 800494c:	1809      	addeq	r1, r1, r0
 800494e:	6021      	streq	r1, [r4, #0]
 8004950:	6054      	str	r4, [r2, #4]
 8004952:	e7ca      	b.n	80048ea <_free_r+0x22>
 8004954:	bd38      	pop	{r3, r4, r5, pc}
 8004956:	bf00      	nop
 8004958:	200005e8 	.word	0x200005e8

0800495c <sbrk_aligned>:
 800495c:	b570      	push	{r4, r5, r6, lr}
 800495e:	4e0f      	ldr	r6, [pc, #60]	@ (800499c <sbrk_aligned+0x40>)
 8004960:	460c      	mov	r4, r1
 8004962:	6831      	ldr	r1, [r6, #0]
 8004964:	4605      	mov	r5, r0
 8004966:	b911      	cbnz	r1, 800496e <sbrk_aligned+0x12>
 8004968:	f000 fe16 	bl	8005598 <_sbrk_r>
 800496c:	6030      	str	r0, [r6, #0]
 800496e:	4621      	mov	r1, r4
 8004970:	4628      	mov	r0, r5
 8004972:	f000 fe11 	bl	8005598 <_sbrk_r>
 8004976:	1c43      	adds	r3, r0, #1
 8004978:	d103      	bne.n	8004982 <sbrk_aligned+0x26>
 800497a:	f04f 34ff 	mov.w	r4, #4294967295
 800497e:	4620      	mov	r0, r4
 8004980:	bd70      	pop	{r4, r5, r6, pc}
 8004982:	1cc4      	adds	r4, r0, #3
 8004984:	f024 0403 	bic.w	r4, r4, #3
 8004988:	42a0      	cmp	r0, r4
 800498a:	d0f8      	beq.n	800497e <sbrk_aligned+0x22>
 800498c:	1a21      	subs	r1, r4, r0
 800498e:	4628      	mov	r0, r5
 8004990:	f000 fe02 	bl	8005598 <_sbrk_r>
 8004994:	3001      	adds	r0, #1
 8004996:	d1f2      	bne.n	800497e <sbrk_aligned+0x22>
 8004998:	e7ef      	b.n	800497a <sbrk_aligned+0x1e>
 800499a:	bf00      	nop
 800499c:	200005e4 	.word	0x200005e4

080049a0 <_malloc_r>:
 80049a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80049a4:	1ccd      	adds	r5, r1, #3
 80049a6:	f025 0503 	bic.w	r5, r5, #3
 80049aa:	3508      	adds	r5, #8
 80049ac:	2d0c      	cmp	r5, #12
 80049ae:	bf38      	it	cc
 80049b0:	250c      	movcc	r5, #12
 80049b2:	2d00      	cmp	r5, #0
 80049b4:	4606      	mov	r6, r0
 80049b6:	db01      	blt.n	80049bc <_malloc_r+0x1c>
 80049b8:	42a9      	cmp	r1, r5
 80049ba:	d904      	bls.n	80049c6 <_malloc_r+0x26>
 80049bc:	230c      	movs	r3, #12
 80049be:	6033      	str	r3, [r6, #0]
 80049c0:	2000      	movs	r0, #0
 80049c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80049c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004a9c <_malloc_r+0xfc>
 80049ca:	f000 f869 	bl	8004aa0 <__malloc_lock>
 80049ce:	f8d8 3000 	ldr.w	r3, [r8]
 80049d2:	461c      	mov	r4, r3
 80049d4:	bb44      	cbnz	r4, 8004a28 <_malloc_r+0x88>
 80049d6:	4629      	mov	r1, r5
 80049d8:	4630      	mov	r0, r6
 80049da:	f7ff ffbf 	bl	800495c <sbrk_aligned>
 80049de:	1c43      	adds	r3, r0, #1
 80049e0:	4604      	mov	r4, r0
 80049e2:	d158      	bne.n	8004a96 <_malloc_r+0xf6>
 80049e4:	f8d8 4000 	ldr.w	r4, [r8]
 80049e8:	4627      	mov	r7, r4
 80049ea:	2f00      	cmp	r7, #0
 80049ec:	d143      	bne.n	8004a76 <_malloc_r+0xd6>
 80049ee:	2c00      	cmp	r4, #0
 80049f0:	d04b      	beq.n	8004a8a <_malloc_r+0xea>
 80049f2:	6823      	ldr	r3, [r4, #0]
 80049f4:	4639      	mov	r1, r7
 80049f6:	4630      	mov	r0, r6
 80049f8:	eb04 0903 	add.w	r9, r4, r3
 80049fc:	f000 fdcc 	bl	8005598 <_sbrk_r>
 8004a00:	4581      	cmp	r9, r0
 8004a02:	d142      	bne.n	8004a8a <_malloc_r+0xea>
 8004a04:	6821      	ldr	r1, [r4, #0]
 8004a06:	1a6d      	subs	r5, r5, r1
 8004a08:	4629      	mov	r1, r5
 8004a0a:	4630      	mov	r0, r6
 8004a0c:	f7ff ffa6 	bl	800495c <sbrk_aligned>
 8004a10:	3001      	adds	r0, #1
 8004a12:	d03a      	beq.n	8004a8a <_malloc_r+0xea>
 8004a14:	6823      	ldr	r3, [r4, #0]
 8004a16:	442b      	add	r3, r5
 8004a18:	6023      	str	r3, [r4, #0]
 8004a1a:	f8d8 3000 	ldr.w	r3, [r8]
 8004a1e:	685a      	ldr	r2, [r3, #4]
 8004a20:	bb62      	cbnz	r2, 8004a7c <_malloc_r+0xdc>
 8004a22:	f8c8 7000 	str.w	r7, [r8]
 8004a26:	e00f      	b.n	8004a48 <_malloc_r+0xa8>
 8004a28:	6822      	ldr	r2, [r4, #0]
 8004a2a:	1b52      	subs	r2, r2, r5
 8004a2c:	d420      	bmi.n	8004a70 <_malloc_r+0xd0>
 8004a2e:	2a0b      	cmp	r2, #11
 8004a30:	d917      	bls.n	8004a62 <_malloc_r+0xc2>
 8004a32:	1961      	adds	r1, r4, r5
 8004a34:	42a3      	cmp	r3, r4
 8004a36:	6025      	str	r5, [r4, #0]
 8004a38:	bf18      	it	ne
 8004a3a:	6059      	strne	r1, [r3, #4]
 8004a3c:	6863      	ldr	r3, [r4, #4]
 8004a3e:	bf08      	it	eq
 8004a40:	f8c8 1000 	streq.w	r1, [r8]
 8004a44:	5162      	str	r2, [r4, r5]
 8004a46:	604b      	str	r3, [r1, #4]
 8004a48:	4630      	mov	r0, r6
 8004a4a:	f000 f82f 	bl	8004aac <__malloc_unlock>
 8004a4e:	f104 000b 	add.w	r0, r4, #11
 8004a52:	1d23      	adds	r3, r4, #4
 8004a54:	f020 0007 	bic.w	r0, r0, #7
 8004a58:	1ac2      	subs	r2, r0, r3
 8004a5a:	bf1c      	itt	ne
 8004a5c:	1a1b      	subne	r3, r3, r0
 8004a5e:	50a3      	strne	r3, [r4, r2]
 8004a60:	e7af      	b.n	80049c2 <_malloc_r+0x22>
 8004a62:	6862      	ldr	r2, [r4, #4]
 8004a64:	42a3      	cmp	r3, r4
 8004a66:	bf0c      	ite	eq
 8004a68:	f8c8 2000 	streq.w	r2, [r8]
 8004a6c:	605a      	strne	r2, [r3, #4]
 8004a6e:	e7eb      	b.n	8004a48 <_malloc_r+0xa8>
 8004a70:	4623      	mov	r3, r4
 8004a72:	6864      	ldr	r4, [r4, #4]
 8004a74:	e7ae      	b.n	80049d4 <_malloc_r+0x34>
 8004a76:	463c      	mov	r4, r7
 8004a78:	687f      	ldr	r7, [r7, #4]
 8004a7a:	e7b6      	b.n	80049ea <_malloc_r+0x4a>
 8004a7c:	461a      	mov	r2, r3
 8004a7e:	685b      	ldr	r3, [r3, #4]
 8004a80:	42a3      	cmp	r3, r4
 8004a82:	d1fb      	bne.n	8004a7c <_malloc_r+0xdc>
 8004a84:	2300      	movs	r3, #0
 8004a86:	6053      	str	r3, [r2, #4]
 8004a88:	e7de      	b.n	8004a48 <_malloc_r+0xa8>
 8004a8a:	230c      	movs	r3, #12
 8004a8c:	6033      	str	r3, [r6, #0]
 8004a8e:	4630      	mov	r0, r6
 8004a90:	f000 f80c 	bl	8004aac <__malloc_unlock>
 8004a94:	e794      	b.n	80049c0 <_malloc_r+0x20>
 8004a96:	6005      	str	r5, [r0, #0]
 8004a98:	e7d6      	b.n	8004a48 <_malloc_r+0xa8>
 8004a9a:	bf00      	nop
 8004a9c:	200005e8 	.word	0x200005e8

08004aa0 <__malloc_lock>:
 8004aa0:	4801      	ldr	r0, [pc, #4]	@ (8004aa8 <__malloc_lock+0x8>)
 8004aa2:	f7ff bf00 	b.w	80048a6 <__retarget_lock_acquire_recursive>
 8004aa6:	bf00      	nop
 8004aa8:	200005e0 	.word	0x200005e0

08004aac <__malloc_unlock>:
 8004aac:	4801      	ldr	r0, [pc, #4]	@ (8004ab4 <__malloc_unlock+0x8>)
 8004aae:	f7ff befb 	b.w	80048a8 <__retarget_lock_release_recursive>
 8004ab2:	bf00      	nop
 8004ab4:	200005e0 	.word	0x200005e0

08004ab8 <__ssputs_r>:
 8004ab8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004abc:	688e      	ldr	r6, [r1, #8]
 8004abe:	461f      	mov	r7, r3
 8004ac0:	42be      	cmp	r6, r7
 8004ac2:	680b      	ldr	r3, [r1, #0]
 8004ac4:	4682      	mov	sl, r0
 8004ac6:	460c      	mov	r4, r1
 8004ac8:	4690      	mov	r8, r2
 8004aca:	d82d      	bhi.n	8004b28 <__ssputs_r+0x70>
 8004acc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004ad0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004ad4:	d026      	beq.n	8004b24 <__ssputs_r+0x6c>
 8004ad6:	6965      	ldr	r5, [r4, #20]
 8004ad8:	6909      	ldr	r1, [r1, #16]
 8004ada:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004ade:	eba3 0901 	sub.w	r9, r3, r1
 8004ae2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004ae6:	1c7b      	adds	r3, r7, #1
 8004ae8:	444b      	add	r3, r9
 8004aea:	106d      	asrs	r5, r5, #1
 8004aec:	429d      	cmp	r5, r3
 8004aee:	bf38      	it	cc
 8004af0:	461d      	movcc	r5, r3
 8004af2:	0553      	lsls	r3, r2, #21
 8004af4:	d527      	bpl.n	8004b46 <__ssputs_r+0x8e>
 8004af6:	4629      	mov	r1, r5
 8004af8:	f7ff ff52 	bl	80049a0 <_malloc_r>
 8004afc:	4606      	mov	r6, r0
 8004afe:	b360      	cbz	r0, 8004b5a <__ssputs_r+0xa2>
 8004b00:	6921      	ldr	r1, [r4, #16]
 8004b02:	464a      	mov	r2, r9
 8004b04:	f7ff fed1 	bl	80048aa <memcpy>
 8004b08:	89a3      	ldrh	r3, [r4, #12]
 8004b0a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004b0e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004b12:	81a3      	strh	r3, [r4, #12]
 8004b14:	6126      	str	r6, [r4, #16]
 8004b16:	6165      	str	r5, [r4, #20]
 8004b18:	444e      	add	r6, r9
 8004b1a:	eba5 0509 	sub.w	r5, r5, r9
 8004b1e:	6026      	str	r6, [r4, #0]
 8004b20:	60a5      	str	r5, [r4, #8]
 8004b22:	463e      	mov	r6, r7
 8004b24:	42be      	cmp	r6, r7
 8004b26:	d900      	bls.n	8004b2a <__ssputs_r+0x72>
 8004b28:	463e      	mov	r6, r7
 8004b2a:	6820      	ldr	r0, [r4, #0]
 8004b2c:	4632      	mov	r2, r6
 8004b2e:	4641      	mov	r1, r8
 8004b30:	f000 fcf6 	bl	8005520 <memmove>
 8004b34:	68a3      	ldr	r3, [r4, #8]
 8004b36:	1b9b      	subs	r3, r3, r6
 8004b38:	60a3      	str	r3, [r4, #8]
 8004b3a:	6823      	ldr	r3, [r4, #0]
 8004b3c:	4433      	add	r3, r6
 8004b3e:	6023      	str	r3, [r4, #0]
 8004b40:	2000      	movs	r0, #0
 8004b42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b46:	462a      	mov	r2, r5
 8004b48:	f000 fd36 	bl	80055b8 <_realloc_r>
 8004b4c:	4606      	mov	r6, r0
 8004b4e:	2800      	cmp	r0, #0
 8004b50:	d1e0      	bne.n	8004b14 <__ssputs_r+0x5c>
 8004b52:	6921      	ldr	r1, [r4, #16]
 8004b54:	4650      	mov	r0, sl
 8004b56:	f7ff feb7 	bl	80048c8 <_free_r>
 8004b5a:	230c      	movs	r3, #12
 8004b5c:	f8ca 3000 	str.w	r3, [sl]
 8004b60:	89a3      	ldrh	r3, [r4, #12]
 8004b62:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004b66:	81a3      	strh	r3, [r4, #12]
 8004b68:	f04f 30ff 	mov.w	r0, #4294967295
 8004b6c:	e7e9      	b.n	8004b42 <__ssputs_r+0x8a>
	...

08004b70 <_svfiprintf_r>:
 8004b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b74:	4698      	mov	r8, r3
 8004b76:	898b      	ldrh	r3, [r1, #12]
 8004b78:	061b      	lsls	r3, r3, #24
 8004b7a:	b09d      	sub	sp, #116	@ 0x74
 8004b7c:	4607      	mov	r7, r0
 8004b7e:	460d      	mov	r5, r1
 8004b80:	4614      	mov	r4, r2
 8004b82:	d510      	bpl.n	8004ba6 <_svfiprintf_r+0x36>
 8004b84:	690b      	ldr	r3, [r1, #16]
 8004b86:	b973      	cbnz	r3, 8004ba6 <_svfiprintf_r+0x36>
 8004b88:	2140      	movs	r1, #64	@ 0x40
 8004b8a:	f7ff ff09 	bl	80049a0 <_malloc_r>
 8004b8e:	6028      	str	r0, [r5, #0]
 8004b90:	6128      	str	r0, [r5, #16]
 8004b92:	b930      	cbnz	r0, 8004ba2 <_svfiprintf_r+0x32>
 8004b94:	230c      	movs	r3, #12
 8004b96:	603b      	str	r3, [r7, #0]
 8004b98:	f04f 30ff 	mov.w	r0, #4294967295
 8004b9c:	b01d      	add	sp, #116	@ 0x74
 8004b9e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ba2:	2340      	movs	r3, #64	@ 0x40
 8004ba4:	616b      	str	r3, [r5, #20]
 8004ba6:	2300      	movs	r3, #0
 8004ba8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004baa:	2320      	movs	r3, #32
 8004bac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004bb0:	f8cd 800c 	str.w	r8, [sp, #12]
 8004bb4:	2330      	movs	r3, #48	@ 0x30
 8004bb6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004d54 <_svfiprintf_r+0x1e4>
 8004bba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004bbe:	f04f 0901 	mov.w	r9, #1
 8004bc2:	4623      	mov	r3, r4
 8004bc4:	469a      	mov	sl, r3
 8004bc6:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004bca:	b10a      	cbz	r2, 8004bd0 <_svfiprintf_r+0x60>
 8004bcc:	2a25      	cmp	r2, #37	@ 0x25
 8004bce:	d1f9      	bne.n	8004bc4 <_svfiprintf_r+0x54>
 8004bd0:	ebba 0b04 	subs.w	fp, sl, r4
 8004bd4:	d00b      	beq.n	8004bee <_svfiprintf_r+0x7e>
 8004bd6:	465b      	mov	r3, fp
 8004bd8:	4622      	mov	r2, r4
 8004bda:	4629      	mov	r1, r5
 8004bdc:	4638      	mov	r0, r7
 8004bde:	f7ff ff6b 	bl	8004ab8 <__ssputs_r>
 8004be2:	3001      	adds	r0, #1
 8004be4:	f000 80a7 	beq.w	8004d36 <_svfiprintf_r+0x1c6>
 8004be8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004bea:	445a      	add	r2, fp
 8004bec:	9209      	str	r2, [sp, #36]	@ 0x24
 8004bee:	f89a 3000 	ldrb.w	r3, [sl]
 8004bf2:	2b00      	cmp	r3, #0
 8004bf4:	f000 809f 	beq.w	8004d36 <_svfiprintf_r+0x1c6>
 8004bf8:	2300      	movs	r3, #0
 8004bfa:	f04f 32ff 	mov.w	r2, #4294967295
 8004bfe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004c02:	f10a 0a01 	add.w	sl, sl, #1
 8004c06:	9304      	str	r3, [sp, #16]
 8004c08:	9307      	str	r3, [sp, #28]
 8004c0a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004c0e:	931a      	str	r3, [sp, #104]	@ 0x68
 8004c10:	4654      	mov	r4, sl
 8004c12:	2205      	movs	r2, #5
 8004c14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004c18:	484e      	ldr	r0, [pc, #312]	@ (8004d54 <_svfiprintf_r+0x1e4>)
 8004c1a:	f7fb faf9 	bl	8000210 <memchr>
 8004c1e:	9a04      	ldr	r2, [sp, #16]
 8004c20:	b9d8      	cbnz	r0, 8004c5a <_svfiprintf_r+0xea>
 8004c22:	06d0      	lsls	r0, r2, #27
 8004c24:	bf44      	itt	mi
 8004c26:	2320      	movmi	r3, #32
 8004c28:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c2c:	0711      	lsls	r1, r2, #28
 8004c2e:	bf44      	itt	mi
 8004c30:	232b      	movmi	r3, #43	@ 0x2b
 8004c32:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004c36:	f89a 3000 	ldrb.w	r3, [sl]
 8004c3a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c3c:	d015      	beq.n	8004c6a <_svfiprintf_r+0xfa>
 8004c3e:	9a07      	ldr	r2, [sp, #28]
 8004c40:	4654      	mov	r4, sl
 8004c42:	2000      	movs	r0, #0
 8004c44:	f04f 0c0a 	mov.w	ip, #10
 8004c48:	4621      	mov	r1, r4
 8004c4a:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004c4e:	3b30      	subs	r3, #48	@ 0x30
 8004c50:	2b09      	cmp	r3, #9
 8004c52:	d94b      	bls.n	8004cec <_svfiprintf_r+0x17c>
 8004c54:	b1b0      	cbz	r0, 8004c84 <_svfiprintf_r+0x114>
 8004c56:	9207      	str	r2, [sp, #28]
 8004c58:	e014      	b.n	8004c84 <_svfiprintf_r+0x114>
 8004c5a:	eba0 0308 	sub.w	r3, r0, r8
 8004c5e:	fa09 f303 	lsl.w	r3, r9, r3
 8004c62:	4313      	orrs	r3, r2
 8004c64:	9304      	str	r3, [sp, #16]
 8004c66:	46a2      	mov	sl, r4
 8004c68:	e7d2      	b.n	8004c10 <_svfiprintf_r+0xa0>
 8004c6a:	9b03      	ldr	r3, [sp, #12]
 8004c6c:	1d19      	adds	r1, r3, #4
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	9103      	str	r1, [sp, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	bfbb      	ittet	lt
 8004c76:	425b      	neglt	r3, r3
 8004c78:	f042 0202 	orrlt.w	r2, r2, #2
 8004c7c:	9307      	strge	r3, [sp, #28]
 8004c7e:	9307      	strlt	r3, [sp, #28]
 8004c80:	bfb8      	it	lt
 8004c82:	9204      	strlt	r2, [sp, #16]
 8004c84:	7823      	ldrb	r3, [r4, #0]
 8004c86:	2b2e      	cmp	r3, #46	@ 0x2e
 8004c88:	d10a      	bne.n	8004ca0 <_svfiprintf_r+0x130>
 8004c8a:	7863      	ldrb	r3, [r4, #1]
 8004c8c:	2b2a      	cmp	r3, #42	@ 0x2a
 8004c8e:	d132      	bne.n	8004cf6 <_svfiprintf_r+0x186>
 8004c90:	9b03      	ldr	r3, [sp, #12]
 8004c92:	1d1a      	adds	r2, r3, #4
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	9203      	str	r2, [sp, #12]
 8004c98:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004c9c:	3402      	adds	r4, #2
 8004c9e:	9305      	str	r3, [sp, #20]
 8004ca0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004d64 <_svfiprintf_r+0x1f4>
 8004ca4:	7821      	ldrb	r1, [r4, #0]
 8004ca6:	2203      	movs	r2, #3
 8004ca8:	4650      	mov	r0, sl
 8004caa:	f7fb fab1 	bl	8000210 <memchr>
 8004cae:	b138      	cbz	r0, 8004cc0 <_svfiprintf_r+0x150>
 8004cb0:	9b04      	ldr	r3, [sp, #16]
 8004cb2:	eba0 000a 	sub.w	r0, r0, sl
 8004cb6:	2240      	movs	r2, #64	@ 0x40
 8004cb8:	4082      	lsls	r2, r0
 8004cba:	4313      	orrs	r3, r2
 8004cbc:	3401      	adds	r4, #1
 8004cbe:	9304      	str	r3, [sp, #16]
 8004cc0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cc4:	4824      	ldr	r0, [pc, #144]	@ (8004d58 <_svfiprintf_r+0x1e8>)
 8004cc6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004cca:	2206      	movs	r2, #6
 8004ccc:	f7fb faa0 	bl	8000210 <memchr>
 8004cd0:	2800      	cmp	r0, #0
 8004cd2:	d036      	beq.n	8004d42 <_svfiprintf_r+0x1d2>
 8004cd4:	4b21      	ldr	r3, [pc, #132]	@ (8004d5c <_svfiprintf_r+0x1ec>)
 8004cd6:	bb1b      	cbnz	r3, 8004d20 <_svfiprintf_r+0x1b0>
 8004cd8:	9b03      	ldr	r3, [sp, #12]
 8004cda:	3307      	adds	r3, #7
 8004cdc:	f023 0307 	bic.w	r3, r3, #7
 8004ce0:	3308      	adds	r3, #8
 8004ce2:	9303      	str	r3, [sp, #12]
 8004ce4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004ce6:	4433      	add	r3, r6
 8004ce8:	9309      	str	r3, [sp, #36]	@ 0x24
 8004cea:	e76a      	b.n	8004bc2 <_svfiprintf_r+0x52>
 8004cec:	fb0c 3202 	mla	r2, ip, r2, r3
 8004cf0:	460c      	mov	r4, r1
 8004cf2:	2001      	movs	r0, #1
 8004cf4:	e7a8      	b.n	8004c48 <_svfiprintf_r+0xd8>
 8004cf6:	2300      	movs	r3, #0
 8004cf8:	3401      	adds	r4, #1
 8004cfa:	9305      	str	r3, [sp, #20]
 8004cfc:	4619      	mov	r1, r3
 8004cfe:	f04f 0c0a 	mov.w	ip, #10
 8004d02:	4620      	mov	r0, r4
 8004d04:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004d08:	3a30      	subs	r2, #48	@ 0x30
 8004d0a:	2a09      	cmp	r2, #9
 8004d0c:	d903      	bls.n	8004d16 <_svfiprintf_r+0x1a6>
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d0c6      	beq.n	8004ca0 <_svfiprintf_r+0x130>
 8004d12:	9105      	str	r1, [sp, #20]
 8004d14:	e7c4      	b.n	8004ca0 <_svfiprintf_r+0x130>
 8004d16:	fb0c 2101 	mla	r1, ip, r1, r2
 8004d1a:	4604      	mov	r4, r0
 8004d1c:	2301      	movs	r3, #1
 8004d1e:	e7f0      	b.n	8004d02 <_svfiprintf_r+0x192>
 8004d20:	ab03      	add	r3, sp, #12
 8004d22:	9300      	str	r3, [sp, #0]
 8004d24:	462a      	mov	r2, r5
 8004d26:	4b0e      	ldr	r3, [pc, #56]	@ (8004d60 <_svfiprintf_r+0x1f0>)
 8004d28:	a904      	add	r1, sp, #16
 8004d2a:	4638      	mov	r0, r7
 8004d2c:	f3af 8000 	nop.w
 8004d30:	1c42      	adds	r2, r0, #1
 8004d32:	4606      	mov	r6, r0
 8004d34:	d1d6      	bne.n	8004ce4 <_svfiprintf_r+0x174>
 8004d36:	89ab      	ldrh	r3, [r5, #12]
 8004d38:	065b      	lsls	r3, r3, #25
 8004d3a:	f53f af2d 	bmi.w	8004b98 <_svfiprintf_r+0x28>
 8004d3e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004d40:	e72c      	b.n	8004b9c <_svfiprintf_r+0x2c>
 8004d42:	ab03      	add	r3, sp, #12
 8004d44:	9300      	str	r3, [sp, #0]
 8004d46:	462a      	mov	r2, r5
 8004d48:	4b05      	ldr	r3, [pc, #20]	@ (8004d60 <_svfiprintf_r+0x1f0>)
 8004d4a:	a904      	add	r1, sp, #16
 8004d4c:	4638      	mov	r0, r7
 8004d4e:	f000 f9bb 	bl	80050c8 <_printf_i>
 8004d52:	e7ed      	b.n	8004d30 <_svfiprintf_r+0x1c0>
 8004d54:	080056d4 	.word	0x080056d4
 8004d58:	080056de 	.word	0x080056de
 8004d5c:	00000000 	.word	0x00000000
 8004d60:	08004ab9 	.word	0x08004ab9
 8004d64:	080056da 	.word	0x080056da

08004d68 <__sfputc_r>:
 8004d68:	6893      	ldr	r3, [r2, #8]
 8004d6a:	3b01      	subs	r3, #1
 8004d6c:	2b00      	cmp	r3, #0
 8004d6e:	b410      	push	{r4}
 8004d70:	6093      	str	r3, [r2, #8]
 8004d72:	da08      	bge.n	8004d86 <__sfputc_r+0x1e>
 8004d74:	6994      	ldr	r4, [r2, #24]
 8004d76:	42a3      	cmp	r3, r4
 8004d78:	db01      	blt.n	8004d7e <__sfputc_r+0x16>
 8004d7a:	290a      	cmp	r1, #10
 8004d7c:	d103      	bne.n	8004d86 <__sfputc_r+0x1e>
 8004d7e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d82:	f7ff bc82 	b.w	800468a <__swbuf_r>
 8004d86:	6813      	ldr	r3, [r2, #0]
 8004d88:	1c58      	adds	r0, r3, #1
 8004d8a:	6010      	str	r0, [r2, #0]
 8004d8c:	7019      	strb	r1, [r3, #0]
 8004d8e:	4608      	mov	r0, r1
 8004d90:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004d94:	4770      	bx	lr

08004d96 <__sfputs_r>:
 8004d96:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d98:	4606      	mov	r6, r0
 8004d9a:	460f      	mov	r7, r1
 8004d9c:	4614      	mov	r4, r2
 8004d9e:	18d5      	adds	r5, r2, r3
 8004da0:	42ac      	cmp	r4, r5
 8004da2:	d101      	bne.n	8004da8 <__sfputs_r+0x12>
 8004da4:	2000      	movs	r0, #0
 8004da6:	e007      	b.n	8004db8 <__sfputs_r+0x22>
 8004da8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004dac:	463a      	mov	r2, r7
 8004dae:	4630      	mov	r0, r6
 8004db0:	f7ff ffda 	bl	8004d68 <__sfputc_r>
 8004db4:	1c43      	adds	r3, r0, #1
 8004db6:	d1f3      	bne.n	8004da0 <__sfputs_r+0xa>
 8004db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004dbc <_vfiprintf_r>:
 8004dbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004dc0:	460d      	mov	r5, r1
 8004dc2:	b09d      	sub	sp, #116	@ 0x74
 8004dc4:	4614      	mov	r4, r2
 8004dc6:	4698      	mov	r8, r3
 8004dc8:	4606      	mov	r6, r0
 8004dca:	b118      	cbz	r0, 8004dd4 <_vfiprintf_r+0x18>
 8004dcc:	6a03      	ldr	r3, [r0, #32]
 8004dce:	b90b      	cbnz	r3, 8004dd4 <_vfiprintf_r+0x18>
 8004dd0:	f7ff fb3c 	bl	800444c <__sinit>
 8004dd4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dd6:	07d9      	lsls	r1, r3, #31
 8004dd8:	d405      	bmi.n	8004de6 <_vfiprintf_r+0x2a>
 8004dda:	89ab      	ldrh	r3, [r5, #12]
 8004ddc:	059a      	lsls	r2, r3, #22
 8004dde:	d402      	bmi.n	8004de6 <_vfiprintf_r+0x2a>
 8004de0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004de2:	f7ff fd60 	bl	80048a6 <__retarget_lock_acquire_recursive>
 8004de6:	89ab      	ldrh	r3, [r5, #12]
 8004de8:	071b      	lsls	r3, r3, #28
 8004dea:	d501      	bpl.n	8004df0 <_vfiprintf_r+0x34>
 8004dec:	692b      	ldr	r3, [r5, #16]
 8004dee:	b99b      	cbnz	r3, 8004e18 <_vfiprintf_r+0x5c>
 8004df0:	4629      	mov	r1, r5
 8004df2:	4630      	mov	r0, r6
 8004df4:	f7ff fc88 	bl	8004708 <__swsetup_r>
 8004df8:	b170      	cbz	r0, 8004e18 <_vfiprintf_r+0x5c>
 8004dfa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004dfc:	07dc      	lsls	r4, r3, #31
 8004dfe:	d504      	bpl.n	8004e0a <_vfiprintf_r+0x4e>
 8004e00:	f04f 30ff 	mov.w	r0, #4294967295
 8004e04:	b01d      	add	sp, #116	@ 0x74
 8004e06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e0a:	89ab      	ldrh	r3, [r5, #12]
 8004e0c:	0598      	lsls	r0, r3, #22
 8004e0e:	d4f7      	bmi.n	8004e00 <_vfiprintf_r+0x44>
 8004e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e12:	f7ff fd49 	bl	80048a8 <__retarget_lock_release_recursive>
 8004e16:	e7f3      	b.n	8004e00 <_vfiprintf_r+0x44>
 8004e18:	2300      	movs	r3, #0
 8004e1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e1c:	2320      	movs	r3, #32
 8004e1e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e22:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e26:	2330      	movs	r3, #48	@ 0x30
 8004e28:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004fd8 <_vfiprintf_r+0x21c>
 8004e2c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e30:	f04f 0901 	mov.w	r9, #1
 8004e34:	4623      	mov	r3, r4
 8004e36:	469a      	mov	sl, r3
 8004e38:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e3c:	b10a      	cbz	r2, 8004e42 <_vfiprintf_r+0x86>
 8004e3e:	2a25      	cmp	r2, #37	@ 0x25
 8004e40:	d1f9      	bne.n	8004e36 <_vfiprintf_r+0x7a>
 8004e42:	ebba 0b04 	subs.w	fp, sl, r4
 8004e46:	d00b      	beq.n	8004e60 <_vfiprintf_r+0xa4>
 8004e48:	465b      	mov	r3, fp
 8004e4a:	4622      	mov	r2, r4
 8004e4c:	4629      	mov	r1, r5
 8004e4e:	4630      	mov	r0, r6
 8004e50:	f7ff ffa1 	bl	8004d96 <__sfputs_r>
 8004e54:	3001      	adds	r0, #1
 8004e56:	f000 80a7 	beq.w	8004fa8 <_vfiprintf_r+0x1ec>
 8004e5a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e5c:	445a      	add	r2, fp
 8004e5e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e60:	f89a 3000 	ldrb.w	r3, [sl]
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 809f 	beq.w	8004fa8 <_vfiprintf_r+0x1ec>
 8004e6a:	2300      	movs	r3, #0
 8004e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8004e70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004e74:	f10a 0a01 	add.w	sl, sl, #1
 8004e78:	9304      	str	r3, [sp, #16]
 8004e7a:	9307      	str	r3, [sp, #28]
 8004e7c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004e80:	931a      	str	r3, [sp, #104]	@ 0x68
 8004e82:	4654      	mov	r4, sl
 8004e84:	2205      	movs	r2, #5
 8004e86:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e8a:	4853      	ldr	r0, [pc, #332]	@ (8004fd8 <_vfiprintf_r+0x21c>)
 8004e8c:	f7fb f9c0 	bl	8000210 <memchr>
 8004e90:	9a04      	ldr	r2, [sp, #16]
 8004e92:	b9d8      	cbnz	r0, 8004ecc <_vfiprintf_r+0x110>
 8004e94:	06d1      	lsls	r1, r2, #27
 8004e96:	bf44      	itt	mi
 8004e98:	2320      	movmi	r3, #32
 8004e9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004e9e:	0713      	lsls	r3, r2, #28
 8004ea0:	bf44      	itt	mi
 8004ea2:	232b      	movmi	r3, #43	@ 0x2b
 8004ea4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ea8:	f89a 3000 	ldrb.w	r3, [sl]
 8004eac:	2b2a      	cmp	r3, #42	@ 0x2a
 8004eae:	d015      	beq.n	8004edc <_vfiprintf_r+0x120>
 8004eb0:	9a07      	ldr	r2, [sp, #28]
 8004eb2:	4654      	mov	r4, sl
 8004eb4:	2000      	movs	r0, #0
 8004eb6:	f04f 0c0a 	mov.w	ip, #10
 8004eba:	4621      	mov	r1, r4
 8004ebc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ec0:	3b30      	subs	r3, #48	@ 0x30
 8004ec2:	2b09      	cmp	r3, #9
 8004ec4:	d94b      	bls.n	8004f5e <_vfiprintf_r+0x1a2>
 8004ec6:	b1b0      	cbz	r0, 8004ef6 <_vfiprintf_r+0x13a>
 8004ec8:	9207      	str	r2, [sp, #28]
 8004eca:	e014      	b.n	8004ef6 <_vfiprintf_r+0x13a>
 8004ecc:	eba0 0308 	sub.w	r3, r0, r8
 8004ed0:	fa09 f303 	lsl.w	r3, r9, r3
 8004ed4:	4313      	orrs	r3, r2
 8004ed6:	9304      	str	r3, [sp, #16]
 8004ed8:	46a2      	mov	sl, r4
 8004eda:	e7d2      	b.n	8004e82 <_vfiprintf_r+0xc6>
 8004edc:	9b03      	ldr	r3, [sp, #12]
 8004ede:	1d19      	adds	r1, r3, #4
 8004ee0:	681b      	ldr	r3, [r3, #0]
 8004ee2:	9103      	str	r1, [sp, #12]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	bfbb      	ittet	lt
 8004ee8:	425b      	neglt	r3, r3
 8004eea:	f042 0202 	orrlt.w	r2, r2, #2
 8004eee:	9307      	strge	r3, [sp, #28]
 8004ef0:	9307      	strlt	r3, [sp, #28]
 8004ef2:	bfb8      	it	lt
 8004ef4:	9204      	strlt	r2, [sp, #16]
 8004ef6:	7823      	ldrb	r3, [r4, #0]
 8004ef8:	2b2e      	cmp	r3, #46	@ 0x2e
 8004efa:	d10a      	bne.n	8004f12 <_vfiprintf_r+0x156>
 8004efc:	7863      	ldrb	r3, [r4, #1]
 8004efe:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f00:	d132      	bne.n	8004f68 <_vfiprintf_r+0x1ac>
 8004f02:	9b03      	ldr	r3, [sp, #12]
 8004f04:	1d1a      	adds	r2, r3, #4
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	9203      	str	r2, [sp, #12]
 8004f0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f0e:	3402      	adds	r4, #2
 8004f10:	9305      	str	r3, [sp, #20]
 8004f12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004fe8 <_vfiprintf_r+0x22c>
 8004f16:	7821      	ldrb	r1, [r4, #0]
 8004f18:	2203      	movs	r2, #3
 8004f1a:	4650      	mov	r0, sl
 8004f1c:	f7fb f978 	bl	8000210 <memchr>
 8004f20:	b138      	cbz	r0, 8004f32 <_vfiprintf_r+0x176>
 8004f22:	9b04      	ldr	r3, [sp, #16]
 8004f24:	eba0 000a 	sub.w	r0, r0, sl
 8004f28:	2240      	movs	r2, #64	@ 0x40
 8004f2a:	4082      	lsls	r2, r0
 8004f2c:	4313      	orrs	r3, r2
 8004f2e:	3401      	adds	r4, #1
 8004f30:	9304      	str	r3, [sp, #16]
 8004f32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f36:	4829      	ldr	r0, [pc, #164]	@ (8004fdc <_vfiprintf_r+0x220>)
 8004f38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f3c:	2206      	movs	r2, #6
 8004f3e:	f7fb f967 	bl	8000210 <memchr>
 8004f42:	2800      	cmp	r0, #0
 8004f44:	d03f      	beq.n	8004fc6 <_vfiprintf_r+0x20a>
 8004f46:	4b26      	ldr	r3, [pc, #152]	@ (8004fe0 <_vfiprintf_r+0x224>)
 8004f48:	bb1b      	cbnz	r3, 8004f92 <_vfiprintf_r+0x1d6>
 8004f4a:	9b03      	ldr	r3, [sp, #12]
 8004f4c:	3307      	adds	r3, #7
 8004f4e:	f023 0307 	bic.w	r3, r3, #7
 8004f52:	3308      	adds	r3, #8
 8004f54:	9303      	str	r3, [sp, #12]
 8004f56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f58:	443b      	add	r3, r7
 8004f5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f5c:	e76a      	b.n	8004e34 <_vfiprintf_r+0x78>
 8004f5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f62:	460c      	mov	r4, r1
 8004f64:	2001      	movs	r0, #1
 8004f66:	e7a8      	b.n	8004eba <_vfiprintf_r+0xfe>
 8004f68:	2300      	movs	r3, #0
 8004f6a:	3401      	adds	r4, #1
 8004f6c:	9305      	str	r3, [sp, #20]
 8004f6e:	4619      	mov	r1, r3
 8004f70:	f04f 0c0a 	mov.w	ip, #10
 8004f74:	4620      	mov	r0, r4
 8004f76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004f7a:	3a30      	subs	r2, #48	@ 0x30
 8004f7c:	2a09      	cmp	r2, #9
 8004f7e:	d903      	bls.n	8004f88 <_vfiprintf_r+0x1cc>
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0c6      	beq.n	8004f12 <_vfiprintf_r+0x156>
 8004f84:	9105      	str	r1, [sp, #20]
 8004f86:	e7c4      	b.n	8004f12 <_vfiprintf_r+0x156>
 8004f88:	fb0c 2101 	mla	r1, ip, r1, r2
 8004f8c:	4604      	mov	r4, r0
 8004f8e:	2301      	movs	r3, #1
 8004f90:	e7f0      	b.n	8004f74 <_vfiprintf_r+0x1b8>
 8004f92:	ab03      	add	r3, sp, #12
 8004f94:	9300      	str	r3, [sp, #0]
 8004f96:	462a      	mov	r2, r5
 8004f98:	4b12      	ldr	r3, [pc, #72]	@ (8004fe4 <_vfiprintf_r+0x228>)
 8004f9a:	a904      	add	r1, sp, #16
 8004f9c:	4630      	mov	r0, r6
 8004f9e:	f3af 8000 	nop.w
 8004fa2:	4607      	mov	r7, r0
 8004fa4:	1c78      	adds	r0, r7, #1
 8004fa6:	d1d6      	bne.n	8004f56 <_vfiprintf_r+0x19a>
 8004fa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004faa:	07d9      	lsls	r1, r3, #31
 8004fac:	d405      	bmi.n	8004fba <_vfiprintf_r+0x1fe>
 8004fae:	89ab      	ldrh	r3, [r5, #12]
 8004fb0:	059a      	lsls	r2, r3, #22
 8004fb2:	d402      	bmi.n	8004fba <_vfiprintf_r+0x1fe>
 8004fb4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fb6:	f7ff fc77 	bl	80048a8 <__retarget_lock_release_recursive>
 8004fba:	89ab      	ldrh	r3, [r5, #12]
 8004fbc:	065b      	lsls	r3, r3, #25
 8004fbe:	f53f af1f 	bmi.w	8004e00 <_vfiprintf_r+0x44>
 8004fc2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004fc4:	e71e      	b.n	8004e04 <_vfiprintf_r+0x48>
 8004fc6:	ab03      	add	r3, sp, #12
 8004fc8:	9300      	str	r3, [sp, #0]
 8004fca:	462a      	mov	r2, r5
 8004fcc:	4b05      	ldr	r3, [pc, #20]	@ (8004fe4 <_vfiprintf_r+0x228>)
 8004fce:	a904      	add	r1, sp, #16
 8004fd0:	4630      	mov	r0, r6
 8004fd2:	f000 f879 	bl	80050c8 <_printf_i>
 8004fd6:	e7e4      	b.n	8004fa2 <_vfiprintf_r+0x1e6>
 8004fd8:	080056d4 	.word	0x080056d4
 8004fdc:	080056de 	.word	0x080056de
 8004fe0:	00000000 	.word	0x00000000
 8004fe4:	08004d97 	.word	0x08004d97
 8004fe8:	080056da 	.word	0x080056da

08004fec <_printf_common>:
 8004fec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff0:	4616      	mov	r6, r2
 8004ff2:	4698      	mov	r8, r3
 8004ff4:	688a      	ldr	r2, [r1, #8]
 8004ff6:	690b      	ldr	r3, [r1, #16]
 8004ff8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	bfb8      	it	lt
 8005000:	4613      	movlt	r3, r2
 8005002:	6033      	str	r3, [r6, #0]
 8005004:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005008:	4607      	mov	r7, r0
 800500a:	460c      	mov	r4, r1
 800500c:	b10a      	cbz	r2, 8005012 <_printf_common+0x26>
 800500e:	3301      	adds	r3, #1
 8005010:	6033      	str	r3, [r6, #0]
 8005012:	6823      	ldr	r3, [r4, #0]
 8005014:	0699      	lsls	r1, r3, #26
 8005016:	bf42      	ittt	mi
 8005018:	6833      	ldrmi	r3, [r6, #0]
 800501a:	3302      	addmi	r3, #2
 800501c:	6033      	strmi	r3, [r6, #0]
 800501e:	6825      	ldr	r5, [r4, #0]
 8005020:	f015 0506 	ands.w	r5, r5, #6
 8005024:	d106      	bne.n	8005034 <_printf_common+0x48>
 8005026:	f104 0a19 	add.w	sl, r4, #25
 800502a:	68e3      	ldr	r3, [r4, #12]
 800502c:	6832      	ldr	r2, [r6, #0]
 800502e:	1a9b      	subs	r3, r3, r2
 8005030:	42ab      	cmp	r3, r5
 8005032:	dc26      	bgt.n	8005082 <_printf_common+0x96>
 8005034:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005038:	6822      	ldr	r2, [r4, #0]
 800503a:	3b00      	subs	r3, #0
 800503c:	bf18      	it	ne
 800503e:	2301      	movne	r3, #1
 8005040:	0692      	lsls	r2, r2, #26
 8005042:	d42b      	bmi.n	800509c <_printf_common+0xb0>
 8005044:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005048:	4641      	mov	r1, r8
 800504a:	4638      	mov	r0, r7
 800504c:	47c8      	blx	r9
 800504e:	3001      	adds	r0, #1
 8005050:	d01e      	beq.n	8005090 <_printf_common+0xa4>
 8005052:	6823      	ldr	r3, [r4, #0]
 8005054:	6922      	ldr	r2, [r4, #16]
 8005056:	f003 0306 	and.w	r3, r3, #6
 800505a:	2b04      	cmp	r3, #4
 800505c:	bf02      	ittt	eq
 800505e:	68e5      	ldreq	r5, [r4, #12]
 8005060:	6833      	ldreq	r3, [r6, #0]
 8005062:	1aed      	subeq	r5, r5, r3
 8005064:	68a3      	ldr	r3, [r4, #8]
 8005066:	bf0c      	ite	eq
 8005068:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800506c:	2500      	movne	r5, #0
 800506e:	4293      	cmp	r3, r2
 8005070:	bfc4      	itt	gt
 8005072:	1a9b      	subgt	r3, r3, r2
 8005074:	18ed      	addgt	r5, r5, r3
 8005076:	2600      	movs	r6, #0
 8005078:	341a      	adds	r4, #26
 800507a:	42b5      	cmp	r5, r6
 800507c:	d11a      	bne.n	80050b4 <_printf_common+0xc8>
 800507e:	2000      	movs	r0, #0
 8005080:	e008      	b.n	8005094 <_printf_common+0xa8>
 8005082:	2301      	movs	r3, #1
 8005084:	4652      	mov	r2, sl
 8005086:	4641      	mov	r1, r8
 8005088:	4638      	mov	r0, r7
 800508a:	47c8      	blx	r9
 800508c:	3001      	adds	r0, #1
 800508e:	d103      	bne.n	8005098 <_printf_common+0xac>
 8005090:	f04f 30ff 	mov.w	r0, #4294967295
 8005094:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005098:	3501      	adds	r5, #1
 800509a:	e7c6      	b.n	800502a <_printf_common+0x3e>
 800509c:	18e1      	adds	r1, r4, r3
 800509e:	1c5a      	adds	r2, r3, #1
 80050a0:	2030      	movs	r0, #48	@ 0x30
 80050a2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050a6:	4422      	add	r2, r4
 80050a8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050ac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050b0:	3302      	adds	r3, #2
 80050b2:	e7c7      	b.n	8005044 <_printf_common+0x58>
 80050b4:	2301      	movs	r3, #1
 80050b6:	4622      	mov	r2, r4
 80050b8:	4641      	mov	r1, r8
 80050ba:	4638      	mov	r0, r7
 80050bc:	47c8      	blx	r9
 80050be:	3001      	adds	r0, #1
 80050c0:	d0e6      	beq.n	8005090 <_printf_common+0xa4>
 80050c2:	3601      	adds	r6, #1
 80050c4:	e7d9      	b.n	800507a <_printf_common+0x8e>
	...

080050c8 <_printf_i>:
 80050c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80050cc:	7e0f      	ldrb	r7, [r1, #24]
 80050ce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80050d0:	2f78      	cmp	r7, #120	@ 0x78
 80050d2:	4691      	mov	r9, r2
 80050d4:	4680      	mov	r8, r0
 80050d6:	460c      	mov	r4, r1
 80050d8:	469a      	mov	sl, r3
 80050da:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80050de:	d807      	bhi.n	80050f0 <_printf_i+0x28>
 80050e0:	2f62      	cmp	r7, #98	@ 0x62
 80050e2:	d80a      	bhi.n	80050fa <_printf_i+0x32>
 80050e4:	2f00      	cmp	r7, #0
 80050e6:	f000 80d1 	beq.w	800528c <_printf_i+0x1c4>
 80050ea:	2f58      	cmp	r7, #88	@ 0x58
 80050ec:	f000 80b8 	beq.w	8005260 <_printf_i+0x198>
 80050f0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80050f4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80050f8:	e03a      	b.n	8005170 <_printf_i+0xa8>
 80050fa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80050fe:	2b15      	cmp	r3, #21
 8005100:	d8f6      	bhi.n	80050f0 <_printf_i+0x28>
 8005102:	a101      	add	r1, pc, #4	@ (adr r1, 8005108 <_printf_i+0x40>)
 8005104:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005108:	08005161 	.word	0x08005161
 800510c:	08005175 	.word	0x08005175
 8005110:	080050f1 	.word	0x080050f1
 8005114:	080050f1 	.word	0x080050f1
 8005118:	080050f1 	.word	0x080050f1
 800511c:	080050f1 	.word	0x080050f1
 8005120:	08005175 	.word	0x08005175
 8005124:	080050f1 	.word	0x080050f1
 8005128:	080050f1 	.word	0x080050f1
 800512c:	080050f1 	.word	0x080050f1
 8005130:	080050f1 	.word	0x080050f1
 8005134:	08005273 	.word	0x08005273
 8005138:	0800519f 	.word	0x0800519f
 800513c:	0800522d 	.word	0x0800522d
 8005140:	080050f1 	.word	0x080050f1
 8005144:	080050f1 	.word	0x080050f1
 8005148:	08005295 	.word	0x08005295
 800514c:	080050f1 	.word	0x080050f1
 8005150:	0800519f 	.word	0x0800519f
 8005154:	080050f1 	.word	0x080050f1
 8005158:	080050f1 	.word	0x080050f1
 800515c:	08005235 	.word	0x08005235
 8005160:	6833      	ldr	r3, [r6, #0]
 8005162:	1d1a      	adds	r2, r3, #4
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	6032      	str	r2, [r6, #0]
 8005168:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800516c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005170:	2301      	movs	r3, #1
 8005172:	e09c      	b.n	80052ae <_printf_i+0x1e6>
 8005174:	6833      	ldr	r3, [r6, #0]
 8005176:	6820      	ldr	r0, [r4, #0]
 8005178:	1d19      	adds	r1, r3, #4
 800517a:	6031      	str	r1, [r6, #0]
 800517c:	0606      	lsls	r6, r0, #24
 800517e:	d501      	bpl.n	8005184 <_printf_i+0xbc>
 8005180:	681d      	ldr	r5, [r3, #0]
 8005182:	e003      	b.n	800518c <_printf_i+0xc4>
 8005184:	0645      	lsls	r5, r0, #25
 8005186:	d5fb      	bpl.n	8005180 <_printf_i+0xb8>
 8005188:	f9b3 5000 	ldrsh.w	r5, [r3]
 800518c:	2d00      	cmp	r5, #0
 800518e:	da03      	bge.n	8005198 <_printf_i+0xd0>
 8005190:	232d      	movs	r3, #45	@ 0x2d
 8005192:	426d      	negs	r5, r5
 8005194:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005198:	4858      	ldr	r0, [pc, #352]	@ (80052fc <_printf_i+0x234>)
 800519a:	230a      	movs	r3, #10
 800519c:	e011      	b.n	80051c2 <_printf_i+0xfa>
 800519e:	6821      	ldr	r1, [r4, #0]
 80051a0:	6833      	ldr	r3, [r6, #0]
 80051a2:	0608      	lsls	r0, r1, #24
 80051a4:	f853 5b04 	ldr.w	r5, [r3], #4
 80051a8:	d402      	bmi.n	80051b0 <_printf_i+0xe8>
 80051aa:	0649      	lsls	r1, r1, #25
 80051ac:	bf48      	it	mi
 80051ae:	b2ad      	uxthmi	r5, r5
 80051b0:	2f6f      	cmp	r7, #111	@ 0x6f
 80051b2:	4852      	ldr	r0, [pc, #328]	@ (80052fc <_printf_i+0x234>)
 80051b4:	6033      	str	r3, [r6, #0]
 80051b6:	bf14      	ite	ne
 80051b8:	230a      	movne	r3, #10
 80051ba:	2308      	moveq	r3, #8
 80051bc:	2100      	movs	r1, #0
 80051be:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051c2:	6866      	ldr	r6, [r4, #4]
 80051c4:	60a6      	str	r6, [r4, #8]
 80051c6:	2e00      	cmp	r6, #0
 80051c8:	db05      	blt.n	80051d6 <_printf_i+0x10e>
 80051ca:	6821      	ldr	r1, [r4, #0]
 80051cc:	432e      	orrs	r6, r5
 80051ce:	f021 0104 	bic.w	r1, r1, #4
 80051d2:	6021      	str	r1, [r4, #0]
 80051d4:	d04b      	beq.n	800526e <_printf_i+0x1a6>
 80051d6:	4616      	mov	r6, r2
 80051d8:	fbb5 f1f3 	udiv	r1, r5, r3
 80051dc:	fb03 5711 	mls	r7, r3, r1, r5
 80051e0:	5dc7      	ldrb	r7, [r0, r7]
 80051e2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80051e6:	462f      	mov	r7, r5
 80051e8:	42bb      	cmp	r3, r7
 80051ea:	460d      	mov	r5, r1
 80051ec:	d9f4      	bls.n	80051d8 <_printf_i+0x110>
 80051ee:	2b08      	cmp	r3, #8
 80051f0:	d10b      	bne.n	800520a <_printf_i+0x142>
 80051f2:	6823      	ldr	r3, [r4, #0]
 80051f4:	07df      	lsls	r7, r3, #31
 80051f6:	d508      	bpl.n	800520a <_printf_i+0x142>
 80051f8:	6923      	ldr	r3, [r4, #16]
 80051fa:	6861      	ldr	r1, [r4, #4]
 80051fc:	4299      	cmp	r1, r3
 80051fe:	bfde      	ittt	le
 8005200:	2330      	movle	r3, #48	@ 0x30
 8005202:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005206:	f106 36ff 	addle.w	r6, r6, #4294967295
 800520a:	1b92      	subs	r2, r2, r6
 800520c:	6122      	str	r2, [r4, #16]
 800520e:	f8cd a000 	str.w	sl, [sp]
 8005212:	464b      	mov	r3, r9
 8005214:	aa03      	add	r2, sp, #12
 8005216:	4621      	mov	r1, r4
 8005218:	4640      	mov	r0, r8
 800521a:	f7ff fee7 	bl	8004fec <_printf_common>
 800521e:	3001      	adds	r0, #1
 8005220:	d14a      	bne.n	80052b8 <_printf_i+0x1f0>
 8005222:	f04f 30ff 	mov.w	r0, #4294967295
 8005226:	b004      	add	sp, #16
 8005228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800522c:	6823      	ldr	r3, [r4, #0]
 800522e:	f043 0320 	orr.w	r3, r3, #32
 8005232:	6023      	str	r3, [r4, #0]
 8005234:	4832      	ldr	r0, [pc, #200]	@ (8005300 <_printf_i+0x238>)
 8005236:	2778      	movs	r7, #120	@ 0x78
 8005238:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800523c:	6823      	ldr	r3, [r4, #0]
 800523e:	6831      	ldr	r1, [r6, #0]
 8005240:	061f      	lsls	r7, r3, #24
 8005242:	f851 5b04 	ldr.w	r5, [r1], #4
 8005246:	d402      	bmi.n	800524e <_printf_i+0x186>
 8005248:	065f      	lsls	r7, r3, #25
 800524a:	bf48      	it	mi
 800524c:	b2ad      	uxthmi	r5, r5
 800524e:	6031      	str	r1, [r6, #0]
 8005250:	07d9      	lsls	r1, r3, #31
 8005252:	bf44      	itt	mi
 8005254:	f043 0320 	orrmi.w	r3, r3, #32
 8005258:	6023      	strmi	r3, [r4, #0]
 800525a:	b11d      	cbz	r5, 8005264 <_printf_i+0x19c>
 800525c:	2310      	movs	r3, #16
 800525e:	e7ad      	b.n	80051bc <_printf_i+0xf4>
 8005260:	4826      	ldr	r0, [pc, #152]	@ (80052fc <_printf_i+0x234>)
 8005262:	e7e9      	b.n	8005238 <_printf_i+0x170>
 8005264:	6823      	ldr	r3, [r4, #0]
 8005266:	f023 0320 	bic.w	r3, r3, #32
 800526a:	6023      	str	r3, [r4, #0]
 800526c:	e7f6      	b.n	800525c <_printf_i+0x194>
 800526e:	4616      	mov	r6, r2
 8005270:	e7bd      	b.n	80051ee <_printf_i+0x126>
 8005272:	6833      	ldr	r3, [r6, #0]
 8005274:	6825      	ldr	r5, [r4, #0]
 8005276:	6961      	ldr	r1, [r4, #20]
 8005278:	1d18      	adds	r0, r3, #4
 800527a:	6030      	str	r0, [r6, #0]
 800527c:	062e      	lsls	r6, r5, #24
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	d501      	bpl.n	8005286 <_printf_i+0x1be>
 8005282:	6019      	str	r1, [r3, #0]
 8005284:	e002      	b.n	800528c <_printf_i+0x1c4>
 8005286:	0668      	lsls	r0, r5, #25
 8005288:	d5fb      	bpl.n	8005282 <_printf_i+0x1ba>
 800528a:	8019      	strh	r1, [r3, #0]
 800528c:	2300      	movs	r3, #0
 800528e:	6123      	str	r3, [r4, #16]
 8005290:	4616      	mov	r6, r2
 8005292:	e7bc      	b.n	800520e <_printf_i+0x146>
 8005294:	6833      	ldr	r3, [r6, #0]
 8005296:	1d1a      	adds	r2, r3, #4
 8005298:	6032      	str	r2, [r6, #0]
 800529a:	681e      	ldr	r6, [r3, #0]
 800529c:	6862      	ldr	r2, [r4, #4]
 800529e:	2100      	movs	r1, #0
 80052a0:	4630      	mov	r0, r6
 80052a2:	f7fa ffb5 	bl	8000210 <memchr>
 80052a6:	b108      	cbz	r0, 80052ac <_printf_i+0x1e4>
 80052a8:	1b80      	subs	r0, r0, r6
 80052aa:	6060      	str	r0, [r4, #4]
 80052ac:	6863      	ldr	r3, [r4, #4]
 80052ae:	6123      	str	r3, [r4, #16]
 80052b0:	2300      	movs	r3, #0
 80052b2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052b6:	e7aa      	b.n	800520e <_printf_i+0x146>
 80052b8:	6923      	ldr	r3, [r4, #16]
 80052ba:	4632      	mov	r2, r6
 80052bc:	4649      	mov	r1, r9
 80052be:	4640      	mov	r0, r8
 80052c0:	47d0      	blx	sl
 80052c2:	3001      	adds	r0, #1
 80052c4:	d0ad      	beq.n	8005222 <_printf_i+0x15a>
 80052c6:	6823      	ldr	r3, [r4, #0]
 80052c8:	079b      	lsls	r3, r3, #30
 80052ca:	d413      	bmi.n	80052f4 <_printf_i+0x22c>
 80052cc:	68e0      	ldr	r0, [r4, #12]
 80052ce:	9b03      	ldr	r3, [sp, #12]
 80052d0:	4298      	cmp	r0, r3
 80052d2:	bfb8      	it	lt
 80052d4:	4618      	movlt	r0, r3
 80052d6:	e7a6      	b.n	8005226 <_printf_i+0x15e>
 80052d8:	2301      	movs	r3, #1
 80052da:	4632      	mov	r2, r6
 80052dc:	4649      	mov	r1, r9
 80052de:	4640      	mov	r0, r8
 80052e0:	47d0      	blx	sl
 80052e2:	3001      	adds	r0, #1
 80052e4:	d09d      	beq.n	8005222 <_printf_i+0x15a>
 80052e6:	3501      	adds	r5, #1
 80052e8:	68e3      	ldr	r3, [r4, #12]
 80052ea:	9903      	ldr	r1, [sp, #12]
 80052ec:	1a5b      	subs	r3, r3, r1
 80052ee:	42ab      	cmp	r3, r5
 80052f0:	dcf2      	bgt.n	80052d8 <_printf_i+0x210>
 80052f2:	e7eb      	b.n	80052cc <_printf_i+0x204>
 80052f4:	2500      	movs	r5, #0
 80052f6:	f104 0619 	add.w	r6, r4, #25
 80052fa:	e7f5      	b.n	80052e8 <_printf_i+0x220>
 80052fc:	080056e5 	.word	0x080056e5
 8005300:	080056f6 	.word	0x080056f6

08005304 <__sflush_r>:
 8005304:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800530c:	0716      	lsls	r6, r2, #28
 800530e:	4605      	mov	r5, r0
 8005310:	460c      	mov	r4, r1
 8005312:	d454      	bmi.n	80053be <__sflush_r+0xba>
 8005314:	684b      	ldr	r3, [r1, #4]
 8005316:	2b00      	cmp	r3, #0
 8005318:	dc02      	bgt.n	8005320 <__sflush_r+0x1c>
 800531a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800531c:	2b00      	cmp	r3, #0
 800531e:	dd48      	ble.n	80053b2 <__sflush_r+0xae>
 8005320:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005322:	2e00      	cmp	r6, #0
 8005324:	d045      	beq.n	80053b2 <__sflush_r+0xae>
 8005326:	2300      	movs	r3, #0
 8005328:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800532c:	682f      	ldr	r7, [r5, #0]
 800532e:	6a21      	ldr	r1, [r4, #32]
 8005330:	602b      	str	r3, [r5, #0]
 8005332:	d030      	beq.n	8005396 <__sflush_r+0x92>
 8005334:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005336:	89a3      	ldrh	r3, [r4, #12]
 8005338:	0759      	lsls	r1, r3, #29
 800533a:	d505      	bpl.n	8005348 <__sflush_r+0x44>
 800533c:	6863      	ldr	r3, [r4, #4]
 800533e:	1ad2      	subs	r2, r2, r3
 8005340:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005342:	b10b      	cbz	r3, 8005348 <__sflush_r+0x44>
 8005344:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005346:	1ad2      	subs	r2, r2, r3
 8005348:	2300      	movs	r3, #0
 800534a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800534c:	6a21      	ldr	r1, [r4, #32]
 800534e:	4628      	mov	r0, r5
 8005350:	47b0      	blx	r6
 8005352:	1c43      	adds	r3, r0, #1
 8005354:	89a3      	ldrh	r3, [r4, #12]
 8005356:	d106      	bne.n	8005366 <__sflush_r+0x62>
 8005358:	6829      	ldr	r1, [r5, #0]
 800535a:	291d      	cmp	r1, #29
 800535c:	d82b      	bhi.n	80053b6 <__sflush_r+0xb2>
 800535e:	4a2a      	ldr	r2, [pc, #168]	@ (8005408 <__sflush_r+0x104>)
 8005360:	40ca      	lsrs	r2, r1
 8005362:	07d6      	lsls	r6, r2, #31
 8005364:	d527      	bpl.n	80053b6 <__sflush_r+0xb2>
 8005366:	2200      	movs	r2, #0
 8005368:	6062      	str	r2, [r4, #4]
 800536a:	04d9      	lsls	r1, r3, #19
 800536c:	6922      	ldr	r2, [r4, #16]
 800536e:	6022      	str	r2, [r4, #0]
 8005370:	d504      	bpl.n	800537c <__sflush_r+0x78>
 8005372:	1c42      	adds	r2, r0, #1
 8005374:	d101      	bne.n	800537a <__sflush_r+0x76>
 8005376:	682b      	ldr	r3, [r5, #0]
 8005378:	b903      	cbnz	r3, 800537c <__sflush_r+0x78>
 800537a:	6560      	str	r0, [r4, #84]	@ 0x54
 800537c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800537e:	602f      	str	r7, [r5, #0]
 8005380:	b1b9      	cbz	r1, 80053b2 <__sflush_r+0xae>
 8005382:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005386:	4299      	cmp	r1, r3
 8005388:	d002      	beq.n	8005390 <__sflush_r+0x8c>
 800538a:	4628      	mov	r0, r5
 800538c:	f7ff fa9c 	bl	80048c8 <_free_r>
 8005390:	2300      	movs	r3, #0
 8005392:	6363      	str	r3, [r4, #52]	@ 0x34
 8005394:	e00d      	b.n	80053b2 <__sflush_r+0xae>
 8005396:	2301      	movs	r3, #1
 8005398:	4628      	mov	r0, r5
 800539a:	47b0      	blx	r6
 800539c:	4602      	mov	r2, r0
 800539e:	1c50      	adds	r0, r2, #1
 80053a0:	d1c9      	bne.n	8005336 <__sflush_r+0x32>
 80053a2:	682b      	ldr	r3, [r5, #0]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d0c6      	beq.n	8005336 <__sflush_r+0x32>
 80053a8:	2b1d      	cmp	r3, #29
 80053aa:	d001      	beq.n	80053b0 <__sflush_r+0xac>
 80053ac:	2b16      	cmp	r3, #22
 80053ae:	d11e      	bne.n	80053ee <__sflush_r+0xea>
 80053b0:	602f      	str	r7, [r5, #0]
 80053b2:	2000      	movs	r0, #0
 80053b4:	e022      	b.n	80053fc <__sflush_r+0xf8>
 80053b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053ba:	b21b      	sxth	r3, r3
 80053bc:	e01b      	b.n	80053f6 <__sflush_r+0xf2>
 80053be:	690f      	ldr	r7, [r1, #16]
 80053c0:	2f00      	cmp	r7, #0
 80053c2:	d0f6      	beq.n	80053b2 <__sflush_r+0xae>
 80053c4:	0793      	lsls	r3, r2, #30
 80053c6:	680e      	ldr	r6, [r1, #0]
 80053c8:	bf08      	it	eq
 80053ca:	694b      	ldreq	r3, [r1, #20]
 80053cc:	600f      	str	r7, [r1, #0]
 80053ce:	bf18      	it	ne
 80053d0:	2300      	movne	r3, #0
 80053d2:	eba6 0807 	sub.w	r8, r6, r7
 80053d6:	608b      	str	r3, [r1, #8]
 80053d8:	f1b8 0f00 	cmp.w	r8, #0
 80053dc:	dde9      	ble.n	80053b2 <__sflush_r+0xae>
 80053de:	6a21      	ldr	r1, [r4, #32]
 80053e0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80053e2:	4643      	mov	r3, r8
 80053e4:	463a      	mov	r2, r7
 80053e6:	4628      	mov	r0, r5
 80053e8:	47b0      	blx	r6
 80053ea:	2800      	cmp	r0, #0
 80053ec:	dc08      	bgt.n	8005400 <__sflush_r+0xfc>
 80053ee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053f2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053f6:	81a3      	strh	r3, [r4, #12]
 80053f8:	f04f 30ff 	mov.w	r0, #4294967295
 80053fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005400:	4407      	add	r7, r0
 8005402:	eba8 0800 	sub.w	r8, r8, r0
 8005406:	e7e7      	b.n	80053d8 <__sflush_r+0xd4>
 8005408:	20400001 	.word	0x20400001

0800540c <_fflush_r>:
 800540c:	b538      	push	{r3, r4, r5, lr}
 800540e:	690b      	ldr	r3, [r1, #16]
 8005410:	4605      	mov	r5, r0
 8005412:	460c      	mov	r4, r1
 8005414:	b913      	cbnz	r3, 800541c <_fflush_r+0x10>
 8005416:	2500      	movs	r5, #0
 8005418:	4628      	mov	r0, r5
 800541a:	bd38      	pop	{r3, r4, r5, pc}
 800541c:	b118      	cbz	r0, 8005426 <_fflush_r+0x1a>
 800541e:	6a03      	ldr	r3, [r0, #32]
 8005420:	b90b      	cbnz	r3, 8005426 <_fflush_r+0x1a>
 8005422:	f7ff f813 	bl	800444c <__sinit>
 8005426:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800542a:	2b00      	cmp	r3, #0
 800542c:	d0f3      	beq.n	8005416 <_fflush_r+0xa>
 800542e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005430:	07d0      	lsls	r0, r2, #31
 8005432:	d404      	bmi.n	800543e <_fflush_r+0x32>
 8005434:	0599      	lsls	r1, r3, #22
 8005436:	d402      	bmi.n	800543e <_fflush_r+0x32>
 8005438:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800543a:	f7ff fa34 	bl	80048a6 <__retarget_lock_acquire_recursive>
 800543e:	4628      	mov	r0, r5
 8005440:	4621      	mov	r1, r4
 8005442:	f7ff ff5f 	bl	8005304 <__sflush_r>
 8005446:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005448:	07da      	lsls	r2, r3, #31
 800544a:	4605      	mov	r5, r0
 800544c:	d4e4      	bmi.n	8005418 <_fflush_r+0xc>
 800544e:	89a3      	ldrh	r3, [r4, #12]
 8005450:	059b      	lsls	r3, r3, #22
 8005452:	d4e1      	bmi.n	8005418 <_fflush_r+0xc>
 8005454:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005456:	f7ff fa27 	bl	80048a8 <__retarget_lock_release_recursive>
 800545a:	e7dd      	b.n	8005418 <_fflush_r+0xc>

0800545c <__swhatbuf_r>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	460c      	mov	r4, r1
 8005460:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005464:	2900      	cmp	r1, #0
 8005466:	b096      	sub	sp, #88	@ 0x58
 8005468:	4615      	mov	r5, r2
 800546a:	461e      	mov	r6, r3
 800546c:	da0d      	bge.n	800548a <__swhatbuf_r+0x2e>
 800546e:	89a3      	ldrh	r3, [r4, #12]
 8005470:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005474:	f04f 0100 	mov.w	r1, #0
 8005478:	bf14      	ite	ne
 800547a:	2340      	movne	r3, #64	@ 0x40
 800547c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005480:	2000      	movs	r0, #0
 8005482:	6031      	str	r1, [r6, #0]
 8005484:	602b      	str	r3, [r5, #0]
 8005486:	b016      	add	sp, #88	@ 0x58
 8005488:	bd70      	pop	{r4, r5, r6, pc}
 800548a:	466a      	mov	r2, sp
 800548c:	f000 f862 	bl	8005554 <_fstat_r>
 8005490:	2800      	cmp	r0, #0
 8005492:	dbec      	blt.n	800546e <__swhatbuf_r+0x12>
 8005494:	9901      	ldr	r1, [sp, #4]
 8005496:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800549a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800549e:	4259      	negs	r1, r3
 80054a0:	4159      	adcs	r1, r3
 80054a2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80054a6:	e7eb      	b.n	8005480 <__swhatbuf_r+0x24>

080054a8 <__smakebuf_r>:
 80054a8:	898b      	ldrh	r3, [r1, #12]
 80054aa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80054ac:	079d      	lsls	r5, r3, #30
 80054ae:	4606      	mov	r6, r0
 80054b0:	460c      	mov	r4, r1
 80054b2:	d507      	bpl.n	80054c4 <__smakebuf_r+0x1c>
 80054b4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	6123      	str	r3, [r4, #16]
 80054bc:	2301      	movs	r3, #1
 80054be:	6163      	str	r3, [r4, #20]
 80054c0:	b003      	add	sp, #12
 80054c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80054c4:	ab01      	add	r3, sp, #4
 80054c6:	466a      	mov	r2, sp
 80054c8:	f7ff ffc8 	bl	800545c <__swhatbuf_r>
 80054cc:	9f00      	ldr	r7, [sp, #0]
 80054ce:	4605      	mov	r5, r0
 80054d0:	4639      	mov	r1, r7
 80054d2:	4630      	mov	r0, r6
 80054d4:	f7ff fa64 	bl	80049a0 <_malloc_r>
 80054d8:	b948      	cbnz	r0, 80054ee <__smakebuf_r+0x46>
 80054da:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80054de:	059a      	lsls	r2, r3, #22
 80054e0:	d4ee      	bmi.n	80054c0 <__smakebuf_r+0x18>
 80054e2:	f023 0303 	bic.w	r3, r3, #3
 80054e6:	f043 0302 	orr.w	r3, r3, #2
 80054ea:	81a3      	strh	r3, [r4, #12]
 80054ec:	e7e2      	b.n	80054b4 <__smakebuf_r+0xc>
 80054ee:	89a3      	ldrh	r3, [r4, #12]
 80054f0:	6020      	str	r0, [r4, #0]
 80054f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80054f6:	81a3      	strh	r3, [r4, #12]
 80054f8:	9b01      	ldr	r3, [sp, #4]
 80054fa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80054fe:	b15b      	cbz	r3, 8005518 <__smakebuf_r+0x70>
 8005500:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005504:	4630      	mov	r0, r6
 8005506:	f000 f837 	bl	8005578 <_isatty_r>
 800550a:	b128      	cbz	r0, 8005518 <__smakebuf_r+0x70>
 800550c:	89a3      	ldrh	r3, [r4, #12]
 800550e:	f023 0303 	bic.w	r3, r3, #3
 8005512:	f043 0301 	orr.w	r3, r3, #1
 8005516:	81a3      	strh	r3, [r4, #12]
 8005518:	89a3      	ldrh	r3, [r4, #12]
 800551a:	431d      	orrs	r5, r3
 800551c:	81a5      	strh	r5, [r4, #12]
 800551e:	e7cf      	b.n	80054c0 <__smakebuf_r+0x18>

08005520 <memmove>:
 8005520:	4288      	cmp	r0, r1
 8005522:	b510      	push	{r4, lr}
 8005524:	eb01 0402 	add.w	r4, r1, r2
 8005528:	d902      	bls.n	8005530 <memmove+0x10>
 800552a:	4284      	cmp	r4, r0
 800552c:	4623      	mov	r3, r4
 800552e:	d807      	bhi.n	8005540 <memmove+0x20>
 8005530:	1e43      	subs	r3, r0, #1
 8005532:	42a1      	cmp	r1, r4
 8005534:	d008      	beq.n	8005548 <memmove+0x28>
 8005536:	f811 2b01 	ldrb.w	r2, [r1], #1
 800553a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800553e:	e7f8      	b.n	8005532 <memmove+0x12>
 8005540:	4402      	add	r2, r0
 8005542:	4601      	mov	r1, r0
 8005544:	428a      	cmp	r2, r1
 8005546:	d100      	bne.n	800554a <memmove+0x2a>
 8005548:	bd10      	pop	{r4, pc}
 800554a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800554e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8005552:	e7f7      	b.n	8005544 <memmove+0x24>

08005554 <_fstat_r>:
 8005554:	b538      	push	{r3, r4, r5, lr}
 8005556:	4d07      	ldr	r5, [pc, #28]	@ (8005574 <_fstat_r+0x20>)
 8005558:	2300      	movs	r3, #0
 800555a:	4604      	mov	r4, r0
 800555c:	4608      	mov	r0, r1
 800555e:	4611      	mov	r1, r2
 8005560:	602b      	str	r3, [r5, #0]
 8005562:	f7fb ff6a 	bl	800143a <_fstat>
 8005566:	1c43      	adds	r3, r0, #1
 8005568:	d102      	bne.n	8005570 <_fstat_r+0x1c>
 800556a:	682b      	ldr	r3, [r5, #0]
 800556c:	b103      	cbz	r3, 8005570 <_fstat_r+0x1c>
 800556e:	6023      	str	r3, [r4, #0]
 8005570:	bd38      	pop	{r3, r4, r5, pc}
 8005572:	bf00      	nop
 8005574:	200005dc 	.word	0x200005dc

08005578 <_isatty_r>:
 8005578:	b538      	push	{r3, r4, r5, lr}
 800557a:	4d06      	ldr	r5, [pc, #24]	@ (8005594 <_isatty_r+0x1c>)
 800557c:	2300      	movs	r3, #0
 800557e:	4604      	mov	r4, r0
 8005580:	4608      	mov	r0, r1
 8005582:	602b      	str	r3, [r5, #0]
 8005584:	f7fb ff69 	bl	800145a <_isatty>
 8005588:	1c43      	adds	r3, r0, #1
 800558a:	d102      	bne.n	8005592 <_isatty_r+0x1a>
 800558c:	682b      	ldr	r3, [r5, #0]
 800558e:	b103      	cbz	r3, 8005592 <_isatty_r+0x1a>
 8005590:	6023      	str	r3, [r4, #0]
 8005592:	bd38      	pop	{r3, r4, r5, pc}
 8005594:	200005dc 	.word	0x200005dc

08005598 <_sbrk_r>:
 8005598:	b538      	push	{r3, r4, r5, lr}
 800559a:	4d06      	ldr	r5, [pc, #24]	@ (80055b4 <_sbrk_r+0x1c>)
 800559c:	2300      	movs	r3, #0
 800559e:	4604      	mov	r4, r0
 80055a0:	4608      	mov	r0, r1
 80055a2:	602b      	str	r3, [r5, #0]
 80055a4:	f7fb ff72 	bl	800148c <_sbrk>
 80055a8:	1c43      	adds	r3, r0, #1
 80055aa:	d102      	bne.n	80055b2 <_sbrk_r+0x1a>
 80055ac:	682b      	ldr	r3, [r5, #0]
 80055ae:	b103      	cbz	r3, 80055b2 <_sbrk_r+0x1a>
 80055b0:	6023      	str	r3, [r4, #0]
 80055b2:	bd38      	pop	{r3, r4, r5, pc}
 80055b4:	200005dc 	.word	0x200005dc

080055b8 <_realloc_r>:
 80055b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055bc:	4607      	mov	r7, r0
 80055be:	4614      	mov	r4, r2
 80055c0:	460d      	mov	r5, r1
 80055c2:	b921      	cbnz	r1, 80055ce <_realloc_r+0x16>
 80055c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80055c8:	4611      	mov	r1, r2
 80055ca:	f7ff b9e9 	b.w	80049a0 <_malloc_r>
 80055ce:	b92a      	cbnz	r2, 80055dc <_realloc_r+0x24>
 80055d0:	f7ff f97a 	bl	80048c8 <_free_r>
 80055d4:	4625      	mov	r5, r4
 80055d6:	4628      	mov	r0, r5
 80055d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80055dc:	f000 f81a 	bl	8005614 <_malloc_usable_size_r>
 80055e0:	4284      	cmp	r4, r0
 80055e2:	4606      	mov	r6, r0
 80055e4:	d802      	bhi.n	80055ec <_realloc_r+0x34>
 80055e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80055ea:	d8f4      	bhi.n	80055d6 <_realloc_r+0x1e>
 80055ec:	4621      	mov	r1, r4
 80055ee:	4638      	mov	r0, r7
 80055f0:	f7ff f9d6 	bl	80049a0 <_malloc_r>
 80055f4:	4680      	mov	r8, r0
 80055f6:	b908      	cbnz	r0, 80055fc <_realloc_r+0x44>
 80055f8:	4645      	mov	r5, r8
 80055fa:	e7ec      	b.n	80055d6 <_realloc_r+0x1e>
 80055fc:	42b4      	cmp	r4, r6
 80055fe:	4622      	mov	r2, r4
 8005600:	4629      	mov	r1, r5
 8005602:	bf28      	it	cs
 8005604:	4632      	movcs	r2, r6
 8005606:	f7ff f950 	bl	80048aa <memcpy>
 800560a:	4629      	mov	r1, r5
 800560c:	4638      	mov	r0, r7
 800560e:	f7ff f95b 	bl	80048c8 <_free_r>
 8005612:	e7f1      	b.n	80055f8 <_realloc_r+0x40>

08005614 <_malloc_usable_size_r>:
 8005614:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005618:	1f18      	subs	r0, r3, #4
 800561a:	2b00      	cmp	r3, #0
 800561c:	bfbc      	itt	lt
 800561e:	580b      	ldrlt	r3, [r1, r0]
 8005620:	18c0      	addlt	r0, r0, r3
 8005622:	4770      	bx	lr

08005624 <_init>:
 8005624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005626:	bf00      	nop
 8005628:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800562a:	bc08      	pop	{r3}
 800562c:	469e      	mov	lr, r3
 800562e:	4770      	bx	lr

08005630 <_fini>:
 8005630:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005632:	bf00      	nop
 8005634:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005636:	bc08      	pop	{r3}
 8005638:	469e      	mov	lr, r3
 800563a:	4770      	bx	lr
