
LoRa-RPi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005f6c  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800613c  0800613c  0000713c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061f8  080061f8  00008068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080061f8  080061f8  000071f8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006200  08006200  00008068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006200  08006200  00007200  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006204  08006204  00007204  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08006208  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a68  20000068  08006270  00008068  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000ad0  08006270  00008ad0  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00008068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d3f  00000000  00000000  00008098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000338b  00000000  00000000  0001add7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd0  00000000  00000000  0001e168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000bfb  00000000  00000000  0001f138  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024d07  00000000  00000000  0001fd33  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016c8f  00000000  00000000  00044a3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d5b8c  00000000  00000000  0005b6c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00131255  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004988  00000000  00000000  00131298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000064  00000000  00000000  00135c20  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	08006124 	.word	0x08006124

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	08006124 	.word	0x08006124

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	78fa      	ldrb	r2, [r7, #3]
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fb39 	bl	8000c68 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fb54 	bl	8000ca8 <SX1278_hw_SPIReadByte>
 8000600:	4603      	mov	r3, r0
 8000602:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2101      	movs	r1, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f000 faf1 	bl	8000bf2 <SX1278_hw_SetNSS>
	return tmp;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	70fb      	strb	r3, [r7, #3]
 8000626:	4613      	mov	r3, r2
 8000628:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fade 	bl	8000bf2 <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	4610      	mov	r0, r2
 8000646:	f000 fb0f 	bl	8000c68 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	78ba      	ldrb	r2, [r7, #2]
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fb08 	bl	8000c68 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2101      	movs	r1, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fac7 	bl	8000bf2 <SX1278_hw_SetNSS>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <SX1278_SPIBurstRead>:

void SX1278_SPIBurstRead(SX1278_t *module, uint8_t addr, uint8_t *rxBuf,
		uint8_t length) {
 800066c:	b590      	push	{r4, r7, lr}
 800066e:	b087      	sub	sp, #28
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	607a      	str	r2, [r7, #4]
 8000676:	461a      	mov	r2, r3
 8000678:	460b      	mov	r3, r1
 800067a:	72fb      	strb	r3, [r7, #11]
 800067c:	4613      	mov	r3, r2
 800067e:	72bb      	strb	r3, [r7, #10]
	uint8_t i;
	if (length <= 1) {
 8000680:	7abb      	ldrb	r3, [r7, #10]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d927      	bls.n	80006d6 <SX1278_SPIBurstRead+0x6a>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fab0 	bl	8000bf2 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681b      	ldr	r3, [r3, #0]
 8000696:	7afa      	ldrb	r2, [r7, #11]
 8000698:	4611      	mov	r1, r2
 800069a:	4618      	mov	r0, r3
 800069c:	f000 fae4 	bl	8000c68 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80006a0:	2300      	movs	r3, #0
 80006a2:	75fb      	strb	r3, [r7, #23]
 80006a4:	e00c      	b.n	80006c0 <SX1278_SPIBurstRead+0x54>
			*(rxBuf + i) = SX1278_hw_SPIReadByte(module->hw);
 80006a6:	68fb      	ldr	r3, [r7, #12]
 80006a8:	6819      	ldr	r1, [r3, #0]
 80006aa:	7dfb      	ldrb	r3, [r7, #23]
 80006ac:	687a      	ldr	r2, [r7, #4]
 80006ae:	18d4      	adds	r4, r2, r3
 80006b0:	4608      	mov	r0, r1
 80006b2:	f000 faf9 	bl	8000ca8 <SX1278_hw_SPIReadByte>
 80006b6:	4603      	mov	r3, r0
 80006b8:	7023      	strb	r3, [r4, #0]
		for (i = 0; i < length; i++) {
 80006ba:	7dfb      	ldrb	r3, [r7, #23]
 80006bc:	3301      	adds	r3, #1
 80006be:	75fb      	strb	r3, [r7, #23]
 80006c0:	7dfa      	ldrb	r2, [r7, #23]
 80006c2:	7abb      	ldrb	r3, [r7, #10]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d3ee      	bcc.n	80006a6 <SX1278_SPIBurstRead+0x3a>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	2101      	movs	r1, #1
 80006ce:	4618      	mov	r0, r3
 80006d0:	f000 fa8f 	bl	8000bf2 <SX1278_hw_SetNSS>
 80006d4:	e000      	b.n	80006d8 <SX1278_SPIBurstRead+0x6c>
		return;
 80006d6:	bf00      	nop
	}
}
 80006d8:	371c      	adds	r7, #28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd90      	pop	{r4, r7, pc}

080006de <SX1278_SPIBurstWrite>:

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 80006de:	b580      	push	{r7, lr}
 80006e0:	b086      	sub	sp, #24
 80006e2:	af00      	add	r7, sp, #0
 80006e4:	60f8      	str	r0, [r7, #12]
 80006e6:	607a      	str	r2, [r7, #4]
 80006e8:	461a      	mov	r2, r3
 80006ea:	460b      	mov	r3, r1
 80006ec:	72fb      	strb	r3, [r7, #11]
 80006ee:	4613      	mov	r3, r2
 80006f0:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 80006f2:	7abb      	ldrb	r3, [r7, #10]
 80006f4:	2b01      	cmp	r3, #1
 80006f6:	d929      	bls.n	800074c <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 80006f8:	68fb      	ldr	r3, [r7, #12]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	2100      	movs	r1, #0
 80006fe:	4618      	mov	r0, r3
 8000700:	f000 fa77 	bl	8000bf2 <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000704:	68fb      	ldr	r3, [r7, #12]
 8000706:	681a      	ldr	r2, [r3, #0]
 8000708:	7afb      	ldrb	r3, [r7, #11]
 800070a:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800070e:	b2db      	uxtb	r3, r3
 8000710:	4619      	mov	r1, r3
 8000712:	4610      	mov	r0, r2
 8000714:	f000 faa8 	bl	8000c68 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000718:	2300      	movs	r3, #0
 800071a:	75fb      	strb	r3, [r7, #23]
 800071c:	e00b      	b.n	8000736 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 800071e:	68fb      	ldr	r3, [r7, #12]
 8000720:	6818      	ldr	r0, [r3, #0]
 8000722:	7dfb      	ldrb	r3, [r7, #23]
 8000724:	687a      	ldr	r2, [r7, #4]
 8000726:	4413      	add	r3, r2
 8000728:	781b      	ldrb	r3, [r3, #0]
 800072a:	4619      	mov	r1, r3
 800072c:	f000 fa9c 	bl	8000c68 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 8000730:	7dfb      	ldrb	r3, [r7, #23]
 8000732:	3301      	adds	r3, #1
 8000734:	75fb      	strb	r3, [r7, #23]
 8000736:	7dfa      	ldrb	r2, [r7, #23]
 8000738:	7abb      	ldrb	r3, [r7, #10]
 800073a:	429a      	cmp	r2, r3
 800073c:	d3ef      	bcc.n	800071e <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 800073e:	68fb      	ldr	r3, [r7, #12]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	2101      	movs	r1, #1
 8000744:	4618      	mov	r0, r3
 8000746:	f000 fa54 	bl	8000bf2 <SX1278_hw_SetNSS>
 800074a:	e000      	b.n	800074e <SX1278_SPIBurstWrite+0x70>
		return;
 800074c:	bf00      	nop
	}
}
 800074e:	3718      	adds	r7, #24
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}

08000754 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 8000754:	b580      	push	{r7, lr}
 8000756:	b086      	sub	sp, #24
 8000758:	af00      	add	r7, sp, #0
 800075a:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 800075c:	6878      	ldr	r0, [r7, #4]
 800075e:	f000 f90d 	bl	800097c <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 8000762:	200f      	movs	r0, #15
 8000764:	f000 fac6 	bl	8000cf4 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 8000768:	6878      	ldr	r0, [r7, #4]
 800076a:	f000 f917 	bl	800099c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 800076e:	687b      	ldr	r3, [r7, #4]
 8000770:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000774:	f04f 0000 	mov.w	r0, #0
 8000778:	f04f 0100 	mov.w	r1, #0
 800077c:	04d9      	lsls	r1, r3, #19
 800077e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000782:	04d0      	lsls	r0, r2, #19
 8000784:	4a6f      	ldr	r2, [pc, #444]	@ (8000944 <SX1278_config+0x1f0>)
 8000786:	f04f 0300 	mov.w	r3, #0
 800078a:	f7ff fd91 	bl	80002b0 <__aeabi_uldivmod>
 800078e:	4602      	mov	r2, r0
 8000790:	460b      	mov	r3, r1
 8000792:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000796:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800079a:	f04f 0200 	mov.w	r2, #0
 800079e:	f04f 0300 	mov.w	r3, #0
 80007a2:	0c02      	lsrs	r2, r0, #16
 80007a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80007a8:	0c0b      	lsrs	r3, r1, #16
 80007aa:	b2d3      	uxtb	r3, r2
 80007ac:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 80007ae:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80007b2:	f04f 0200 	mov.w	r2, #0
 80007b6:	f04f 0300 	mov.w	r3, #0
 80007ba:	0a02      	lsrs	r2, r0, #8
 80007bc:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 80007c0:	0a0b      	lsrs	r3, r1, #8
 80007c2:	b2d3      	uxtb	r3, r2
 80007c4:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 80007c6:	7c3b      	ldrb	r3, [r7, #16]
 80007c8:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 80007ca:	f107 020c 	add.w	r2, r7, #12
 80007ce:	2303      	movs	r3, #3
 80007d0:	2106      	movs	r1, #6
 80007d2:	6878      	ldr	r0, [r7, #4]
 80007d4:	f7ff ff83 	bl	80006de <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 80007d8:	2234      	movs	r2, #52	@ 0x34
 80007da:	2139      	movs	r1, #57	@ 0x39
 80007dc:	6878      	ldr	r0, [r7, #4]
 80007de:	f7ff ff1c 	bl	800061a <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	7c1b      	ldrb	r3, [r3, #16]
 80007e6:	461a      	mov	r2, r3
 80007e8:	4b57      	ldr	r3, [pc, #348]	@ (8000948 <SX1278_config+0x1f4>)
 80007ea:	5c9b      	ldrb	r3, [r3, r2]
 80007ec:	461a      	mov	r2, r3
 80007ee:	2109      	movs	r1, #9
 80007f0:	6878      	ldr	r0, [r7, #4]
 80007f2:	f7ff ff12 	bl	800061a <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 80007f6:	220b      	movs	r2, #11
 80007f8:	210b      	movs	r1, #11
 80007fa:	6878      	ldr	r0, [r7, #4]
 80007fc:	f7ff ff0d 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000800:	2223      	movs	r2, #35	@ 0x23
 8000802:	210c      	movs	r1, #12
 8000804:	6878      	ldr	r0, [r7, #4]
 8000806:	f7ff ff08 	bl	800061a <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	7c5b      	ldrb	r3, [r3, #17]
 800080e:	461a      	mov	r2, r3
 8000810:	4b4e      	ldr	r3, [pc, #312]	@ (800094c <SX1278_config+0x1f8>)
 8000812:	5c9b      	ldrb	r3, [r3, r2]
 8000814:	2b06      	cmp	r3, #6
 8000816:	d147      	bne.n	80008a8 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	7c9b      	ldrb	r3, [r3, #18]
 800081c:	461a      	mov	r2, r3
 800081e:	4b4c      	ldr	r3, [pc, #304]	@ (8000950 <SX1278_config+0x1fc>)
 8000820:	5c9b      	ldrb	r3, [r3, r2]
 8000822:	011b      	lsls	r3, r3, #4
 8000824:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	7cdb      	ldrb	r3, [r3, #19]
 800082a:	4619      	mov	r1, r3
 800082c:	4b49      	ldr	r3, [pc, #292]	@ (8000954 <SX1278_config+0x200>)
 800082e:	5c5b      	ldrb	r3, [r3, r1]
 8000830:	005b      	lsls	r3, r3, #1
 8000832:	b2db      	uxtb	r3, r3
 8000834:	4413      	add	r3, r2
 8000836:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000838:	3301      	adds	r3, #1
 800083a:	b2db      	uxtb	r3, r3
 800083c:	461a      	mov	r2, r3
 800083e:	211d      	movs	r1, #29
 8000840:	6878      	ldr	r0, [r7, #4]
 8000842:	f7ff feea 	bl	800061a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7c5b      	ldrb	r3, [r3, #17]
 800084a:	461a      	mov	r2, r3
 800084c:	4b3f      	ldr	r3, [pc, #252]	@ (800094c <SX1278_config+0x1f8>)
 800084e:	5c9b      	ldrb	r3, [r3, r2]
 8000850:	011b      	lsls	r3, r3, #4
 8000852:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 8000854:	687b      	ldr	r3, [r7, #4]
 8000856:	7d1b      	ldrb	r3, [r3, #20]
 8000858:	4619      	mov	r1, r3
 800085a:	4b3f      	ldr	r3, [pc, #252]	@ (8000958 <SX1278_config+0x204>)
 800085c:	5c5b      	ldrb	r3, [r3, r1]
 800085e:	009b      	lsls	r3, r3, #2
 8000860:	b2db      	uxtb	r3, r3
 8000862:	4413      	add	r3, r2
 8000864:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000866:	3303      	adds	r3, #3
 8000868:	b2db      	uxtb	r3, r3
 800086a:	461a      	mov	r2, r3
 800086c:	211e      	movs	r1, #30
 800086e:	6878      	ldr	r0, [r7, #4]
 8000870:	f7ff fed3 	bl	800061a <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000874:	2131      	movs	r1, #49	@ 0x31
 8000876:	6878      	ldr	r0, [r7, #4]
 8000878:	f7ff feb0 	bl	80005dc <SX1278_SPIRead>
 800087c:	4603      	mov	r3, r0
 800087e:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000880:	7bfb      	ldrb	r3, [r7, #15]
 8000882:	f023 0307 	bic.w	r3, r3, #7
 8000886:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000888:	7bfb      	ldrb	r3, [r7, #15]
 800088a:	f043 0305 	orr.w	r3, r3, #5
 800088e:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000890:	7bfb      	ldrb	r3, [r7, #15]
 8000892:	461a      	mov	r2, r3
 8000894:	2131      	movs	r1, #49	@ 0x31
 8000896:	6878      	ldr	r0, [r7, #4]
 8000898:	f7ff febf 	bl	800061a <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800089c:	220c      	movs	r2, #12
 800089e:	2137      	movs	r1, #55	@ 0x37
 80008a0:	6878      	ldr	r0, [r7, #4]
 80008a2:	f7ff feba 	bl	800061a <SX1278_SPIWrite>
 80008a6:	e029      	b.n	80008fc <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	7c9b      	ldrb	r3, [r3, #18]
 80008ac:	461a      	mov	r2, r3
 80008ae:	4b28      	ldr	r3, [pc, #160]	@ (8000950 <SX1278_config+0x1fc>)
 80008b0:	5c9b      	ldrb	r3, [r3, r2]
 80008b2:	011b      	lsls	r3, r3, #4
 80008b4:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	7cdb      	ldrb	r3, [r3, #19]
 80008ba:	4619      	mov	r1, r3
 80008bc:	4b25      	ldr	r3, [pc, #148]	@ (8000954 <SX1278_config+0x200>)
 80008be:	5c5b      	ldrb	r3, [r3, r1]
 80008c0:	005b      	lsls	r3, r3, #1
 80008c2:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80008c4:	4413      	add	r3, r2
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	461a      	mov	r2, r3
 80008ca:	211d      	movs	r1, #29
 80008cc:	6878      	ldr	r0, [r7, #4]
 80008ce:	f7ff fea4 	bl	800061a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80008d2:	687b      	ldr	r3, [r7, #4]
 80008d4:	7c5b      	ldrb	r3, [r3, #17]
 80008d6:	461a      	mov	r2, r3
 80008d8:	4b1c      	ldr	r3, [pc, #112]	@ (800094c <SX1278_config+0x1f8>)
 80008da:	5c9b      	ldrb	r3, [r3, r2]
 80008dc:	011b      	lsls	r3, r3, #4
 80008de:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	7d1b      	ldrb	r3, [r3, #20]
 80008e4:	4619      	mov	r1, r3
 80008e6:	4b1c      	ldr	r3, [pc, #112]	@ (8000958 <SX1278_config+0x204>)
 80008e8:	5c5b      	ldrb	r3, [r3, r1]
 80008ea:	009b      	lsls	r3, r3, #2
 80008ec:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80008ee:	4413      	add	r3, r2
 80008f0:	b2db      	uxtb	r3, r3
 80008f2:	461a      	mov	r2, r3
 80008f4:	211e      	movs	r1, #30
 80008f6:	6878      	ldr	r0, [r7, #4]
 80008f8:	f7ff fe8f 	bl	800061a <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 80008fc:	2204      	movs	r2, #4
 80008fe:	2126      	movs	r1, #38	@ 0x26
 8000900:	6878      	ldr	r0, [r7, #4]
 8000902:	f7ff fe8a 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000906:	2208      	movs	r2, #8
 8000908:	211f      	movs	r1, #31
 800090a:	6878      	ldr	r0, [r7, #4]
 800090c:	f7ff fe85 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 8000910:	2200      	movs	r2, #0
 8000912:	2120      	movs	r1, #32
 8000914:	6878      	ldr	r0, [r7, #4]
 8000916:	f7ff fe80 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 800091a:	2208      	movs	r2, #8
 800091c:	2121      	movs	r1, #33	@ 0x21
 800091e:	6878      	ldr	r0, [r7, #4]
 8000920:	f7ff fe7b 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 8000924:	2201      	movs	r2, #1
 8000926:	2141      	movs	r1, #65	@ 0x41
 8000928:	6878      	ldr	r0, [r7, #4]
 800092a:	f7ff fe76 	bl	800061a <SX1278_SPIWrite>
	module->readBytes = 0;
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	2200      	movs	r2, #0
 8000932:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 8000936:	6878      	ldr	r0, [r7, #4]
 8000938:	f000 f810 	bl	800095c <SX1278_standby>
}
 800093c:	bf00      	nop
 800093e:	3718      	adds	r7, #24
 8000940:	46bd      	mov	sp, r7
 8000942:	bd80      	pop	{r7, pc}
 8000944:	01e84800 	.word	0x01e84800
 8000948:	08006188 	.word	0x08006188
 800094c:	08006190 	.word	0x08006190
 8000950:	08006198 	.word	0x08006198
 8000954:	080061a4 	.word	0x080061a4
 8000958:	080061a8 	.word	0x080061a8

0800095c <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 800095c:	b580      	push	{r7, lr}
 800095e:	b082      	sub	sp, #8
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 8000964:	2209      	movs	r2, #9
 8000966:	2101      	movs	r1, #1
 8000968:	6878      	ldr	r0, [r7, #4]
 800096a:	f7ff fe56 	bl	800061a <SX1278_SPIWrite>
	module->status = STANDBY;
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	2201      	movs	r2, #1
 8000972:	759a      	strb	r2, [r3, #22]
}
 8000974:	bf00      	nop
 8000976:	3708      	adds	r7, #8
 8000978:	46bd      	mov	sp, r7
 800097a:	bd80      	pop	{r7, pc}

0800097c <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800097c:	b580      	push	{r7, lr}
 800097e:	b082      	sub	sp, #8
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000984:	2208      	movs	r2, #8
 8000986:	2101      	movs	r1, #1
 8000988:	6878      	ldr	r0, [r7, #4]
 800098a:	f7ff fe46 	bl	800061a <SX1278_SPIWrite>
	module->status = SLEEP;
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	2200      	movs	r2, #0
 8000992:	759a      	strb	r2, [r3, #22]
}
 8000994:	bf00      	nop
 8000996:	3708      	adds	r7, #8
 8000998:	46bd      	mov	sp, r7
 800099a:	bd80      	pop	{r7, pc}

0800099c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 800099c:	b580      	push	{r7, lr}
 800099e:	b082      	sub	sp, #8
 80009a0:	af00      	add	r7, sp, #0
 80009a2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 80009a4:	2288      	movs	r2, #136	@ 0x88
 80009a6:	2101      	movs	r1, #1
 80009a8:	6878      	ldr	r0, [r7, #4]
 80009aa:	f7ff fe36 	bl	800061a <SX1278_SPIWrite>
}
 80009ae:	bf00      	nop
 80009b0:	3708      	adds	r7, #8
 80009b2:	46bd      	mov	sp, r7
 80009b4:	bd80      	pop	{r7, pc}

080009b6 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 80009b6:	b580      	push	{r7, lr}
 80009b8:	b082      	sub	sp, #8
 80009ba:	af00      	add	r7, sp, #0
 80009bc:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 80009be:	22ff      	movs	r2, #255	@ 0xff
 80009c0:	2112      	movs	r1, #18
 80009c2:	6878      	ldr	r0, [r7, #4]
 80009c4:	f7ff fe29 	bl	800061a <SX1278_SPIWrite>
}
 80009c8:	bf00      	nop
 80009ca:	3708      	adds	r7, #8
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bd80      	pop	{r7, pc}

080009d0 <SX1278_LoRaEntryRx>:

int SX1278_LoRaEntryRx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b086      	sub	sp, #24
 80009d4:	af00      	add	r7, sp, #0
 80009d6:	60f8      	str	r0, [r7, #12]
 80009d8:	460b      	mov	r3, r1
 80009da:	607a      	str	r2, [r7, #4]
 80009dc:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;

	module->packetLength = length;
 80009de:	68fb      	ldr	r3, [r7, #12]
 80009e0:	7afa      	ldrb	r2, [r7, #11]
 80009e2:	755a      	strb	r2, [r3, #21]

	SX1278_config(module);		//Setting base parameter
 80009e4:	68f8      	ldr	r0, [r7, #12]
 80009e6:	f7ff feb5 	bl	8000754 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x84);	//Normal and RX
 80009ea:	2284      	movs	r2, #132	@ 0x84
 80009ec:	214d      	movs	r1, #77	@ 0x4d
 80009ee:	68f8      	ldr	r0, [r7, #12]
 80009f0:	f7ff fe13 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0xFF);	//No FHSS
 80009f4:	22ff      	movs	r2, #255	@ 0xff
 80009f6:	2124      	movs	r1, #36	@ 0x24
 80009f8:	68f8      	ldr	r0, [r7, #12]
 80009fa:	f7ff fe0e 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x01);//DIO=00,DIO1=00,DIO2=00, DIO3=01
 80009fe:	2201      	movs	r2, #1
 8000a00:	2140      	movs	r1, #64	@ 0x40
 8000a02:	68f8      	ldr	r0, [r7, #12]
 8000a04:	f7ff fe09 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0x3F);//Open RxDone interrupt & Timeout
 8000a08:	223f      	movs	r2, #63	@ 0x3f
 8000a0a:	2111      	movs	r1, #17
 8000a0c:	68f8      	ldr	r0, [r7, #12]
 8000a0e:	f7ff fe04 	bl	800061a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000a12:	68f8      	ldr	r0, [r7, #12]
 8000a14:	f7ff ffcf 	bl	80009b6 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length);//Payload Length 21byte(this register must difine when the data long of one byte in SF is 6)
 8000a18:	7afb      	ldrb	r3, [r7, #11]
 8000a1a:	461a      	mov	r2, r3
 8000a1c:	2122      	movs	r1, #34	@ 0x22
 8000a1e:	68f8      	ldr	r0, [r7, #12]
 8000a20:	f7ff fdfb 	bl	800061a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoRxBaseAddr); //Read RxBaseAddr
 8000a24:	210f      	movs	r1, #15
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f7ff fdd8 	bl	80005dc <SX1278_SPIRead>
 8000a2c:	4603      	mov	r3, r0
 8000a2e:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr->FiFoAddrPtr
 8000a30:	7dfb      	ldrb	r3, [r7, #23]
 8000a32:	461a      	mov	r2, r3
 8000a34:	210d      	movs	r1, #13
 8000a36:	68f8      	ldr	r0, [r7, #12]
 8000a38:	f7ff fdef 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8d);	//Mode//Low Frequency Mode
 8000a3c:	228d      	movs	r2, #141	@ 0x8d
 8000a3e:	2101      	movs	r1, #1
 8000a40:	68f8      	ldr	r0, [r7, #12]
 8000a42:	f7ff fdea 	bl	800061a <SX1278_SPIWrite>
	//SX1278_SPIWrite(module, LR_RegOpMode,0x05);	//Continuous Rx Mode //High Frequency Mode
	module->readBytes = 0;
 8000a46:	68fb      	ldr	r3, [r7, #12]
 8000a48:	2200      	movs	r2, #0
 8000a4a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117

	while (1) {
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000a4e:	2118      	movs	r1, #24
 8000a50:	68f8      	ldr	r0, [r7, #12]
 8000a52:	f7ff fdc3 	bl	80005dc <SX1278_SPIRead>
 8000a56:	4603      	mov	r3, r0
 8000a58:	f003 0304 	and.w	r3, r3, #4
 8000a5c:	2b04      	cmp	r3, #4
 8000a5e:	d104      	bne.n	8000a6a <SX1278_LoRaEntryRx+0x9a>
			module->status = RX;
 8000a60:	68fb      	ldr	r3, [r7, #12]
 8000a62:	2203      	movs	r2, #3
 8000a64:	759a      	strb	r2, [r3, #22]
			return 1;
 8000a66:	2301      	movs	r3, #1
 8000a68:	e013      	b.n	8000a92 <SX1278_LoRaEntryRx+0xc2>
		}
		if (--timeout == 0) {
 8000a6a:	687b      	ldr	r3, [r7, #4]
 8000a6c:	3b01      	subs	r3, #1
 8000a6e:	607b      	str	r3, [r7, #4]
 8000a70:	687b      	ldr	r3, [r7, #4]
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d109      	bne.n	8000a8a <SX1278_LoRaEntryRx+0xba>
			SX1278_hw_Reset(module->hw);
 8000a76:	68fb      	ldr	r3, [r7, #12]
 8000a78:	681b      	ldr	r3, [r3, #0]
 8000a7a:	4618      	mov	r0, r3
 8000a7c:	f000 f8d0 	bl	8000c20 <SX1278_hw_Reset>
			SX1278_config(module);
 8000a80:	68f8      	ldr	r0, [r7, #12]
 8000a82:	f7ff fe67 	bl	8000754 <SX1278_config>
			return 0;
 8000a86:	2300      	movs	r3, #0
 8000a88:	e003      	b.n	8000a92 <SX1278_LoRaEntryRx+0xc2>
		}
		SX1278_hw_DelayMs(1);
 8000a8a:	2001      	movs	r0, #1
 8000a8c:	f000 f932 	bl	8000cf4 <SX1278_hw_DelayMs>
		if ((SX1278_SPIRead(module, LR_RegModemStat) & 0x04) == 0x04) {	//Rx-on going RegModemStat
 8000a90:	e7dd      	b.n	8000a4e <SX1278_LoRaEntryRx+0x7e>
	}
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3718      	adds	r7, #24
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}

08000a9a <SX1278_LoRaRxPacket>:

uint8_t SX1278_LoRaRxPacket(SX1278_t *module) {
 8000a9a:	b580      	push	{r7, lr}
 8000a9c:	b084      	sub	sp, #16
 8000a9e:	af00      	add	r7, sp, #0
 8000aa0:	6078      	str	r0, [r7, #4]
	unsigned char addr;
	unsigned char packet_size;

	if (SX1278_hw_GetDIO0(module->hw)) {
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	681b      	ldr	r3, [r3, #0]
 8000aa6:	4618      	mov	r0, r3
 8000aa8:	f000 f92f 	bl	8000d0a <SX1278_hw_GetDIO0>
 8000aac:	4603      	mov	r3, r0
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d030      	beq.n	8000b14 <SX1278_LoRaRxPacket+0x7a>
		memset(module->rxBuffer, 0x00, SX1278_MAX_PACKET);
 8000ab2:	687b      	ldr	r3, [r7, #4]
 8000ab4:	3317      	adds	r3, #23
 8000ab6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000aba:	2100      	movs	r1, #0
 8000abc:	4618      	mov	r0, r3
 8000abe:	f004 fbf9 	bl	80052b4 <memset>

		addr = SX1278_SPIRead(module, LR_RegFifoRxCurrentaddr); //last packet addr
 8000ac2:	2110      	movs	r1, #16
 8000ac4:	6878      	ldr	r0, [r7, #4]
 8000ac6:	f7ff fd89 	bl	80005dc <SX1278_SPIRead>
 8000aca:	4603      	mov	r3, r0
 8000acc:	73bb      	strb	r3, [r7, #14]
		SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RxBaseAddr -> FiFoAddrPtr
 8000ace:	7bbb      	ldrb	r3, [r7, #14]
 8000ad0:	461a      	mov	r2, r3
 8000ad2:	210d      	movs	r1, #13
 8000ad4:	6878      	ldr	r0, [r7, #4]
 8000ad6:	f7ff fda0 	bl	800061a <SX1278_SPIWrite>

		if (module->LoRa_SF == SX1278_LORA_SF_6) { //When SpreadFactor is six,will used Implicit Header mode(Excluding internal packet length)
 8000ada:	687b      	ldr	r3, [r7, #4]
 8000adc:	7c5b      	ldrb	r3, [r3, #17]
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d103      	bne.n	8000aea <SX1278_LoRaRxPacket+0x50>
			packet_size = module->packetLength;
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	7d5b      	ldrb	r3, [r3, #21]
 8000ae6:	73fb      	strb	r3, [r7, #15]
 8000ae8:	e005      	b.n	8000af6 <SX1278_LoRaRxPacket+0x5c>
		} else {
			packet_size = SX1278_SPIRead(module, LR_RegRxNbBytes); //Number for received bytes
 8000aea:	2113      	movs	r1, #19
 8000aec:	6878      	ldr	r0, [r7, #4]
 8000aee:	f7ff fd75 	bl	80005dc <SX1278_SPIRead>
 8000af2:	4603      	mov	r3, r0
 8000af4:	73fb      	strb	r3, [r7, #15]
		}

		SX1278_SPIBurstRead(module, 0x00, module->rxBuffer, packet_size);
 8000af6:	687b      	ldr	r3, [r7, #4]
 8000af8:	f103 0217 	add.w	r2, r3, #23
 8000afc:	7bfb      	ldrb	r3, [r7, #15]
 8000afe:	2100      	movs	r1, #0
 8000b00:	6878      	ldr	r0, [r7, #4]
 8000b02:	f7ff fdb3 	bl	800066c <SX1278_SPIBurstRead>
		module->readBytes = packet_size;
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	7bfa      	ldrb	r2, [r7, #15]
 8000b0a:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
		SX1278_clearLoRaIrq(module);
 8000b0e:	6878      	ldr	r0, [r7, #4]
 8000b10:	f7ff ff51 	bl	80009b6 <SX1278_clearLoRaIrq>
	}
	return module->readBytes;
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
}
 8000b1a:	4618      	mov	r0, r3
 8000b1c:	3710      	adds	r7, #16
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <SX1278_init>:
	}
}

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b084      	sub	sp, #16
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	60f8      	str	r0, [r7, #12]
 8000b2a:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000b2e:	68fb      	ldr	r3, [r7, #12]
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	4618      	mov	r0, r3
 8000b34:	f000 f848 	bl	8000bc8 <SX1278_hw_init>
	module->frequency = frequency;
 8000b38:	68f9      	ldr	r1, [r7, #12]
 8000b3a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b3e:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000b42:	68fb      	ldr	r3, [r7, #12]
 8000b44:	7e3a      	ldrb	r2, [r7, #24]
 8000b46:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000b48:	68fb      	ldr	r3, [r7, #12]
 8000b4a:	7f3a      	ldrb	r2, [r7, #28]
 8000b4c:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000b54:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000b5c:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000b5e:	68fb      	ldr	r3, [r7, #12]
 8000b60:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000b64:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000b6c:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000b6e:	68f8      	ldr	r0, [r7, #12]
 8000b70:	f7ff fdf0 	bl	8000754 <SX1278_config>
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}

08000b7c <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b084      	sub	sp, #16
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	4613      	mov	r3, r2
 8000b88:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b90:	79fa      	ldrb	r2, [r7, #7]
 8000b92:	429a      	cmp	r2, r3
 8000b94:	d003      	beq.n	8000b9e <SX1278_read+0x22>
		length = module->readBytes;
 8000b96:	68fb      	ldr	r3, [r7, #12]
 8000b98:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b9c:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b9e:	68fb      	ldr	r3, [r7, #12]
 8000ba0:	3317      	adds	r3, #23
 8000ba2:	79fa      	ldrb	r2, [r7, #7]
 8000ba4:	4619      	mov	r1, r3
 8000ba6:	68b8      	ldr	r0, [r7, #8]
 8000ba8:	f004 fbff 	bl	80053aa <memcpy>
	rxBuf[length] = '\0';
 8000bac:	79fb      	ldrb	r3, [r7, #7]
 8000bae:	68ba      	ldr	r2, [r7, #8]
 8000bb0:	4413      	add	r3, r2
 8000bb2:	2200      	movs	r2, #0
 8000bb4:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000bb6:	68fb      	ldr	r3, [r7, #12]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8000bbe:	79fb      	ldrb	r3, [r7, #7]
}
 8000bc0:	4618      	mov	r0, r3
 8000bc2:	3710      	adds	r7, #16
 8000bc4:	46bd      	mov	sp, r7
 8000bc6:	bd80      	pop	{r7, pc}

08000bc8 <SX1278_hw_init>:
#include <string.h>

#include "gpio.h"
#include "spi.h"

__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000bc8:	b580      	push	{r7, lr}
 8000bca:	b082      	sub	sp, #8
 8000bcc:	af00      	add	r7, sp, #0
 8000bce:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000bd0:	2101      	movs	r1, #1
 8000bd2:	6878      	ldr	r0, [r7, #4]
 8000bd4:	f000 f80d 	bl	8000bf2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	6858      	ldr	r0, [r3, #4]
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	681b      	ldr	r3, [r3, #0]
 8000be0:	b29b      	uxth	r3, r3
 8000be2:	2201      	movs	r2, #1
 8000be4:	4619      	mov	r1, r3
 8000be6:	f001 f98b 	bl	8001f00 <HAL_GPIO_WritePin>
}
 8000bea:	bf00      	nop
 8000bec:	3708      	adds	r7, #8
 8000bee:	46bd      	mov	sp, r7
 8000bf0:	bd80      	pop	{r7, pc}

08000bf2 <SX1278_hw_SetNSS>:

__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000bf2:	b580      	push	{r7, lr}
 8000bf4:	b082      	sub	sp, #8
 8000bf6:	af00      	add	r7, sp, #0
 8000bf8:	6078      	str	r0, [r7, #4]
 8000bfa:	6039      	str	r1, [r7, #0]
	HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	6958      	ldr	r0, [r3, #20]
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	691b      	ldr	r3, [r3, #16]
 8000c04:	b299      	uxth	r1, r3
 8000c06:	683b      	ldr	r3, [r7, #0]
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	bf0c      	ite	eq
 8000c0c:	2301      	moveq	r3, #1
 8000c0e:	2300      	movne	r3, #0
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	461a      	mov	r2, r3
 8000c14:	f001 f974 	bl	8001f00 <HAL_GPIO_WritePin>
			(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
}
 8000c18:	bf00      	nop
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}

08000c20 <SX1278_hw_Reset>:

__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000c20:	b580      	push	{r7, lr}
 8000c22:	b082      	sub	sp, #8
 8000c24:	af00      	add	r7, sp, #0
 8000c26:	6078      	str	r0, [r7, #4]
	SX1278_hw_SetNSS(hw, 1);
 8000c28:	2101      	movs	r1, #1
 8000c2a:	6878      	ldr	r0, [r7, #4]
 8000c2c:	f7ff ffe1 	bl	8000bf2 <SX1278_hw_SetNSS>
	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6858      	ldr	r0, [r3, #4]
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	681b      	ldr	r3, [r3, #0]
 8000c38:	b29b      	uxth	r3, r3
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	4619      	mov	r1, r3
 8000c3e:	f001 f95f 	bl	8001f00 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(1);
 8000c42:	2001      	movs	r0, #1
 8000c44:	f000 f856 	bl	8000cf4 <SX1278_hw_DelayMs>

	HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000c48:	687b      	ldr	r3, [r7, #4]
 8000c4a:	6858      	ldr	r0, [r3, #4]
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	681b      	ldr	r3, [r3, #0]
 8000c50:	b29b      	uxth	r3, r3
 8000c52:	2201      	movs	r2, #1
 8000c54:	4619      	mov	r1, r3
 8000c56:	f001 f953 	bl	8001f00 <HAL_GPIO_WritePin>

	SX1278_hw_DelayMs(100);
 8000c5a:	2064      	movs	r0, #100	@ 0x64
 8000c5c:	f000 f84a 	bl	8000cf4 <SX1278_hw_DelayMs>
}
 8000c60:	bf00      	nop
 8000c62:	3708      	adds	r7, #8
 8000c64:	46bd      	mov	sp, r7
 8000c66:	bd80      	pop	{r7, pc}

08000c68 <SX1278_hw_SPICommand>:

__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
 8000c70:	460b      	mov	r3, r1
 8000c72:	70fb      	strb	r3, [r7, #3]
	SX1278_hw_SetNSS(hw, 0);
 8000c74:	2100      	movs	r1, #0
 8000c76:	6878      	ldr	r0, [r7, #4]
 8000c78:	f7ff ffbb 	bl	8000bf2 <SX1278_hw_SetNSS>
	HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	6998      	ldr	r0, [r3, #24]
 8000c80:	1cf9      	adds	r1, r7, #3
 8000c82:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c86:	2201      	movs	r2, #1
 8000c88:	f002 fe1b 	bl	80038c2 <HAL_SPI_Transmit>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c8c:	bf00      	nop
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	699b      	ldr	r3, [r3, #24]
 8000c92:	4618      	mov	r0, r3
 8000c94:	f003 fa0c 	bl	80040b0 <HAL_SPI_GetState>
 8000c98:	4603      	mov	r3, r0
 8000c9a:	2b01      	cmp	r3, #1
 8000c9c:	d1f7      	bne.n	8000c8e <SX1278_hw_SPICommand+0x26>
		;
}
 8000c9e:	bf00      	nop
 8000ca0:	bf00      	nop
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}

08000ca8 <SX1278_hw_SPIReadByte>:

__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b086      	sub	sp, #24
 8000cac:	af02      	add	r7, sp, #8
 8000cae:	6078      	str	r0, [r7, #4]
	uint8_t txByte = 0x00;
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	73fb      	strb	r3, [r7, #15]
	uint8_t rxByte = 0x00;
 8000cb4:	2300      	movs	r3, #0
 8000cb6:	73bb      	strb	r3, [r7, #14]

	SX1278_hw_SetNSS(hw, 0);
 8000cb8:	2100      	movs	r1, #0
 8000cba:	6878      	ldr	r0, [r7, #4]
 8000cbc:	f7ff ff99 	bl	8000bf2 <SX1278_hw_SetNSS>
	HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	6998      	ldr	r0, [r3, #24]
 8000cc4:	f107 020e 	add.w	r2, r7, #14
 8000cc8:	f107 010f 	add.w	r1, r7, #15
 8000ccc:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000cd0:	9300      	str	r3, [sp, #0]
 8000cd2:	2301      	movs	r3, #1
 8000cd4:	f002 ff39 	bl	8003b4a <HAL_SPI_TransmitReceive>
	while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000cd8:	bf00      	nop
 8000cda:	687b      	ldr	r3, [r7, #4]
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	4618      	mov	r0, r3
 8000ce0:	f003 f9e6 	bl	80040b0 <HAL_SPI_GetState>
 8000ce4:	4603      	mov	r3, r0
 8000ce6:	2b01      	cmp	r3, #1
 8000ce8:	d1f7      	bne.n	8000cda <SX1278_hw_SPIReadByte+0x32>
		;
	return rxByte;
 8000cea:	7bbb      	ldrb	r3, [r7, #14]
}
 8000cec:	4618      	mov	r0, r3
 8000cee:	3710      	adds	r7, #16
 8000cf0:	46bd      	mov	sp, r7
 8000cf2:	bd80      	pop	{r7, pc}

08000cf4 <SX1278_hw_DelayMs>:

__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b082      	sub	sp, #8
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
	HAL_Delay(msec);
 8000cfc:	6878      	ldr	r0, [r7, #4]
 8000cfe:	f000 fdfb 	bl	80018f8 <HAL_Delay>
}
 8000d02:	bf00      	nop
 8000d04:	3708      	adds	r7, #8
 8000d06:	46bd      	mov	sp, r7
 8000d08:	bd80      	pop	{r7, pc}

08000d0a <SX1278_hw_GetDIO0>:

__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000d0a:	b580      	push	{r7, lr}
 8000d0c:	b082      	sub	sp, #8
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
	return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000d12:	687b      	ldr	r3, [r7, #4]
 8000d14:	68da      	ldr	r2, [r3, #12]
 8000d16:	687b      	ldr	r3, [r7, #4]
 8000d18:	689b      	ldr	r3, [r3, #8]
 8000d1a:	b29b      	uxth	r3, r3
 8000d1c:	4619      	mov	r1, r3
 8000d1e:	4610      	mov	r0, r2
 8000d20:	f001 f8d6 	bl	8001ed0 <HAL_GPIO_ReadPin>
 8000d24:	4603      	mov	r3, r0
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	bf0c      	ite	eq
 8000d2a:	2301      	moveq	r3, #1
 8000d2c:	2300      	movne	r3, #0
 8000d2e:	b2db      	uxtb	r3, r3
}
 8000d30:	4618      	mov	r0, r3
 8000d32:	3708      	adds	r7, #8
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}

08000d38 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	b08c      	sub	sp, #48	@ 0x30
 8000d3c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3e:	f107 031c 	add.w	r3, r7, #28
 8000d42:	2200      	movs	r2, #0
 8000d44:	601a      	str	r2, [r3, #0]
 8000d46:	605a      	str	r2, [r3, #4]
 8000d48:	609a      	str	r2, [r3, #8]
 8000d4a:	60da      	str	r2, [r3, #12]
 8000d4c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000d4e:	2300      	movs	r3, #0
 8000d50:	61bb      	str	r3, [r7, #24]
 8000d52:	4b62      	ldr	r3, [pc, #392]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000d54:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d56:	4a61      	ldr	r2, [pc, #388]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000d58:	f043 0304 	orr.w	r3, r3, #4
 8000d5c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d5e:	4b5f      	ldr	r3, [pc, #380]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000d60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d62:	f003 0304 	and.w	r3, r3, #4
 8000d66:	61bb      	str	r3, [r7, #24]
 8000d68:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000d6a:	2300      	movs	r3, #0
 8000d6c:	617b      	str	r3, [r7, #20]
 8000d6e:	4b5b      	ldr	r3, [pc, #364]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d72:	4a5a      	ldr	r2, [pc, #360]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000d74:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000d78:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d7a:	4b58      	ldr	r3, [pc, #352]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000d82:	617b      	str	r3, [r7, #20]
 8000d84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d86:	2300      	movs	r3, #0
 8000d88:	613b      	str	r3, [r7, #16]
 8000d8a:	4b54      	ldr	r3, [pc, #336]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000d8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d8e:	4a53      	ldr	r2, [pc, #332]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000d90:	f043 0301 	orr.w	r3, r3, #1
 8000d94:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d96:	4b51      	ldr	r3, [pc, #324]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000d98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d9a:	f003 0301 	and.w	r3, r3, #1
 8000d9e:	613b      	str	r3, [r7, #16]
 8000da0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000da2:	2300      	movs	r3, #0
 8000da4:	60fb      	str	r3, [r7, #12]
 8000da6:	4b4d      	ldr	r3, [pc, #308]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000da8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000daa:	4a4c      	ldr	r2, [pc, #304]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000dac:	f043 0302 	orr.w	r3, r3, #2
 8000db0:	6313      	str	r3, [r2, #48]	@ 0x30
 8000db2:	4b4a      	ldr	r3, [pc, #296]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000db4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000db6:	f003 0302 	and.w	r3, r3, #2
 8000dba:	60fb      	str	r3, [r7, #12]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000dbe:	2300      	movs	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
 8000dc2:	4b46      	ldr	r3, [pc, #280]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dc6:	4a45      	ldr	r2, [pc, #276]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000dc8:	f043 0308 	orr.w	r3, r3, #8
 8000dcc:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dce:	4b43      	ldr	r3, [pc, #268]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dd2:	f003 0308 	and.w	r3, r3, #8
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000dda:	2300      	movs	r3, #0
 8000ddc:	607b      	str	r3, [r7, #4]
 8000dde:	4b3f      	ldr	r3, [pc, #252]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000de2:	4a3e      	ldr	r2, [pc, #248]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000de4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000de8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000dea:	4b3c      	ldr	r3, [pc, #240]	@ (8000edc <MX_GPIO_Init+0x1a4>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000dee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000df6:	2201      	movs	r2, #1
 8000df8:	2110      	movs	r1, #16
 8000dfa:	4839      	ldr	r0, [pc, #228]	@ (8000ee0 <MX_GPIO_Init+0x1a8>)
 8000dfc:	f001 f880 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e00:	2200      	movs	r2, #0
 8000e02:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000e06:	4837      	ldr	r0, [pc, #220]	@ (8000ee4 <MX_GPIO_Init+0x1ac>)
 8000e08:	f001 f87a 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	2140      	movs	r1, #64	@ 0x40
 8000e10:	4835      	ldr	r0, [pc, #212]	@ (8000ee8 <MX_GPIO_Init+0x1b0>)
 8000e12:	f001 f875 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000e16:	2201      	movs	r2, #1
 8000e18:	2110      	movs	r1, #16
 8000e1a:	4832      	ldr	r0, [pc, #200]	@ (8000ee4 <MX_GPIO_Init+0x1ac>)
 8000e1c:	f001 f870 	bl	8001f00 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000e20:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000e24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e26:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000e30:	f107 031c 	add.w	r3, r7, #28
 8000e34:	4619      	mov	r1, r3
 8000e36:	482d      	ldr	r0, [pc, #180]	@ (8000eec <MX_GPIO_Init+0x1b4>)
 8000e38:	f000 feb6 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000e3c:	2310      	movs	r3, #16
 8000e3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e40:	2301      	movs	r3, #1
 8000e42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e44:	2300      	movs	r3, #0
 8000e46:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e48:	2300      	movs	r3, #0
 8000e4a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000e4c:	f107 031c 	add.w	r3, r7, #28
 8000e50:	4619      	mov	r1, r3
 8000e52:	4823      	ldr	r0, [pc, #140]	@ (8000ee0 <MX_GPIO_Init+0x1a8>)
 8000e54:	f000 fea8 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin RESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|RESET_Pin|LD2_Pin;
 8000e58:	f244 0391 	movw	r3, #16529	@ 0x4091
 8000e5c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e5e:	2301      	movs	r3, #1
 8000e60:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e62:	2300      	movs	r3, #0
 8000e64:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e66:	2300      	movs	r3, #0
 8000e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000e6a:	f107 031c 	add.w	r3, r7, #28
 8000e6e:	4619      	mov	r1, r3
 8000e70:	481c      	ldr	r0, [pc, #112]	@ (8000ee4 <MX_GPIO_Init+0x1ac>)
 8000e72:	f000 fe99 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000e76:	2302      	movs	r3, #2
 8000e78:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000e7a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000e7e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e80:	2300      	movs	r3, #0
 8000e82:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000e84:	f107 031c 	add.w	r3, r7, #28
 8000e88:	4619      	mov	r1, r3
 8000e8a:	4816      	ldr	r0, [pc, #88]	@ (8000ee4 <MX_GPIO_Init+0x1ac>)
 8000e8c:	f000 fe8c 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000e90:	2340      	movs	r3, #64	@ 0x40
 8000e92:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e94:	2301      	movs	r3, #1
 8000e96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000ea0:	f107 031c 	add.w	r3, r7, #28
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	4810      	ldr	r0, [pc, #64]	@ (8000ee8 <MX_GPIO_Init+0x1b0>)
 8000ea8:	f000 fe7e 	bl	8001ba8 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000eac:	2380      	movs	r3, #128	@ 0x80
 8000eae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000eb8:	f107 031c 	add.w	r3, r7, #28
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	480a      	ldr	r0, [pc, #40]	@ (8000ee8 <MX_GPIO_Init+0x1b0>)
 8000ec0:	f000 fe72 	bl	8001ba8 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	2100      	movs	r1, #0
 8000ec8:	2007      	movs	r0, #7
 8000eca:	f000 fe14 	bl	8001af6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000ece:	2007      	movs	r0, #7
 8000ed0:	f000 fe2d 	bl	8001b2e <HAL_NVIC_EnableIRQ>

}
 8000ed4:	bf00      	nop
 8000ed6:	3730      	adds	r7, #48	@ 0x30
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	40023800 	.word	0x40023800
 8000ee0:	40020000 	.word	0x40020000
 8000ee4:	40020400 	.word	0x40020400
 8000ee8:	40021800 	.word	0x40021800
 8000eec:	40020800 	.word	0x40020800

08000ef0 <_write>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
int _write(int file, char *ptr, int len) {
 8000ef0:	b480      	push	{r7}
 8000ef2:	b087      	sub	sp, #28
 8000ef4:	af00      	add	r7, sp, #0
 8000ef6:	60f8      	str	r0, [r7, #12]
 8000ef8:	60b9      	str	r1, [r7, #8]
 8000efa:	607a      	str	r2, [r7, #4]
	for (int idx = 0; idx < len; idx++) {
 8000efc:	2300      	movs	r3, #0
 8000efe:	617b      	str	r3, [r7, #20]
 8000f00:	e00f      	b.n	8000f22 <_write+0x32>
			while(!(USART3 -> SR & USART_SR_TXE));
 8000f02:	bf00      	nop
 8000f04:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <_write+0x48>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d0f9      	beq.n	8000f04 <_write+0x14>
			USART3->DR = (uint8_t)ptr[idx];
 8000f10:	697b      	ldr	r3, [r7, #20]
 8000f12:	68ba      	ldr	r2, [r7, #8]
 8000f14:	4413      	add	r3, r2
 8000f16:	781a      	ldrb	r2, [r3, #0]
 8000f18:	4b07      	ldr	r3, [pc, #28]	@ (8000f38 <_write+0x48>)
 8000f1a:	605a      	str	r2, [r3, #4]
	for (int idx = 0; idx < len; idx++) {
 8000f1c:	697b      	ldr	r3, [r7, #20]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	617b      	str	r3, [r7, #20]
 8000f22:	697a      	ldr	r2, [r7, #20]
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	429a      	cmp	r2, r3
 8000f28:	dbeb      	blt.n	8000f02 <_write+0x12>
	}
	return len;
 8000f2a:	687b      	ldr	r3, [r7, #4]
}
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	371c      	adds	r7, #28
 8000f30:	46bd      	mov	sp, r7
 8000f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f36:	4770      	bx	lr
 8000f38:	40004800 	.word	0x40004800

08000f3c <get_timestamp_string>:

RTC_TimeTypeDef sTime;
RTC_DateTypeDef sDate;

void get_timestamp_string(char *timestamp_str, uint32_t max_len)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b084      	sub	sp, #16
 8000f40:	af02      	add	r7, sp, #8
 8000f42:	6078      	str	r0, [r7, #4]
 8000f44:	6039      	str	r1, [r7, #0]
  // Get current time and date from RTC
  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000f46:	2200      	movs	r2, #0
 8000f48:	490e      	ldr	r1, [pc, #56]	@ (8000f84 <get_timestamp_string+0x48>)
 8000f4a:	480f      	ldr	r0, [pc, #60]	@ (8000f88 <get_timestamp_string+0x4c>)
 8000f4c:	f002 fae3 	bl	8003516 <HAL_RTC_GetTime>
  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // This is necessary after HAL_RTC_GetTime
 8000f50:	2200      	movs	r2, #0
 8000f52:	490e      	ldr	r1, [pc, #56]	@ (8000f8c <get_timestamp_string+0x50>)
 8000f54:	480c      	ldr	r0, [pc, #48]	@ (8000f88 <get_timestamp_string+0x4c>)
 8000f56:	f002 fb3c 	bl	80035d2 <HAL_RTC_GetDate>

  // Format the timestamp string as "YYYY-MM-DD HH:MM:SS"
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
           sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f5a:	4b0a      	ldr	r3, [pc, #40]	@ (8000f84 <get_timestamp_string+0x48>)
 8000f5c:	781b      	ldrb	r3, [r3, #0]
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000f5e:	4619      	mov	r1, r3
           sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f60:	4b08      	ldr	r3, [pc, #32]	@ (8000f84 <get_timestamp_string+0x48>)
 8000f62:	785b      	ldrb	r3, [r3, #1]
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000f64:	461a      	mov	r2, r3
           sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f66:	4b07      	ldr	r3, [pc, #28]	@ (8000f84 <get_timestamp_string+0x48>)
 8000f68:	789b      	ldrb	r3, [r3, #2]
  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000f6a:	9301      	str	r3, [sp, #4]
 8000f6c:	9200      	str	r2, [sp, #0]
 8000f6e:	460b      	mov	r3, r1
 8000f70:	4a07      	ldr	r2, [pc, #28]	@ (8000f90 <get_timestamp_string+0x54>)
 8000f72:	6839      	ldr	r1, [r7, #0]
 8000f74:	6878      	ldr	r0, [r7, #4]
 8000f76:	f004 f88f 	bl	8005098 <sniprintf>
}
 8000f7a:	bf00      	nop
 8000f7c:	3708      	adds	r7, #8
 8000f7e:	46bd      	mov	sp, r7
 8000f80:	bd80      	pop	{r7, pc}
 8000f82:	bf00      	nop
 8000f84:	20000084 	.word	0x20000084
 8000f88:	200003d8 	.word	0x200003d8
 8000f8c:	20000098 	.word	0x20000098
 8000f90:	0800613c 	.word	0x0800613c
 8000f94:	00000000 	.word	0x00000000

08000f98 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f98:	b580      	push	{r7, lr}
 8000f9a:	b08c      	sub	sp, #48	@ 0x30
 8000f9c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f9e:	f000 fc39 	bl	8001814 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000fa2:	f000 f88d 	bl	80010c0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000fa6:	f7ff fec7 	bl	8000d38 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000faa:	f000 faf9 	bl	80015a0 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000fae:	f000 fb69 	bl	8001684 <MX_USB_OTG_FS_PCD_Init>
  MX_SPI2_Init();
 8000fb2:	f000 f94d 	bl	8001250 <MX_SPI2_Init>
  MX_RTC_Init();
 8000fb6:	f000 f8fb 	bl	80011b0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  //initialize LoRa module
		SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000fba:	4b37      	ldr	r3, [pc, #220]	@ (8001098 <main+0x100>)
 8000fbc:	4a37      	ldr	r2, [pc, #220]	@ (800109c <main+0x104>)
 8000fbe:	60da      	str	r2, [r3, #12]
		SX1278_hw.dio0.pin = DIO0_Pin;
 8000fc0:	4b35      	ldr	r3, [pc, #212]	@ (8001098 <main+0x100>)
 8000fc2:	2202      	movs	r2, #2
 8000fc4:	609a      	str	r2, [r3, #8]
		SX1278_hw.nss.port = NSS_GPIO_Port;
 8000fc6:	4b34      	ldr	r3, [pc, #208]	@ (8001098 <main+0x100>)
 8000fc8:	4a35      	ldr	r2, [pc, #212]	@ (80010a0 <main+0x108>)
 8000fca:	615a      	str	r2, [r3, #20]
		SX1278_hw.nss.pin = NSS_Pin;
 8000fcc:	4b32      	ldr	r3, [pc, #200]	@ (8001098 <main+0x100>)
 8000fce:	2210      	movs	r2, #16
 8000fd0:	611a      	str	r2, [r3, #16]
		SX1278_hw.reset.port = RESET_GPIO_Port;
 8000fd2:	4b31      	ldr	r3, [pc, #196]	@ (8001098 <main+0x100>)
 8000fd4:	4a31      	ldr	r2, [pc, #196]	@ (800109c <main+0x104>)
 8000fd6:	605a      	str	r2, [r3, #4]
		SX1278_hw.reset.pin = RESET_Pin;
 8000fd8:	4b2f      	ldr	r3, [pc, #188]	@ (8001098 <main+0x100>)
 8000fda:	2210      	movs	r2, #16
 8000fdc:	601a      	str	r2, [r3, #0]
		SX1278_hw.spi = &hspi2;
 8000fde:	4b2e      	ldr	r3, [pc, #184]	@ (8001098 <main+0x100>)
 8000fe0:	4a30      	ldr	r2, [pc, #192]	@ (80010a4 <main+0x10c>)
 8000fe2:	619a      	str	r2, [r3, #24]

		SX1278.hw = &SX1278_hw;
 8000fe4:	4b30      	ldr	r3, [pc, #192]	@ (80010a8 <main+0x110>)
 8000fe6:	4a2c      	ldr	r2, [pc, #176]	@ (8001098 <main+0x100>)
 8000fe8:	601a      	str	r2, [r3, #0]

      	SX1278_hw_Reset(SX1278.hw);
 8000fea:	4b2f      	ldr	r3, [pc, #188]	@ (80010a8 <main+0x110>)
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	4618      	mov	r0, r3
 8000ff0:	f7ff fe16 	bl	8000c20 <SX1278_hw_Reset>
      	SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_12, SX1278_LORA_BW_500KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 250);
 8000ff4:	23fa      	movs	r3, #250	@ 0xfa
 8000ff6:	9305      	str	r3, [sp, #20]
 8000ff8:	2300      	movs	r3, #0
 8000ffa:	9304      	str	r3, [sp, #16]
 8000ffc:	2300      	movs	r3, #0
 8000ffe:	9303      	str	r3, [sp, #12]
 8001000:	2309      	movs	r3, #9
 8001002:	9302      	str	r3, [sp, #8]
 8001004:	2306      	movs	r3, #6
 8001006:	9301      	str	r3, [sp, #4]
 8001008:	2301      	movs	r3, #1
 800100a:	9300      	str	r3, [sp, #0]
 800100c:	a320      	add	r3, pc, #128	@ (adr r3, 8001090 <main+0xf8>)
 800100e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001012:	4825      	ldr	r0, [pc, #148]	@ (80010a8 <main+0x110>)
 8001014:	f7ff fd85 	bl	8000b22 <SX1278_init>
      	ret = SX1278_LoRaEntryRx(&SX1278, 250, 2000);
 8001018:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800101c:	21fa      	movs	r1, #250	@ 0xfa
 800101e:	4822      	ldr	r0, [pc, #136]	@ (80010a8 <main+0x110>)
 8001020:	f7ff fcd6 	bl	80009d0 <SX1278_LoRaEntryRx>
 8001024:	4603      	mov	r3, r0
 8001026:	4a21      	ldr	r2, [pc, #132]	@ (80010ac <main+0x114>)
 8001028:	6013      	str	r3, [r2, #0]
      	printf("Done Configuring LoRa module\r\n");
 800102a:	4821      	ldr	r0, [pc, #132]	@ (80010b0 <main+0x118>)
 800102c:	f004 f82c 	bl	8005088 <puts>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  HAL_Delay(50);
 8001030:	2032      	movs	r0, #50	@ 0x32
 8001032:	f000 fc61 	bl	80018f8 <HAL_Delay>
//	        int8_t snr = SX1278_SNR_LoRa(&SX1278);

//	        printf("Current Mode: 0x%02X, RSSI: %d dBm, SNR: %d dB\r\n", op_mode, rssi, snr);
	  	char timestamp[24]; // Buffer for time stamp string
//	  	printf("Waiting..%d\r\n", counter);
		ret = SX1278_LoRaRxPacket(&SX1278);
 8001036:	481c      	ldr	r0, [pc, #112]	@ (80010a8 <main+0x110>)
 8001038:	f7ff fd2f 	bl	8000a9a <SX1278_LoRaRxPacket>
 800103c:	4603      	mov	r3, r0
 800103e:	461a      	mov	r2, r3
 8001040:	4b1a      	ldr	r3, [pc, #104]	@ (80010ac <main+0x114>)
 8001042:	601a      	str	r2, [r3, #0]
		if (ret > 0) {
 8001044:	4b19      	ldr	r3, [pc, #100]	@ (80010ac <main+0x114>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b00      	cmp	r3, #0
 800104a:	ddf1      	ble.n	8001030 <main+0x98>
			counter = 0;
 800104c:	4b19      	ldr	r3, [pc, #100]	@ (80010b4 <main+0x11c>)
 800104e:	2200      	movs	r2, #0
 8001050:	601a      	str	r2, [r3, #0]
			SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8001052:	4b16      	ldr	r3, [pc, #88]	@ (80010ac <main+0x114>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	b2db      	uxtb	r3, r3
 8001058:	461a      	mov	r2, r3
 800105a:	4917      	ldr	r1, [pc, #92]	@ (80010b8 <main+0x120>)
 800105c:	4812      	ldr	r0, [pc, #72]	@ (80010a8 <main+0x110>)
 800105e:	f7ff fd8d 	bl	8000b7c <SX1278_read>
				get_timestamp_string(timestamp, sizeof(timestamp));
 8001062:	463b      	mov	r3, r7
 8001064:	2118      	movs	r1, #24
 8001066:	4618      	mov	r0, r3
 8001068:	f7ff ff68 	bl	8000f3c <get_timestamp_string>
			printf("%-8s : Content (%d): %s\r\n", timestamp, ret, buffer);
 800106c:	4b0f      	ldr	r3, [pc, #60]	@ (80010ac <main+0x114>)
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4639      	mov	r1, r7
 8001072:	4b11      	ldr	r3, [pc, #68]	@ (80010b8 <main+0x120>)
 8001074:	4811      	ldr	r0, [pc, #68]	@ (80010bc <main+0x124>)
 8001076:	f003 ff9f 	bl	8004fb8 <iprintf>
			ret = SX1278_LoRaEntryRx(&SX1278, 250, 2000);
 800107a:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800107e:	21fa      	movs	r1, #250	@ 0xfa
 8001080:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <main+0x110>)
 8001082:	f7ff fca5 	bl	80009d0 <SX1278_LoRaEntryRx>
 8001086:	4603      	mov	r3, r0
 8001088:	4a08      	ldr	r2, [pc, #32]	@ (80010ac <main+0x114>)
 800108a:	6013      	str	r3, [r2, #0]
  {
 800108c:	e7d0      	b.n	8001030 <main+0x98>
 800108e:	bf00      	nop
 8001090:	19cf0e40 	.word	0x19cf0e40
 8001094:	00000000 	.word	0x00000000
 8001098:	2000009c 	.word	0x2000009c
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020000 	.word	0x40020000
 80010a4:	200003f8 	.word	0x200003f8
 80010a8:	200000b8 	.word	0x200000b8
 80010ac:	200001d0 	.word	0x200001d0
 80010b0:	0800614c 	.word	0x0800614c
 80010b4:	200001d4 	.word	0x200001d4
 80010b8:	200001d8 	.word	0x200001d8
 80010bc:	0800616c 	.word	0x0800616c

080010c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b094      	sub	sp, #80	@ 0x50
 80010c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010c6:	f107 031c 	add.w	r3, r7, #28
 80010ca:	2234      	movs	r2, #52	@ 0x34
 80010cc:	2100      	movs	r1, #0
 80010ce:	4618      	mov	r0, r3
 80010d0:	f004 f8f0 	bl	80052b4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010d4:	f107 0308 	add.w	r3, r7, #8
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
 80010de:	609a      	str	r2, [r3, #8]
 80010e0:	60da      	str	r2, [r3, #12]
 80010e2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010e4:	2300      	movs	r3, #0
 80010e6:	607b      	str	r3, [r7, #4]
 80010e8:	4b2c      	ldr	r3, [pc, #176]	@ (800119c <SystemClock_Config+0xdc>)
 80010ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010ec:	4a2b      	ldr	r2, [pc, #172]	@ (800119c <SystemClock_Config+0xdc>)
 80010ee:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80010f2:	6413      	str	r3, [r2, #64]	@ 0x40
 80010f4:	4b29      	ldr	r3, [pc, #164]	@ (800119c <SystemClock_Config+0xdc>)
 80010f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010f8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8001100:	2300      	movs	r3, #0
 8001102:	603b      	str	r3, [r7, #0]
 8001104:	4b26      	ldr	r3, [pc, #152]	@ (80011a0 <SystemClock_Config+0xe0>)
 8001106:	681b      	ldr	r3, [r3, #0]
 8001108:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 800110c:	4a24      	ldr	r2, [pc, #144]	@ (80011a0 <SystemClock_Config+0xe0>)
 800110e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001112:	6013      	str	r3, [r2, #0]
 8001114:	4b22      	ldr	r3, [pc, #136]	@ (80011a0 <SystemClock_Config+0xe0>)
 8001116:	681b      	ldr	r3, [r3, #0]
 8001118:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800111c:	603b      	str	r3, [r7, #0]
 800111e:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001120:	2309      	movs	r3, #9
 8001122:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001124:	f44f 23a0 	mov.w	r3, #327680	@ 0x50000
 8001128:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 800112a:	2301      	movs	r3, #1
 800112c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 800112e:	2301      	movs	r3, #1
 8001130:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001132:	2302      	movs	r3, #2
 8001134:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001136:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800113a:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 800113c:	2304      	movs	r3, #4
 800113e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 72;
 8001140:	2348      	movs	r3, #72	@ 0x48
 8001142:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001144:	2302      	movs	r3, #2
 8001146:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8001148:	2303      	movs	r3, #3
 800114a:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800114c:	2302      	movs	r3, #2
 800114e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001150:	f107 031c 	add.w	r3, r7, #28
 8001154:	4618      	mov	r0, r3
 8001156:	f001 febf 	bl	8002ed8 <HAL_RCC_OscConfig>
 800115a:	4603      	mov	r3, r0
 800115c:	2b00      	cmp	r3, #0
 800115e:	d001      	beq.n	8001164 <SystemClock_Config+0xa4>
  {
    Error_Handler();
 8001160:	f000 f820 	bl	80011a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001164:	230f      	movs	r3, #15
 8001166:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001168:	2302      	movs	r3, #2
 800116a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001170:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001174:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001176:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800117a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800117c:	f107 0308 	add.w	r3, r7, #8
 8001180:	2102      	movs	r1, #2
 8001182:	4618      	mov	r0, r3
 8001184:	f001 f834 	bl	80021f0 <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xd2>
  {
    Error_Handler();
 800118e:	f000 f809 	bl	80011a4 <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	3750      	adds	r7, #80	@ 0x50
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40007000 	.word	0x40007000

080011a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011a4:	b480      	push	{r7}
 80011a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011a8:	b672      	cpsid	i
}
 80011aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011ac:	bf00      	nop
 80011ae:	e7fd      	b.n	80011ac <Error_Handler+0x8>

080011b0 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011b4:	4b0f      	ldr	r3, [pc, #60]	@ (80011f4 <MX_RTC_Init+0x44>)
 80011b6:	4a10      	ldr	r2, [pc, #64]	@ (80011f8 <MX_RTC_Init+0x48>)
 80011b8:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011ba:	4b0e      	ldr	r3, [pc, #56]	@ (80011f4 <MX_RTC_Init+0x44>)
 80011bc:	2200      	movs	r2, #0
 80011be:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011c0:	4b0c      	ldr	r3, [pc, #48]	@ (80011f4 <MX_RTC_Init+0x44>)
 80011c2:	227f      	movs	r2, #127	@ 0x7f
 80011c4:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011c6:	4b0b      	ldr	r3, [pc, #44]	@ (80011f4 <MX_RTC_Init+0x44>)
 80011c8:	22ff      	movs	r2, #255	@ 0xff
 80011ca:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011cc:	4b09      	ldr	r3, [pc, #36]	@ (80011f4 <MX_RTC_Init+0x44>)
 80011ce:	2200      	movs	r2, #0
 80011d0:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011d2:	4b08      	ldr	r3, [pc, #32]	@ (80011f4 <MX_RTC_Init+0x44>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <MX_RTC_Init+0x44>)
 80011da:	2200      	movs	r2, #0
 80011dc:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011de:	4805      	ldr	r0, [pc, #20]	@ (80011f4 <MX_RTC_Init+0x44>)
 80011e0:	f002 f918 	bl	8003414 <HAL_RTC_Init>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 80011ea:	f7ff ffdb 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 80011ee:	bf00      	nop
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	200003d8 	.word	0x200003d8
 80011f8:	40002800 	.word	0x40002800

080011fc <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	b09a      	sub	sp, #104	@ 0x68
 8001200:	af00      	add	r7, sp, #0
 8001202:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001204:	f107 030c 	add.w	r3, r7, #12
 8001208:	225c      	movs	r2, #92	@ 0x5c
 800120a:	2100      	movs	r1, #0
 800120c:	4618      	mov	r0, r3
 800120e:	f004 f851 	bl	80052b4 <memset>
  if(rtcHandle->Instance==RTC)
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	681b      	ldr	r3, [r3, #0]
 8001216:	4a0c      	ldr	r2, [pc, #48]	@ (8001248 <HAL_RTC_MspInit+0x4c>)
 8001218:	4293      	cmp	r3, r2
 800121a:	d111      	bne.n	8001240 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 800121c:	2320      	movs	r3, #32
 800121e:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001220:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001224:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001226:	f107 030c 	add.w	r3, r7, #12
 800122a:	4618      	mov	r0, r3
 800122c:	f001 f8fa 	bl	8002424 <HAL_RCCEx_PeriphCLKConfig>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 8001236:	f7ff ffb5 	bl	80011a4 <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 800123a:	4b04      	ldr	r3, [pc, #16]	@ (800124c <HAL_RTC_MspInit+0x50>)
 800123c:	2201      	movs	r2, #1
 800123e:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001240:	bf00      	nop
 8001242:	3768      	adds	r7, #104	@ 0x68
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	40002800 	.word	0x40002800
 800124c:	42470e3c 	.word	0x42470e3c

08001250 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001254:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001256:	4a18      	ldr	r2, [pc, #96]	@ (80012b8 <MX_SPI2_Init+0x68>)
 8001258:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800125a:	4b16      	ldr	r3, [pc, #88]	@ (80012b4 <MX_SPI2_Init+0x64>)
 800125c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001260:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001262:	4b14      	ldr	r3, [pc, #80]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001264:	2200      	movs	r2, #0
 8001266:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001268:	4b12      	ldr	r3, [pc, #72]	@ (80012b4 <MX_SPI2_Init+0x64>)
 800126a:	2200      	movs	r2, #0
 800126c:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001270:	2200      	movs	r2, #0
 8001272:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001274:	4b0f      	ldr	r3, [pc, #60]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001276:	2200      	movs	r2, #0
 8001278:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800127a:	4b0e      	ldr	r3, [pc, #56]	@ (80012b4 <MX_SPI2_Init+0x64>)
 800127c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001280:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001282:	4b0c      	ldr	r3, [pc, #48]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001284:	2200      	movs	r2, #0
 8001286:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001288:	4b0a      	ldr	r3, [pc, #40]	@ (80012b4 <MX_SPI2_Init+0x64>)
 800128a:	2200      	movs	r2, #0
 800128c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800128e:	4b09      	ldr	r3, [pc, #36]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001290:	2200      	movs	r2, #0
 8001292:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	@ (80012b4 <MX_SPI2_Init+0x64>)
 8001296:	2200      	movs	r2, #0
 8001298:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 800129a:	4b06      	ldr	r3, [pc, #24]	@ (80012b4 <MX_SPI2_Init+0x64>)
 800129c:	220a      	movs	r2, #10
 800129e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	@ (80012b4 <MX_SPI2_Init+0x64>)
 80012a2:	f002 fa85 	bl	80037b0 <HAL_SPI_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012ac:	f7ff ff7a 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	200003f8 	.word	0x200003f8
 80012b8:	40003800 	.word	0x40003800

080012bc <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b08a      	sub	sp, #40	@ 0x28
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012c4:	f107 0314 	add.w	r3, r7, #20
 80012c8:	2200      	movs	r2, #0
 80012ca:	601a      	str	r2, [r3, #0]
 80012cc:	605a      	str	r2, [r3, #4]
 80012ce:	609a      	str	r2, [r3, #8]
 80012d0:	60da      	str	r2, [r3, #12]
 80012d2:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80012d4:	687b      	ldr	r3, [r7, #4]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	4a2c      	ldr	r2, [pc, #176]	@ (800138c <HAL_SPI_MspInit+0xd0>)
 80012da:	4293      	cmp	r3, r2
 80012dc:	d152      	bne.n	8001384 <HAL_SPI_MspInit+0xc8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012de:	2300      	movs	r3, #0
 80012e0:	613b      	str	r3, [r7, #16]
 80012e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001390 <HAL_SPI_MspInit+0xd4>)
 80012e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012e6:	4a2a      	ldr	r2, [pc, #168]	@ (8001390 <HAL_SPI_MspInit+0xd4>)
 80012e8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80012ee:	4b28      	ldr	r3, [pc, #160]	@ (8001390 <HAL_SPI_MspInit+0xd4>)
 80012f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012f2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012f6:	613b      	str	r3, [r7, #16]
 80012f8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012fa:	2300      	movs	r3, #0
 80012fc:	60fb      	str	r3, [r7, #12]
 80012fe:	4b24      	ldr	r3, [pc, #144]	@ (8001390 <HAL_SPI_MspInit+0xd4>)
 8001300:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001302:	4a23      	ldr	r2, [pc, #140]	@ (8001390 <HAL_SPI_MspInit+0xd4>)
 8001304:	f043 0304 	orr.w	r3, r3, #4
 8001308:	6313      	str	r3, [r2, #48]	@ 0x30
 800130a:	4b21      	ldr	r3, [pc, #132]	@ (8001390 <HAL_SPI_MspInit+0xd4>)
 800130c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800130e:	f003 0304 	and.w	r3, r3, #4
 8001312:	60fb      	str	r3, [r7, #12]
 8001314:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001316:	2300      	movs	r3, #0
 8001318:	60bb      	str	r3, [r7, #8]
 800131a:	4b1d      	ldr	r3, [pc, #116]	@ (8001390 <HAL_SPI_MspInit+0xd4>)
 800131c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131e:	4a1c      	ldr	r2, [pc, #112]	@ (8001390 <HAL_SPI_MspInit+0xd4>)
 8001320:	f043 0302 	orr.w	r3, r3, #2
 8001324:	6313      	str	r3, [r2, #48]	@ 0x30
 8001326:	4b1a      	ldr	r3, [pc, #104]	@ (8001390 <HAL_SPI_MspInit+0xd4>)
 8001328:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800132a:	f003 0302 	and.w	r3, r3, #2
 800132e:	60bb      	str	r3, [r7, #8]
 8001330:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001332:	2304      	movs	r3, #4
 8001334:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001336:	2302      	movs	r3, #2
 8001338:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800133a:	2300      	movs	r3, #0
 800133c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800133e:	2303      	movs	r3, #3
 8001340:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001342:	2305      	movs	r3, #5
 8001344:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001346:	f107 0314 	add.w	r3, r7, #20
 800134a:	4619      	mov	r1, r3
 800134c:	4811      	ldr	r0, [pc, #68]	@ (8001394 <HAL_SPI_MspInit+0xd8>)
 800134e:	f000 fc2b 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 8001352:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 8001356:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001358:	2302      	movs	r3, #2
 800135a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800135c:	2300      	movs	r3, #0
 800135e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001360:	2303      	movs	r3, #3
 8001362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001364:	2305      	movs	r3, #5
 8001366:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001368:	f107 0314 	add.w	r3, r7, #20
 800136c:	4619      	mov	r1, r3
 800136e:	480a      	ldr	r0, [pc, #40]	@ (8001398 <HAL_SPI_MspInit+0xdc>)
 8001370:	f000 fc1a 	bl	8001ba8 <HAL_GPIO_Init>

    /* SPI2 interrupt Init */
    HAL_NVIC_SetPriority(SPI2_IRQn, 0, 0);
 8001374:	2200      	movs	r2, #0
 8001376:	2100      	movs	r1, #0
 8001378:	2024      	movs	r0, #36	@ 0x24
 800137a:	f000 fbbc 	bl	8001af6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800137e:	2024      	movs	r0, #36	@ 0x24
 8001380:	f000 fbd5 	bl	8001b2e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8001384:	bf00      	nop
 8001386:	3728      	adds	r7, #40	@ 0x28
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	40003800 	.word	0x40003800
 8001390:	40023800 	.word	0x40023800
 8001394:	40020800 	.word	0x40020800
 8001398:	40020400 	.word	0x40020400

0800139c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800139c:	b480      	push	{r7}
 800139e:	b083      	sub	sp, #12
 80013a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013a2:	2300      	movs	r3, #0
 80013a4:	607b      	str	r3, [r7, #4]
 80013a6:	4b10      	ldr	r3, [pc, #64]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013aa:	4a0f      	ldr	r2, [pc, #60]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80013b2:	4b0d      	ldr	r3, [pc, #52]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013ba:	607b      	str	r3, [r7, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013be:	2300      	movs	r3, #0
 80013c0:	603b      	str	r3, [r7, #0]
 80013c2:	4b09      	ldr	r3, [pc, #36]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c6:	4a08      	ldr	r2, [pc, #32]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80013ce:	4b06      	ldr	r3, [pc, #24]	@ (80013e8 <HAL_MspInit+0x4c>)
 80013d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d6:	603b      	str	r3, [r7, #0]
 80013d8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013da:	bf00      	nop
 80013dc:	370c      	adds	r7, #12
 80013de:	46bd      	mov	sp, r7
 80013e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e4:	4770      	bx	lr
 80013e6:	bf00      	nop
 80013e8:	40023800 	.word	0x40023800

080013ec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013ec:	b480      	push	{r7}
 80013ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f0:	bf00      	nop
 80013f2:	e7fd      	b.n	80013f0 <NMI_Handler+0x4>

080013f4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <HardFault_Handler+0x4>

080013fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <MemManage_Handler+0x4>

08001404 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <BusFault_Handler+0x4>

0800140c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <UsageFault_Handler+0x4>

08001414 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001418:	bf00      	nop
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr

08001422 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001422:	b480      	push	{r7}
 8001424:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001426:	bf00      	nop
 8001428:	46bd      	mov	sp, r7
 800142a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142e:	4770      	bx	lr

08001430 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001430:	b480      	push	{r7}
 8001432:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001434:	bf00      	nop
 8001436:	46bd      	mov	sp, r7
 8001438:	f85d 7b04 	ldr.w	r7, [sp], #4
 800143c:	4770      	bx	lr

0800143e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800143e:	b580      	push	{r7, lr}
 8001440:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001442:	f000 fa39 	bl	80018b8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001446:	bf00      	nop
 8001448:	bd80      	pop	{r7, pc}

0800144a <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 800144a:	b580      	push	{r7, lr}
 800144c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 800144e:	2002      	movs	r0, #2
 8001450:	f000 fd70 	bl	8001f34 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8001454:	bf00      	nop
 8001456:	bd80      	pop	{r7, pc}

08001458 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001458:	b580      	push	{r7, lr}
 800145a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 800145c:	4802      	ldr	r0, [pc, #8]	@ (8001468 <SPI2_IRQHandler+0x10>)
 800145e:	f002 fd1d 	bl	8003e9c <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001462:	bf00      	nop
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	200003f8 	.word	0x200003f8

0800146c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	60f8      	str	r0, [r7, #12]
 8001474:	60b9      	str	r1, [r7, #8]
 8001476:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
 800147c:	e00a      	b.n	8001494 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800147e:	f3af 8000 	nop.w
 8001482:	4601      	mov	r1, r0
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	1c5a      	adds	r2, r3, #1
 8001488:	60ba      	str	r2, [r7, #8]
 800148a:	b2ca      	uxtb	r2, r1
 800148c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800148e:	697b      	ldr	r3, [r7, #20]
 8001490:	3301      	adds	r3, #1
 8001492:	617b      	str	r3, [r7, #20]
 8001494:	697a      	ldr	r2, [r7, #20]
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	429a      	cmp	r2, r3
 800149a:	dbf0      	blt.n	800147e <_read+0x12>
  }

  return len;
 800149c:	687b      	ldr	r3, [r7, #4]
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3718      	adds	r7, #24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bd80      	pop	{r7, pc}

080014a6 <_close>:
  }
  return len;
}

int _close(int file)
{
 80014a6:	b480      	push	{r7}
 80014a8:	b083      	sub	sp, #12
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014ae:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b2:	4618      	mov	r0, r3
 80014b4:	370c      	adds	r7, #12
 80014b6:	46bd      	mov	sp, r7
 80014b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014bc:	4770      	bx	lr

080014be <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014be:	b480      	push	{r7}
 80014c0:	b083      	sub	sp, #12
 80014c2:	af00      	add	r7, sp, #0
 80014c4:	6078      	str	r0, [r7, #4]
 80014c6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014ce:	605a      	str	r2, [r3, #4]
  return 0;
 80014d0:	2300      	movs	r3, #0
}
 80014d2:	4618      	mov	r0, r3
 80014d4:	370c      	adds	r7, #12
 80014d6:	46bd      	mov	sp, r7
 80014d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014dc:	4770      	bx	lr

080014de <_isatty>:

int _isatty(int file)
{
 80014de:	b480      	push	{r7}
 80014e0:	b083      	sub	sp, #12
 80014e2:	af00      	add	r7, sp, #0
 80014e4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014e6:	2301      	movs	r3, #1
}
 80014e8:	4618      	mov	r0, r3
 80014ea:	370c      	adds	r7, #12
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr

080014f4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b085      	sub	sp, #20
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	60f8      	str	r0, [r7, #12]
 80014fc:	60b9      	str	r1, [r7, #8]
 80014fe:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001500:	2300      	movs	r3, #0
}
 8001502:	4618      	mov	r0, r3
 8001504:	3714      	adds	r7, #20
 8001506:	46bd      	mov	sp, r7
 8001508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150c:	4770      	bx	lr
	...

08001510 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001510:	b580      	push	{r7, lr}
 8001512:	b086      	sub	sp, #24
 8001514:	af00      	add	r7, sp, #0
 8001516:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001518:	4a14      	ldr	r2, [pc, #80]	@ (800156c <_sbrk+0x5c>)
 800151a:	4b15      	ldr	r3, [pc, #84]	@ (8001570 <_sbrk+0x60>)
 800151c:	1ad3      	subs	r3, r2, r3
 800151e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001520:	697b      	ldr	r3, [r7, #20]
 8001522:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001524:	4b13      	ldr	r3, [pc, #76]	@ (8001574 <_sbrk+0x64>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	d102      	bne.n	8001532 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800152c:	4b11      	ldr	r3, [pc, #68]	@ (8001574 <_sbrk+0x64>)
 800152e:	4a12      	ldr	r2, [pc, #72]	@ (8001578 <_sbrk+0x68>)
 8001530:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001532:	4b10      	ldr	r3, [pc, #64]	@ (8001574 <_sbrk+0x64>)
 8001534:	681a      	ldr	r2, [r3, #0]
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4413      	add	r3, r2
 800153a:	693a      	ldr	r2, [r7, #16]
 800153c:	429a      	cmp	r2, r3
 800153e:	d207      	bcs.n	8001550 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001540:	f003 ff06 	bl	8005350 <__errno>
 8001544:	4603      	mov	r3, r0
 8001546:	220c      	movs	r2, #12
 8001548:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154a:	f04f 33ff 	mov.w	r3, #4294967295
 800154e:	e009      	b.n	8001564 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001550:	4b08      	ldr	r3, [pc, #32]	@ (8001574 <_sbrk+0x64>)
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001556:	4b07      	ldr	r3, [pc, #28]	@ (8001574 <_sbrk+0x64>)
 8001558:	681a      	ldr	r2, [r3, #0]
 800155a:	687b      	ldr	r3, [r7, #4]
 800155c:	4413      	add	r3, r2
 800155e:	4a05      	ldr	r2, [pc, #20]	@ (8001574 <_sbrk+0x64>)
 8001560:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001562:	68fb      	ldr	r3, [r7, #12]
}
 8001564:	4618      	mov	r0, r3
 8001566:	3718      	adds	r7, #24
 8001568:	46bd      	mov	sp, r7
 800156a:	bd80      	pop	{r7, pc}
 800156c:	20020000 	.word	0x20020000
 8001570:	00000400 	.word	0x00000400
 8001574:	20000450 	.word	0x20000450
 8001578:	20000ad0 	.word	0x20000ad0

0800157c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b480      	push	{r7}
 800157e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001580:	4b06      	ldr	r3, [pc, #24]	@ (800159c <SystemInit+0x20>)
 8001582:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001586:	4a05      	ldr	r2, [pc, #20]	@ (800159c <SystemInit+0x20>)
 8001588:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800158c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001590:	bf00      	nop
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000ed00 	.word	0xe000ed00

080015a0 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015a0:	b580      	push	{r7, lr}
 80015a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015a4:	4b11      	ldr	r3, [pc, #68]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015a6:	4a12      	ldr	r2, [pc, #72]	@ (80015f0 <MX_USART3_UART_Init+0x50>)
 80015a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80015aa:	4b10      	ldr	r3, [pc, #64]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015ac:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015b2:	4b0e      	ldr	r3, [pc, #56]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015b8:	4b0c      	ldr	r3, [pc, #48]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015be:	4b0b      	ldr	r3, [pc, #44]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015c0:	2200      	movs	r2, #0
 80015c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015c4:	4b09      	ldr	r3, [pc, #36]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015c6:	220c      	movs	r2, #12
 80015c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ca:	4b08      	ldr	r3, [pc, #32]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015cc:	2200      	movs	r2, #0
 80015ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d0:	4b06      	ldr	r3, [pc, #24]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015d2:	2200      	movs	r2, #0
 80015d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015d6:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_USART3_UART_Init+0x4c>)
 80015d8:	f002 fe68 	bl	80042ac <HAL_UART_Init>
 80015dc:	4603      	mov	r3, r0
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d001      	beq.n	80015e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015e2:	f7ff fddf 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015e6:	bf00      	nop
 80015e8:	bd80      	pop	{r7, pc}
 80015ea:	bf00      	nop
 80015ec:	20000454 	.word	0x20000454
 80015f0:	40004800 	.word	0x40004800

080015f4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08a      	sub	sp, #40	@ 0x28
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015fc:	f107 0314 	add.w	r3, r7, #20
 8001600:	2200      	movs	r2, #0
 8001602:	601a      	str	r2, [r3, #0]
 8001604:	605a      	str	r2, [r3, #4]
 8001606:	609a      	str	r2, [r3, #8]
 8001608:	60da      	str	r2, [r3, #12]
 800160a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	4a19      	ldr	r2, [pc, #100]	@ (8001678 <HAL_UART_MspInit+0x84>)
 8001612:	4293      	cmp	r3, r2
 8001614:	d12c      	bne.n	8001670 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	613b      	str	r3, [r7, #16]
 800161a:	4b18      	ldr	r3, [pc, #96]	@ (800167c <HAL_UART_MspInit+0x88>)
 800161c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800161e:	4a17      	ldr	r2, [pc, #92]	@ (800167c <HAL_UART_MspInit+0x88>)
 8001620:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001624:	6413      	str	r3, [r2, #64]	@ 0x40
 8001626:	4b15      	ldr	r3, [pc, #84]	@ (800167c <HAL_UART_MspInit+0x88>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162a:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 800162e:	613b      	str	r3, [r7, #16]
 8001630:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	60fb      	str	r3, [r7, #12]
 8001636:	4b11      	ldr	r3, [pc, #68]	@ (800167c <HAL_UART_MspInit+0x88>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163a:	4a10      	ldr	r2, [pc, #64]	@ (800167c <HAL_UART_MspInit+0x88>)
 800163c:	f043 0308 	orr.w	r3, r3, #8
 8001640:	6313      	str	r3, [r2, #48]	@ 0x30
 8001642:	4b0e      	ldr	r3, [pc, #56]	@ (800167c <HAL_UART_MspInit+0x88>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001646:	f003 0308 	and.w	r3, r3, #8
 800164a:	60fb      	str	r3, [r7, #12]
 800164c:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 800164e:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001652:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001654:	2302      	movs	r3, #2
 8001656:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001658:	2300      	movs	r3, #0
 800165a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800165c:	2303      	movs	r3, #3
 800165e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001660:	2307      	movs	r3, #7
 8001662:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001664:	f107 0314 	add.w	r3, r7, #20
 8001668:	4619      	mov	r1, r3
 800166a:	4805      	ldr	r0, [pc, #20]	@ (8001680 <HAL_UART_MspInit+0x8c>)
 800166c:	f000 fa9c 	bl	8001ba8 <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001670:	bf00      	nop
 8001672:	3728      	adds	r7, #40	@ 0x28
 8001674:	46bd      	mov	sp, r7
 8001676:	bd80      	pop	{r7, pc}
 8001678:	40004800 	.word	0x40004800
 800167c:	40023800 	.word	0x40023800
 8001680:	40020c00 	.word	0x40020c00

08001684 <MX_USB_OTG_FS_PCD_Init>:
PCD_HandleTypeDef hpcd_USB_OTG_FS;

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_PCD_Init(void)
{
 8001684:	b580      	push	{r7, lr}
 8001686:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8001688:	4b14      	ldr	r3, [pc, #80]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800168a:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 800168e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8001690:	4b12      	ldr	r3, [pc, #72]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001692:	2206      	movs	r2, #6
 8001694:	711a      	strb	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8001696:	4b11      	ldr	r3, [pc, #68]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 8001698:	2202      	movs	r2, #2
 800169a:	71da      	strb	r2, [r3, #7]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800169c:	4b0f      	ldr	r3, [pc, #60]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 800169e:	2200      	movs	r2, #0
 80016a0:	719a      	strb	r2, [r3, #6]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016a4:	2202      	movs	r2, #2
 80016a6:	725a      	strb	r2, [r3, #9]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016aa:	2201      	movs	r2, #1
 80016ac:	729a      	strb	r2, [r3, #10]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	72da      	strb	r2, [r3, #11]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80016b4:	4b09      	ldr	r3, [pc, #36]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	731a      	strb	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016bc:	2201      	movs	r2, #1
 80016be:	739a      	strb	r2, [r3, #14]
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80016c0:	4b06      	ldr	r3, [pc, #24]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	73da      	strb	r2, [r3, #15]
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	@ (80016dc <MX_USB_OTG_FS_PCD_Init+0x58>)
 80016c8:	f000 fc57 	bl	8001f7a <HAL_PCD_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 80016d2:	f7ff fd67 	bl	80011a4 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	2000049c 	.word	0x2000049c

080016e0 <HAL_PCD_MspInit>:

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b0a0      	sub	sp, #128	@ 0x80
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80016f8:	f107 0310 	add.w	r3, r7, #16
 80016fc:	225c      	movs	r2, #92	@ 0x5c
 80016fe:	2100      	movs	r1, #0
 8001700:	4618      	mov	r0, r3
 8001702:	f003 fdd7 	bl	80052b4 <memset>
  if(pcdHandle->Instance==USB_OTG_FS)
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800170e:	d14e      	bne.n	80017ae <HAL_PCD_MspInit+0xce>

  /* USER CODE END USB_OTG_FS_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_CLK48;
 8001710:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001714:	613b      	str	r3, [r7, #16]
    PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48CLKSOURCE_PLLQ;
 8001716:	2300      	movs	r3, #0
 8001718:	667b      	str	r3, [r7, #100]	@ 0x64
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800171a:	f107 0310 	add.w	r3, r7, #16
 800171e:	4618      	mov	r0, r3
 8001720:	f000 fe80 	bl	8002424 <HAL_RCCEx_PeriphCLKConfig>
 8001724:	4603      	mov	r3, r0
 8001726:	2b00      	cmp	r3, #0
 8001728:	d001      	beq.n	800172e <HAL_PCD_MspInit+0x4e>
    {
      Error_Handler();
 800172a:	f7ff fd3b 	bl	80011a4 <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800172e:	2300      	movs	r3, #0
 8001730:	60fb      	str	r3, [r7, #12]
 8001732:	4b21      	ldr	r3, [pc, #132]	@ (80017b8 <HAL_PCD_MspInit+0xd8>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001736:	4a20      	ldr	r2, [pc, #128]	@ (80017b8 <HAL_PCD_MspInit+0xd8>)
 8001738:	f043 0301 	orr.w	r3, r3, #1
 800173c:	6313      	str	r3, [r2, #48]	@ 0x30
 800173e:	4b1e      	ldr	r3, [pc, #120]	@ (80017b8 <HAL_PCD_MspInit+0xd8>)
 8001740:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	68fb      	ldr	r3, [r7, #12]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800174a:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 800174e:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001750:	2302      	movs	r3, #2
 8001752:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001754:	2300      	movs	r3, #0
 8001756:	677b      	str	r3, [r7, #116]	@ 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001758:	2303      	movs	r3, #3
 800175a:	67bb      	str	r3, [r7, #120]	@ 0x78
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800175c:	230a      	movs	r3, #10
 800175e:	67fb      	str	r3, [r7, #124]	@ 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001760:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 8001764:	4619      	mov	r1, r3
 8001766:	4815      	ldr	r0, [pc, #84]	@ (80017bc <HAL_PCD_MspInit+0xdc>)
 8001768:	f000 fa1e 	bl	8001ba8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800176c:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001770:	66fb      	str	r3, [r7, #108]	@ 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001772:	2300      	movs	r3, #0
 8001774:	673b      	str	r3, [r7, #112]	@ 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	677b      	str	r3, [r7, #116]	@ 0x74
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800177a:	f107 036c 	add.w	r3, r7, #108	@ 0x6c
 800177e:	4619      	mov	r1, r3
 8001780:	480e      	ldr	r0, [pc, #56]	@ (80017bc <HAL_PCD_MspInit+0xdc>)
 8001782:	f000 fa11 	bl	8001ba8 <HAL_GPIO_Init>

    /* USB_OTG_FS clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001786:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <HAL_PCD_MspInit+0xd8>)
 8001788:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800178a:	4a0b      	ldr	r2, [pc, #44]	@ (80017b8 <HAL_PCD_MspInit+0xd8>)
 800178c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001790:	6353      	str	r3, [r2, #52]	@ 0x34
 8001792:	2300      	movs	r3, #0
 8001794:	60bb      	str	r3, [r7, #8]
 8001796:	4b08      	ldr	r3, [pc, #32]	@ (80017b8 <HAL_PCD_MspInit+0xd8>)
 8001798:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800179a:	4a07      	ldr	r2, [pc, #28]	@ (80017b8 <HAL_PCD_MspInit+0xd8>)
 800179c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80017a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80017a2:	4b05      	ldr	r3, [pc, #20]	@ (80017b8 <HAL_PCD_MspInit+0xd8>)
 80017a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80017a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80017aa:	60bb      	str	r3, [r7, #8]
 80017ac:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80017ae:	bf00      	nop
 80017b0:	3780      	adds	r7, #128	@ 0x80
 80017b2:	46bd      	mov	sp, r7
 80017b4:	bd80      	pop	{r7, pc}
 80017b6:	bf00      	nop
 80017b8:	40023800 	.word	0x40023800
 80017bc:	40020000 	.word	0x40020000

080017c0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80017c0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80017f8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80017c4:	f7ff feda 	bl	800157c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80017c8:	480c      	ldr	r0, [pc, #48]	@ (80017fc <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80017ca:	490d      	ldr	r1, [pc, #52]	@ (8001800 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80017cc:	4a0d      	ldr	r2, [pc, #52]	@ (8001804 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80017ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80017d0:	e002      	b.n	80017d8 <LoopCopyDataInit>

080017d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80017d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80017d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80017d6:	3304      	adds	r3, #4

080017d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80017d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80017da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80017dc:	d3f9      	bcc.n	80017d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80017de:	4a0a      	ldr	r2, [pc, #40]	@ (8001808 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80017e0:	4c0a      	ldr	r4, [pc, #40]	@ (800180c <LoopFillZerobss+0x22>)
  movs r3, #0
 80017e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80017e4:	e001      	b.n	80017ea <LoopFillZerobss>

080017e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80017e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80017e8:	3204      	adds	r2, #4

080017ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80017ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80017ec:	d3fb      	bcc.n	80017e6 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80017ee:	f003 fdb5 	bl	800535c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80017f2:	f7ff fbd1 	bl	8000f98 <main>
  bx  lr    
 80017f6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80017f8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80017fc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001800:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001804:	08006208 	.word	0x08006208
  ldr r2, =_sbss
 8001808:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 800180c:	20000ad0 	.word	0x20000ad0

08001810 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001810:	e7fe      	b.n	8001810 <ADC_IRQHandler>
	...

08001814 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001814:	b580      	push	{r7, lr}
 8001816:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001818:	4b0e      	ldr	r3, [pc, #56]	@ (8001854 <HAL_Init+0x40>)
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	4a0d      	ldr	r2, [pc, #52]	@ (8001854 <HAL_Init+0x40>)
 800181e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001822:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001824:	4b0b      	ldr	r3, [pc, #44]	@ (8001854 <HAL_Init+0x40>)
 8001826:	681b      	ldr	r3, [r3, #0]
 8001828:	4a0a      	ldr	r2, [pc, #40]	@ (8001854 <HAL_Init+0x40>)
 800182a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800182e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001830:	4b08      	ldr	r3, [pc, #32]	@ (8001854 <HAL_Init+0x40>)
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a07      	ldr	r2, [pc, #28]	@ (8001854 <HAL_Init+0x40>)
 8001836:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800183a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800183c:	2003      	movs	r0, #3
 800183e:	f000 f94f 	bl	8001ae0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001842:	2000      	movs	r0, #0
 8001844:	f000 f808 	bl	8001858 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001848:	f7ff fda8 	bl	800139c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800184c:	2300      	movs	r3, #0
}
 800184e:	4618      	mov	r0, r3
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	40023c00 	.word	0x40023c00

08001858 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	b082      	sub	sp, #8
 800185c:	af00      	add	r7, sp, #0
 800185e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001860:	4b12      	ldr	r3, [pc, #72]	@ (80018ac <HAL_InitTick+0x54>)
 8001862:	681a      	ldr	r2, [r3, #0]
 8001864:	4b12      	ldr	r3, [pc, #72]	@ (80018b0 <HAL_InitTick+0x58>)
 8001866:	781b      	ldrb	r3, [r3, #0]
 8001868:	4619      	mov	r1, r3
 800186a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800186e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001872:	fbb2 f3f3 	udiv	r3, r2, r3
 8001876:	4618      	mov	r0, r3
 8001878:	f000 f967 	bl	8001b4a <HAL_SYSTICK_Config>
 800187c:	4603      	mov	r3, r0
 800187e:	2b00      	cmp	r3, #0
 8001880:	d001      	beq.n	8001886 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001882:	2301      	movs	r3, #1
 8001884:	e00e      	b.n	80018a4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	2b0f      	cmp	r3, #15
 800188a:	d80a      	bhi.n	80018a2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800188c:	2200      	movs	r2, #0
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	f04f 30ff 	mov.w	r0, #4294967295
 8001894:	f000 f92f 	bl	8001af6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001898:	4a06      	ldr	r2, [pc, #24]	@ (80018b4 <HAL_InitTick+0x5c>)
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800189e:	2300      	movs	r3, #0
 80018a0:	e000      	b.n	80018a4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018a2:	2301      	movs	r3, #1
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	20000000 	.word	0x20000000
 80018b0:	20000008 	.word	0x20000008
 80018b4:	20000004 	.word	0x20000004

080018b8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018b8:	b480      	push	{r7}
 80018ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018bc:	4b06      	ldr	r3, [pc, #24]	@ (80018d8 <HAL_IncTick+0x20>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	461a      	mov	r2, r3
 80018c2:	4b06      	ldr	r3, [pc, #24]	@ (80018dc <HAL_IncTick+0x24>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4413      	add	r3, r2
 80018c8:	4a04      	ldr	r2, [pc, #16]	@ (80018dc <HAL_IncTick+0x24>)
 80018ca:	6013      	str	r3, [r2, #0]
}
 80018cc:	bf00      	nop
 80018ce:	46bd      	mov	sp, r7
 80018d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d4:	4770      	bx	lr
 80018d6:	bf00      	nop
 80018d8:	20000008 	.word	0x20000008
 80018dc:	20000980 	.word	0x20000980

080018e0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018e0:	b480      	push	{r7}
 80018e2:	af00      	add	r7, sp, #0
  return uwTick;
 80018e4:	4b03      	ldr	r3, [pc, #12]	@ (80018f4 <HAL_GetTick+0x14>)
 80018e6:	681b      	ldr	r3, [r3, #0]
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	20000980 	.word	0x20000980

080018f8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b084      	sub	sp, #16
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001900:	f7ff ffee 	bl	80018e0 <HAL_GetTick>
 8001904:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001910:	d005      	beq.n	800191e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001912:	4b0a      	ldr	r3, [pc, #40]	@ (800193c <HAL_Delay+0x44>)
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	461a      	mov	r2, r3
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	4413      	add	r3, r2
 800191c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800191e:	bf00      	nop
 8001920:	f7ff ffde 	bl	80018e0 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	68bb      	ldr	r3, [r7, #8]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	68fa      	ldr	r2, [r7, #12]
 800192c:	429a      	cmp	r2, r3
 800192e:	d8f7      	bhi.n	8001920 <HAL_Delay+0x28>
  {
  }
}
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	3710      	adds	r7, #16
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	20000008 	.word	0x20000008

08001940 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001940:	b480      	push	{r7}
 8001942:	b085      	sub	sp, #20
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001948:	687b      	ldr	r3, [r7, #4]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001952:	68db      	ldr	r3, [r3, #12]
 8001954:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001956:	68ba      	ldr	r2, [r7, #8]
 8001958:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800195c:	4013      	ands	r3, r2
 800195e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001968:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800196c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001970:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001972:	4a04      	ldr	r2, [pc, #16]	@ (8001984 <__NVIC_SetPriorityGrouping+0x44>)
 8001974:	68bb      	ldr	r3, [r7, #8]
 8001976:	60d3      	str	r3, [r2, #12]
}
 8001978:	bf00      	nop
 800197a:	3714      	adds	r7, #20
 800197c:	46bd      	mov	sp, r7
 800197e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001982:	4770      	bx	lr
 8001984:	e000ed00 	.word	0xe000ed00

08001988 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800198c:	4b04      	ldr	r3, [pc, #16]	@ (80019a0 <__NVIC_GetPriorityGrouping+0x18>)
 800198e:	68db      	ldr	r3, [r3, #12]
 8001990:	0a1b      	lsrs	r3, r3, #8
 8001992:	f003 0307 	and.w	r3, r3, #7
}
 8001996:	4618      	mov	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199e:	4770      	bx	lr
 80019a0:	e000ed00 	.word	0xe000ed00

080019a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80019a4:	b480      	push	{r7}
 80019a6:	b083      	sub	sp, #12
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	4603      	mov	r3, r0
 80019ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	db0b      	blt.n	80019ce <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	f003 021f 	and.w	r2, r3, #31
 80019bc:	4907      	ldr	r1, [pc, #28]	@ (80019dc <__NVIC_EnableIRQ+0x38>)
 80019be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c2:	095b      	lsrs	r3, r3, #5
 80019c4:	2001      	movs	r0, #1
 80019c6:	fa00 f202 	lsl.w	r2, r0, r2
 80019ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019ce:	bf00      	nop
 80019d0:	370c      	adds	r7, #12
 80019d2:	46bd      	mov	sp, r7
 80019d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d8:	4770      	bx	lr
 80019da:	bf00      	nop
 80019dc:	e000e100 	.word	0xe000e100

080019e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019e0:	b480      	push	{r7}
 80019e2:	b083      	sub	sp, #12
 80019e4:	af00      	add	r7, sp, #0
 80019e6:	4603      	mov	r3, r0
 80019e8:	6039      	str	r1, [r7, #0]
 80019ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	db0a      	blt.n	8001a0a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f4:	683b      	ldr	r3, [r7, #0]
 80019f6:	b2da      	uxtb	r2, r3
 80019f8:	490c      	ldr	r1, [pc, #48]	@ (8001a2c <__NVIC_SetPriority+0x4c>)
 80019fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019fe:	0112      	lsls	r2, r2, #4
 8001a00:	b2d2      	uxtb	r2, r2
 8001a02:	440b      	add	r3, r1
 8001a04:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a08:	e00a      	b.n	8001a20 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a0a:	683b      	ldr	r3, [r7, #0]
 8001a0c:	b2da      	uxtb	r2, r3
 8001a0e:	4908      	ldr	r1, [pc, #32]	@ (8001a30 <__NVIC_SetPriority+0x50>)
 8001a10:	79fb      	ldrb	r3, [r7, #7]
 8001a12:	f003 030f 	and.w	r3, r3, #15
 8001a16:	3b04      	subs	r3, #4
 8001a18:	0112      	lsls	r2, r2, #4
 8001a1a:	b2d2      	uxtb	r2, r2
 8001a1c:	440b      	add	r3, r1
 8001a1e:	761a      	strb	r2, [r3, #24]
}
 8001a20:	bf00      	nop
 8001a22:	370c      	adds	r7, #12
 8001a24:	46bd      	mov	sp, r7
 8001a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2a:	4770      	bx	lr
 8001a2c:	e000e100 	.word	0xe000e100
 8001a30:	e000ed00 	.word	0xe000ed00

08001a34 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a34:	b480      	push	{r7}
 8001a36:	b089      	sub	sp, #36	@ 0x24
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	60f8      	str	r0, [r7, #12]
 8001a3c:	60b9      	str	r1, [r7, #8]
 8001a3e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a40:	68fb      	ldr	r3, [r7, #12]
 8001a42:	f003 0307 	and.w	r3, r3, #7
 8001a46:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a48:	69fb      	ldr	r3, [r7, #28]
 8001a4a:	f1c3 0307 	rsb	r3, r3, #7
 8001a4e:	2b04      	cmp	r3, #4
 8001a50:	bf28      	it	cs
 8001a52:	2304      	movcs	r3, #4
 8001a54:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a56:	69fb      	ldr	r3, [r7, #28]
 8001a58:	3304      	adds	r3, #4
 8001a5a:	2b06      	cmp	r3, #6
 8001a5c:	d902      	bls.n	8001a64 <NVIC_EncodePriority+0x30>
 8001a5e:	69fb      	ldr	r3, [r7, #28]
 8001a60:	3b03      	subs	r3, #3
 8001a62:	e000      	b.n	8001a66 <NVIC_EncodePriority+0x32>
 8001a64:	2300      	movs	r3, #0
 8001a66:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a68:	f04f 32ff 	mov.w	r2, #4294967295
 8001a6c:	69bb      	ldr	r3, [r7, #24]
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43da      	mvns	r2, r3
 8001a74:	68bb      	ldr	r3, [r7, #8]
 8001a76:	401a      	ands	r2, r3
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a7c:	f04f 31ff 	mov.w	r1, #4294967295
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	fa01 f303 	lsl.w	r3, r1, r3
 8001a86:	43d9      	mvns	r1, r3
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a8c:	4313      	orrs	r3, r2
         );
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3724      	adds	r7, #36	@ 0x24
 8001a92:	46bd      	mov	sp, r7
 8001a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a98:	4770      	bx	lr
	...

08001a9c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a9c:	b580      	push	{r7, lr}
 8001a9e:	b082      	sub	sp, #8
 8001aa0:	af00      	add	r7, sp, #0
 8001aa2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001aac:	d301      	bcc.n	8001ab2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001aae:	2301      	movs	r3, #1
 8001ab0:	e00f      	b.n	8001ad2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001ab2:	4a0a      	ldr	r2, [pc, #40]	@ (8001adc <SysTick_Config+0x40>)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	3b01      	subs	r3, #1
 8001ab8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001aba:	210f      	movs	r1, #15
 8001abc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ac0:	f7ff ff8e 	bl	80019e0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ac4:	4b05      	ldr	r3, [pc, #20]	@ (8001adc <SysTick_Config+0x40>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aca:	4b04      	ldr	r3, [pc, #16]	@ (8001adc <SysTick_Config+0x40>)
 8001acc:	2207      	movs	r2, #7
 8001ace:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}
 8001ada:	bf00      	nop
 8001adc:	e000e010 	.word	0xe000e010

08001ae0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ae0:	b580      	push	{r7, lr}
 8001ae2:	b082      	sub	sp, #8
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ae8:	6878      	ldr	r0, [r7, #4]
 8001aea:	f7ff ff29 	bl	8001940 <__NVIC_SetPriorityGrouping>
}
 8001aee:	bf00      	nop
 8001af0:	3708      	adds	r7, #8
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}

08001af6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001af6:	b580      	push	{r7, lr}
 8001af8:	b086      	sub	sp, #24
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	4603      	mov	r3, r0
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
 8001b02:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b08:	f7ff ff3e 	bl	8001988 <__NVIC_GetPriorityGrouping>
 8001b0c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b0e:	687a      	ldr	r2, [r7, #4]
 8001b10:	68b9      	ldr	r1, [r7, #8]
 8001b12:	6978      	ldr	r0, [r7, #20]
 8001b14:	f7ff ff8e 	bl	8001a34 <NVIC_EncodePriority>
 8001b18:	4602      	mov	r2, r0
 8001b1a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b1e:	4611      	mov	r1, r2
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff5d 	bl	80019e0 <__NVIC_SetPriority>
}
 8001b26:	bf00      	nop
 8001b28:	3718      	adds	r7, #24
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	4603      	mov	r3, r0
 8001b36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3c:	4618      	mov	r0, r3
 8001b3e:	f7ff ff31 	bl	80019a4 <__NVIC_EnableIRQ>
}
 8001b42:	bf00      	nop
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}

08001b4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b4a:	b580      	push	{r7, lr}
 8001b4c:	b082      	sub	sp, #8
 8001b4e:	af00      	add	r7, sp, #0
 8001b50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b52:	6878      	ldr	r0, [r7, #4]
 8001b54:	f7ff ffa2 	bl	8001a9c <SysTick_Config>
 8001b58:	4603      	mov	r3, r0
}
 8001b5a:	4618      	mov	r0, r3
 8001b5c:	3708      	adds	r7, #8
 8001b5e:	46bd      	mov	sp, r7
 8001b60:	bd80      	pop	{r7, pc}

08001b62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b083      	sub	sp, #12
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8001b70:	b2db      	uxtb	r3, r3
 8001b72:	2b02      	cmp	r3, #2
 8001b74:	d004      	beq.n	8001b80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	2280      	movs	r2, #128	@ 0x80
 8001b7a:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	e00c      	b.n	8001b9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	2205      	movs	r2, #5
 8001b84:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	681a      	ldr	r2, [r3, #0]
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	681b      	ldr	r3, [r3, #0]
 8001b92:	f022 0201 	bic.w	r2, r2, #1
 8001b96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001b98:	2300      	movs	r3, #0
}
 8001b9a:	4618      	mov	r0, r3
 8001b9c:	370c      	adds	r7, #12
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba4:	4770      	bx	lr
	...

08001ba8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b089      	sub	sp, #36	@ 0x24
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
 8001bb0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bb2:	2300      	movs	r3, #0
 8001bb4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001bb6:	2300      	movs	r3, #0
 8001bb8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	61fb      	str	r3, [r7, #28]
 8001bc2:	e165      	b.n	8001e90 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bc4:	2201      	movs	r2, #1
 8001bc6:	69fb      	ldr	r3, [r7, #28]
 8001bc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001bcc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	697a      	ldr	r2, [r7, #20]
 8001bd4:	4013      	ands	r3, r2
 8001bd6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bd8:	693a      	ldr	r2, [r7, #16]
 8001bda:	697b      	ldr	r3, [r7, #20]
 8001bdc:	429a      	cmp	r2, r3
 8001bde:	f040 8154 	bne.w	8001e8a <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001be2:	683b      	ldr	r3, [r7, #0]
 8001be4:	685b      	ldr	r3, [r3, #4]
 8001be6:	f003 0303 	and.w	r3, r3, #3
 8001bea:	2b01      	cmp	r3, #1
 8001bec:	d005      	beq.n	8001bfa <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001bee:	683b      	ldr	r3, [r7, #0]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001bf6:	2b02      	cmp	r3, #2
 8001bf8:	d130      	bne.n	8001c5c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	689b      	ldr	r3, [r3, #8]
 8001bfe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c00:	69fb      	ldr	r3, [r7, #28]
 8001c02:	005b      	lsls	r3, r3, #1
 8001c04:	2203      	movs	r2, #3
 8001c06:	fa02 f303 	lsl.w	r3, r2, r3
 8001c0a:	43db      	mvns	r3, r3
 8001c0c:	69ba      	ldr	r2, [r7, #24]
 8001c0e:	4013      	ands	r3, r2
 8001c10:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c12:	683b      	ldr	r3, [r7, #0]
 8001c14:	68da      	ldr	r2, [r3, #12]
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4313      	orrs	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	69ba      	ldr	r2, [r7, #24]
 8001c28:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	685b      	ldr	r3, [r3, #4]
 8001c2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c30:	2201      	movs	r2, #1
 8001c32:	69fb      	ldr	r3, [r7, #28]
 8001c34:	fa02 f303 	lsl.w	r3, r2, r3
 8001c38:	43db      	mvns	r3, r3
 8001c3a:	69ba      	ldr	r2, [r7, #24]
 8001c3c:	4013      	ands	r3, r2
 8001c3e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	685b      	ldr	r3, [r3, #4]
 8001c44:	091b      	lsrs	r3, r3, #4
 8001c46:	f003 0201 	and.w	r2, r3, #1
 8001c4a:	69fb      	ldr	r3, [r7, #28]
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	69ba      	ldr	r2, [r7, #24]
 8001c52:	4313      	orrs	r3, r2
 8001c54:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	69ba      	ldr	r2, [r7, #24]
 8001c5a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	685b      	ldr	r3, [r3, #4]
 8001c60:	f003 0303 	and.w	r3, r3, #3
 8001c64:	2b03      	cmp	r3, #3
 8001c66:	d017      	beq.n	8001c98 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c6e:	69fb      	ldr	r3, [r7, #28]
 8001c70:	005b      	lsls	r3, r3, #1
 8001c72:	2203      	movs	r2, #3
 8001c74:	fa02 f303 	lsl.w	r3, r2, r3
 8001c78:	43db      	mvns	r3, r3
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	4013      	ands	r3, r2
 8001c7e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001c80:	683b      	ldr	r3, [r7, #0]
 8001c82:	689a      	ldr	r2, [r3, #8]
 8001c84:	69fb      	ldr	r3, [r7, #28]
 8001c86:	005b      	lsls	r3, r3, #1
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	69ba      	ldr	r2, [r7, #24]
 8001c8e:	4313      	orrs	r3, r2
 8001c90:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001c92:	687b      	ldr	r3, [r7, #4]
 8001c94:	69ba      	ldr	r2, [r7, #24]
 8001c96:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c98:	683b      	ldr	r3, [r7, #0]
 8001c9a:	685b      	ldr	r3, [r3, #4]
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	2b02      	cmp	r3, #2
 8001ca2:	d123      	bne.n	8001cec <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001ca4:	69fb      	ldr	r3, [r7, #28]
 8001ca6:	08da      	lsrs	r2, r3, #3
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	3208      	adds	r2, #8
 8001cac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cb0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cb2:	69fb      	ldr	r3, [r7, #28]
 8001cb4:	f003 0307 	and.w	r3, r3, #7
 8001cb8:	009b      	lsls	r3, r3, #2
 8001cba:	220f      	movs	r2, #15
 8001cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cc0:	43db      	mvns	r3, r3
 8001cc2:	69ba      	ldr	r2, [r7, #24]
 8001cc4:	4013      	ands	r3, r2
 8001cc6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	691a      	ldr	r2, [r3, #16]
 8001ccc:	69fb      	ldr	r3, [r7, #28]
 8001cce:	f003 0307 	and.w	r3, r3, #7
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	69ba      	ldr	r2, [r7, #24]
 8001cda:	4313      	orrs	r3, r2
 8001cdc:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	08da      	lsrs	r2, r3, #3
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	3208      	adds	r2, #8
 8001ce6:	69b9      	ldr	r1, [r7, #24]
 8001ce8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	681b      	ldr	r3, [r3, #0]
 8001cf0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001cf2:	69fb      	ldr	r3, [r7, #28]
 8001cf4:	005b      	lsls	r3, r3, #1
 8001cf6:	2203      	movs	r2, #3
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f003 0203 	and.w	r2, r3, #3
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	69ba      	ldr	r2, [r7, #24]
 8001d16:	4313      	orrs	r3, r2
 8001d18:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	69ba      	ldr	r2, [r7, #24]
 8001d1e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d20:	683b      	ldr	r3, [r7, #0]
 8001d22:	685b      	ldr	r3, [r3, #4]
 8001d24:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001d28:	2b00      	cmp	r3, #0
 8001d2a:	f000 80ae 	beq.w	8001e8a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	60fb      	str	r3, [r7, #12]
 8001d32:	4b5d      	ldr	r3, [pc, #372]	@ (8001ea8 <HAL_GPIO_Init+0x300>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d36:	4a5c      	ldr	r2, [pc, #368]	@ (8001ea8 <HAL_GPIO_Init+0x300>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d3e:	4b5a      	ldr	r3, [pc, #360]	@ (8001ea8 <HAL_GPIO_Init+0x300>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001d46:	60fb      	str	r3, [r7, #12]
 8001d48:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d4a:	4a58      	ldr	r2, [pc, #352]	@ (8001eac <HAL_GPIO_Init+0x304>)
 8001d4c:	69fb      	ldr	r3, [r7, #28]
 8001d4e:	089b      	lsrs	r3, r3, #2
 8001d50:	3302      	adds	r3, #2
 8001d52:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d56:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d58:	69fb      	ldr	r3, [r7, #28]
 8001d5a:	f003 0303 	and.w	r3, r3, #3
 8001d5e:	009b      	lsls	r3, r3, #2
 8001d60:	220f      	movs	r2, #15
 8001d62:	fa02 f303 	lsl.w	r3, r2, r3
 8001d66:	43db      	mvns	r3, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4013      	ands	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a4f      	ldr	r2, [pc, #316]	@ (8001eb0 <HAL_GPIO_Init+0x308>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d025      	beq.n	8001dc2 <HAL_GPIO_Init+0x21a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a4e      	ldr	r2, [pc, #312]	@ (8001eb4 <HAL_GPIO_Init+0x30c>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d01f      	beq.n	8001dbe <HAL_GPIO_Init+0x216>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a4d      	ldr	r2, [pc, #308]	@ (8001eb8 <HAL_GPIO_Init+0x310>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d019      	beq.n	8001dba <HAL_GPIO_Init+0x212>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a4c      	ldr	r2, [pc, #304]	@ (8001ebc <HAL_GPIO_Init+0x314>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d013      	beq.n	8001db6 <HAL_GPIO_Init+0x20e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4b      	ldr	r2, [pc, #300]	@ (8001ec0 <HAL_GPIO_Init+0x318>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d00d      	beq.n	8001db2 <HAL_GPIO_Init+0x20a>
 8001d96:	687b      	ldr	r3, [r7, #4]
 8001d98:	4a4a      	ldr	r2, [pc, #296]	@ (8001ec4 <HAL_GPIO_Init+0x31c>)
 8001d9a:	4293      	cmp	r3, r2
 8001d9c:	d007      	beq.n	8001dae <HAL_GPIO_Init+0x206>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	4a49      	ldr	r2, [pc, #292]	@ (8001ec8 <HAL_GPIO_Init+0x320>)
 8001da2:	4293      	cmp	r3, r2
 8001da4:	d101      	bne.n	8001daa <HAL_GPIO_Init+0x202>
 8001da6:	2306      	movs	r3, #6
 8001da8:	e00c      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001daa:	2307      	movs	r3, #7
 8001dac:	e00a      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001dae:	2305      	movs	r3, #5
 8001db0:	e008      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001db2:	2304      	movs	r3, #4
 8001db4:	e006      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001db6:	2303      	movs	r3, #3
 8001db8:	e004      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001dba:	2302      	movs	r3, #2
 8001dbc:	e002      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001dbe:	2301      	movs	r3, #1
 8001dc0:	e000      	b.n	8001dc4 <HAL_GPIO_Init+0x21c>
 8001dc2:	2300      	movs	r3, #0
 8001dc4:	69fa      	ldr	r2, [r7, #28]
 8001dc6:	f002 0203 	and.w	r2, r2, #3
 8001dca:	0092      	lsls	r2, r2, #2
 8001dcc:	4093      	lsls	r3, r2
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4313      	orrs	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001dd4:	4935      	ldr	r1, [pc, #212]	@ (8001eac <HAL_GPIO_Init+0x304>)
 8001dd6:	69fb      	ldr	r3, [r7, #28]
 8001dd8:	089b      	lsrs	r3, r3, #2
 8001dda:	3302      	adds	r3, #2
 8001ddc:	69ba      	ldr	r2, [r7, #24]
 8001dde:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001de2:	4b3a      	ldr	r3, [pc, #232]	@ (8001ecc <HAL_GPIO_Init+0x324>)
 8001de4:	689b      	ldr	r3, [r3, #8]
 8001de6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de8:	693b      	ldr	r3, [r7, #16]
 8001dea:	43db      	mvns	r3, r3
 8001dec:	69ba      	ldr	r2, [r7, #24]
 8001dee:	4013      	ands	r3, r2
 8001df0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	685b      	ldr	r3, [r3, #4]
 8001df6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d003      	beq.n	8001e06 <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001dfe:	69ba      	ldr	r2, [r7, #24]
 8001e00:	693b      	ldr	r3, [r7, #16]
 8001e02:	4313      	orrs	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e06:	4a31      	ldr	r2, [pc, #196]	@ (8001ecc <HAL_GPIO_Init+0x324>)
 8001e08:	69bb      	ldr	r3, [r7, #24]
 8001e0a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e0c:	4b2f      	ldr	r3, [pc, #188]	@ (8001ecc <HAL_GPIO_Init+0x324>)
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e12:	693b      	ldr	r3, [r7, #16]
 8001e14:	43db      	mvns	r3, r3
 8001e16:	69ba      	ldr	r2, [r7, #24]
 8001e18:	4013      	ands	r3, r2
 8001e1a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e1c:	683b      	ldr	r3, [r7, #0]
 8001e1e:	685b      	ldr	r3, [r3, #4]
 8001e20:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d003      	beq.n	8001e30 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	693b      	ldr	r3, [r7, #16]
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e30:	4a26      	ldr	r2, [pc, #152]	@ (8001ecc <HAL_GPIO_Init+0x324>)
 8001e32:	69bb      	ldr	r3, [r7, #24]
 8001e34:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e36:	4b25      	ldr	r3, [pc, #148]	@ (8001ecc <HAL_GPIO_Init+0x324>)
 8001e38:	685b      	ldr	r3, [r3, #4]
 8001e3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	43db      	mvns	r3, r3
 8001e40:	69ba      	ldr	r2, [r7, #24]
 8001e42:	4013      	ands	r3, r2
 8001e44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e46:	683b      	ldr	r3, [r7, #0]
 8001e48:	685b      	ldr	r3, [r3, #4]
 8001e4a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e4e:	2b00      	cmp	r3, #0
 8001e50:	d003      	beq.n	8001e5a <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	693b      	ldr	r3, [r7, #16]
 8001e56:	4313      	orrs	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e5a:	4a1c      	ldr	r2, [pc, #112]	@ (8001ecc <HAL_GPIO_Init+0x324>)
 8001e5c:	69bb      	ldr	r3, [r7, #24]
 8001e5e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e60:	4b1a      	ldr	r3, [pc, #104]	@ (8001ecc <HAL_GPIO_Init+0x324>)
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	69ba      	ldr	r2, [r7, #24]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e70:	683b      	ldr	r3, [r7, #0]
 8001e72:	685b      	ldr	r3, [r3, #4]
 8001e74:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d003      	beq.n	8001e84 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	693b      	ldr	r3, [r7, #16]
 8001e80:	4313      	orrs	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e84:	4a11      	ldr	r2, [pc, #68]	@ (8001ecc <HAL_GPIO_Init+0x324>)
 8001e86:	69bb      	ldr	r3, [r7, #24]
 8001e88:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	3301      	adds	r3, #1
 8001e8e:	61fb      	str	r3, [r7, #28]
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	2b0f      	cmp	r3, #15
 8001e94:	f67f ae96 	bls.w	8001bc4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001e98:	bf00      	nop
 8001e9a:	bf00      	nop
 8001e9c:	3724      	adds	r7, #36	@ 0x24
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea4:	4770      	bx	lr
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	40013800 	.word	0x40013800
 8001eb0:	40020000 	.word	0x40020000
 8001eb4:	40020400 	.word	0x40020400
 8001eb8:	40020800 	.word	0x40020800
 8001ebc:	40020c00 	.word	0x40020c00
 8001ec0:	40021000 	.word	0x40021000
 8001ec4:	40021400 	.word	0x40021400
 8001ec8:	40021800 	.word	0x40021800
 8001ecc:	40013c00 	.word	0x40013c00

08001ed0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ed0:	b480      	push	{r7}
 8001ed2:	b085      	sub	sp, #20
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	6078      	str	r0, [r7, #4]
 8001ed8:	460b      	mov	r3, r1
 8001eda:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	691a      	ldr	r2, [r3, #16]
 8001ee0:	887b      	ldrh	r3, [r7, #2]
 8001ee2:	4013      	ands	r3, r2
 8001ee4:	2b00      	cmp	r3, #0
 8001ee6:	d002      	beq.n	8001eee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ee8:	2301      	movs	r3, #1
 8001eea:	73fb      	strb	r3, [r7, #15]
 8001eec:	e001      	b.n	8001ef2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001eee:	2300      	movs	r3, #0
 8001ef0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001ef2:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ef4:	4618      	mov	r0, r3
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efe:	4770      	bx	lr

08001f00 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f00:	b480      	push	{r7}
 8001f02:	b083      	sub	sp, #12
 8001f04:	af00      	add	r7, sp, #0
 8001f06:	6078      	str	r0, [r7, #4]
 8001f08:	460b      	mov	r3, r1
 8001f0a:	807b      	strh	r3, [r7, #2]
 8001f0c:	4613      	mov	r3, r2
 8001f0e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f10:	787b      	ldrb	r3, [r7, #1]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d003      	beq.n	8001f1e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f16:	887a      	ldrh	r2, [r7, #2]
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f1c:	e003      	b.n	8001f26 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f1e:	887b      	ldrh	r3, [r7, #2]
 8001f20:	041a      	lsls	r2, r3, #16
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	619a      	str	r2, [r3, #24]
}
 8001f26:	bf00      	nop
 8001f28:	370c      	adds	r7, #12
 8001f2a:	46bd      	mov	sp, r7
 8001f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f30:	4770      	bx	lr
	...

08001f34 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001f34:	b580      	push	{r7, lr}
 8001f36:	b082      	sub	sp, #8
 8001f38:	af00      	add	r7, sp, #0
 8001f3a:	4603      	mov	r3, r0
 8001f3c:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001f3e:	4b08      	ldr	r3, [pc, #32]	@ (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f40:	695a      	ldr	r2, [r3, #20]
 8001f42:	88fb      	ldrh	r3, [r7, #6]
 8001f44:	4013      	ands	r3, r2
 8001f46:	2b00      	cmp	r3, #0
 8001f48:	d006      	beq.n	8001f58 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001f4a:	4a05      	ldr	r2, [pc, #20]	@ (8001f60 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001f4c:	88fb      	ldrh	r3, [r7, #6]
 8001f4e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001f50:	88fb      	ldrh	r3, [r7, #6]
 8001f52:	4618      	mov	r0, r3
 8001f54:	f000 f806 	bl	8001f64 <HAL_GPIO_EXTI_Callback>
  }
}
 8001f58:	bf00      	nop
 8001f5a:	3708      	adds	r7, #8
 8001f5c:	46bd      	mov	sp, r7
 8001f5e:	bd80      	pop	{r7, pc}
 8001f60:	40013c00 	.word	0x40013c00

08001f64 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001f64:	b480      	push	{r7}
 8001f66:	b083      	sub	sp, #12
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001f6e:	bf00      	nop
 8001f70:	370c      	adds	r7, #12
 8001f72:	46bd      	mov	sp, r7
 8001f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f78:	4770      	bx	lr

08001f7a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f7a:	b580      	push	{r7, lr}
 8001f7c:	b086      	sub	sp, #24
 8001f7e:	af02      	add	r7, sp, #8
 8001f80:	6078      	str	r0, [r7, #4]
  const USB_OTG_GlobalTypeDef *USBx;
#endif /* defined (USB_OTG_FS) */
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d101      	bne.n	8001f8c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	e108      	b.n	800219e <HAL_PCD_Init+0x224>

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

#if defined (USB_OTG_FS)
  USBx = hpcd->Instance;
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	60bb      	str	r3, [r7, #8]
#endif /* defined (USB_OTG_FS) */

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	f893 3495 	ldrb.w	r3, [r3, #1173]	@ 0x495
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d106      	bne.n	8001fac <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	f883 2494 	strb.w	r2, [r3, #1172]	@ 0x494

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001fa6:	6878      	ldr	r0, [r7, #4]
 8001fa8:	f7ff fb9a 	bl	80016e0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	2203      	movs	r2, #3
 8001fb0:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495

#if defined (USB_OTG_FS)
  /* Disable DMA mode for FS instance */
  if (USBx == USB_OTG_FS)
 8001fb4:	68bb      	ldr	r3, [r7, #8]
 8001fb6:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001fba:	d102      	bne.n	8001fc2 <HAL_PCD_Init+0x48>
  {
    hpcd->Init.dma_enable = 0U;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	719a      	strb	r2, [r3, #6]
  }
#endif /* defined (USB_OTG_FS) */

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f002 fc98 	bl	80048fc <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6818      	ldr	r0, [r3, #0]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	7c1a      	ldrb	r2, [r3, #16]
 8001fd4:	f88d 2000 	strb.w	r2, [sp]
 8001fd8:	3304      	adds	r3, #4
 8001fda:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001fdc:	f002 fc2a 	bl	8004834 <USB_CoreInit>
 8001fe0:	4603      	mov	r3, r0
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d005      	beq.n	8001ff2 <HAL_PCD_Init+0x78>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8001fee:	2301      	movs	r3, #1
 8001ff0:	e0d5      	b.n	800219e <HAL_PCD_Init+0x224>
  }

  /* Force Device Mode */
  if (USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE) != HAL_OK)
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	f002 fc90 	bl	800491e <USB_SetCurrentMode>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d005      	beq.n	8002010 <HAL_PCD_Init+0x96>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 800200c:	2301      	movs	r3, #1
 800200e:	e0c6      	b.n	800219e <HAL_PCD_Init+0x224>
  }

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002010:	2300      	movs	r3, #0
 8002012:	73fb      	strb	r3, [r7, #15]
 8002014:	e04a      	b.n	80020ac <HAL_PCD_Init+0x132>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002016:	7bfa      	ldrb	r2, [r7, #15]
 8002018:	6879      	ldr	r1, [r7, #4]
 800201a:	4613      	mov	r3, r2
 800201c:	00db      	lsls	r3, r3, #3
 800201e:	4413      	add	r3, r2
 8002020:	009b      	lsls	r3, r3, #2
 8002022:	440b      	add	r3, r1
 8002024:	3315      	adds	r3, #21
 8002026:	2201      	movs	r2, #1
 8002028:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800202a:	7bfa      	ldrb	r2, [r7, #15]
 800202c:	6879      	ldr	r1, [r7, #4]
 800202e:	4613      	mov	r3, r2
 8002030:	00db      	lsls	r3, r3, #3
 8002032:	4413      	add	r3, r2
 8002034:	009b      	lsls	r3, r3, #2
 8002036:	440b      	add	r3, r1
 8002038:	3314      	adds	r3, #20
 800203a:	7bfa      	ldrb	r2, [r7, #15]
 800203c:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800203e:	7bfa      	ldrb	r2, [r7, #15]
 8002040:	7bfb      	ldrb	r3, [r7, #15]
 8002042:	b298      	uxth	r0, r3
 8002044:	6879      	ldr	r1, [r7, #4]
 8002046:	4613      	mov	r3, r2
 8002048:	00db      	lsls	r3, r3, #3
 800204a:	4413      	add	r3, r2
 800204c:	009b      	lsls	r3, r3, #2
 800204e:	440b      	add	r3, r1
 8002050:	332e      	adds	r3, #46	@ 0x2e
 8002052:	4602      	mov	r2, r0
 8002054:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002056:	7bfa      	ldrb	r2, [r7, #15]
 8002058:	6879      	ldr	r1, [r7, #4]
 800205a:	4613      	mov	r3, r2
 800205c:	00db      	lsls	r3, r3, #3
 800205e:	4413      	add	r3, r2
 8002060:	009b      	lsls	r3, r3, #2
 8002062:	440b      	add	r3, r1
 8002064:	3318      	adds	r3, #24
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800206a:	7bfa      	ldrb	r2, [r7, #15]
 800206c:	6879      	ldr	r1, [r7, #4]
 800206e:	4613      	mov	r3, r2
 8002070:	00db      	lsls	r3, r3, #3
 8002072:	4413      	add	r3, r2
 8002074:	009b      	lsls	r3, r3, #2
 8002076:	440b      	add	r3, r1
 8002078:	331c      	adds	r3, #28
 800207a:	2200      	movs	r2, #0
 800207c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	4413      	add	r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	3320      	adds	r3, #32
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002092:	7bfa      	ldrb	r2, [r7, #15]
 8002094:	6879      	ldr	r1, [r7, #4]
 8002096:	4613      	mov	r3, r2
 8002098:	00db      	lsls	r3, r3, #3
 800209a:	4413      	add	r3, r2
 800209c:	009b      	lsls	r3, r3, #2
 800209e:	440b      	add	r3, r1
 80020a0:	3324      	adds	r3, #36	@ 0x24
 80020a2:	2200      	movs	r2, #0
 80020a4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	3301      	adds	r3, #1
 80020aa:	73fb      	strb	r3, [r7, #15]
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	791b      	ldrb	r3, [r3, #4]
 80020b0:	7bfa      	ldrb	r2, [r7, #15]
 80020b2:	429a      	cmp	r2, r3
 80020b4:	d3af      	bcc.n	8002016 <HAL_PCD_Init+0x9c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020b6:	2300      	movs	r3, #0
 80020b8:	73fb      	strb	r3, [r7, #15]
 80020ba:	e044      	b.n	8002146 <HAL_PCD_Init+0x1cc>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 80020bc:	7bfa      	ldrb	r2, [r7, #15]
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	4613      	mov	r3, r2
 80020c2:	00db      	lsls	r3, r3, #3
 80020c4:	4413      	add	r3, r2
 80020c6:	009b      	lsls	r3, r3, #2
 80020c8:	440b      	add	r3, r1
 80020ca:	f203 2355 	addw	r3, r3, #597	@ 0x255
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80020d2:	7bfa      	ldrb	r2, [r7, #15]
 80020d4:	6879      	ldr	r1, [r7, #4]
 80020d6:	4613      	mov	r3, r2
 80020d8:	00db      	lsls	r3, r3, #3
 80020da:	4413      	add	r3, r2
 80020dc:	009b      	lsls	r3, r3, #2
 80020de:	440b      	add	r3, r1
 80020e0:	f503 7315 	add.w	r3, r3, #596	@ 0x254
 80020e4:	7bfa      	ldrb	r2, [r7, #15]
 80020e6:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80020e8:	7bfa      	ldrb	r2, [r7, #15]
 80020ea:	6879      	ldr	r1, [r7, #4]
 80020ec:	4613      	mov	r3, r2
 80020ee:	00db      	lsls	r3, r3, #3
 80020f0:	4413      	add	r3, r2
 80020f2:	009b      	lsls	r3, r3, #2
 80020f4:	440b      	add	r3, r1
 80020f6:	f503 7316 	add.w	r3, r3, #600	@ 0x258
 80020fa:	2200      	movs	r2, #0
 80020fc:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80020fe:	7bfa      	ldrb	r2, [r7, #15]
 8002100:	6879      	ldr	r1, [r7, #4]
 8002102:	4613      	mov	r3, r2
 8002104:	00db      	lsls	r3, r3, #3
 8002106:	4413      	add	r3, r2
 8002108:	009b      	lsls	r3, r3, #2
 800210a:	440b      	add	r3, r1
 800210c:	f503 7317 	add.w	r3, r3, #604	@ 0x25c
 8002110:	2200      	movs	r2, #0
 8002112:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002114:	7bfa      	ldrb	r2, [r7, #15]
 8002116:	6879      	ldr	r1, [r7, #4]
 8002118:	4613      	mov	r3, r2
 800211a:	00db      	lsls	r3, r3, #3
 800211c:	4413      	add	r3, r2
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	440b      	add	r3, r1
 8002122:	f503 7318 	add.w	r3, r3, #608	@ 0x260
 8002126:	2200      	movs	r2, #0
 8002128:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800212a:	7bfa      	ldrb	r2, [r7, #15]
 800212c:	6879      	ldr	r1, [r7, #4]
 800212e:	4613      	mov	r3, r2
 8002130:	00db      	lsls	r3, r3, #3
 8002132:	4413      	add	r3, r2
 8002134:	009b      	lsls	r3, r3, #2
 8002136:	440b      	add	r3, r1
 8002138:	f503 7319 	add.w	r3, r3, #612	@ 0x264
 800213c:	2200      	movs	r2, #0
 800213e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002140:	7bfb      	ldrb	r3, [r7, #15]
 8002142:	3301      	adds	r3, #1
 8002144:	73fb      	strb	r3, [r7, #15]
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	791b      	ldrb	r3, [r3, #4]
 800214a:	7bfa      	ldrb	r2, [r7, #15]
 800214c:	429a      	cmp	r2, r3
 800214e:	d3b5      	bcc.n	80020bc <HAL_PCD_Init+0x142>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	6818      	ldr	r0, [r3, #0]
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	7c1a      	ldrb	r2, [r3, #16]
 8002158:	f88d 2000 	strb.w	r2, [sp]
 800215c:	3304      	adds	r3, #4
 800215e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002160:	f002 fc2a 	bl	80049b8 <USB_DevInit>
 8002164:	4603      	mov	r3, r0
 8002166:	2b00      	cmp	r3, #0
 8002168:	d005      	beq.n	8002176 <HAL_PCD_Init+0x1fc>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2202      	movs	r2, #2
 800216e:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
    return HAL_ERROR;
 8002172:	2301      	movs	r3, #1
 8002174:	e013      	b.n	800219e <HAL_PCD_Init+0x224>
  }

  hpcd->USB_Address = 0U;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	2200      	movs	r2, #0
 800217a:	745a      	strb	r2, [r3, #17]
  hpcd->State = HAL_PCD_STATE_READY;
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	2201      	movs	r2, #1
 8002180:	f883 2495 	strb.w	r2, [r3, #1173]	@ 0x495
#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	7b1b      	ldrb	r3, [r3, #12]
 8002188:	2b01      	cmp	r3, #1
 800218a:	d102      	bne.n	8002192 <HAL_PCD_Init+0x218>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800218c:	6878      	ldr	r0, [r7, #4]
 800218e:	f000 f80a 	bl	80021a6 <HAL_PCDEx_ActivateLPM>
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	4618      	mov	r0, r3
 8002198:	f002 fde5 	bl	8004d66 <USB_DevDisconnect>

  return HAL_OK;
 800219c:	2300      	movs	r3, #0
}
 800219e:	4618      	mov	r0, r3
 80021a0:	3710      	adds	r7, #16
 80021a2:	46bd      	mov	sp, r7
 80021a4:	bd80      	pop	{r7, pc}

080021a6 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80021a6:	b480      	push	{r7}
 80021a8:	b085      	sub	sp, #20
 80021aa:	af00      	add	r7, sp, #0
 80021ac:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	681b      	ldr	r3, [r3, #0]
 80021b2:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	2201      	movs	r2, #1
 80021b8:	f8c3 24d8 	str.w	r2, [r3, #1240]	@ 0x4d8
  hpcd->LPM_State = LPM_L0;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	2200      	movs	r2, #0
 80021c0:	f883 24cc 	strb.w	r2, [r3, #1228]	@ 0x4cc
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 80021c4:	68fb      	ldr	r3, [r7, #12]
 80021c6:	699b      	ldr	r3, [r3, #24]
 80021c8:	f043 6200 	orr.w	r2, r3, #134217728	@ 0x8000000
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 80021d0:	68fb      	ldr	r3, [r7, #12]
 80021d2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80021d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021d8:	f043 0303 	orr.w	r3, r3, #3
 80021dc:	68fa      	ldr	r2, [r7, #12]
 80021de:	6553      	str	r3, [r2, #84]	@ 0x54

  return HAL_OK;
 80021e0:	2300      	movs	r3, #0
}
 80021e2:	4618      	mov	r0, r3
 80021e4:	3714      	adds	r7, #20
 80021e6:	46bd      	mov	sp, r7
 80021e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ec:	4770      	bx	lr
	...

080021f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b084      	sub	sp, #16
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2b00      	cmp	r3, #0
 80021fe:	d101      	bne.n	8002204 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002200:	2301      	movs	r3, #1
 8002202:	e0cc      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002204:	4b68      	ldr	r3, [pc, #416]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f003 030f 	and.w	r3, r3, #15
 800220c:	683a      	ldr	r2, [r7, #0]
 800220e:	429a      	cmp	r2, r3
 8002210:	d90c      	bls.n	800222c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002212:	4b65      	ldr	r3, [pc, #404]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002214:	683a      	ldr	r2, [r7, #0]
 8002216:	b2d2      	uxtb	r2, r2
 8002218:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800221a:	4b63      	ldr	r3, [pc, #396]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f003 030f 	and.w	r3, r3, #15
 8002222:	683a      	ldr	r2, [r7, #0]
 8002224:	429a      	cmp	r2, r3
 8002226:	d001      	beq.n	800222c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002228:	2301      	movs	r3, #1
 800222a:	e0b8      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	f003 0302 	and.w	r3, r3, #2
 8002234:	2b00      	cmp	r3, #0
 8002236:	d020      	beq.n	800227a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0304 	and.w	r3, r3, #4
 8002240:	2b00      	cmp	r3, #0
 8002242:	d005      	beq.n	8002250 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002244:	4b59      	ldr	r3, [pc, #356]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002246:	689b      	ldr	r3, [r3, #8]
 8002248:	4a58      	ldr	r2, [pc, #352]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800224a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800224e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f003 0308 	and.w	r3, r3, #8
 8002258:	2b00      	cmp	r3, #0
 800225a:	d005      	beq.n	8002268 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800225c:	4b53      	ldr	r3, [pc, #332]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	4a52      	ldr	r2, [pc, #328]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002262:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002266:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002268:	4b50      	ldr	r3, [pc, #320]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800226a:	689b      	ldr	r3, [r3, #8]
 800226c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	689b      	ldr	r3, [r3, #8]
 8002274:	494d      	ldr	r1, [pc, #308]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002276:	4313      	orrs	r3, r2
 8002278:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0301 	and.w	r3, r3, #1
 8002282:	2b00      	cmp	r3, #0
 8002284:	d044      	beq.n	8002310 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	2b01      	cmp	r3, #1
 800228c:	d107      	bne.n	800229e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800228e:	4b47      	ldr	r3, [pc, #284]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002296:	2b00      	cmp	r3, #0
 8002298:	d119      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800229a:	2301      	movs	r3, #1
 800229c:	e07f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	685b      	ldr	r3, [r3, #4]
 80022a2:	2b02      	cmp	r3, #2
 80022a4:	d003      	beq.n	80022ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022aa:	2b03      	cmp	r3, #3
 80022ac:	d107      	bne.n	80022be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ae:	4b3f      	ldr	r3, [pc, #252]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d109      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ba:	2301      	movs	r3, #1
 80022bc:	e06f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022be:	4b3b      	ldr	r3, [pc, #236]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 0302 	and.w	r3, r3, #2
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d101      	bne.n	80022ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e067      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022ce:	4b37      	ldr	r3, [pc, #220]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	689b      	ldr	r3, [r3, #8]
 80022d2:	f023 0203 	bic.w	r2, r3, #3
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	685b      	ldr	r3, [r3, #4]
 80022da:	4934      	ldr	r1, [pc, #208]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022e0:	f7ff fafe 	bl	80018e0 <HAL_GetTick>
 80022e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022e6:	e00a      	b.n	80022fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022e8:	f7ff fafa 	bl	80018e0 <HAL_GetTick>
 80022ec:	4602      	mov	r2, r0
 80022ee:	68fb      	ldr	r3, [r7, #12]
 80022f0:	1ad3      	subs	r3, r2, r3
 80022f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d901      	bls.n	80022fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80022fa:	2303      	movs	r3, #3
 80022fc:	e04f      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022fe:	4b2b      	ldr	r3, [pc, #172]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	f003 020c 	and.w	r2, r3, #12
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	685b      	ldr	r3, [r3, #4]
 800230a:	009b      	lsls	r3, r3, #2
 800230c:	429a      	cmp	r2, r3
 800230e:	d1eb      	bne.n	80022e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002310:	4b25      	ldr	r3, [pc, #148]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 030f 	and.w	r3, r3, #15
 8002318:	683a      	ldr	r2, [r7, #0]
 800231a:	429a      	cmp	r2, r3
 800231c:	d20c      	bcs.n	8002338 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800231e:	4b22      	ldr	r3, [pc, #136]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002320:	683a      	ldr	r2, [r7, #0]
 8002322:	b2d2      	uxtb	r2, r2
 8002324:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002326:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <HAL_RCC_ClockConfig+0x1b8>)
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	f003 030f 	and.w	r3, r3, #15
 800232e:	683a      	ldr	r2, [r7, #0]
 8002330:	429a      	cmp	r2, r3
 8002332:	d001      	beq.n	8002338 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002334:	2301      	movs	r3, #1
 8002336:	e032      	b.n	800239e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 0304 	and.w	r3, r3, #4
 8002340:	2b00      	cmp	r3, #0
 8002342:	d008      	beq.n	8002356 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002344:	4b19      	ldr	r3, [pc, #100]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002346:	689b      	ldr	r3, [r3, #8]
 8002348:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	4916      	ldr	r1, [pc, #88]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002352:	4313      	orrs	r3, r2
 8002354:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f003 0308 	and.w	r3, r3, #8
 800235e:	2b00      	cmp	r3, #0
 8002360:	d009      	beq.n	8002376 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002362:	4b12      	ldr	r3, [pc, #72]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002364:	689b      	ldr	r3, [r3, #8]
 8002366:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	691b      	ldr	r3, [r3, #16]
 800236e:	00db      	lsls	r3, r3, #3
 8002370:	490e      	ldr	r1, [pc, #56]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 8002372:	4313      	orrs	r3, r2
 8002374:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002376:	f000 fb7f 	bl	8002a78 <HAL_RCC_GetSysClockFreq>
 800237a:	4602      	mov	r2, r0
 800237c:	4b0b      	ldr	r3, [pc, #44]	@ (80023ac <HAL_RCC_ClockConfig+0x1bc>)
 800237e:	689b      	ldr	r3, [r3, #8]
 8002380:	091b      	lsrs	r3, r3, #4
 8002382:	f003 030f 	and.w	r3, r3, #15
 8002386:	490a      	ldr	r1, [pc, #40]	@ (80023b0 <HAL_RCC_ClockConfig+0x1c0>)
 8002388:	5ccb      	ldrb	r3, [r1, r3]
 800238a:	fa22 f303 	lsr.w	r3, r2, r3
 800238e:	4a09      	ldr	r2, [pc, #36]	@ (80023b4 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002392:	4b09      	ldr	r3, [pc, #36]	@ (80023b8 <HAL_RCC_ClockConfig+0x1c8>)
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	4618      	mov	r0, r3
 8002398:	f7ff fa5e 	bl	8001858 <HAL_InitTick>

  return HAL_OK;
 800239c:	2300      	movs	r3, #0
}
 800239e:	4618      	mov	r0, r3
 80023a0:	3710      	adds	r7, #16
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40023c00 	.word	0x40023c00
 80023ac:	40023800 	.word	0x40023800
 80023b0:	080061ac 	.word	0x080061ac
 80023b4:	20000000 	.word	0x20000000
 80023b8:	20000004 	.word	0x20000004

080023bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80023c0:	4b03      	ldr	r3, [pc, #12]	@ (80023d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80023c2:	681b      	ldr	r3, [r3, #0]
}
 80023c4:	4618      	mov	r0, r3
 80023c6:	46bd      	mov	sp, r7
 80023c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023cc:	4770      	bx	lr
 80023ce:	bf00      	nop
 80023d0:	20000000 	.word	0x20000000

080023d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80023d4:	b580      	push	{r7, lr}
 80023d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80023d8:	f7ff fff0 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 80023dc:	4602      	mov	r2, r0
 80023de:	4b05      	ldr	r3, [pc, #20]	@ (80023f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80023e0:	689b      	ldr	r3, [r3, #8]
 80023e2:	0a9b      	lsrs	r3, r3, #10
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	4903      	ldr	r1, [pc, #12]	@ (80023f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80023ea:	5ccb      	ldrb	r3, [r1, r3]
 80023ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80023f0:	4618      	mov	r0, r3
 80023f2:	bd80      	pop	{r7, pc}
 80023f4:	40023800 	.word	0x40023800
 80023f8:	080061bc 	.word	0x080061bc

080023fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80023fc:	b580      	push	{r7, lr}
 80023fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002400:	f7ff ffdc 	bl	80023bc <HAL_RCC_GetHCLKFreq>
 8002404:	4602      	mov	r2, r0
 8002406:	4b05      	ldr	r3, [pc, #20]	@ (800241c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002408:	689b      	ldr	r3, [r3, #8]
 800240a:	0b5b      	lsrs	r3, r3, #13
 800240c:	f003 0307 	and.w	r3, r3, #7
 8002410:	4903      	ldr	r1, [pc, #12]	@ (8002420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002412:	5ccb      	ldrb	r3, [r1, r3]
 8002414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002418:	4618      	mov	r0, r3
 800241a:	bd80      	pop	{r7, pc}
 800241c:	40023800 	.word	0x40023800
 8002420:	080061bc 	.word	0x080061bc

08002424 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002424:	b580      	push	{r7, lr}
 8002426:	b08c      	sub	sp, #48	@ 0x30
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800242c:	2300      	movs	r3, #0
 800242e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002430:	2300      	movs	r3, #0
 8002432:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002438:	2300      	movs	r3, #0
 800243a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800243c:	2300      	movs	r3, #0
 800243e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002444:	2300      	movs	r3, #0
 8002446:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002448:	2300      	movs	r3, #0
 800244a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800244c:	2300      	movs	r3, #0
 800244e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002450:	687b      	ldr	r3, [r7, #4]
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d010      	beq.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800245c:	4b6f      	ldr	r3, [pc, #444]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800245e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002462:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002466:	687b      	ldr	r3, [r7, #4]
 8002468:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800246a:	496c      	ldr	r1, [pc, #432]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800246c:	4313      	orrs	r3, r2
 800246e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002472:	687b      	ldr	r3, [r7, #4]
 8002474:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002476:	2b00      	cmp	r3, #0
 8002478:	d101      	bne.n	800247e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800247a:	2301      	movs	r3, #1
 800247c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	f003 0302 	and.w	r3, r3, #2
 8002486:	2b00      	cmp	r3, #0
 8002488:	d010      	beq.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 800248a:	4b64      	ldr	r3, [pc, #400]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800248c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002490:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002498:	4960      	ldr	r1, [pc, #384]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800249a:	4313      	orrs	r3, r2
 800249c:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d101      	bne.n	80024ac <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80024a8:	2301      	movs	r3, #1
 80024aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	f003 0304 	and.w	r3, r3, #4
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	d017      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80024b8:	4b58      	ldr	r3, [pc, #352]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024ba:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024be:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c6:	4955      	ldr	r1, [pc, #340]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024c8:	4313      	orrs	r3, r2
 80024ca:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024d2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80024d6:	d101      	bne.n	80024dc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80024d8:	2301      	movs	r3, #1
 80024da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	d101      	bne.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 80024e4:	2301      	movs	r3, #1
 80024e6:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f003 0308 	and.w	r3, r3, #8
 80024f0:	2b00      	cmp	r3, #0
 80024f2:	d017      	beq.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80024f4:	4b49      	ldr	r3, [pc, #292]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80024f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80024fa:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002502:	4946      	ldr	r1, [pc, #280]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002504:	4313      	orrs	r3, r2
 8002506:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800250e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002512:	d101      	bne.n	8002518 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002514:	2301      	movs	r3, #1
 8002516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800251c:	2b00      	cmp	r3, #0
 800251e:	d101      	bne.n	8002524 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002520:	2301      	movs	r3, #1
 8002522:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	681b      	ldr	r3, [r3, #0]
 8002528:	f003 0320 	and.w	r3, r3, #32
 800252c:	2b00      	cmp	r3, #0
 800252e:	f000 808a 	beq.w	8002646 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002532:	2300      	movs	r3, #0
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	4b39      	ldr	r3, [pc, #228]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002538:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800253a:	4a38      	ldr	r2, [pc, #224]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800253c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002540:	6413      	str	r3, [r2, #64]	@ 0x40
 8002542:	4b36      	ldr	r3, [pc, #216]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002544:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002546:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800254a:	60bb      	str	r3, [r7, #8]
 800254c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800254e:	4b34      	ldr	r3, [pc, #208]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4a33      	ldr	r2, [pc, #204]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002554:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002558:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800255a:	f7ff f9c1 	bl	80018e0 <HAL_GetTick>
 800255e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002560:	e008      	b.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002562:	f7ff f9bd 	bl	80018e0 <HAL_GetTick>
 8002566:	4602      	mov	r2, r0
 8002568:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800256a:	1ad3      	subs	r3, r2, r3
 800256c:	2b02      	cmp	r3, #2
 800256e:	d901      	bls.n	8002574 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002570:	2303      	movs	r3, #3
 8002572:	e278      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002574:	4b2a      	ldr	r3, [pc, #168]	@ (8002620 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800257c:	2b00      	cmp	r3, #0
 800257e:	d0f0      	beq.n	8002562 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002580:	4b26      	ldr	r3, [pc, #152]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002582:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002584:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002588:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800258a:	6a3b      	ldr	r3, [r7, #32]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d02f      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002594:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002598:	6a3a      	ldr	r2, [r7, #32]
 800259a:	429a      	cmp	r2, r3
 800259c:	d028      	beq.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800259e:	4b1f      	ldr	r3, [pc, #124]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025a2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025a6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80025a8:	4b1e      	ldr	r3, [pc, #120]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025aa:	2201      	movs	r2, #1
 80025ac:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80025ae:	4b1d      	ldr	r3, [pc, #116]	@ (8002624 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80025b4:	4a19      	ldr	r2, [pc, #100]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025b6:	6a3b      	ldr	r3, [r7, #32]
 80025b8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80025ba:	4b18      	ldr	r3, [pc, #96]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025bc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d114      	bne.n	80025f0 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80025c6:	f7ff f98b 	bl	80018e0 <HAL_GetTick>
 80025ca:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025cc:	e00a      	b.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80025ce:	f7ff f987 	bl	80018e0 <HAL_GetTick>
 80025d2:	4602      	mov	r2, r0
 80025d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d6:	1ad3      	subs	r3, r2, r3
 80025d8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80025dc:	4293      	cmp	r3, r2
 80025de:	d901      	bls.n	80025e4 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 80025e0:	2303      	movs	r3, #3
 80025e2:	e240      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80025e4:	4b0d      	ldr	r3, [pc, #52]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80025e6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e8:	f003 0302 	and.w	r3, r3, #2
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	d0ee      	beq.n	80025ce <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80025f0:	687b      	ldr	r3, [r7, #4]
 80025f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80025f4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80025f8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80025fc:	d114      	bne.n	8002628 <HAL_RCCEx_PeriphCLKConfig+0x204>
 80025fe:	4b07      	ldr	r3, [pc, #28]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002600:	689b      	ldr	r3, [r3, #8]
 8002602:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800260a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800260e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002612:	4902      	ldr	r1, [pc, #8]	@ (800261c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002614:	4313      	orrs	r3, r2
 8002616:	608b      	str	r3, [r1, #8]
 8002618:	e00c      	b.n	8002634 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800261a:	bf00      	nop
 800261c:	40023800 	.word	0x40023800
 8002620:	40007000 	.word	0x40007000
 8002624:	42470e40 	.word	0x42470e40
 8002628:	4b4a      	ldr	r3, [pc, #296]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800262a:	689b      	ldr	r3, [r3, #8]
 800262c:	4a49      	ldr	r2, [pc, #292]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800262e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002632:	6093      	str	r3, [r2, #8]
 8002634:	4b47      	ldr	r3, [pc, #284]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002636:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800263c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002640:	4944      	ldr	r1, [pc, #272]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002642:	4313      	orrs	r3, r2
 8002644:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 0310 	and.w	r3, r3, #16
 800264e:	2b00      	cmp	r3, #0
 8002650:	d004      	beq.n	800265c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002658:	4b3f      	ldr	r3, [pc, #252]	@ (8002758 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800265a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002664:	2b00      	cmp	r3, #0
 8002666:	d00a      	beq.n	800267e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002668:	4b3a      	ldr	r3, [pc, #232]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800266a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800266e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002676:	4937      	ldr	r1, [pc, #220]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002678:	4313      	orrs	r3, r2
 800267a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002686:	2b00      	cmp	r3, #0
 8002688:	d00a      	beq.n	80026a0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 800268a:	4b32      	ldr	r3, [pc, #200]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800268c:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002690:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002698:	492e      	ldr	r1, [pc, #184]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800269a:	4313      	orrs	r3, r2
 800269c:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d011      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80026ac:	4b29      	ldr	r3, [pc, #164]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026ae:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026b2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026ba:	4926      	ldr	r1, [pc, #152]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026bc:	4313      	orrs	r3, r2
 80026be:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80026c6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80026ca:	d101      	bne.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80026cc:	2301      	movs	r3, #1
 80026ce:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d00a      	beq.n	80026f2 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80026dc:	4b1d      	ldr	r3, [pc, #116]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026de:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80026e2:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80026ea:	491a      	ldr	r1, [pc, #104]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80026ec:	4313      	orrs	r3, r2
 80026ee:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d011      	beq.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 80026fe:	4b15      	ldr	r3, [pc, #84]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002700:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002704:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800270c:	4911      	ldr	r1, [pc, #68]	@ (8002754 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800270e:	4313      	orrs	r3, r2
 8002710:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002718:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800271c:	d101      	bne.n	8002722 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800271e:	2301      	movs	r3, #1
 8002720:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002722:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002724:	2b01      	cmp	r3, #1
 8002726:	d005      	beq.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002730:	f040 80ff 	bne.w	8002932 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002734:	4b09      	ldr	r3, [pc, #36]	@ (800275c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002736:	2200      	movs	r2, #0
 8002738:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800273a:	f7ff f8d1 	bl	80018e0 <HAL_GetTick>
 800273e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002740:	e00e      	b.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002742:	f7ff f8cd 	bl	80018e0 <HAL_GetTick>
 8002746:	4602      	mov	r2, r0
 8002748:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800274a:	1ad3      	subs	r3, r2, r3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d907      	bls.n	8002760 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002750:	2303      	movs	r3, #3
 8002752:	e188      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002754:	40023800 	.word	0x40023800
 8002758:	424711e0 	.word	0x424711e0
 800275c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002760:	4b7e      	ldr	r3, [pc, #504]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002768:	2b00      	cmp	r3, #0
 800276a:	d1ea      	bne.n	8002742 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	f003 0301 	and.w	r3, r3, #1
 8002774:	2b00      	cmp	r3, #0
 8002776:	d003      	beq.n	8002780 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800277c:	2b00      	cmp	r3, #0
 800277e:	d009      	beq.n	8002794 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002788:	2b00      	cmp	r3, #0
 800278a:	d028      	beq.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002790:	2b00      	cmp	r3, #0
 8002792:	d124      	bne.n	80027de <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002794:	4b71      	ldr	r3, [pc, #452]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002796:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800279a:	0c1b      	lsrs	r3, r3, #16
 800279c:	f003 0303 	and.w	r3, r3, #3
 80027a0:	3301      	adds	r3, #1
 80027a2:	005b      	lsls	r3, r3, #1
 80027a4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80027a6:	4b6d      	ldr	r3, [pc, #436]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80027ac:	0e1b      	lsrs	r3, r3, #24
 80027ae:	f003 030f 	and.w	r3, r3, #15
 80027b2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	685a      	ldr	r2, [r3, #4]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	019b      	lsls	r3, r3, #6
 80027be:	431a      	orrs	r2, r3
 80027c0:	69fb      	ldr	r3, [r7, #28]
 80027c2:	085b      	lsrs	r3, r3, #1
 80027c4:	3b01      	subs	r3, #1
 80027c6:	041b      	lsls	r3, r3, #16
 80027c8:	431a      	orrs	r2, r3
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	061b      	lsls	r3, r3, #24
 80027ce:	431a      	orrs	r2, r3
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	695b      	ldr	r3, [r3, #20]
 80027d4:	071b      	lsls	r3, r3, #28
 80027d6:	4961      	ldr	r1, [pc, #388]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80027d8:	4313      	orrs	r3, r2
 80027da:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f003 0304 	and.w	r3, r3, #4
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d004      	beq.n	80027f4 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027ee:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80027f2:	d00a      	beq.n	800280a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d035      	beq.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002804:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002808:	d130      	bne.n	800286c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800280a:	4b54      	ldr	r3, [pc, #336]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800280c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002810:	0c1b      	lsrs	r3, r3, #16
 8002812:	f003 0303 	and.w	r3, r3, #3
 8002816:	3301      	adds	r3, #1
 8002818:	005b      	lsls	r3, r3, #1
 800281a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800281c:	4b4f      	ldr	r3, [pc, #316]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800281e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002822:	0f1b      	lsrs	r3, r3, #28
 8002824:	f003 0307 	and.w	r3, r3, #7
 8002828:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	685a      	ldr	r2, [r3, #4]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	019b      	lsls	r3, r3, #6
 8002834:	431a      	orrs	r2, r3
 8002836:	69fb      	ldr	r3, [r7, #28]
 8002838:	085b      	lsrs	r3, r3, #1
 800283a:	3b01      	subs	r3, #1
 800283c:	041b      	lsls	r3, r3, #16
 800283e:	431a      	orrs	r2, r3
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	691b      	ldr	r3, [r3, #16]
 8002844:	061b      	lsls	r3, r3, #24
 8002846:	431a      	orrs	r2, r3
 8002848:	697b      	ldr	r3, [r7, #20]
 800284a:	071b      	lsls	r3, r3, #28
 800284c:	4943      	ldr	r1, [pc, #268]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800284e:	4313      	orrs	r3, r2
 8002850:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002854:	4b41      	ldr	r3, [pc, #260]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002856:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800285a:	f023 021f 	bic.w	r2, r3, #31
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002862:	3b01      	subs	r3, #1
 8002864:	493d      	ldr	r1, [pc, #244]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002866:	4313      	orrs	r3, r2
 8002868:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002874:	2b00      	cmp	r3, #0
 8002876:	d029      	beq.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800287c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002880:	d124      	bne.n	80028cc <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 8002882:	4b36      	ldr	r3, [pc, #216]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002884:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002888:	0c1b      	lsrs	r3, r3, #16
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	3301      	adds	r3, #1
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002894:	4b31      	ldr	r3, [pc, #196]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002896:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 800289a:	0f1b      	lsrs	r3, r3, #28
 800289c:	f003 0307 	and.w	r3, r3, #7
 80028a0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	689b      	ldr	r3, [r3, #8]
 80028aa:	019b      	lsls	r3, r3, #6
 80028ac:	431a      	orrs	r2, r3
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	085b      	lsrs	r3, r3, #1
 80028b4:	3b01      	subs	r3, #1
 80028b6:	041b      	lsls	r3, r3, #16
 80028b8:	431a      	orrs	r2, r3
 80028ba:	69bb      	ldr	r3, [r7, #24]
 80028bc:	061b      	lsls	r3, r3, #24
 80028be:	431a      	orrs	r2, r3
 80028c0:	697b      	ldr	r3, [r7, #20]
 80028c2:	071b      	lsls	r3, r3, #28
 80028c4:	4925      	ldr	r1, [pc, #148]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80028c6:	4313      	orrs	r3, r2
 80028c8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80028d4:	2b00      	cmp	r3, #0
 80028d6:	d016      	beq.n	8002906 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	685a      	ldr	r2, [r3, #4]
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	689b      	ldr	r3, [r3, #8]
 80028e0:	019b      	lsls	r3, r3, #6
 80028e2:	431a      	orrs	r2, r3
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	085b      	lsrs	r3, r3, #1
 80028ea:	3b01      	subs	r3, #1
 80028ec:	041b      	lsls	r3, r3, #16
 80028ee:	431a      	orrs	r2, r3
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	691b      	ldr	r3, [r3, #16]
 80028f4:	061b      	lsls	r3, r3, #24
 80028f6:	431a      	orrs	r2, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	695b      	ldr	r3, [r3, #20]
 80028fc:	071b      	lsls	r3, r3, #28
 80028fe:	4917      	ldr	r1, [pc, #92]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002900:	4313      	orrs	r3, r2
 8002902:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002906:	4b16      	ldr	r3, [pc, #88]	@ (8002960 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002908:	2201      	movs	r2, #1
 800290a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800290c:	f7fe ffe8 	bl	80018e0 <HAL_GetTick>
 8002910:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002912:	e008      	b.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002914:	f7fe ffe4 	bl	80018e0 <HAL_GetTick>
 8002918:	4602      	mov	r2, r0
 800291a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800291c:	1ad3      	subs	r3, r2, r3
 800291e:	2b02      	cmp	r3, #2
 8002920:	d901      	bls.n	8002926 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002922:	2303      	movs	r3, #3
 8002924:	e09f      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002926:	4b0d      	ldr	r3, [pc, #52]	@ (800295c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d0f0      	beq.n	8002914 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002932:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002934:	2b01      	cmp	r3, #1
 8002936:	f040 8095 	bne.w	8002a64 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800293a:	4b0a      	ldr	r3, [pc, #40]	@ (8002964 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002940:	f7fe ffce 	bl	80018e0 <HAL_GetTick>
 8002944:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002946:	e00f      	b.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002948:	f7fe ffca 	bl	80018e0 <HAL_GetTick>
 800294c:	4602      	mov	r2, r0
 800294e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002950:	1ad3      	subs	r3, r2, r3
 8002952:	2b02      	cmp	r3, #2
 8002954:	d908      	bls.n	8002968 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002956:	2303      	movs	r3, #3
 8002958:	e085      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800295a:	bf00      	nop
 800295c:	40023800 	.word	0x40023800
 8002960:	42470068 	.word	0x42470068
 8002964:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002968:	4b41      	ldr	r3, [pc, #260]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002970:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002974:	d0e8      	beq.n	8002948 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0304 	and.w	r3, r3, #4
 800297e:	2b00      	cmp	r3, #0
 8002980:	d003      	beq.n	800298a <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002986:	2b00      	cmp	r3, #0
 8002988:	d009      	beq.n	800299e <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 8002992:	2b00      	cmp	r3, #0
 8002994:	d02b      	beq.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800299a:	2b00      	cmp	r3, #0
 800299c:	d127      	bne.n	80029ee <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 800299e:	4b34      	ldr	r3, [pc, #208]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80029a4:	0c1b      	lsrs	r3, r3, #16
 80029a6:	f003 0303 	and.w	r3, r3, #3
 80029aa:	3301      	adds	r3, #1
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	699a      	ldr	r2, [r3, #24]
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	69db      	ldr	r3, [r3, #28]
 80029b8:	019b      	lsls	r3, r3, #6
 80029ba:	431a      	orrs	r2, r3
 80029bc:	693b      	ldr	r3, [r7, #16]
 80029be:	085b      	lsrs	r3, r3, #1
 80029c0:	3b01      	subs	r3, #1
 80029c2:	041b      	lsls	r3, r3, #16
 80029c4:	431a      	orrs	r2, r3
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029ca:	061b      	lsls	r3, r3, #24
 80029cc:	4928      	ldr	r1, [pc, #160]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029ce:	4313      	orrs	r3, r2
 80029d0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80029d4:	4b26      	ldr	r3, [pc, #152]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029d6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80029da:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80029e2:	3b01      	subs	r3, #1
 80029e4:	021b      	lsls	r3, r3, #8
 80029e6:	4922      	ldr	r1, [pc, #136]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80029e8:	4313      	orrs	r3, r2
 80029ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d01d      	beq.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029fe:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002a02:	d118      	bne.n	8002a36 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002a04:	4b1a      	ldr	r3, [pc, #104]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002a0a:	0e1b      	lsrs	r3, r3, #24
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	699a      	ldr	r2, [r3, #24]
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	019b      	lsls	r3, r3, #6
 8002a1c:	431a      	orrs	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	6a1b      	ldr	r3, [r3, #32]
 8002a22:	085b      	lsrs	r3, r3, #1
 8002a24:	3b01      	subs	r3, #1
 8002a26:	041b      	lsls	r3, r3, #16
 8002a28:	431a      	orrs	r2, r3
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	061b      	lsls	r3, r3, #24
 8002a2e:	4910      	ldr	r1, [pc, #64]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002a36:	4b0f      	ldr	r3, [pc, #60]	@ (8002a74 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002a38:	2201      	movs	r2, #1
 8002a3a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002a3c:	f7fe ff50 	bl	80018e0 <HAL_GetTick>
 8002a40:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a42:	e008      	b.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002a44:	f7fe ff4c 	bl	80018e0 <HAL_GetTick>
 8002a48:	4602      	mov	r2, r0
 8002a4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a4c:	1ad3      	subs	r3, r2, r3
 8002a4e:	2b02      	cmp	r3, #2
 8002a50:	d901      	bls.n	8002a56 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002a52:	2303      	movs	r3, #3
 8002a54:	e007      	b.n	8002a66 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002a56:	4b06      	ldr	r3, [pc, #24]	@ (8002a70 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002a58:	681b      	ldr	r3, [r3, #0]
 8002a5a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002a5e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002a62:	d1ef      	bne.n	8002a44 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002a64:	2300      	movs	r3, #0
}
 8002a66:	4618      	mov	r0, r3
 8002a68:	3730      	adds	r7, #48	@ 0x30
 8002a6a:	46bd      	mov	sp, r7
 8002a6c:	bd80      	pop	{r7, pc}
 8002a6e:	bf00      	nop
 8002a70:	40023800 	.word	0x40023800
 8002a74:	42470070 	.word	0x42470070

08002a78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002a78:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002a7c:	b0ae      	sub	sp, #184	@ 0xb8
 8002a7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002a80:	2300      	movs	r3, #0
 8002a82:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 8002a86:	2300      	movs	r3, #0
 8002a88:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 8002a8c:	2300      	movs	r3, #0
 8002a8e:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 8002a92:	2300      	movs	r3, #0
 8002a94:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002a9e:	4bcb      	ldr	r3, [pc, #812]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002aa0:	689b      	ldr	r3, [r3, #8]
 8002aa2:	f003 030c 	and.w	r3, r3, #12
 8002aa6:	2b0c      	cmp	r3, #12
 8002aa8:	f200 8206 	bhi.w	8002eb8 <HAL_RCC_GetSysClockFreq+0x440>
 8002aac:	a201      	add	r2, pc, #4	@ (adr r2, 8002ab4 <HAL_RCC_GetSysClockFreq+0x3c>)
 8002aae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002ab2:	bf00      	nop
 8002ab4:	08002ae9 	.word	0x08002ae9
 8002ab8:	08002eb9 	.word	0x08002eb9
 8002abc:	08002eb9 	.word	0x08002eb9
 8002ac0:	08002eb9 	.word	0x08002eb9
 8002ac4:	08002af1 	.word	0x08002af1
 8002ac8:	08002eb9 	.word	0x08002eb9
 8002acc:	08002eb9 	.word	0x08002eb9
 8002ad0:	08002eb9 	.word	0x08002eb9
 8002ad4:	08002af9 	.word	0x08002af9
 8002ad8:	08002eb9 	.word	0x08002eb9
 8002adc:	08002eb9 	.word	0x08002eb9
 8002ae0:	08002eb9 	.word	0x08002eb9
 8002ae4:	08002ce9 	.word	0x08002ce9
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae8:	4bb9      	ldr	r3, [pc, #740]	@ (8002dd0 <HAL_RCC_GetSysClockFreq+0x358>)
 8002aea:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002aee:	e1e7      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002af0:	4bb8      	ldr	r3, [pc, #736]	@ (8002dd4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002af2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002af6:	e1e3      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af8:	4bb4      	ldr	r3, [pc, #720]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002b00:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002b04:	4bb1      	ldr	r3, [pc, #708]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d071      	beq.n	8002bf4 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b10:	4bae      	ldr	r3, [pc, #696]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002b12:	685b      	ldr	r3, [r3, #4]
 8002b14:	099b      	lsrs	r3, r3, #6
 8002b16:	2200      	movs	r2, #0
 8002b18:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b1c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002b20:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b24:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b28:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b2c:	2300      	movs	r3, #0
 8002b2e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002b32:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b36:	4622      	mov	r2, r4
 8002b38:	462b      	mov	r3, r5
 8002b3a:	f04f 0000 	mov.w	r0, #0
 8002b3e:	f04f 0100 	mov.w	r1, #0
 8002b42:	0159      	lsls	r1, r3, #5
 8002b44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b48:	0150      	lsls	r0, r2, #5
 8002b4a:	4602      	mov	r2, r0
 8002b4c:	460b      	mov	r3, r1
 8002b4e:	4621      	mov	r1, r4
 8002b50:	1a51      	subs	r1, r2, r1
 8002b52:	6439      	str	r1, [r7, #64]	@ 0x40
 8002b54:	4629      	mov	r1, r5
 8002b56:	eb63 0301 	sbc.w	r3, r3, r1
 8002b5a:	647b      	str	r3, [r7, #68]	@ 0x44
 8002b5c:	f04f 0200 	mov.w	r2, #0
 8002b60:	f04f 0300 	mov.w	r3, #0
 8002b64:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002b68:	4649      	mov	r1, r9
 8002b6a:	018b      	lsls	r3, r1, #6
 8002b6c:	4641      	mov	r1, r8
 8002b6e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b72:	4641      	mov	r1, r8
 8002b74:	018a      	lsls	r2, r1, #6
 8002b76:	4641      	mov	r1, r8
 8002b78:	1a51      	subs	r1, r2, r1
 8002b7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002b7c:	4649      	mov	r1, r9
 8002b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8002b82:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002b84:	f04f 0200 	mov.w	r2, #0
 8002b88:	f04f 0300 	mov.w	r3, #0
 8002b8c:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 8002b90:	4649      	mov	r1, r9
 8002b92:	00cb      	lsls	r3, r1, #3
 8002b94:	4641      	mov	r1, r8
 8002b96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002b9a:	4641      	mov	r1, r8
 8002b9c:	00ca      	lsls	r2, r1, #3
 8002b9e:	4610      	mov	r0, r2
 8002ba0:	4619      	mov	r1, r3
 8002ba2:	4603      	mov	r3, r0
 8002ba4:	4622      	mov	r2, r4
 8002ba6:	189b      	adds	r3, r3, r2
 8002ba8:	633b      	str	r3, [r7, #48]	@ 0x30
 8002baa:	462b      	mov	r3, r5
 8002bac:	460a      	mov	r2, r1
 8002bae:	eb42 0303 	adc.w	r3, r2, r3
 8002bb2:	637b      	str	r3, [r7, #52]	@ 0x34
 8002bb4:	f04f 0200 	mov.w	r2, #0
 8002bb8:	f04f 0300 	mov.w	r3, #0
 8002bbc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002bc0:	4629      	mov	r1, r5
 8002bc2:	024b      	lsls	r3, r1, #9
 8002bc4:	4621      	mov	r1, r4
 8002bc6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bca:	4621      	mov	r1, r4
 8002bcc:	024a      	lsls	r2, r1, #9
 8002bce:	4610      	mov	r0, r2
 8002bd0:	4619      	mov	r1, r3
 8002bd2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002bd6:	2200      	movs	r2, #0
 8002bd8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bdc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002be0:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002be4:	f7fd fb64 	bl	80002b0 <__aeabi_uldivmod>
 8002be8:	4602      	mov	r2, r0
 8002bea:	460b      	mov	r3, r1
 8002bec:	4613      	mov	r3, r2
 8002bee:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002bf2:	e067      	b.n	8002cc4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bf4:	4b75      	ldr	r3, [pc, #468]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002bf6:	685b      	ldr	r3, [r3, #4]
 8002bf8:	099b      	lsrs	r3, r3, #6
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c00:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002c04:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002c08:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002c0c:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c0e:	2300      	movs	r3, #0
 8002c10:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002c12:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002c16:	4622      	mov	r2, r4
 8002c18:	462b      	mov	r3, r5
 8002c1a:	f04f 0000 	mov.w	r0, #0
 8002c1e:	f04f 0100 	mov.w	r1, #0
 8002c22:	0159      	lsls	r1, r3, #5
 8002c24:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002c28:	0150      	lsls	r0, r2, #5
 8002c2a:	4602      	mov	r2, r0
 8002c2c:	460b      	mov	r3, r1
 8002c2e:	4621      	mov	r1, r4
 8002c30:	1a51      	subs	r1, r2, r1
 8002c32:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002c34:	4629      	mov	r1, r5
 8002c36:	eb63 0301 	sbc.w	r3, r3, r1
 8002c3a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002c3c:	f04f 0200 	mov.w	r2, #0
 8002c40:	f04f 0300 	mov.w	r3, #0
 8002c44:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002c48:	4649      	mov	r1, r9
 8002c4a:	018b      	lsls	r3, r1, #6
 8002c4c:	4641      	mov	r1, r8
 8002c4e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002c52:	4641      	mov	r1, r8
 8002c54:	018a      	lsls	r2, r1, #6
 8002c56:	4641      	mov	r1, r8
 8002c58:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c5c:	4649      	mov	r1, r9
 8002c5e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	f04f 0300 	mov.w	r3, #0
 8002c6a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8002c6e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002c72:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002c76:	4692      	mov	sl, r2
 8002c78:	469b      	mov	fp, r3
 8002c7a:	4623      	mov	r3, r4
 8002c7c:	eb1a 0303 	adds.w	r3, sl, r3
 8002c80:	623b      	str	r3, [r7, #32]
 8002c82:	462b      	mov	r3, r5
 8002c84:	eb4b 0303 	adc.w	r3, fp, r3
 8002c88:	627b      	str	r3, [r7, #36]	@ 0x24
 8002c8a:	f04f 0200 	mov.w	r2, #0
 8002c8e:	f04f 0300 	mov.w	r3, #0
 8002c92:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 8002c96:	4629      	mov	r1, r5
 8002c98:	028b      	lsls	r3, r1, #10
 8002c9a:	4621      	mov	r1, r4
 8002c9c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ca0:	4621      	mov	r1, r4
 8002ca2:	028a      	lsls	r2, r1, #10
 8002ca4:	4610      	mov	r0, r2
 8002ca6:	4619      	mov	r1, r3
 8002ca8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002cac:	2200      	movs	r2, #0
 8002cae:	673b      	str	r3, [r7, #112]	@ 0x70
 8002cb0:	677a      	str	r2, [r7, #116]	@ 0x74
 8002cb2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 8002cb6:	f7fd fafb 	bl	80002b0 <__aeabi_uldivmod>
 8002cba:	4602      	mov	r2, r0
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	4613      	mov	r3, r2
 8002cc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002cc4:	4b41      	ldr	r3, [pc, #260]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cc6:	685b      	ldr	r3, [r3, #4]
 8002cc8:	0c1b      	lsrs	r3, r3, #16
 8002cca:	f003 0303 	and.w	r3, r3, #3
 8002cce:	3301      	adds	r3, #1
 8002cd0:	005b      	lsls	r3, r3, #1
 8002cd2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 8002cd6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002cda:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8002cde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ce2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ce6:	e0eb      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ce8:	4b38      	ldr	r3, [pc, #224]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cea:	685b      	ldr	r3, [r3, #4]
 8002cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002cf0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002cf4:	4b35      	ldr	r3, [pc, #212]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002cf6:	685b      	ldr	r3, [r3, #4]
 8002cf8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d06b      	beq.n	8002dd8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002d00:	4b32      	ldr	r3, [pc, #200]	@ (8002dcc <HAL_RCC_GetSysClockFreq+0x354>)
 8002d02:	685b      	ldr	r3, [r3, #4]
 8002d04:	099b      	lsrs	r3, r3, #6
 8002d06:	2200      	movs	r2, #0
 8002d08:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002d0a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002d0c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8002d0e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002d12:	663b      	str	r3, [r7, #96]	@ 0x60
 8002d14:	2300      	movs	r3, #0
 8002d16:	667b      	str	r3, [r7, #100]	@ 0x64
 8002d18:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 8002d1c:	4622      	mov	r2, r4
 8002d1e:	462b      	mov	r3, r5
 8002d20:	f04f 0000 	mov.w	r0, #0
 8002d24:	f04f 0100 	mov.w	r1, #0
 8002d28:	0159      	lsls	r1, r3, #5
 8002d2a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002d2e:	0150      	lsls	r0, r2, #5
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4621      	mov	r1, r4
 8002d36:	1a51      	subs	r1, r2, r1
 8002d38:	61b9      	str	r1, [r7, #24]
 8002d3a:	4629      	mov	r1, r5
 8002d3c:	eb63 0301 	sbc.w	r3, r3, r1
 8002d40:	61fb      	str	r3, [r7, #28]
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	f04f 0300 	mov.w	r3, #0
 8002d4a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 8002d4e:	4659      	mov	r1, fp
 8002d50:	018b      	lsls	r3, r1, #6
 8002d52:	4651      	mov	r1, sl
 8002d54:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002d58:	4651      	mov	r1, sl
 8002d5a:	018a      	lsls	r2, r1, #6
 8002d5c:	4651      	mov	r1, sl
 8002d5e:	ebb2 0801 	subs.w	r8, r2, r1
 8002d62:	4659      	mov	r1, fp
 8002d64:	eb63 0901 	sbc.w	r9, r3, r1
 8002d68:	f04f 0200 	mov.w	r2, #0
 8002d6c:	f04f 0300 	mov.w	r3, #0
 8002d70:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002d74:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002d78:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002d7c:	4690      	mov	r8, r2
 8002d7e:	4699      	mov	r9, r3
 8002d80:	4623      	mov	r3, r4
 8002d82:	eb18 0303 	adds.w	r3, r8, r3
 8002d86:	613b      	str	r3, [r7, #16]
 8002d88:	462b      	mov	r3, r5
 8002d8a:	eb49 0303 	adc.w	r3, r9, r3
 8002d8e:	617b      	str	r3, [r7, #20]
 8002d90:	f04f 0200 	mov.w	r2, #0
 8002d94:	f04f 0300 	mov.w	r3, #0
 8002d98:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 8002d9c:	4629      	mov	r1, r5
 8002d9e:	024b      	lsls	r3, r1, #9
 8002da0:	4621      	mov	r1, r4
 8002da2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002da6:	4621      	mov	r1, r4
 8002da8:	024a      	lsls	r2, r1, #9
 8002daa:	4610      	mov	r0, r2
 8002dac:	4619      	mov	r1, r3
 8002dae:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002db2:	2200      	movs	r2, #0
 8002db4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8002db6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 8002db8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8002dbc:	f7fd fa78 	bl	80002b0 <__aeabi_uldivmod>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	4613      	mov	r3, r2
 8002dc6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002dca:	e065      	b.n	8002e98 <HAL_RCC_GetSysClockFreq+0x420>
 8002dcc:	40023800 	.word	0x40023800
 8002dd0:	00f42400 	.word	0x00f42400
 8002dd4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002dd8:	4b3d      	ldr	r3, [pc, #244]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	099b      	lsrs	r3, r3, #6
 8002dde:	2200      	movs	r2, #0
 8002de0:	4618      	mov	r0, r3
 8002de2:	4611      	mov	r1, r2
 8002de4:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002de8:	653b      	str	r3, [r7, #80]	@ 0x50
 8002dea:	2300      	movs	r3, #0
 8002dec:	657b      	str	r3, [r7, #84]	@ 0x54
 8002dee:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002df2:	4642      	mov	r2, r8
 8002df4:	464b      	mov	r3, r9
 8002df6:	f04f 0000 	mov.w	r0, #0
 8002dfa:	f04f 0100 	mov.w	r1, #0
 8002dfe:	0159      	lsls	r1, r3, #5
 8002e00:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002e04:	0150      	lsls	r0, r2, #5
 8002e06:	4602      	mov	r2, r0
 8002e08:	460b      	mov	r3, r1
 8002e0a:	4641      	mov	r1, r8
 8002e0c:	1a51      	subs	r1, r2, r1
 8002e0e:	60b9      	str	r1, [r7, #8]
 8002e10:	4649      	mov	r1, r9
 8002e12:	eb63 0301 	sbc.w	r3, r3, r1
 8002e16:	60fb      	str	r3, [r7, #12]
 8002e18:	f04f 0200 	mov.w	r2, #0
 8002e1c:	f04f 0300 	mov.w	r3, #0
 8002e20:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002e24:	4659      	mov	r1, fp
 8002e26:	018b      	lsls	r3, r1, #6
 8002e28:	4651      	mov	r1, sl
 8002e2a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002e2e:	4651      	mov	r1, sl
 8002e30:	018a      	lsls	r2, r1, #6
 8002e32:	4651      	mov	r1, sl
 8002e34:	1a54      	subs	r4, r2, r1
 8002e36:	4659      	mov	r1, fp
 8002e38:	eb63 0501 	sbc.w	r5, r3, r1
 8002e3c:	f04f 0200 	mov.w	r2, #0
 8002e40:	f04f 0300 	mov.w	r3, #0
 8002e44:	00eb      	lsls	r3, r5, #3
 8002e46:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002e4a:	00e2      	lsls	r2, r4, #3
 8002e4c:	4614      	mov	r4, r2
 8002e4e:	461d      	mov	r5, r3
 8002e50:	4643      	mov	r3, r8
 8002e52:	18e3      	adds	r3, r4, r3
 8002e54:	603b      	str	r3, [r7, #0]
 8002e56:	464b      	mov	r3, r9
 8002e58:	eb45 0303 	adc.w	r3, r5, r3
 8002e5c:	607b      	str	r3, [r7, #4]
 8002e5e:	f04f 0200 	mov.w	r2, #0
 8002e62:	f04f 0300 	mov.w	r3, #0
 8002e66:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002e6a:	4629      	mov	r1, r5
 8002e6c:	028b      	lsls	r3, r1, #10
 8002e6e:	4621      	mov	r1, r4
 8002e70:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002e74:	4621      	mov	r1, r4
 8002e76:	028a      	lsls	r2, r1, #10
 8002e78:	4610      	mov	r0, r2
 8002e7a:	4619      	mov	r1, r3
 8002e7c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002e80:	2200      	movs	r2, #0
 8002e82:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002e84:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002e86:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002e8a:	f7fd fa11 	bl	80002b0 <__aeabi_uldivmod>
 8002e8e:	4602      	mov	r2, r0
 8002e90:	460b      	mov	r3, r1
 8002e92:	4613      	mov	r3, r2
 8002e94:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002e98:	4b0d      	ldr	r3, [pc, #52]	@ (8002ed0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	0f1b      	lsrs	r3, r3, #28
 8002e9e:	f003 0307 	and.w	r3, r3, #7
 8002ea2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002ea6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002eaa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002eae:	fbb2 f3f3 	udiv	r3, r2, r3
 8002eb2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002eb6:	e003      	b.n	8002ec0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	@ (8002ed4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002eba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ebe:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ec0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	37b8      	adds	r7, #184	@ 0xb8
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002ece:	bf00      	nop
 8002ed0:	40023800 	.word	0x40023800
 8002ed4:	00f42400 	.word	0x00f42400

08002ed8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ed8:	b580      	push	{r7, lr}
 8002eda:	b086      	sub	sp, #24
 8002edc:	af00      	add	r7, sp, #0
 8002ede:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d101      	bne.n	8002eea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002ee6:	2301      	movs	r3, #1
 8002ee8:	e28d      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f003 0301 	and.w	r3, r3, #1
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	f000 8083 	beq.w	8002ffe <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002ef8:	4b94      	ldr	r3, [pc, #592]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002efa:	689b      	ldr	r3, [r3, #8]
 8002efc:	f003 030c 	and.w	r3, r3, #12
 8002f00:	2b04      	cmp	r3, #4
 8002f02:	d019      	beq.n	8002f38 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f04:	4b91      	ldr	r3, [pc, #580]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f06:	689b      	ldr	r3, [r3, #8]
 8002f08:	f003 030c 	and.w	r3, r3, #12
        || \
 8002f0c:	2b08      	cmp	r3, #8
 8002f0e:	d106      	bne.n	8002f1e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f10:	4b8e      	ldr	r3, [pc, #568]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f12:	685b      	ldr	r3, [r3, #4]
 8002f14:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f18:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f1c:	d00c      	beq.n	8002f38 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f1e:	4b8b      	ldr	r3, [pc, #556]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f20:	689b      	ldr	r3, [r3, #8]
 8002f22:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002f26:	2b0c      	cmp	r3, #12
 8002f28:	d112      	bne.n	8002f50 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f2a:	4b88      	ldr	r3, [pc, #544]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f2c:	685b      	ldr	r3, [r3, #4]
 8002f2e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f36:	d10b      	bne.n	8002f50 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f38:	4b84      	ldr	r3, [pc, #528]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f40:	2b00      	cmp	r3, #0
 8002f42:	d05b      	beq.n	8002ffc <HAL_RCC_OscConfig+0x124>
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	685b      	ldr	r3, [r3, #4]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d157      	bne.n	8002ffc <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e25a      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	685b      	ldr	r3, [r3, #4]
 8002f54:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f58:	d106      	bne.n	8002f68 <HAL_RCC_OscConfig+0x90>
 8002f5a:	4b7c      	ldr	r3, [pc, #496]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	4a7b      	ldr	r2, [pc, #492]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f60:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f64:	6013      	str	r3, [r2, #0]
 8002f66:	e01d      	b.n	8002fa4 <HAL_RCC_OscConfig+0xcc>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f70:	d10c      	bne.n	8002f8c <HAL_RCC_OscConfig+0xb4>
 8002f72:	4b76      	ldr	r3, [pc, #472]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	4a75      	ldr	r2, [pc, #468]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f78:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f7c:	6013      	str	r3, [r2, #0]
 8002f7e:	4b73      	ldr	r3, [pc, #460]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a72      	ldr	r2, [pc, #456]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e00b      	b.n	8002fa4 <HAL_RCC_OscConfig+0xcc>
 8002f8c:	4b6f      	ldr	r3, [pc, #444]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	4a6e      	ldr	r2, [pc, #440]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f92:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f96:	6013      	str	r3, [r2, #0]
 8002f98:	4b6c      	ldr	r3, [pc, #432]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	4a6b      	ldr	r2, [pc, #428]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002f9e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fa2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	2b00      	cmp	r3, #0
 8002faa:	d013      	beq.n	8002fd4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fac:	f7fe fc98 	bl	80018e0 <HAL_GetTick>
 8002fb0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fb2:	e008      	b.n	8002fc6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb4:	f7fe fc94 	bl	80018e0 <HAL_GetTick>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	693b      	ldr	r3, [r7, #16]
 8002fbc:	1ad3      	subs	r3, r2, r3
 8002fbe:	2b64      	cmp	r3, #100	@ 0x64
 8002fc0:	d901      	bls.n	8002fc6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002fc2:	2303      	movs	r3, #3
 8002fc4:	e21f      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc6:	4b61      	ldr	r3, [pc, #388]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fce:	2b00      	cmp	r3, #0
 8002fd0:	d0f0      	beq.n	8002fb4 <HAL_RCC_OscConfig+0xdc>
 8002fd2:	e014      	b.n	8002ffe <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd4:	f7fe fc84 	bl	80018e0 <HAL_GetTick>
 8002fd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fda:	e008      	b.n	8002fee <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fdc:	f7fe fc80 	bl	80018e0 <HAL_GetTick>
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	1ad3      	subs	r3, r2, r3
 8002fe6:	2b64      	cmp	r3, #100	@ 0x64
 8002fe8:	d901      	bls.n	8002fee <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002fea:	2303      	movs	r3, #3
 8002fec:	e20b      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fee:	4b57      	ldr	r3, [pc, #348]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d1f0      	bne.n	8002fdc <HAL_RCC_OscConfig+0x104>
 8002ffa:	e000      	b.n	8002ffe <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ffc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d06f      	beq.n	80030ea <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 800300a:	4b50      	ldr	r3, [pc, #320]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 800300c:	689b      	ldr	r3, [r3, #8]
 800300e:	f003 030c 	and.w	r3, r3, #12
 8003012:	2b00      	cmp	r3, #0
 8003014:	d017      	beq.n	8003046 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003016:	4b4d      	ldr	r3, [pc, #308]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	f003 030c 	and.w	r3, r3, #12
        || \
 800301e:	2b08      	cmp	r3, #8
 8003020:	d105      	bne.n	800302e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003022:	4b4a      	ldr	r3, [pc, #296]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d00b      	beq.n	8003046 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800302e:	4b47      	ldr	r3, [pc, #284]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8003036:	2b0c      	cmp	r3, #12
 8003038:	d11c      	bne.n	8003074 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303a:	4b44      	ldr	r3, [pc, #272]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 800303c:	685b      	ldr	r3, [r3, #4]
 800303e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003042:	2b00      	cmp	r3, #0
 8003044:	d116      	bne.n	8003074 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003046:	4b41      	ldr	r3, [pc, #260]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b00      	cmp	r3, #0
 8003050:	d005      	beq.n	800305e <HAL_RCC_OscConfig+0x186>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68db      	ldr	r3, [r3, #12]
 8003056:	2b01      	cmp	r3, #1
 8003058:	d001      	beq.n	800305e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e1d3      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800305e:	4b3b      	ldr	r3, [pc, #236]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	691b      	ldr	r3, [r3, #16]
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4937      	ldr	r1, [pc, #220]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 800306e:	4313      	orrs	r3, r2
 8003070:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003072:	e03a      	b.n	80030ea <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d020      	beq.n	80030be <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800307c:	4b34      	ldr	r3, [pc, #208]	@ (8003150 <HAL_RCC_OscConfig+0x278>)
 800307e:	2201      	movs	r2, #1
 8003080:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003082:	f7fe fc2d 	bl	80018e0 <HAL_GetTick>
 8003086:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003088:	e008      	b.n	800309c <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800308a:	f7fe fc29 	bl	80018e0 <HAL_GetTick>
 800308e:	4602      	mov	r2, r0
 8003090:	693b      	ldr	r3, [r7, #16]
 8003092:	1ad3      	subs	r3, r2, r3
 8003094:	2b02      	cmp	r3, #2
 8003096:	d901      	bls.n	800309c <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8003098:	2303      	movs	r3, #3
 800309a:	e1b4      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800309c:	4b2b      	ldr	r3, [pc, #172]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f003 0302 	and.w	r3, r3, #2
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d0f0      	beq.n	800308a <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a8:	4b28      	ldr	r3, [pc, #160]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030b0:	687b      	ldr	r3, [r7, #4]
 80030b2:	691b      	ldr	r3, [r3, #16]
 80030b4:	00db      	lsls	r3, r3, #3
 80030b6:	4925      	ldr	r1, [pc, #148]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 80030b8:	4313      	orrs	r3, r2
 80030ba:	600b      	str	r3, [r1, #0]
 80030bc:	e015      	b.n	80030ea <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030be:	4b24      	ldr	r3, [pc, #144]	@ (8003150 <HAL_RCC_OscConfig+0x278>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030c4:	f7fe fc0c 	bl	80018e0 <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030cc:	f7fe fc08 	bl	80018e0 <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e193      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030de:	4b1b      	ldr	r3, [pc, #108]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 0302 	and.w	r3, r3, #2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0308 	and.w	r3, r3, #8
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d036      	beq.n	8003164 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	695b      	ldr	r3, [r3, #20]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d016      	beq.n	800312c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030fe:	4b15      	ldr	r3, [pc, #84]	@ (8003154 <HAL_RCC_OscConfig+0x27c>)
 8003100:	2201      	movs	r2, #1
 8003102:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003104:	f7fe fbec 	bl	80018e0 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800310c:	f7fe fbe8 	bl	80018e0 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b02      	cmp	r3, #2
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e173      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800311e:	4b0b      	ldr	r3, [pc, #44]	@ (800314c <HAL_RCC_OscConfig+0x274>)
 8003120:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003122:	f003 0302 	and.w	r3, r3, #2
 8003126:	2b00      	cmp	r3, #0
 8003128:	d0f0      	beq.n	800310c <HAL_RCC_OscConfig+0x234>
 800312a:	e01b      	b.n	8003164 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312c:	4b09      	ldr	r3, [pc, #36]	@ (8003154 <HAL_RCC_OscConfig+0x27c>)
 800312e:	2200      	movs	r2, #0
 8003130:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003132:	f7fe fbd5 	bl	80018e0 <HAL_GetTick>
 8003136:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003138:	e00e      	b.n	8003158 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800313a:	f7fe fbd1 	bl	80018e0 <HAL_GetTick>
 800313e:	4602      	mov	r2, r0
 8003140:	693b      	ldr	r3, [r7, #16]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d907      	bls.n	8003158 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8003148:	2303      	movs	r3, #3
 800314a:	e15c      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
 800314c:	40023800 	.word	0x40023800
 8003150:	42470000 	.word	0x42470000
 8003154:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	4b8a      	ldr	r3, [pc, #552]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 800315a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1ea      	bne.n	800313a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 8097 	beq.w	80032a0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003172:	2300      	movs	r3, #0
 8003174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003176:	4b83      	ldr	r3, [pc, #524]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 8003178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800317a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10f      	bne.n	80031a2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	2300      	movs	r3, #0
 8003184:	60bb      	str	r3, [r7, #8]
 8003186:	4b7f      	ldr	r3, [pc, #508]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 8003188:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800318a:	4a7e      	ldr	r2, [pc, #504]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 800318c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003190:	6413      	str	r3, [r2, #64]	@ 0x40
 8003192:	4b7c      	ldr	r3, [pc, #496]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800319a:	60bb      	str	r3, [r7, #8]
 800319c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319e:	2301      	movs	r3, #1
 80031a0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031a2:	4b79      	ldr	r3, [pc, #484]	@ (8003388 <HAL_RCC_OscConfig+0x4b0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d118      	bne.n	80031e0 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ae:	4b76      	ldr	r3, [pc, #472]	@ (8003388 <HAL_RCC_OscConfig+0x4b0>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	4a75      	ldr	r2, [pc, #468]	@ (8003388 <HAL_RCC_OscConfig+0x4b0>)
 80031b4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031ba:	f7fe fb91 	bl	80018e0 <HAL_GetTick>
 80031be:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031c0:	e008      	b.n	80031d4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031c2:	f7fe fb8d 	bl	80018e0 <HAL_GetTick>
 80031c6:	4602      	mov	r2, r0
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	1ad3      	subs	r3, r2, r3
 80031cc:	2b02      	cmp	r3, #2
 80031ce:	d901      	bls.n	80031d4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 80031d0:	2303      	movs	r3, #3
 80031d2:	e118      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d4:	4b6c      	ldr	r3, [pc, #432]	@ (8003388 <HAL_RCC_OscConfig+0x4b0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d0f0      	beq.n	80031c2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d106      	bne.n	80031f6 <HAL_RCC_OscConfig+0x31e>
 80031e8:	4b66      	ldr	r3, [pc, #408]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 80031ea:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031ec:	4a65      	ldr	r2, [pc, #404]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 80031ee:	f043 0301 	orr.w	r3, r3, #1
 80031f2:	6713      	str	r3, [r2, #112]	@ 0x70
 80031f4:	e01c      	b.n	8003230 <HAL_RCC_OscConfig+0x358>
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	689b      	ldr	r3, [r3, #8]
 80031fa:	2b05      	cmp	r3, #5
 80031fc:	d10c      	bne.n	8003218 <HAL_RCC_OscConfig+0x340>
 80031fe:	4b61      	ldr	r3, [pc, #388]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 8003200:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003202:	4a60      	ldr	r2, [pc, #384]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	6713      	str	r3, [r2, #112]	@ 0x70
 800320a:	4b5e      	ldr	r3, [pc, #376]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320e:	4a5d      	ldr	r2, [pc, #372]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 8003210:	f043 0301 	orr.w	r3, r3, #1
 8003214:	6713      	str	r3, [r2, #112]	@ 0x70
 8003216:	e00b      	b.n	8003230 <HAL_RCC_OscConfig+0x358>
 8003218:	4b5a      	ldr	r3, [pc, #360]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 800321a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321c:	4a59      	ldr	r2, [pc, #356]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 800321e:	f023 0301 	bic.w	r3, r3, #1
 8003222:	6713      	str	r3, [r2, #112]	@ 0x70
 8003224:	4b57      	ldr	r3, [pc, #348]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003228:	4a56      	ldr	r2, [pc, #344]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 800322a:	f023 0304 	bic.w	r3, r3, #4
 800322e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	689b      	ldr	r3, [r3, #8]
 8003234:	2b00      	cmp	r3, #0
 8003236:	d015      	beq.n	8003264 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003238:	f7fe fb52 	bl	80018e0 <HAL_GetTick>
 800323c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800323e:	e00a      	b.n	8003256 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003240:	f7fe fb4e 	bl	80018e0 <HAL_GetTick>
 8003244:	4602      	mov	r2, r0
 8003246:	693b      	ldr	r3, [r7, #16]
 8003248:	1ad3      	subs	r3, r2, r3
 800324a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800324e:	4293      	cmp	r3, r2
 8003250:	d901      	bls.n	8003256 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8003252:	2303      	movs	r3, #3
 8003254:	e0d7      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003256:	4b4b      	ldr	r3, [pc, #300]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 8003258:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800325a:	f003 0302 	and.w	r3, r3, #2
 800325e:	2b00      	cmp	r3, #0
 8003260:	d0ee      	beq.n	8003240 <HAL_RCC_OscConfig+0x368>
 8003262:	e014      	b.n	800328e <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003264:	f7fe fb3c 	bl	80018e0 <HAL_GetTick>
 8003268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800326a:	e00a      	b.n	8003282 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800326c:	f7fe fb38 	bl	80018e0 <HAL_GetTick>
 8003270:	4602      	mov	r2, r0
 8003272:	693b      	ldr	r3, [r7, #16]
 8003274:	1ad3      	subs	r3, r2, r3
 8003276:	f241 3288 	movw	r2, #5000	@ 0x1388
 800327a:	4293      	cmp	r3, r2
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e0c1      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003282:	4b40      	ldr	r3, [pc, #256]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 8003284:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003286:	f003 0302 	and.w	r3, r3, #2
 800328a:	2b00      	cmp	r3, #0
 800328c:	d1ee      	bne.n	800326c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800328e:	7dfb      	ldrb	r3, [r7, #23]
 8003290:	2b01      	cmp	r3, #1
 8003292:	d105      	bne.n	80032a0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003294:	4b3b      	ldr	r3, [pc, #236]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 8003296:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003298:	4a3a      	ldr	r2, [pc, #232]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 800329a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800329e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	699b      	ldr	r3, [r3, #24]
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	f000 80ad 	beq.w	8003404 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032aa:	4b36      	ldr	r3, [pc, #216]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 80032ac:	689b      	ldr	r3, [r3, #8]
 80032ae:	f003 030c 	and.w	r3, r3, #12
 80032b2:	2b08      	cmp	r3, #8
 80032b4:	d060      	beq.n	8003378 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	699b      	ldr	r3, [r3, #24]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d145      	bne.n	800334a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032be:	4b33      	ldr	r3, [pc, #204]	@ (800338c <HAL_RCC_OscConfig+0x4b4>)
 80032c0:	2200      	movs	r2, #0
 80032c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80032c4:	f7fe fb0c 	bl	80018e0 <HAL_GetTick>
 80032c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ca:	e008      	b.n	80032de <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032cc:	f7fe fb08 	bl	80018e0 <HAL_GetTick>
 80032d0:	4602      	mov	r2, r0
 80032d2:	693b      	ldr	r3, [r7, #16]
 80032d4:	1ad3      	subs	r3, r2, r3
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d901      	bls.n	80032de <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 80032da:	2303      	movs	r3, #3
 80032dc:	e093      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032de:	4b29      	ldr	r3, [pc, #164]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d1f0      	bne.n	80032cc <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	69da      	ldr	r2, [r3, #28]
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6a1b      	ldr	r3, [r3, #32]
 80032f2:	431a      	orrs	r2, r3
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	019b      	lsls	r3, r3, #6
 80032fa:	431a      	orrs	r2, r3
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003300:	085b      	lsrs	r3, r3, #1
 8003302:	3b01      	subs	r3, #1
 8003304:	041b      	lsls	r3, r3, #16
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800330c:	061b      	lsls	r3, r3, #24
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003314:	071b      	lsls	r3, r3, #28
 8003316:	491b      	ldr	r1, [pc, #108]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 8003318:	4313      	orrs	r3, r2
 800331a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800331c:	4b1b      	ldr	r3, [pc, #108]	@ (800338c <HAL_RCC_OscConfig+0x4b4>)
 800331e:	2201      	movs	r2, #1
 8003320:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003322:	f7fe fadd 	bl	80018e0 <HAL_GetTick>
 8003326:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003328:	e008      	b.n	800333c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332a:	f7fe fad9 	bl	80018e0 <HAL_GetTick>
 800332e:	4602      	mov	r2, r0
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	1ad3      	subs	r3, r2, r3
 8003334:	2b02      	cmp	r3, #2
 8003336:	d901      	bls.n	800333c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8003338:	2303      	movs	r3, #3
 800333a:	e064      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333c:	4b11      	ldr	r3, [pc, #68]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 800333e:	681b      	ldr	r3, [r3, #0]
 8003340:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003344:	2b00      	cmp	r3, #0
 8003346:	d0f0      	beq.n	800332a <HAL_RCC_OscConfig+0x452>
 8003348:	e05c      	b.n	8003404 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334a:	4b10      	ldr	r3, [pc, #64]	@ (800338c <HAL_RCC_OscConfig+0x4b4>)
 800334c:	2200      	movs	r2, #0
 800334e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003350:	f7fe fac6 	bl	80018e0 <HAL_GetTick>
 8003354:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003356:	e008      	b.n	800336a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003358:	f7fe fac2 	bl	80018e0 <HAL_GetTick>
 800335c:	4602      	mov	r2, r0
 800335e:	693b      	ldr	r3, [r7, #16]
 8003360:	1ad3      	subs	r3, r2, r3
 8003362:	2b02      	cmp	r3, #2
 8003364:	d901      	bls.n	800336a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8003366:	2303      	movs	r3, #3
 8003368:	e04d      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	4b06      	ldr	r3, [pc, #24]	@ (8003384 <HAL_RCC_OscConfig+0x4ac>)
 800336c:	681b      	ldr	r3, [r3, #0]
 800336e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003372:	2b00      	cmp	r3, #0
 8003374:	d1f0      	bne.n	8003358 <HAL_RCC_OscConfig+0x480>
 8003376:	e045      	b.n	8003404 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	699b      	ldr	r3, [r3, #24]
 800337c:	2b01      	cmp	r3, #1
 800337e:	d107      	bne.n	8003390 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8003380:	2301      	movs	r3, #1
 8003382:	e040      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
 8003384:	40023800 	.word	0x40023800
 8003388:	40007000 	.word	0x40007000
 800338c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003390:	4b1f      	ldr	r3, [pc, #124]	@ (8003410 <HAL_RCC_OscConfig+0x538>)
 8003392:	685b      	ldr	r3, [r3, #4]
 8003394:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003396:	687b      	ldr	r3, [r7, #4]
 8003398:	699b      	ldr	r3, [r3, #24]
 800339a:	2b01      	cmp	r3, #1
 800339c:	d030      	beq.n	8003400 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d129      	bne.n	8003400 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	429a      	cmp	r2, r3
 80033b8:	d122      	bne.n	8003400 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ba:	68fa      	ldr	r2, [r7, #12]
 80033bc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033c0:	4013      	ands	r3, r2
 80033c2:	687a      	ldr	r2, [r7, #4]
 80033c4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d119      	bne.n	8003400 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033d6:	085b      	lsrs	r3, r3, #1
 80033d8:	3b01      	subs	r3, #1
 80033da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033dc:	429a      	cmp	r2, r3
 80033de:	d10f      	bne.n	8003400 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033ec:	429a      	cmp	r2, r3
 80033ee:	d107      	bne.n	8003400 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033fa:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 80033fc:	429a      	cmp	r2, r3
 80033fe:	d001      	beq.n	8003404 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003400:	2301      	movs	r3, #1
 8003402:	e000      	b.n	8003406 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003404:	2300      	movs	r3, #0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3718      	adds	r7, #24
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
 800340e:	bf00      	nop
 8003410:	40023800 	.word	0x40023800

08003414 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003414:	b580      	push	{r7, lr}
 8003416:	b084      	sub	sp, #16
 8003418:	af00      	add	r7, sp, #0
 800341a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2b00      	cmp	r3, #0
 8003420:	d101      	bne.n	8003426 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003422:	2301      	movs	r3, #1
 8003424:	e073      	b.n	800350e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	7f5b      	ldrb	r3, [r3, #29]
 800342a:	b2db      	uxtb	r3, r3
 800342c:	2b00      	cmp	r3, #0
 800342e:	d105      	bne.n	800343c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2200      	movs	r2, #0
 8003434:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003436:	6878      	ldr	r0, [r7, #4]
 8003438:	f7fd fee0 	bl	80011fc <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2202      	movs	r2, #2
 8003440:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	68db      	ldr	r3, [r3, #12]
 8003448:	f003 0310 	and.w	r3, r3, #16
 800344c:	2b10      	cmp	r3, #16
 800344e:	d055      	beq.n	80034fc <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	22ca      	movs	r2, #202	@ 0xca
 8003456:	625a      	str	r2, [r3, #36]	@ 0x24
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	2253      	movs	r2, #83	@ 0x53
 800345e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003460:	6878      	ldr	r0, [r7, #4]
 8003462:	f000 f92b 	bl	80036bc <RTC_EnterInitMode>
 8003466:	4603      	mov	r3, r0
 8003468:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800346a:	7bfb      	ldrb	r3, [r7, #15]
 800346c:	2b00      	cmp	r3, #0
 800346e:	d12c      	bne.n	80034ca <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	689b      	ldr	r3, [r3, #8]
 8003476:	687a      	ldr	r2, [r7, #4]
 8003478:	6812      	ldr	r2, [r2, #0]
 800347a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800347e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003482:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	6899      	ldr	r1, [r3, #8]
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	685a      	ldr	r2, [r3, #4]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	691b      	ldr	r3, [r3, #16]
 8003492:	431a      	orrs	r2, r3
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	695b      	ldr	r3, [r3, #20]
 8003498:	431a      	orrs	r2, r3
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	430a      	orrs	r2, r1
 80034a0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	687a      	ldr	r2, [r7, #4]
 80034a8:	68d2      	ldr	r2, [r2, #12]
 80034aa:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	6919      	ldr	r1, [r3, #16]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	689b      	ldr	r3, [r3, #8]
 80034b6:	041a      	lsls	r2, r3, #16
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	430a      	orrs	r2, r1
 80034be:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80034c0:	6878      	ldr	r0, [r7, #4]
 80034c2:	f000 f932 	bl	800372a <RTC_ExitInitMode>
 80034c6:	4603      	mov	r3, r0
 80034c8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80034ca:	7bfb      	ldrb	r3, [r7, #15]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d110      	bne.n	80034f2 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	681b      	ldr	r3, [r3, #0]
 80034d4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80034de:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699a      	ldr	r2, [r3, #24]
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	430a      	orrs	r2, r1
 80034f0:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	22ff      	movs	r2, #255	@ 0xff
 80034f8:	625a      	str	r2, [r3, #36]	@ 0x24
 80034fa:	e001      	b.n	8003500 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 80034fc:	2300      	movs	r3, #0
 80034fe:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003500:	7bfb      	ldrb	r3, [r7, #15]
 8003502:	2b00      	cmp	r3, #0
 8003504:	d102      	bne.n	800350c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	2201      	movs	r2, #1
 800350a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800350c:	7bfb      	ldrb	r3, [r7, #15]
}
 800350e:	4618      	mov	r0, r3
 8003510:	3710      	adds	r7, #16
 8003512:	46bd      	mov	sp, r7
 8003514:	bd80      	pop	{r7, pc}

08003516 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003516:	b580      	push	{r7, lr}
 8003518:	b086      	sub	sp, #24
 800351a:	af00      	add	r7, sp, #0
 800351c:	60f8      	str	r0, [r7, #12]
 800351e:	60b9      	str	r1, [r7, #8]
 8003520:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003522:	2300      	movs	r3, #0
 8003524:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003526:	68fb      	ldr	r3, [r7, #12]
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800352c:	68bb      	ldr	r3, [r7, #8]
 800352e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003530:	68fb      	ldr	r3, [r7, #12]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	691b      	ldr	r3, [r3, #16]
 8003536:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800353a:	68bb      	ldr	r3, [r7, #8]
 800353c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003548:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800354c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	b2db      	uxtb	r3, r3
 8003554:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003558:	b2da      	uxtb	r2, r3
 800355a:	68bb      	ldr	r3, [r7, #8]
 800355c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800355e:	697b      	ldr	r3, [r7, #20]
 8003560:	0a1b      	lsrs	r3, r3, #8
 8003562:	b2db      	uxtb	r3, r3
 8003564:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003568:	b2da      	uxtb	r2, r3
 800356a:	68bb      	ldr	r3, [r7, #8]
 800356c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800356e:	697b      	ldr	r3, [r7, #20]
 8003570:	b2db      	uxtb	r3, r3
 8003572:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003576:	b2da      	uxtb	r2, r3
 8003578:	68bb      	ldr	r3, [r7, #8]
 800357a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800357c:	697b      	ldr	r3, [r7, #20]
 800357e:	0d9b      	lsrs	r3, r3, #22
 8003580:	b2db      	uxtb	r3, r3
 8003582:	f003 0301 	and.w	r3, r3, #1
 8003586:	b2da      	uxtb	r2, r3
 8003588:	68bb      	ldr	r3, [r7, #8]
 800358a:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2b00      	cmp	r3, #0
 8003590:	d11a      	bne.n	80035c8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 8003592:	68bb      	ldr	r3, [r7, #8]
 8003594:	781b      	ldrb	r3, [r3, #0]
 8003596:	4618      	mov	r0, r3
 8003598:	f000 f8ec 	bl	8003774 <RTC_Bcd2ToByte>
 800359c:	4603      	mov	r3, r0
 800359e:	461a      	mov	r2, r3
 80035a0:	68bb      	ldr	r3, [r7, #8]
 80035a2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80035a4:	68bb      	ldr	r3, [r7, #8]
 80035a6:	785b      	ldrb	r3, [r3, #1]
 80035a8:	4618      	mov	r0, r3
 80035aa:	f000 f8e3 	bl	8003774 <RTC_Bcd2ToByte>
 80035ae:	4603      	mov	r3, r0
 80035b0:	461a      	mov	r2, r3
 80035b2:	68bb      	ldr	r3, [r7, #8]
 80035b4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80035b6:	68bb      	ldr	r3, [r7, #8]
 80035b8:	789b      	ldrb	r3, [r3, #2]
 80035ba:	4618      	mov	r0, r3
 80035bc:	f000 f8da 	bl	8003774 <RTC_Bcd2ToByte>
 80035c0:	4603      	mov	r3, r0
 80035c2:	461a      	mov	r2, r3
 80035c4:	68bb      	ldr	r3, [r7, #8]
 80035c6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80035c8:	2300      	movs	r3, #0
}
 80035ca:	4618      	mov	r0, r3
 80035cc:	3718      	adds	r7, #24
 80035ce:	46bd      	mov	sp, r7
 80035d0:	bd80      	pop	{r7, pc}

080035d2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80035d2:	b580      	push	{r7, lr}
 80035d4:	b086      	sub	sp, #24
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	60f8      	str	r0, [r7, #12]
 80035da:	60b9      	str	r1, [r7, #8]
 80035dc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80035de:	2300      	movs	r3, #0
 80035e0:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	685b      	ldr	r3, [r3, #4]
 80035e8:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 80035ec:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 80035f0:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 80035f2:	697b      	ldr	r3, [r7, #20]
 80035f4:	0c1b      	lsrs	r3, r3, #16
 80035f6:	b2da      	uxtb	r2, r3
 80035f8:	68bb      	ldr	r3, [r7, #8]
 80035fa:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	0a1b      	lsrs	r3, r3, #8
 8003600:	b2db      	uxtb	r3, r3
 8003602:	f003 031f 	and.w	r3, r3, #31
 8003606:	b2da      	uxtb	r2, r3
 8003608:	68bb      	ldr	r3, [r7, #8]
 800360a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	b2db      	uxtb	r3, r3
 8003610:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003614:	b2da      	uxtb	r2, r3
 8003616:	68bb      	ldr	r3, [r7, #8]
 8003618:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800361a:	697b      	ldr	r3, [r7, #20]
 800361c:	0b5b      	lsrs	r3, r3, #13
 800361e:	b2db      	uxtb	r3, r3
 8003620:	f003 0307 	and.w	r3, r3, #7
 8003624:	b2da      	uxtb	r2, r3
 8003626:	68bb      	ldr	r3, [r7, #8]
 8003628:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	2b00      	cmp	r3, #0
 800362e:	d11a      	bne.n	8003666 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003630:	68bb      	ldr	r3, [r7, #8]
 8003632:	78db      	ldrb	r3, [r3, #3]
 8003634:	4618      	mov	r0, r3
 8003636:	f000 f89d 	bl	8003774 <RTC_Bcd2ToByte>
 800363a:	4603      	mov	r3, r0
 800363c:	461a      	mov	r2, r3
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003642:	68bb      	ldr	r3, [r7, #8]
 8003644:	785b      	ldrb	r3, [r3, #1]
 8003646:	4618      	mov	r0, r3
 8003648:	f000 f894 	bl	8003774 <RTC_Bcd2ToByte>
 800364c:	4603      	mov	r3, r0
 800364e:	461a      	mov	r2, r3
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003654:	68bb      	ldr	r3, [r7, #8]
 8003656:	789b      	ldrb	r3, [r3, #2]
 8003658:	4618      	mov	r0, r3
 800365a:	f000 f88b 	bl	8003774 <RTC_Bcd2ToByte>
 800365e:	4603      	mov	r3, r0
 8003660:	461a      	mov	r2, r3
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003666:	2300      	movs	r3, #0
}
 8003668:	4618      	mov	r0, r3
 800366a:	3718      	adds	r7, #24
 800366c:	46bd      	mov	sp, r7
 800366e:	bd80      	pop	{r7, pc}

08003670 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003670:	b580      	push	{r7, lr}
 8003672:	b084      	sub	sp, #16
 8003674:	af00      	add	r7, sp, #0
 8003676:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003678:	2300      	movs	r3, #0
 800367a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	4a0d      	ldr	r2, [pc, #52]	@ (80036b8 <HAL_RTC_WaitForSynchro+0x48>)
 8003682:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003684:	f7fe f92c 	bl	80018e0 <HAL_GetTick>
 8003688:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 800368a:	e009      	b.n	80036a0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 800368c:	f7fe f928 	bl	80018e0 <HAL_GetTick>
 8003690:	4602      	mov	r2, r0
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	1ad3      	subs	r3, r2, r3
 8003696:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800369a:	d901      	bls.n	80036a0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 800369c:	2303      	movs	r3, #3
 800369e:	e007      	b.n	80036b0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0ee      	beq.n	800368c <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80036ae:	2300      	movs	r3, #0
}
 80036b0:	4618      	mov	r0, r3
 80036b2:	3710      	adds	r7, #16
 80036b4:	46bd      	mov	sp, r7
 80036b6:	bd80      	pop	{r7, pc}
 80036b8:	00017f5f 	.word	0x00017f5f

080036bc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b084      	sub	sp, #16
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80036c4:	2300      	movs	r3, #0
 80036c6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80036c8:	2300      	movs	r3, #0
 80036ca:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	68db      	ldr	r3, [r3, #12]
 80036d2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d122      	bne.n	8003720 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	68da      	ldr	r2, [r3, #12]
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80036e8:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 80036ea:	f7fe f8f9 	bl	80018e0 <HAL_GetTick>
 80036ee:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 80036f0:	e00c      	b.n	800370c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80036f2:	f7fe f8f5 	bl	80018e0 <HAL_GetTick>
 80036f6:	4602      	mov	r2, r0
 80036f8:	68bb      	ldr	r3, [r7, #8]
 80036fa:	1ad3      	subs	r3, r2, r3
 80036fc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003700:	d904      	bls.n	800370c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	2204      	movs	r2, #4
 8003706:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003708:	2301      	movs	r3, #1
 800370a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003716:	2b00      	cmp	r3, #0
 8003718:	d102      	bne.n	8003720 <RTC_EnterInitMode+0x64>
 800371a:	7bfb      	ldrb	r3, [r7, #15]
 800371c:	2b01      	cmp	r3, #1
 800371e:	d1e8      	bne.n	80036f2 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003720:	7bfb      	ldrb	r3, [r7, #15]
}
 8003722:	4618      	mov	r0, r3
 8003724:	3710      	adds	r7, #16
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800372a:	b580      	push	{r7, lr}
 800372c:	b084      	sub	sp, #16
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003732:	2300      	movs	r3, #0
 8003734:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	68da      	ldr	r2, [r3, #12]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003744:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	689b      	ldr	r3, [r3, #8]
 800374c:	f003 0320 	and.w	r3, r3, #32
 8003750:	2b00      	cmp	r3, #0
 8003752:	d10a      	bne.n	800376a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003754:	6878      	ldr	r0, [r7, #4]
 8003756:	f7ff ff8b 	bl	8003670 <HAL_RTC_WaitForSynchro>
 800375a:	4603      	mov	r3, r0
 800375c:	2b00      	cmp	r3, #0
 800375e:	d004      	beq.n	800376a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2204      	movs	r2, #4
 8003764:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800376a:	7bfb      	ldrb	r3, [r7, #15]
}
 800376c:	4618      	mov	r0, r3
 800376e:	3710      	adds	r7, #16
 8003770:	46bd      	mov	sp, r7
 8003772:	bd80      	pop	{r7, pc}

08003774 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003774:	b480      	push	{r7}
 8003776:	b085      	sub	sp, #20
 8003778:	af00      	add	r7, sp, #0
 800377a:	4603      	mov	r3, r0
 800377c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800377e:	2300      	movs	r3, #0
 8003780:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8003782:	79fb      	ldrb	r3, [r7, #7]
 8003784:	091b      	lsrs	r3, r3, #4
 8003786:	b2db      	uxtb	r3, r3
 8003788:	461a      	mov	r2, r3
 800378a:	4613      	mov	r3, r2
 800378c:	009b      	lsls	r3, r3, #2
 800378e:	4413      	add	r3, r2
 8003790:	005b      	lsls	r3, r3, #1
 8003792:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	b2da      	uxtb	r2, r3
 8003798:	79fb      	ldrb	r3, [r7, #7]
 800379a:	f003 030f 	and.w	r3, r3, #15
 800379e:	b2db      	uxtb	r3, r3
 80037a0:	4413      	add	r3, r2
 80037a2:	b2db      	uxtb	r3, r3
}
 80037a4:	4618      	mov	r0, r3
 80037a6:	3714      	adds	r7, #20
 80037a8:	46bd      	mov	sp, r7
 80037aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ae:	4770      	bx	lr

080037b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037b0:	b580      	push	{r7, lr}
 80037b2:	b082      	sub	sp, #8
 80037b4:	af00      	add	r7, sp, #0
 80037b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d101      	bne.n	80037c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e07b      	b.n	80038ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d108      	bne.n	80037dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037d2:	d009      	beq.n	80037e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2200      	movs	r2, #0
 80037d8:	61da      	str	r2, [r3, #28]
 80037da:	e005      	b.n	80037e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2200      	movs	r2, #0
 80037e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	2200      	movs	r2, #0
 80037e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037f4:	b2db      	uxtb	r3, r3
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d106      	bne.n	8003808 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003802:	6878      	ldr	r0, [r7, #4]
 8003804:	f7fd fd5a 	bl	80012bc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2202      	movs	r2, #2
 800380c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	681a      	ldr	r2, [r3, #0]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800381e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	685b      	ldr	r3, [r3, #4]
 8003824:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003830:	431a      	orrs	r2, r3
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	68db      	ldr	r3, [r3, #12]
 8003836:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800383a:	431a      	orrs	r2, r3
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	691b      	ldr	r3, [r3, #16]
 8003840:	f003 0302 	and.w	r3, r3, #2
 8003844:	431a      	orrs	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	695b      	ldr	r3, [r3, #20]
 800384a:	f003 0301 	and.w	r3, r3, #1
 800384e:	431a      	orrs	r2, r3
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	699b      	ldr	r3, [r3, #24]
 8003854:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003858:	431a      	orrs	r2, r3
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	69db      	ldr	r3, [r3, #28]
 800385e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6a1b      	ldr	r3, [r3, #32]
 8003868:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800386c:	ea42 0103 	orr.w	r1, r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003874:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	430a      	orrs	r2, r1
 800387e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	699b      	ldr	r3, [r3, #24]
 8003884:	0c1b      	lsrs	r3, r3, #16
 8003886:	f003 0104 	and.w	r1, r3, #4
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800388e:	f003 0210 	and.w	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	69da      	ldr	r2, [r3, #28]
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	2200      	movs	r2, #0
 80038ae:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	2201      	movs	r2, #1
 80038b4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038b8:	2300      	movs	r3, #0
}
 80038ba:	4618      	mov	r0, r3
 80038bc:	3708      	adds	r7, #8
 80038be:	46bd      	mov	sp, r7
 80038c0:	bd80      	pop	{r7, pc}

080038c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80038c2:	b580      	push	{r7, lr}
 80038c4:	b088      	sub	sp, #32
 80038c6:	af00      	add	r7, sp, #0
 80038c8:	60f8      	str	r0, [r7, #12]
 80038ca:	60b9      	str	r1, [r7, #8]
 80038cc:	603b      	str	r3, [r7, #0]
 80038ce:	4613      	mov	r3, r2
 80038d0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038d2:	f7fe f805 	bl	80018e0 <HAL_GetTick>
 80038d6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80038d8:	88fb      	ldrh	r3, [r7, #6]
 80038da:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	2b01      	cmp	r3, #1
 80038e6:	d001      	beq.n	80038ec <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80038e8:	2302      	movs	r3, #2
 80038ea:	e12a      	b.n	8003b42 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	d002      	beq.n	80038f8 <HAL_SPI_Transmit+0x36>
 80038f2:	88fb      	ldrh	r3, [r7, #6]
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d101      	bne.n	80038fc <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80038f8:	2301      	movs	r3, #1
 80038fa:	e122      	b.n	8003b42 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003902:	2b01      	cmp	r3, #1
 8003904:	d101      	bne.n	800390a <HAL_SPI_Transmit+0x48>
 8003906:	2302      	movs	r3, #2
 8003908:	e11b      	b.n	8003b42 <HAL_SPI_Transmit+0x280>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	2201      	movs	r2, #1
 800390e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	2203      	movs	r2, #3
 8003916:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68ba      	ldr	r2, [r7, #8]
 8003924:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	88fa      	ldrh	r2, [r7, #6]
 800392a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	88fa      	ldrh	r2, [r7, #6]
 8003930:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	2200      	movs	r2, #0
 800393c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	2200      	movs	r2, #0
 8003942:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2200      	movs	r2, #0
 800394e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003958:	d10f      	bne.n	800397a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	681a      	ldr	r2, [r3, #0]
 8003960:	68fb      	ldr	r3, [r7, #12]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003968:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	681a      	ldr	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003978:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003984:	2b40      	cmp	r3, #64	@ 0x40
 8003986:	d007      	beq.n	8003998 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	681a      	ldr	r2, [r3, #0]
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003996:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039a0:	d152      	bne.n	8003a48 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	685b      	ldr	r3, [r3, #4]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d002      	beq.n	80039b0 <HAL_SPI_Transmit+0xee>
 80039aa:	8b7b      	ldrh	r3, [r7, #26]
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d145      	bne.n	8003a3c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b4:	881a      	ldrh	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	1c9a      	adds	r2, r3, #2
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039ca:	b29b      	uxth	r3, r3
 80039cc:	3b01      	subs	r3, #1
 80039ce:	b29a      	uxth	r2, r3
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80039d4:	e032      	b.n	8003a3c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	f003 0302 	and.w	r3, r3, #2
 80039e0:	2b02      	cmp	r3, #2
 80039e2:	d112      	bne.n	8003a0a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039e4:	68fb      	ldr	r3, [r7, #12]
 80039e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039e8:	881a      	ldrh	r2, [r3, #0]
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039f4:	1c9a      	adds	r2, r3, #2
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039fe:	b29b      	uxth	r3, r3
 8003a00:	3b01      	subs	r3, #1
 8003a02:	b29a      	uxth	r2, r3
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003a08:	e018      	b.n	8003a3c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003a0a:	f7fd ff69 	bl	80018e0 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	683a      	ldr	r2, [r7, #0]
 8003a16:	429a      	cmp	r2, r3
 8003a18:	d803      	bhi.n	8003a22 <HAL_SPI_Transmit+0x160>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a20:	d102      	bne.n	8003a28 <HAL_SPI_Transmit+0x166>
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d109      	bne.n	8003a3c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	2201      	movs	r2, #1
 8003a2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	2200      	movs	r2, #0
 8003a34:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003a38:	2303      	movs	r3, #3
 8003a3a:	e082      	b.n	8003b42 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a40:	b29b      	uxth	r3, r3
 8003a42:	2b00      	cmp	r3, #0
 8003a44:	d1c7      	bne.n	80039d6 <HAL_SPI_Transmit+0x114>
 8003a46:	e053      	b.n	8003af0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	2b00      	cmp	r3, #0
 8003a4e:	d002      	beq.n	8003a56 <HAL_SPI_Transmit+0x194>
 8003a50:	8b7b      	ldrh	r3, [r7, #26]
 8003a52:	2b01      	cmp	r3, #1
 8003a54:	d147      	bne.n	8003ae6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	330c      	adds	r3, #12
 8003a60:	7812      	ldrb	r2, [r2, #0]
 8003a62:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a68:	1c5a      	adds	r2, r3, #1
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a72:	b29b      	uxth	r3, r3
 8003a74:	3b01      	subs	r3, #1
 8003a76:	b29a      	uxth	r2, r3
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003a7c:	e033      	b.n	8003ae6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f003 0302 	and.w	r3, r3, #2
 8003a88:	2b02      	cmp	r3, #2
 8003a8a:	d113      	bne.n	8003ab4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	330c      	adds	r3, #12
 8003a96:	7812      	ldrb	r2, [r2, #0]
 8003a98:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a9e:	1c5a      	adds	r2, r3, #1
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003aa4:	68fb      	ldr	r3, [r7, #12]
 8003aa6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003ab2:	e018      	b.n	8003ae6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ab4:	f7fd ff14 	bl	80018e0 <HAL_GetTick>
 8003ab8:	4602      	mov	r2, r0
 8003aba:	69fb      	ldr	r3, [r7, #28]
 8003abc:	1ad3      	subs	r3, r2, r3
 8003abe:	683a      	ldr	r2, [r7, #0]
 8003ac0:	429a      	cmp	r2, r3
 8003ac2:	d803      	bhi.n	8003acc <HAL_SPI_Transmit+0x20a>
 8003ac4:	683b      	ldr	r3, [r7, #0]
 8003ac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003aca:	d102      	bne.n	8003ad2 <HAL_SPI_Transmit+0x210>
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d109      	bne.n	8003ae6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	2201      	movs	r2, #1
 8003ad6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	2200      	movs	r2, #0
 8003ade:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003ae2:	2303      	movs	r3, #3
 8003ae4:	e02d      	b.n	8003b42 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003aea:	b29b      	uxth	r3, r3
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d1c6      	bne.n	8003a7e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003af0:	69fa      	ldr	r2, [r7, #28]
 8003af2:	6839      	ldr	r1, [r7, #0]
 8003af4:	68f8      	ldr	r0, [r7, #12]
 8003af6:	f000 fb85 	bl	8004204 <SPI_EndRxTxTransaction>
 8003afa:	4603      	mov	r3, r0
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d002      	beq.n	8003b06 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	2220      	movs	r2, #32
 8003b04:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	689b      	ldr	r3, [r3, #8]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d10a      	bne.n	8003b24 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003b0e:	2300      	movs	r3, #0
 8003b10:	617b      	str	r3, [r7, #20]
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	68db      	ldr	r3, [r3, #12]
 8003b18:	617b      	str	r3, [r7, #20]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	617b      	str	r3, [r7, #20]
 8003b22:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	2200      	movs	r2, #0
 8003b30:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b38:	2b00      	cmp	r3, #0
 8003b3a:	d001      	beq.n	8003b40 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 8003b3c:	2301      	movs	r3, #1
 8003b3e:	e000      	b.n	8003b42 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003b40:	2300      	movs	r3, #0
  }
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	3720      	adds	r7, #32
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}

08003b4a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003b4a:	b580      	push	{r7, lr}
 8003b4c:	b08a      	sub	sp, #40	@ 0x28
 8003b4e:	af00      	add	r7, sp, #0
 8003b50:	60f8      	str	r0, [r7, #12]
 8003b52:	60b9      	str	r1, [r7, #8]
 8003b54:	607a      	str	r2, [r7, #4]
 8003b56:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003b58:	2301      	movs	r3, #1
 8003b5a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b5c:	f7fd fec0 	bl	80018e0 <HAL_GetTick>
 8003b60:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b68:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	685b      	ldr	r3, [r3, #4]
 8003b6e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003b70:	887b      	ldrh	r3, [r7, #2]
 8003b72:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003b74:	7ffb      	ldrb	r3, [r7, #31]
 8003b76:	2b01      	cmp	r3, #1
 8003b78:	d00c      	beq.n	8003b94 <HAL_SPI_TransmitReceive+0x4a>
 8003b7a:	69bb      	ldr	r3, [r7, #24]
 8003b7c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b80:	d106      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	689b      	ldr	r3, [r3, #8]
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d102      	bne.n	8003b90 <HAL_SPI_TransmitReceive+0x46>
 8003b8a:	7ffb      	ldrb	r3, [r7, #31]
 8003b8c:	2b04      	cmp	r3, #4
 8003b8e:	d001      	beq.n	8003b94 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003b90:	2302      	movs	r3, #2
 8003b92:	e17f      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d005      	beq.n	8003ba6 <HAL_SPI_TransmitReceive+0x5c>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d002      	beq.n	8003ba6 <HAL_SPI_TransmitReceive+0x5c>
 8003ba0:	887b      	ldrh	r3, [r7, #2]
 8003ba2:	2b00      	cmp	r3, #0
 8003ba4:	d101      	bne.n	8003baa <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003ba6:	2301      	movs	r3, #1
 8003ba8:	e174      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003bb0:	2b01      	cmp	r3, #1
 8003bb2:	d101      	bne.n	8003bb8 <HAL_SPI_TransmitReceive+0x6e>
 8003bb4:	2302      	movs	r3, #2
 8003bb6:	e16d      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x34a>
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2201      	movs	r2, #1
 8003bbc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003bc6:	b2db      	uxtb	r3, r3
 8003bc8:	2b04      	cmp	r3, #4
 8003bca:	d003      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2205      	movs	r2, #5
 8003bd0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2200      	movs	r2, #0
 8003bd8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003bda:	68fb      	ldr	r3, [r7, #12]
 8003bdc:	687a      	ldr	r2, [r7, #4]
 8003bde:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	887a      	ldrh	r2, [r7, #2]
 8003be4:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	887a      	ldrh	r2, [r7, #2]
 8003bea:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	68ba      	ldr	r2, [r7, #8]
 8003bf0:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	887a      	ldrh	r2, [r7, #2]
 8003bf6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	887a      	ldrh	r2, [r7, #2]
 8003bfc:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2200      	movs	r2, #0
 8003c02:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c14:	2b40      	cmp	r3, #64	@ 0x40
 8003c16:	d007      	beq.n	8003c28 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	681a      	ldr	r2, [r3, #0]
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003c26:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	68db      	ldr	r3, [r3, #12]
 8003c2c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003c30:	d17e      	bne.n	8003d30 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	685b      	ldr	r3, [r3, #4]
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d002      	beq.n	8003c40 <HAL_SPI_TransmitReceive+0xf6>
 8003c3a:	8afb      	ldrh	r3, [r7, #22]
 8003c3c:	2b01      	cmp	r3, #1
 8003c3e:	d16c      	bne.n	8003d1a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c44:	881a      	ldrh	r2, [r3, #0]
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c50:	1c9a      	adds	r2, r3, #2
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c5a:	b29b      	uxth	r3, r3
 8003c5c:	3b01      	subs	r3, #1
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003c64:	e059      	b.n	8003d1a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 0302 	and.w	r3, r3, #2
 8003c70:	2b02      	cmp	r3, #2
 8003c72:	d11b      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x162>
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c78:	b29b      	uxth	r3, r3
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d016      	beq.n	8003cac <HAL_SPI_TransmitReceive+0x162>
 8003c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c80:	2b01      	cmp	r3, #1
 8003c82:	d113      	bne.n	8003cac <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c88:	881a      	ldrh	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003c94:	1c9a      	adds	r2, r3, #2
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003c9e:	b29b      	uxth	r3, r3
 8003ca0:	3b01      	subs	r3, #1
 8003ca2:	b29a      	uxth	r2, r3
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003ca8:	2300      	movs	r3, #0
 8003caa:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	689b      	ldr	r3, [r3, #8]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d119      	bne.n	8003cee <HAL_SPI_TransmitReceive+0x1a4>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003cbe:	b29b      	uxth	r3, r3
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d014      	beq.n	8003cee <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cce:	b292      	uxth	r2, r2
 8003cd0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003cd6:	1c9a      	adds	r2, r3, #2
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003cea:	2301      	movs	r3, #1
 8003cec:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003cee:	f7fd fdf7 	bl	80018e0 <HAL_GetTick>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	6a3b      	ldr	r3, [r7, #32]
 8003cf6:	1ad3      	subs	r3, r2, r3
 8003cf8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003cfa:	429a      	cmp	r2, r3
 8003cfc:	d80d      	bhi.n	8003d1a <HAL_SPI_TransmitReceive+0x1d0>
 8003cfe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003d00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d04:	d009      	beq.n	8003d1a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	2201      	movs	r2, #1
 8003d0a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	2200      	movs	r2, #0
 8003d12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003d16:	2303      	movs	r3, #3
 8003d18:	e0bc      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d1e:	b29b      	uxth	r3, r3
 8003d20:	2b00      	cmp	r3, #0
 8003d22:	d1a0      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x11c>
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003d28:	b29b      	uxth	r3, r3
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d19b      	bne.n	8003c66 <HAL_SPI_TransmitReceive+0x11c>
 8003d2e:	e082      	b.n	8003e36 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d002      	beq.n	8003d3e <HAL_SPI_TransmitReceive+0x1f4>
 8003d38:	8afb      	ldrh	r3, [r7, #22]
 8003d3a:	2b01      	cmp	r3, #1
 8003d3c:	d171      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	330c      	adds	r3, #12
 8003d48:	7812      	ldrb	r2, [r2, #0]
 8003d4a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d50:	1c5a      	adds	r2, r3, #1
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d5a:	b29b      	uxth	r3, r3
 8003d5c:	3b01      	subs	r3, #1
 8003d5e:	b29a      	uxth	r2, r3
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003d64:	e05d      	b.n	8003e22 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	689b      	ldr	r3, [r3, #8]
 8003d6c:	f003 0302 	and.w	r3, r3, #2
 8003d70:	2b02      	cmp	r3, #2
 8003d72:	d11c      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x264>
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d017      	beq.n	8003dae <HAL_SPI_TransmitReceive+0x264>
 8003d7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d80:	2b01      	cmp	r3, #1
 8003d82:	d114      	bne.n	8003dae <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	330c      	adds	r3, #12
 8003d8e:	7812      	ldrb	r2, [r2, #0]
 8003d90:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003d92:	68fb      	ldr	r3, [r7, #12]
 8003d94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003d96:	1c5a      	adds	r2, r3, #1
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003da0:	b29b      	uxth	r3, r3
 8003da2:	3b01      	subs	r3, #1
 8003da4:	b29a      	uxth	r2, r3
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003daa:	2300      	movs	r3, #0
 8003dac:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	689b      	ldr	r3, [r3, #8]
 8003db4:	f003 0301 	and.w	r3, r3, #1
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	d119      	bne.n	8003df0 <HAL_SPI_TransmitReceive+0x2a6>
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003dc0:	b29b      	uxth	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d014      	beq.n	8003df0 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	68da      	ldr	r2, [r3, #12]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd0:	b2d2      	uxtb	r2, r2
 8003dd2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003dd8:	1c5a      	adds	r2, r3, #1
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003de2:	b29b      	uxth	r3, r3
 8003de4:	3b01      	subs	r3, #1
 8003de6:	b29a      	uxth	r2, r3
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003dec:	2301      	movs	r3, #1
 8003dee:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003df0:	f7fd fd76 	bl	80018e0 <HAL_GetTick>
 8003df4:	4602      	mov	r2, r0
 8003df6:	6a3b      	ldr	r3, [r7, #32]
 8003df8:	1ad3      	subs	r3, r2, r3
 8003dfa:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003dfc:	429a      	cmp	r2, r3
 8003dfe:	d803      	bhi.n	8003e08 <HAL_SPI_TransmitReceive+0x2be>
 8003e00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003e06:	d102      	bne.n	8003e0e <HAL_SPI_TransmitReceive+0x2c4>
 8003e08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d109      	bne.n	8003e22 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2201      	movs	r2, #1
 8003e12:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	2200      	movs	r2, #0
 8003e1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003e1e:	2303      	movs	r3, #3
 8003e20:	e038      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003e26:	b29b      	uxth	r3, r3
 8003e28:	2b00      	cmp	r3, #0
 8003e2a:	d19c      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x21c>
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003e30:	b29b      	uxth	r3, r3
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d197      	bne.n	8003d66 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003e36:	6a3a      	ldr	r2, [r7, #32]
 8003e38:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e3a:	68f8      	ldr	r0, [r7, #12]
 8003e3c:	f000 f9e2 	bl	8004204 <SPI_EndRxTxTransaction>
 8003e40:	4603      	mov	r3, r0
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d008      	beq.n	8003e58 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2220      	movs	r2, #32
 8003e4a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003e54:	2301      	movs	r3, #1
 8003e56:	e01d      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d10a      	bne.n	8003e76 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003e60:	2300      	movs	r3, #0
 8003e62:	613b      	str	r3, [r7, #16]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	68db      	ldr	r3, [r3, #12]
 8003e6a:	613b      	str	r3, [r7, #16]
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	689b      	ldr	r3, [r3, #8]
 8003e72:	613b      	str	r3, [r7, #16]
 8003e74:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	2201      	movs	r2, #1
 8003e7a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	2200      	movs	r2, #0
 8003e82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d001      	beq.n	8003e92 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e000      	b.n	8003e94 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003e92:	2300      	movs	r3, #0
  }
}
 8003e94:	4618      	mov	r0, r3
 8003e96:	3728      	adds	r7, #40	@ 0x28
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	bd80      	pop	{r7, pc}

08003e9c <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b088      	sub	sp, #32
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	681b      	ldr	r3, [r3, #0]
 8003ea8:	685b      	ldr	r3, [r3, #4]
 8003eaa:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	689b      	ldr	r3, [r3, #8]
 8003eb2:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003eb4:	69bb      	ldr	r3, [r7, #24]
 8003eb6:	099b      	lsrs	r3, r3, #6
 8003eb8:	f003 0301 	and.w	r3, r3, #1
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d10f      	bne.n	8003ee0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003ec0:	69bb      	ldr	r3, [r7, #24]
 8003ec2:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d00a      	beq.n	8003ee0 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	099b      	lsrs	r3, r3, #6
 8003ece:	f003 0301 	and.w	r3, r3, #1
 8003ed2:	2b00      	cmp	r3, #0
 8003ed4:	d004      	beq.n	8003ee0 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eda:	6878      	ldr	r0, [r7, #4]
 8003edc:	4798      	blx	r3
    return;
 8003ede:	e0d7      	b.n	8004090 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	085b      	lsrs	r3, r3, #1
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d00a      	beq.n	8003f02 <HAL_SPI_IRQHandler+0x66>
 8003eec:	69fb      	ldr	r3, [r7, #28]
 8003eee:	09db      	lsrs	r3, r3, #7
 8003ef0:	f003 0301 	and.w	r3, r3, #1
 8003ef4:	2b00      	cmp	r3, #0
 8003ef6:	d004      	beq.n	8003f02 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003efc:	6878      	ldr	r0, [r7, #4]
 8003efe:	4798      	blx	r3
    return;
 8003f00:	e0c6      	b.n	8004090 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f02:	69bb      	ldr	r3, [r7, #24]
 8003f04:	095b      	lsrs	r3, r3, #5
 8003f06:	f003 0301 	and.w	r3, r3, #1
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d10c      	bne.n	8003f28 <HAL_SPI_IRQHandler+0x8c>
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	099b      	lsrs	r3, r3, #6
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d106      	bne.n	8003f28 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f1a:	69bb      	ldr	r3, [r7, #24]
 8003f1c:	0a1b      	lsrs	r3, r3, #8
 8003f1e:	f003 0301 	and.w	r3, r3, #1
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	f000 80b4 	beq.w	8004090 <HAL_SPI_IRQHandler+0x1f4>
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	095b      	lsrs	r3, r3, #5
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	f000 80ad 	beq.w	8004090 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f36:	69bb      	ldr	r3, [r7, #24]
 8003f38:	099b      	lsrs	r3, r3, #6
 8003f3a:	f003 0301 	and.w	r3, r3, #1
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d023      	beq.n	8003f8a <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f48:	b2db      	uxtb	r3, r3
 8003f4a:	2b03      	cmp	r3, #3
 8003f4c:	d011      	beq.n	8003f72 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f52:	f043 0204 	orr.w	r2, r3, #4
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f5a:	2300      	movs	r3, #0
 8003f5c:	617b      	str	r3, [r7, #20]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	68db      	ldr	r3, [r3, #12]
 8003f64:	617b      	str	r3, [r7, #20]
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	689b      	ldr	r3, [r3, #8]
 8003f6c:	617b      	str	r3, [r7, #20]
 8003f6e:	697b      	ldr	r3, [r7, #20]
 8003f70:	e00b      	b.n	8003f8a <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f72:	2300      	movs	r3, #0
 8003f74:	613b      	str	r3, [r7, #16]
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	689b      	ldr	r3, [r3, #8]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	693b      	ldr	r3, [r7, #16]
        return;
 8003f88:	e082      	b.n	8004090 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003f8a:	69bb      	ldr	r3, [r7, #24]
 8003f8c:	095b      	lsrs	r3, r3, #5
 8003f8e:	f003 0301 	and.w	r3, r3, #1
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d014      	beq.n	8003fc0 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f9a:	f043 0201 	orr.w	r2, r3, #1
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	60fb      	str	r3, [r7, #12]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	60fb      	str	r3, [r7, #12]
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	681a      	ldr	r2, [r3, #0]
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fbc:	601a      	str	r2, [r3, #0]
 8003fbe:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003fc0:	69bb      	ldr	r3, [r7, #24]
 8003fc2:	0a1b      	lsrs	r3, r3, #8
 8003fc4:	f003 0301 	and.w	r3, r3, #1
 8003fc8:	2b00      	cmp	r3, #0
 8003fca:	d00c      	beq.n	8003fe6 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd0:	f043 0208 	orr.w	r2, r3, #8
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003fd8:	2300      	movs	r3, #0
 8003fda:	60bb      	str	r3, [r7, #8]
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	60bb      	str	r3, [r7, #8]
 8003fe4:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d04f      	beq.n	800408e <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	685a      	ldr	r2, [r3, #4]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003ffc:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0302 	and.w	r3, r3, #2
 800400c:	2b00      	cmp	r3, #0
 800400e:	d104      	bne.n	800401a <HAL_SPI_IRQHandler+0x17e>
 8004010:	69fb      	ldr	r3, [r7, #28]
 8004012:	f003 0301 	and.w	r3, r3, #1
 8004016:	2b00      	cmp	r3, #0
 8004018:	d034      	beq.n	8004084 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	685a      	ldr	r2, [r3, #4]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0203 	bic.w	r2, r2, #3
 8004028:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800402e:	2b00      	cmp	r3, #0
 8004030:	d011      	beq.n	8004056 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004036:	4a18      	ldr	r2, [pc, #96]	@ (8004098 <HAL_SPI_IRQHandler+0x1fc>)
 8004038:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800403e:	4618      	mov	r0, r3
 8004040:	f7fd fd8f 	bl	8001b62 <HAL_DMA_Abort_IT>
 8004044:	4603      	mov	r3, r0
 8004046:	2b00      	cmp	r3, #0
 8004048:	d005      	beq.n	8004056 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800404e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800405a:	2b00      	cmp	r3, #0
 800405c:	d016      	beq.n	800408c <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004062:	4a0d      	ldr	r2, [pc, #52]	@ (8004098 <HAL_SPI_IRQHandler+0x1fc>)
 8004064:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800406a:	4618      	mov	r0, r3
 800406c:	f7fd fd79 	bl	8001b62 <HAL_DMA_Abort_IT>
 8004070:	4603      	mov	r3, r0
 8004072:	2b00      	cmp	r3, #0
 8004074:	d00a      	beq.n	800408c <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800407a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8004082:	e003      	b.n	800408c <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8004084:	6878      	ldr	r0, [r7, #4]
 8004086:	f000 f809 	bl	800409c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800408a:	e000      	b.n	800408e <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 800408c:	bf00      	nop
    return;
 800408e:	bf00      	nop
  }
}
 8004090:	3720      	adds	r7, #32
 8004092:	46bd      	mov	sp, r7
 8004094:	bd80      	pop	{r7, pc}
 8004096:	bf00      	nop
 8004098:	080040cd 	.word	0x080040cd

0800409c <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 800409c:	b480      	push	{r7}
 800409e:	b083      	sub	sp, #12
 80040a0:	af00      	add	r7, sp, #0
 80040a2:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80040a4:	bf00      	nop
 80040a6:	370c      	adds	r7, #12
 80040a8:	46bd      	mov	sp, r7
 80040aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ae:	4770      	bx	lr

080040b0 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 80040b0:	b480      	push	{r7}
 80040b2:	b083      	sub	sp, #12
 80040b4:	af00      	add	r7, sp, #0
 80040b6:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040be:	b2db      	uxtb	r3, r3
}
 80040c0:	4618      	mov	r0, r3
 80040c2:	370c      	adds	r7, #12
 80040c4:	46bd      	mov	sp, r7
 80040c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ca:	4770      	bx	lr

080040cc <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040cc:	b580      	push	{r7, lr}
 80040ce:	b084      	sub	sp, #16
 80040d0:	af00      	add	r7, sp, #0
 80040d2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040d8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	2200      	movs	r2, #0
 80040e4:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f7ff ffd8 	bl	800409c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 80040ec:	bf00      	nop
 80040ee:	3710      	adds	r7, #16
 80040f0:	46bd      	mov	sp, r7
 80040f2:	bd80      	pop	{r7, pc}

080040f4 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af00      	add	r7, sp, #0
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	60b9      	str	r1, [r7, #8]
 80040fe:	603b      	str	r3, [r7, #0]
 8004100:	4613      	mov	r3, r2
 8004102:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004104:	f7fd fbec 	bl	80018e0 <HAL_GetTick>
 8004108:	4602      	mov	r2, r0
 800410a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800410c:	1a9b      	subs	r3, r3, r2
 800410e:	683a      	ldr	r2, [r7, #0]
 8004110:	4413      	add	r3, r2
 8004112:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004114:	f7fd fbe4 	bl	80018e0 <HAL_GetTick>
 8004118:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800411a:	4b39      	ldr	r3, [pc, #228]	@ (8004200 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	015b      	lsls	r3, r3, #5
 8004120:	0d1b      	lsrs	r3, r3, #20
 8004122:	69fa      	ldr	r2, [r7, #28]
 8004124:	fb02 f303 	mul.w	r3, r2, r3
 8004128:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800412a:	e055      	b.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004132:	d051      	beq.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004134:	f7fd fbd4 	bl	80018e0 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	69bb      	ldr	r3, [r7, #24]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	69fa      	ldr	r2, [r7, #28]
 8004140:	429a      	cmp	r2, r3
 8004142:	d902      	bls.n	800414a <SPI_WaitFlagStateUntilTimeout+0x56>
 8004144:	69fb      	ldr	r3, [r7, #28]
 8004146:	2b00      	cmp	r3, #0
 8004148:	d13d      	bne.n	80041c6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	685a      	ldr	r2, [r3, #4]
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004158:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	685b      	ldr	r3, [r3, #4]
 800415e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004162:	d111      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800416c:	d004      	beq.n	8004178 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	689b      	ldr	r3, [r3, #8]
 8004172:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004176:	d107      	bne.n	8004188 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	681a      	ldr	r2, [r3, #0]
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004186:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800418c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004190:	d10f      	bne.n	80041b2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	681a      	ldr	r2, [r3, #0]
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80041a0:	601a      	str	r2, [r3, #0]
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	681b      	ldr	r3, [r3, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041b0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	2201      	movs	r2, #1
 80041b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	2200      	movs	r2, #0
 80041be:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80041c2:	2303      	movs	r3, #3
 80041c4:	e018      	b.n	80041f8 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80041c6:	697b      	ldr	r3, [r7, #20]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d102      	bne.n	80041d2 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80041cc:	2300      	movs	r3, #0
 80041ce:	61fb      	str	r3, [r7, #28]
 80041d0:	e002      	b.n	80041d8 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80041d2:	697b      	ldr	r3, [r7, #20]
 80041d4:	3b01      	subs	r3, #1
 80041d6:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	689a      	ldr	r2, [r3, #8]
 80041de:	68bb      	ldr	r3, [r7, #8]
 80041e0:	4013      	ands	r3, r2
 80041e2:	68ba      	ldr	r2, [r7, #8]
 80041e4:	429a      	cmp	r2, r3
 80041e6:	bf0c      	ite	eq
 80041e8:	2301      	moveq	r3, #1
 80041ea:	2300      	movne	r3, #0
 80041ec:	b2db      	uxtb	r3, r3
 80041ee:	461a      	mov	r2, r3
 80041f0:	79fb      	ldrb	r3, [r7, #7]
 80041f2:	429a      	cmp	r2, r3
 80041f4:	d19a      	bne.n	800412c <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80041f6:	2300      	movs	r3, #0
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3720      	adds	r7, #32
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}
 8004200:	20000000 	.word	0x20000000

08004204 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b088      	sub	sp, #32
 8004208:	af02      	add	r7, sp, #8
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	9300      	str	r3, [sp, #0]
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	2201      	movs	r2, #1
 8004218:	2102      	movs	r1, #2
 800421a:	68f8      	ldr	r0, [r7, #12]
 800421c:	f7ff ff6a 	bl	80040f4 <SPI_WaitFlagStateUntilTimeout>
 8004220:	4603      	mov	r3, r0
 8004222:	2b00      	cmp	r3, #0
 8004224:	d007      	beq.n	8004236 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800422a:	f043 0220 	orr.w	r2, r3, #32
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8004232:	2303      	movs	r3, #3
 8004234:	e032      	b.n	800429c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004236:	4b1b      	ldr	r3, [pc, #108]	@ (80042a4 <SPI_EndRxTxTransaction+0xa0>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	4a1b      	ldr	r2, [pc, #108]	@ (80042a8 <SPI_EndRxTxTransaction+0xa4>)
 800423c:	fba2 2303 	umull	r2, r3, r2, r3
 8004240:	0d5b      	lsrs	r3, r3, #21
 8004242:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004246:	fb02 f303 	mul.w	r3, r2, r3
 800424a:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800424c:	68fb      	ldr	r3, [r7, #12]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004254:	d112      	bne.n	800427c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	9300      	str	r3, [sp, #0]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	2200      	movs	r2, #0
 800425e:	2180      	movs	r1, #128	@ 0x80
 8004260:	68f8      	ldr	r0, [r7, #12]
 8004262:	f7ff ff47 	bl	80040f4 <SPI_WaitFlagStateUntilTimeout>
 8004266:	4603      	mov	r3, r0
 8004268:	2b00      	cmp	r3, #0
 800426a:	d016      	beq.n	800429a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004270:	f043 0220 	orr.w	r2, r3, #32
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004278:	2303      	movs	r3, #3
 800427a:	e00f      	b.n	800429c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800427c:	697b      	ldr	r3, [r7, #20]
 800427e:	2b00      	cmp	r3, #0
 8004280:	d00a      	beq.n	8004298 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8004282:	697b      	ldr	r3, [r7, #20]
 8004284:	3b01      	subs	r3, #1
 8004286:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004292:	2b80      	cmp	r3, #128	@ 0x80
 8004294:	d0f2      	beq.n	800427c <SPI_EndRxTxTransaction+0x78>
 8004296:	e000      	b.n	800429a <SPI_EndRxTxTransaction+0x96>
        break;
 8004298:	bf00      	nop
  }

  return HAL_OK;
 800429a:	2300      	movs	r3, #0
}
 800429c:	4618      	mov	r0, r3
 800429e:	3718      	adds	r7, #24
 80042a0:	46bd      	mov	sp, r7
 80042a2:	bd80      	pop	{r7, pc}
 80042a4:	20000000 	.word	0x20000000
 80042a8:	165e9f81 	.word	0x165e9f81

080042ac <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b082      	sub	sp, #8
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d101      	bne.n	80042be <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e042      	b.n	8004344 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80042c4:	b2db      	uxtb	r3, r3
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d106      	bne.n	80042d8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	2200      	movs	r2, #0
 80042ce:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80042d2:	6878      	ldr	r0, [r7, #4]
 80042d4:	f7fd f98e 	bl	80015f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2224      	movs	r2, #36	@ 0x24
 80042dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	68da      	ldr	r2, [r3, #12]
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042ee:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80042f0:	6878      	ldr	r0, [r7, #4]
 80042f2:	f000 f82b 	bl	800434c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	691a      	ldr	r2, [r3, #16]
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004304:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	695a      	ldr	r2, [r3, #20]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004314:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68da      	ldr	r2, [r3, #12]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004324:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	2200      	movs	r2, #0
 800432a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2220      	movs	r2, #32
 8004330:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2220      	movs	r2, #32
 8004338:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2200      	movs	r2, #0
 8004340:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004342:	2300      	movs	r3, #0
}
 8004344:	4618      	mov	r0, r3
 8004346:	3708      	adds	r7, #8
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800434c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004350:	b0c0      	sub	sp, #256	@ 0x100
 8004352:	af00      	add	r7, sp, #0
 8004354:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	691b      	ldr	r3, [r3, #16]
 8004360:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	68d9      	ldr	r1, [r3, #12]
 800436a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	ea40 0301 	orr.w	r3, r0, r1
 8004374:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800437a:	689a      	ldr	r2, [r3, #8]
 800437c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004380:	691b      	ldr	r3, [r3, #16]
 8004382:	431a      	orrs	r2, r3
 8004384:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	431a      	orrs	r2, r3
 800438c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004390:	69db      	ldr	r3, [r3, #28]
 8004392:	4313      	orrs	r3, r2
 8004394:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004398:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80043a4:	f021 010c 	bic.w	r1, r1, #12
 80043a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ac:	681a      	ldr	r2, [r3, #0]
 80043ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80043b2:	430b      	orrs	r3, r1
 80043b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80043b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80043c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043c6:	6999      	ldr	r1, [r3, #24]
 80043c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	ea40 0301 	orr.w	r3, r0, r1
 80043d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043d8:	681a      	ldr	r2, [r3, #0]
 80043da:	4b8f      	ldr	r3, [pc, #572]	@ (8004618 <UART_SetConfig+0x2cc>)
 80043dc:	429a      	cmp	r2, r3
 80043de:	d005      	beq.n	80043ec <UART_SetConfig+0xa0>
 80043e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043e4:	681a      	ldr	r2, [r3, #0]
 80043e6:	4b8d      	ldr	r3, [pc, #564]	@ (800461c <UART_SetConfig+0x2d0>)
 80043e8:	429a      	cmp	r2, r3
 80043ea:	d104      	bne.n	80043f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043ec:	f7fe f806 	bl	80023fc <HAL_RCC_GetPCLK2Freq>
 80043f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043f4:	e003      	b.n	80043fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043f6:	f7fd ffed 	bl	80023d4 <HAL_RCC_GetPCLK1Freq>
 80043fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004402:	69db      	ldr	r3, [r3, #28]
 8004404:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004408:	f040 810c 	bne.w	8004624 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800440c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004410:	2200      	movs	r2, #0
 8004412:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004416:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800441a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800441e:	4622      	mov	r2, r4
 8004420:	462b      	mov	r3, r5
 8004422:	1891      	adds	r1, r2, r2
 8004424:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004426:	415b      	adcs	r3, r3
 8004428:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800442a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800442e:	4621      	mov	r1, r4
 8004430:	eb12 0801 	adds.w	r8, r2, r1
 8004434:	4629      	mov	r1, r5
 8004436:	eb43 0901 	adc.w	r9, r3, r1
 800443a:	f04f 0200 	mov.w	r2, #0
 800443e:	f04f 0300 	mov.w	r3, #0
 8004442:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004446:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800444a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800444e:	4690      	mov	r8, r2
 8004450:	4699      	mov	r9, r3
 8004452:	4623      	mov	r3, r4
 8004454:	eb18 0303 	adds.w	r3, r8, r3
 8004458:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800445c:	462b      	mov	r3, r5
 800445e:	eb49 0303 	adc.w	r3, r9, r3
 8004462:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004466:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800446a:	685b      	ldr	r3, [r3, #4]
 800446c:	2200      	movs	r2, #0
 800446e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004472:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004476:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800447a:	460b      	mov	r3, r1
 800447c:	18db      	adds	r3, r3, r3
 800447e:	653b      	str	r3, [r7, #80]	@ 0x50
 8004480:	4613      	mov	r3, r2
 8004482:	eb42 0303 	adc.w	r3, r2, r3
 8004486:	657b      	str	r3, [r7, #84]	@ 0x54
 8004488:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800448c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004490:	f7fb ff0e 	bl	80002b0 <__aeabi_uldivmod>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	4b61      	ldr	r3, [pc, #388]	@ (8004620 <UART_SetConfig+0x2d4>)
 800449a:	fba3 2302 	umull	r2, r3, r3, r2
 800449e:	095b      	lsrs	r3, r3, #5
 80044a0:	011c      	lsls	r4, r3, #4
 80044a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80044a6:	2200      	movs	r2, #0
 80044a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80044b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80044b4:	4642      	mov	r2, r8
 80044b6:	464b      	mov	r3, r9
 80044b8:	1891      	adds	r1, r2, r2
 80044ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80044bc:	415b      	adcs	r3, r3
 80044be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80044c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80044c4:	4641      	mov	r1, r8
 80044c6:	eb12 0a01 	adds.w	sl, r2, r1
 80044ca:	4649      	mov	r1, r9
 80044cc:	eb43 0b01 	adc.w	fp, r3, r1
 80044d0:	f04f 0200 	mov.w	r2, #0
 80044d4:	f04f 0300 	mov.w	r3, #0
 80044d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044e4:	4692      	mov	sl, r2
 80044e6:	469b      	mov	fp, r3
 80044e8:	4643      	mov	r3, r8
 80044ea:	eb1a 0303 	adds.w	r3, sl, r3
 80044ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044f2:	464b      	mov	r3, r9
 80044f4:	eb4b 0303 	adc.w	r3, fp, r3
 80044f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004500:	685b      	ldr	r3, [r3, #4]
 8004502:	2200      	movs	r2, #0
 8004504:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004508:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 800450c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004510:	460b      	mov	r3, r1
 8004512:	18db      	adds	r3, r3, r3
 8004514:	643b      	str	r3, [r7, #64]	@ 0x40
 8004516:	4613      	mov	r3, r2
 8004518:	eb42 0303 	adc.w	r3, r2, r3
 800451c:	647b      	str	r3, [r7, #68]	@ 0x44
 800451e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004522:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004526:	f7fb fec3 	bl	80002b0 <__aeabi_uldivmod>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4611      	mov	r1, r2
 8004530:	4b3b      	ldr	r3, [pc, #236]	@ (8004620 <UART_SetConfig+0x2d4>)
 8004532:	fba3 2301 	umull	r2, r3, r3, r1
 8004536:	095b      	lsrs	r3, r3, #5
 8004538:	2264      	movs	r2, #100	@ 0x64
 800453a:	fb02 f303 	mul.w	r3, r2, r3
 800453e:	1acb      	subs	r3, r1, r3
 8004540:	00db      	lsls	r3, r3, #3
 8004542:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004546:	4b36      	ldr	r3, [pc, #216]	@ (8004620 <UART_SetConfig+0x2d4>)
 8004548:	fba3 2302 	umull	r2, r3, r3, r2
 800454c:	095b      	lsrs	r3, r3, #5
 800454e:	005b      	lsls	r3, r3, #1
 8004550:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004554:	441c      	add	r4, r3
 8004556:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800455a:	2200      	movs	r2, #0
 800455c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004560:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004564:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004568:	4642      	mov	r2, r8
 800456a:	464b      	mov	r3, r9
 800456c:	1891      	adds	r1, r2, r2
 800456e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004570:	415b      	adcs	r3, r3
 8004572:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004574:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004578:	4641      	mov	r1, r8
 800457a:	1851      	adds	r1, r2, r1
 800457c:	6339      	str	r1, [r7, #48]	@ 0x30
 800457e:	4649      	mov	r1, r9
 8004580:	414b      	adcs	r3, r1
 8004582:	637b      	str	r3, [r7, #52]	@ 0x34
 8004584:	f04f 0200 	mov.w	r2, #0
 8004588:	f04f 0300 	mov.w	r3, #0
 800458c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004590:	4659      	mov	r1, fp
 8004592:	00cb      	lsls	r3, r1, #3
 8004594:	4651      	mov	r1, sl
 8004596:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800459a:	4651      	mov	r1, sl
 800459c:	00ca      	lsls	r2, r1, #3
 800459e:	4610      	mov	r0, r2
 80045a0:	4619      	mov	r1, r3
 80045a2:	4603      	mov	r3, r0
 80045a4:	4642      	mov	r2, r8
 80045a6:	189b      	adds	r3, r3, r2
 80045a8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80045ac:	464b      	mov	r3, r9
 80045ae:	460a      	mov	r2, r1
 80045b0:	eb42 0303 	adc.w	r3, r2, r3
 80045b4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80045b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045bc:	685b      	ldr	r3, [r3, #4]
 80045be:	2200      	movs	r2, #0
 80045c0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80045c4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80045c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80045cc:	460b      	mov	r3, r1
 80045ce:	18db      	adds	r3, r3, r3
 80045d0:	62bb      	str	r3, [r7, #40]	@ 0x28
 80045d2:	4613      	mov	r3, r2
 80045d4:	eb42 0303 	adc.w	r3, r2, r3
 80045d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045e2:	f7fb fe65 	bl	80002b0 <__aeabi_uldivmod>
 80045e6:	4602      	mov	r2, r0
 80045e8:	460b      	mov	r3, r1
 80045ea:	4b0d      	ldr	r3, [pc, #52]	@ (8004620 <UART_SetConfig+0x2d4>)
 80045ec:	fba3 1302 	umull	r1, r3, r3, r2
 80045f0:	095b      	lsrs	r3, r3, #5
 80045f2:	2164      	movs	r1, #100	@ 0x64
 80045f4:	fb01 f303 	mul.w	r3, r1, r3
 80045f8:	1ad3      	subs	r3, r2, r3
 80045fa:	00db      	lsls	r3, r3, #3
 80045fc:	3332      	adds	r3, #50	@ 0x32
 80045fe:	4a08      	ldr	r2, [pc, #32]	@ (8004620 <UART_SetConfig+0x2d4>)
 8004600:	fba2 2303 	umull	r2, r3, r2, r3
 8004604:	095b      	lsrs	r3, r3, #5
 8004606:	f003 0207 	and.w	r2, r3, #7
 800460a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4422      	add	r2, r4
 8004612:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004614:	e106      	b.n	8004824 <UART_SetConfig+0x4d8>
 8004616:	bf00      	nop
 8004618:	40011000 	.word	0x40011000
 800461c:	40011400 	.word	0x40011400
 8004620:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004624:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004628:	2200      	movs	r2, #0
 800462a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800462e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004632:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004636:	4642      	mov	r2, r8
 8004638:	464b      	mov	r3, r9
 800463a:	1891      	adds	r1, r2, r2
 800463c:	6239      	str	r1, [r7, #32]
 800463e:	415b      	adcs	r3, r3
 8004640:	627b      	str	r3, [r7, #36]	@ 0x24
 8004642:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004646:	4641      	mov	r1, r8
 8004648:	1854      	adds	r4, r2, r1
 800464a:	4649      	mov	r1, r9
 800464c:	eb43 0501 	adc.w	r5, r3, r1
 8004650:	f04f 0200 	mov.w	r2, #0
 8004654:	f04f 0300 	mov.w	r3, #0
 8004658:	00eb      	lsls	r3, r5, #3
 800465a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800465e:	00e2      	lsls	r2, r4, #3
 8004660:	4614      	mov	r4, r2
 8004662:	461d      	mov	r5, r3
 8004664:	4643      	mov	r3, r8
 8004666:	18e3      	adds	r3, r4, r3
 8004668:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800466c:	464b      	mov	r3, r9
 800466e:	eb45 0303 	adc.w	r3, r5, r3
 8004672:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467a:	685b      	ldr	r3, [r3, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004682:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004686:	f04f 0200 	mov.w	r2, #0
 800468a:	f04f 0300 	mov.w	r3, #0
 800468e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004692:	4629      	mov	r1, r5
 8004694:	008b      	lsls	r3, r1, #2
 8004696:	4621      	mov	r1, r4
 8004698:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800469c:	4621      	mov	r1, r4
 800469e:	008a      	lsls	r2, r1, #2
 80046a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80046a4:	f7fb fe04 	bl	80002b0 <__aeabi_uldivmod>
 80046a8:	4602      	mov	r2, r0
 80046aa:	460b      	mov	r3, r1
 80046ac:	4b60      	ldr	r3, [pc, #384]	@ (8004830 <UART_SetConfig+0x4e4>)
 80046ae:	fba3 2302 	umull	r2, r3, r3, r2
 80046b2:	095b      	lsrs	r3, r3, #5
 80046b4:	011c      	lsls	r4, r3, #4
 80046b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80046ba:	2200      	movs	r2, #0
 80046bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80046c0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80046c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80046c8:	4642      	mov	r2, r8
 80046ca:	464b      	mov	r3, r9
 80046cc:	1891      	adds	r1, r2, r2
 80046ce:	61b9      	str	r1, [r7, #24]
 80046d0:	415b      	adcs	r3, r3
 80046d2:	61fb      	str	r3, [r7, #28]
 80046d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046d8:	4641      	mov	r1, r8
 80046da:	1851      	adds	r1, r2, r1
 80046dc:	6139      	str	r1, [r7, #16]
 80046de:	4649      	mov	r1, r9
 80046e0:	414b      	adcs	r3, r1
 80046e2:	617b      	str	r3, [r7, #20]
 80046e4:	f04f 0200 	mov.w	r2, #0
 80046e8:	f04f 0300 	mov.w	r3, #0
 80046ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046f0:	4659      	mov	r1, fp
 80046f2:	00cb      	lsls	r3, r1, #3
 80046f4:	4651      	mov	r1, sl
 80046f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046fa:	4651      	mov	r1, sl
 80046fc:	00ca      	lsls	r2, r1, #3
 80046fe:	4610      	mov	r0, r2
 8004700:	4619      	mov	r1, r3
 8004702:	4603      	mov	r3, r0
 8004704:	4642      	mov	r2, r8
 8004706:	189b      	adds	r3, r3, r2
 8004708:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 800470c:	464b      	mov	r3, r9
 800470e:	460a      	mov	r2, r1
 8004710:	eb42 0303 	adc.w	r3, r2, r3
 8004714:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004718:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	2200      	movs	r2, #0
 8004720:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004722:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004724:	f04f 0200 	mov.w	r2, #0
 8004728:	f04f 0300 	mov.w	r3, #0
 800472c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004730:	4649      	mov	r1, r9
 8004732:	008b      	lsls	r3, r1, #2
 8004734:	4641      	mov	r1, r8
 8004736:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800473a:	4641      	mov	r1, r8
 800473c:	008a      	lsls	r2, r1, #2
 800473e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004742:	f7fb fdb5 	bl	80002b0 <__aeabi_uldivmod>
 8004746:	4602      	mov	r2, r0
 8004748:	460b      	mov	r3, r1
 800474a:	4611      	mov	r1, r2
 800474c:	4b38      	ldr	r3, [pc, #224]	@ (8004830 <UART_SetConfig+0x4e4>)
 800474e:	fba3 2301 	umull	r2, r3, r3, r1
 8004752:	095b      	lsrs	r3, r3, #5
 8004754:	2264      	movs	r2, #100	@ 0x64
 8004756:	fb02 f303 	mul.w	r3, r2, r3
 800475a:	1acb      	subs	r3, r1, r3
 800475c:	011b      	lsls	r3, r3, #4
 800475e:	3332      	adds	r3, #50	@ 0x32
 8004760:	4a33      	ldr	r2, [pc, #204]	@ (8004830 <UART_SetConfig+0x4e4>)
 8004762:	fba2 2303 	umull	r2, r3, r2, r3
 8004766:	095b      	lsrs	r3, r3, #5
 8004768:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800476c:	441c      	add	r4, r3
 800476e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004772:	2200      	movs	r2, #0
 8004774:	673b      	str	r3, [r7, #112]	@ 0x70
 8004776:	677a      	str	r2, [r7, #116]	@ 0x74
 8004778:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800477c:	4642      	mov	r2, r8
 800477e:	464b      	mov	r3, r9
 8004780:	1891      	adds	r1, r2, r2
 8004782:	60b9      	str	r1, [r7, #8]
 8004784:	415b      	adcs	r3, r3
 8004786:	60fb      	str	r3, [r7, #12]
 8004788:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800478c:	4641      	mov	r1, r8
 800478e:	1851      	adds	r1, r2, r1
 8004790:	6039      	str	r1, [r7, #0]
 8004792:	4649      	mov	r1, r9
 8004794:	414b      	adcs	r3, r1
 8004796:	607b      	str	r3, [r7, #4]
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80047a4:	4659      	mov	r1, fp
 80047a6:	00cb      	lsls	r3, r1, #3
 80047a8:	4651      	mov	r1, sl
 80047aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80047ae:	4651      	mov	r1, sl
 80047b0:	00ca      	lsls	r2, r1, #3
 80047b2:	4610      	mov	r0, r2
 80047b4:	4619      	mov	r1, r3
 80047b6:	4603      	mov	r3, r0
 80047b8:	4642      	mov	r2, r8
 80047ba:	189b      	adds	r3, r3, r2
 80047bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80047be:	464b      	mov	r3, r9
 80047c0:	460a      	mov	r2, r1
 80047c2:	eb42 0303 	adc.w	r3, r2, r3
 80047c6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80047c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047cc:	685b      	ldr	r3, [r3, #4]
 80047ce:	2200      	movs	r2, #0
 80047d0:	663b      	str	r3, [r7, #96]	@ 0x60
 80047d2:	667a      	str	r2, [r7, #100]	@ 0x64
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047e0:	4649      	mov	r1, r9
 80047e2:	008b      	lsls	r3, r1, #2
 80047e4:	4641      	mov	r1, r8
 80047e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047ea:	4641      	mov	r1, r8
 80047ec:	008a      	lsls	r2, r1, #2
 80047ee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047f2:	f7fb fd5d 	bl	80002b0 <__aeabi_uldivmod>
 80047f6:	4602      	mov	r2, r0
 80047f8:	460b      	mov	r3, r1
 80047fa:	4b0d      	ldr	r3, [pc, #52]	@ (8004830 <UART_SetConfig+0x4e4>)
 80047fc:	fba3 1302 	umull	r1, r3, r3, r2
 8004800:	095b      	lsrs	r3, r3, #5
 8004802:	2164      	movs	r1, #100	@ 0x64
 8004804:	fb01 f303 	mul.w	r3, r1, r3
 8004808:	1ad3      	subs	r3, r2, r3
 800480a:	011b      	lsls	r3, r3, #4
 800480c:	3332      	adds	r3, #50	@ 0x32
 800480e:	4a08      	ldr	r2, [pc, #32]	@ (8004830 <UART_SetConfig+0x4e4>)
 8004810:	fba2 2303 	umull	r2, r3, r2, r3
 8004814:	095b      	lsrs	r3, r3, #5
 8004816:	f003 020f 	and.w	r2, r3, #15
 800481a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	4422      	add	r2, r4
 8004822:	609a      	str	r2, [r3, #8]
}
 8004824:	bf00      	nop
 8004826:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800482a:	46bd      	mov	sp, r7
 800482c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004830:	51eb851f 	.word	0x51eb851f

08004834 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004834:	b084      	sub	sp, #16
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	f107 001c 	add.w	r0, r7, #28
 8004842:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004846:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 800484a:	2b01      	cmp	r3, #1
 800484c:	d123      	bne.n	8004896 <USB_CoreInit+0x62>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004852:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68db      	ldr	r3, [r3, #12]
 800485e:	f423 0384 	bic.w	r3, r3, #4325376	@ 0x420000
 8004862:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004866:	687a      	ldr	r2, [r7, #4]
 8004868:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	68db      	ldr	r3, [r3, #12]
 800486e:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004876:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800487a:	2b01      	cmp	r3, #1
 800487c:	d105      	bne.n	800488a <USB_CoreInit+0x56>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	68db      	ldr	r3, [r3, #12]
 8004882:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f000 fa9a 	bl	8004dc4 <USB_CoreReset>
 8004890:	4603      	mov	r3, r0
 8004892:	73fb      	strb	r3, [r7, #15]
 8004894:	e01b      	b.n	80048ce <USB_CoreInit+0x9a>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	68db      	ldr	r3, [r3, #12]
 800489a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f000 fa8e 	bl	8004dc4 <USB_CoreReset>
 80048a8:	4603      	mov	r3, r0
 80048aa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80048ac:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d106      	bne.n	80048c2 <USB_CoreInit+0x8e>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048b8:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	639a      	str	r2, [r3, #56]	@ 0x38
 80048c0:	e005      	b.n	80048ce <USB_CoreInit+0x9a>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80048c6:	f423 3280 	bic.w	r2, r3, #65536	@ 0x10000
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80048ce:	7fbb      	ldrb	r3, [r7, #30]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d10b      	bne.n	80048ec <USB_CoreInit+0xb8>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	689b      	ldr	r3, [r3, #8]
 80048d8:	f043 0206 	orr.w	r2, r3, #6
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	f043 0220 	orr.w	r2, r3, #32
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80048ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80048ee:	4618      	mov	r0, r3
 80048f0:	3710      	adds	r7, #16
 80048f2:	46bd      	mov	sp, r7
 80048f4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80048f8:	b004      	add	sp, #16
 80048fa:	4770      	bx	lr

080048fc <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	689b      	ldr	r3, [r3, #8]
 8004908:	f023 0201 	bic.w	r2, r3, #1
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004910:	2300      	movs	r3, #0
}
 8004912:	4618      	mov	r0, r3
 8004914:	370c      	adds	r7, #12
 8004916:	46bd      	mov	sp, r7
 8004918:	f85d 7b04 	ldr.w	r7, [sp], #4
 800491c:	4770      	bx	lr

0800491e <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800491e:	b580      	push	{r7, lr}
 8004920:	b084      	sub	sp, #16
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	460b      	mov	r3, r1
 8004928:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800492a:	2300      	movs	r3, #0
 800492c:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	68db      	ldr	r3, [r3, #12]
 8004932:	f023 42c0 	bic.w	r2, r3, #1610612736	@ 0x60000000
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800493a:	78fb      	ldrb	r3, [r7, #3]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d115      	bne.n	800496c <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	68db      	ldr	r3, [r3, #12]
 8004944:	f043 5200 	orr.w	r2, r3, #536870912	@ 0x20000000
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800494c:	200a      	movs	r0, #10
 800494e:	f7fc ffd3 	bl	80018f8 <HAL_Delay>
      ms += 10U;
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	330a      	adds	r3, #10
 8004956:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 8004958:	6878      	ldr	r0, [r7, #4]
 800495a:	f000 fa25 	bl	8004da8 <USB_GetMode>
 800495e:	4603      	mov	r3, r0
 8004960:	2b01      	cmp	r3, #1
 8004962:	d01e      	beq.n	80049a2 <USB_SetCurrentMode+0x84>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	2bc7      	cmp	r3, #199	@ 0xc7
 8004968:	d9f0      	bls.n	800494c <USB_SetCurrentMode+0x2e>
 800496a:	e01a      	b.n	80049a2 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800496c:	78fb      	ldrb	r3, [r7, #3]
 800496e:	2b00      	cmp	r3, #0
 8004970:	d115      	bne.n	800499e <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	68db      	ldr	r3, [r3, #12]
 8004976:	f043 4280 	orr.w	r2, r3, #1073741824	@ 0x40000000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(10U);
 800497e:	200a      	movs	r0, #10
 8004980:	f7fc ffba 	bl	80018f8 <HAL_Delay>
      ms += 10U;
 8004984:	68fb      	ldr	r3, [r7, #12]
 8004986:	330a      	adds	r3, #10
 8004988:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < HAL_USB_CURRENT_MODE_MAX_DELAY_MS));
 800498a:	6878      	ldr	r0, [r7, #4]
 800498c:	f000 fa0c 	bl	8004da8 <USB_GetMode>
 8004990:	4603      	mov	r3, r0
 8004992:	2b00      	cmp	r3, #0
 8004994:	d005      	beq.n	80049a2 <USB_SetCurrentMode+0x84>
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	2bc7      	cmp	r3, #199	@ 0xc7
 800499a:	d9f0      	bls.n	800497e <USB_SetCurrentMode+0x60>
 800499c:	e001      	b.n	80049a2 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800499e:	2301      	movs	r3, #1
 80049a0:	e005      	b.n	80049ae <USB_SetCurrentMode+0x90>
  }

  if (ms == HAL_USB_CURRENT_MODE_MAX_DELAY_MS)
 80049a2:	68fb      	ldr	r3, [r7, #12]
 80049a4:	2bc8      	cmp	r3, #200	@ 0xc8
 80049a6:	d101      	bne.n	80049ac <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80049a8:	2301      	movs	r3, #1
 80049aa:	e000      	b.n	80049ae <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
	...

080049b8 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80049b8:	b084      	sub	sp, #16
 80049ba:	b580      	push	{r7, lr}
 80049bc:	b086      	sub	sp, #24
 80049be:	af00      	add	r7, sp, #0
 80049c0:	6078      	str	r0, [r7, #4]
 80049c2:	f107 0024 	add.w	r0, r7, #36	@ 0x24
 80049c6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80049ca:	2300      	movs	r3, #0
 80049cc:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80049d2:	2300      	movs	r3, #0
 80049d4:	613b      	str	r3, [r7, #16]
 80049d6:	e009      	b.n	80049ec <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	693b      	ldr	r3, [r7, #16]
 80049dc:	3340      	adds	r3, #64	@ 0x40
 80049de:	009b      	lsls	r3, r3, #2
 80049e0:	4413      	add	r3, r2
 80049e2:	2200      	movs	r2, #0
 80049e4:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80049e6:	693b      	ldr	r3, [r7, #16]
 80049e8:	3301      	adds	r3, #1
 80049ea:	613b      	str	r3, [r7, #16]
 80049ec:	693b      	ldr	r3, [r7, #16]
 80049ee:	2b0e      	cmp	r3, #14
 80049f0:	d9f2      	bls.n	80049d8 <USB_DevInit+0x20>

#if defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) \
 || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) \
 || defined(STM32F423xx)
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80049f2:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d11c      	bne.n	8004a34 <USB_DevInit+0x7c>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004a00:	685b      	ldr	r3, [r3, #4]
 8004a02:	68fa      	ldr	r2, [r7, #12]
 8004a04:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004a08:	f043 0302 	orr.w	r3, r3, #2
 8004a0c:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a12:	f423 1200 	bic.w	r2, r3, #2097152	@ 0x200000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	639a      	str	r2, [r3, #56]	@ 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f043 0280 	orr.w	r2, r3, #128	@ 0x80
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]
 8004a32:	e005      	b.n	8004a40 <USB_DevInit+0x88>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004a38:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	639a      	str	r2, [r3, #56]	@ 0x38
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) ||
          defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) ||
          defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004a46:	461a      	mov	r2, r3
 8004a48:	2300      	movs	r3, #0
 8004a4a:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004a4c:	f897 3029 	ldrb.w	r3, [r7, #41]	@ 0x29
 8004a50:	2b01      	cmp	r3, #1
 8004a52:	d10d      	bne.n	8004a70 <USB_DevInit+0xb8>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004a54:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d104      	bne.n	8004a66 <USB_DevInit+0xae>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004a5c:	2100      	movs	r1, #0
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f968 	bl	8004d34 <USB_SetDevSpeed>
 8004a64:	e008      	b.n	8004a78 <USB_DevInit+0xc0>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004a66:	2101      	movs	r1, #1
 8004a68:	6878      	ldr	r0, [r7, #4]
 8004a6a:	f000 f963 	bl	8004d34 <USB_SetDevSpeed>
 8004a6e:	e003      	b.n	8004a78 <USB_DevInit+0xc0>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004a70:	2103      	movs	r1, #3
 8004a72:	6878      	ldr	r0, [r7, #4]
 8004a74:	f000 f95e 	bl	8004d34 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004a78:	2110      	movs	r1, #16
 8004a7a:	6878      	ldr	r0, [r7, #4]
 8004a7c:	f000 f8fa 	bl	8004c74 <USB_FlushTxFifo>
 8004a80:	4603      	mov	r3, r0
 8004a82:	2b00      	cmp	r3, #0
 8004a84:	d001      	beq.n	8004a8a <USB_DevInit+0xd2>
  {
    ret = HAL_ERROR;
 8004a86:	2301      	movs	r3, #1
 8004a88:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004a8a:	6878      	ldr	r0, [r7, #4]
 8004a8c:	f000 f924 	bl	8004cd8 <USB_FlushRxFifo>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d001      	beq.n	8004a9a <USB_DevInit+0xe2>
  {
    ret = HAL_ERROR;
 8004a96:	2301      	movs	r3, #1
 8004a98:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004a9a:	68fb      	ldr	r3, [r7, #12]
 8004a9c:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aa0:	461a      	mov	r2, r3
 8004aa2:	2300      	movs	r3, #0
 8004aa4:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004aa6:	68fb      	ldr	r3, [r7, #12]
 8004aa8:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004aac:	461a      	mov	r2, r3
 8004aae:	2300      	movs	r3, #0
 8004ab0:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004ab8:	461a      	mov	r2, r3
 8004aba:	2300      	movs	r3, #0
 8004abc:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004abe:	2300      	movs	r3, #0
 8004ac0:	613b      	str	r3, [r7, #16]
 8004ac2:	e043      	b.n	8004b4c <USB_DevInit+0x194>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004ac4:	693b      	ldr	r3, [r7, #16]
 8004ac6:	015a      	lsls	r2, r3, #5
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	4413      	add	r3, r2
 8004acc:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004ad6:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004ada:	d118      	bne.n	8004b0e <USB_DevInit+0x156>
    {
      if (i == 0U)
 8004adc:	693b      	ldr	r3, [r7, #16]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d10a      	bne.n	8004af8 <USB_DevInit+0x140>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ae2:	693b      	ldr	r3, [r7, #16]
 8004ae4:	015a      	lsls	r2, r3, #5
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	4413      	add	r3, r2
 8004aea:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004aee:	461a      	mov	r2, r3
 8004af0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004af4:	6013      	str	r3, [r2, #0]
 8004af6:	e013      	b.n	8004b20 <USB_DevInit+0x168>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004af8:	693b      	ldr	r3, [r7, #16]
 8004afa:	015a      	lsls	r2, r3, #5
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	4413      	add	r3, r2
 8004b00:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b04:	461a      	mov	r2, r3
 8004b06:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004b0a:	6013      	str	r3, [r2, #0]
 8004b0c:	e008      	b.n	8004b20 <USB_DevInit+0x168>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004b0e:	693b      	ldr	r3, [r7, #16]
 8004b10:	015a      	lsls	r2, r3, #5
 8004b12:	68fb      	ldr	r3, [r7, #12]
 8004b14:	4413      	add	r3, r2
 8004b16:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b1a:	461a      	mov	r2, r3
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004b20:	693b      	ldr	r3, [r7, #16]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	2300      	movs	r3, #0
 8004b30:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	015a      	lsls	r2, r3, #5
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	4413      	add	r3, r2
 8004b3a:	f503 6310 	add.w	r3, r3, #2304	@ 0x900
 8004b3e:	461a      	mov	r2, r3
 8004b40:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004b44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b46:	693b      	ldr	r3, [r7, #16]
 8004b48:	3301      	adds	r3, #1
 8004b4a:	613b      	str	r3, [r7, #16]
 8004b4c:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004b50:	461a      	mov	r2, r3
 8004b52:	693b      	ldr	r3, [r7, #16]
 8004b54:	4293      	cmp	r3, r2
 8004b56:	d3b5      	bcc.n	8004ac4 <USB_DevInit+0x10c>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004b58:	2300      	movs	r3, #0
 8004b5a:	613b      	str	r3, [r7, #16]
 8004b5c:	e043      	b.n	8004be6 <USB_DevInit+0x22e>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b5e:	693b      	ldr	r3, [r7, #16]
 8004b60:	015a      	lsls	r2, r3, #5
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4413      	add	r3, r2
 8004b66:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 8004b70:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8004b74:	d118      	bne.n	8004ba8 <USB_DevInit+0x1f0>
    {
      if (i == 0U)
 8004b76:	693b      	ldr	r3, [r7, #16]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d10a      	bne.n	8004b92 <USB_DevInit+0x1da>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	015a      	lsls	r2, r3, #5
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	4413      	add	r3, r2
 8004b84:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b88:	461a      	mov	r2, r3
 8004b8a:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8004b8e:	6013      	str	r3, [r2, #0]
 8004b90:	e013      	b.n	8004bba <USB_DevInit+0x202>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004b92:	693b      	ldr	r3, [r7, #16]
 8004b94:	015a      	lsls	r2, r3, #5
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	4413      	add	r3, r2
 8004b9a:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004b9e:	461a      	mov	r2, r3
 8004ba0:	f04f 4390 	mov.w	r3, #1207959552	@ 0x48000000
 8004ba4:	6013      	str	r3, [r2, #0]
 8004ba6:	e008      	b.n	8004bba <USB_DevInit+0x202>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	015a      	lsls	r2, r3, #5
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	4413      	add	r3, r2
 8004bb0:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bb4:	461a      	mov	r2, r3
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004bba:	693b      	ldr	r3, [r7, #16]
 8004bbc:	015a      	lsls	r2, r3, #5
 8004bbe:	68fb      	ldr	r3, [r7, #12]
 8004bc0:	4413      	add	r3, r2
 8004bc2:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	2300      	movs	r3, #0
 8004bca:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004bcc:	693b      	ldr	r3, [r7, #16]
 8004bce:	015a      	lsls	r2, r3, #5
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	4413      	add	r3, r2
 8004bd4:	f503 6330 	add.w	r3, r3, #2816	@ 0xb00
 8004bd8:	461a      	mov	r2, r3
 8004bda:	f64f 337f 	movw	r3, #64383	@ 0xfb7f
 8004bde:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	3301      	adds	r3, #1
 8004be4:	613b      	str	r3, [r7, #16]
 8004be6:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 8004bea:	461a      	mov	r2, r3
 8004bec:	693b      	ldr	r3, [r7, #16]
 8004bee:	4293      	cmp	r3, r2
 8004bf0:	d3b5      	bcc.n	8004b5e <USB_DevInit+0x1a6>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004bf8:	691b      	ldr	r3, [r3, #16]
 8004bfa:	68fa      	ldr	r2, [r7, #12]
 8004bfc:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004c00:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004c04:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	f06f 4280 	mvn.w	r2, #1073741824	@ 0x40000000
 8004c12:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004c14:	f897 3026 	ldrb.w	r3, [r7, #38]	@ 0x26
 8004c18:	2b00      	cmp	r3, #0
 8004c1a:	d105      	bne.n	8004c28 <USB_DevInit+0x270>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	699b      	ldr	r3, [r3, #24]
 8004c20:	f043 0210 	orr.w	r2, r3, #16
 8004c24:	687b      	ldr	r3, [r7, #4]
 8004c26:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	699a      	ldr	r2, [r3, #24]
 8004c2c:	4b10      	ldr	r3, [pc, #64]	@ (8004c70 <USB_DevInit+0x2b8>)
 8004c2e:	4313      	orrs	r3, r2
 8004c30:	687a      	ldr	r2, [r7, #4]
 8004c32:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004c34:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d005      	beq.n	8004c48 <USB_DevInit+0x290>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	f043 0208 	orr.w	r2, r3, #8
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004c48:	f897 302e 	ldrb.w	r3, [r7, #46]	@ 0x2e
 8004c4c:	2b01      	cmp	r3, #1
 8004c4e:	d107      	bne.n	8004c60 <USB_DevInit+0x2a8>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	699b      	ldr	r3, [r3, #24]
 8004c54:	f043 4380 	orr.w	r3, r3, #1073741824	@ 0x40000000
 8004c58:	f043 0304 	orr.w	r3, r3, #4
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004c60:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c62:	4618      	mov	r0, r3
 8004c64:	3718      	adds	r7, #24
 8004c66:	46bd      	mov	sp, r7
 8004c68:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004c6c:	b004      	add	sp, #16
 8004c6e:	4770      	bx	lr
 8004c70:	803c3800 	.word	0x803c3800

08004c74 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004c74:	b480      	push	{r7}
 8004c76:	b085      	sub	sp, #20
 8004c78:	af00      	add	r7, sp, #0
 8004c7a:	6078      	str	r0, [r7, #4]
 8004c7c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	3301      	adds	r3, #1
 8004c86:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004c8e:	d901      	bls.n	8004c94 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004c90:	2303      	movs	r3, #3
 8004c92:	e01b      	b.n	8004ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	691b      	ldr	r3, [r3, #16]
 8004c98:	2b00      	cmp	r3, #0
 8004c9a:	daf2      	bge.n	8004c82 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004c9c:	2300      	movs	r3, #0
 8004c9e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	019b      	lsls	r3, r3, #6
 8004ca4:	f043 0220 	orr.w	r2, r3, #32
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	3301      	adds	r3, #1
 8004cb0:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cb8:	d901      	bls.n	8004cbe <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004cba:	2303      	movs	r3, #3
 8004cbc:	e006      	b.n	8004ccc <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	f003 0320 	and.w	r3, r3, #32
 8004cc6:	2b20      	cmp	r3, #32
 8004cc8:	d0f0      	beq.n	8004cac <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004cca:	2300      	movs	r3, #0
}
 8004ccc:	4618      	mov	r0, r3
 8004cce:	3714      	adds	r7, #20
 8004cd0:	46bd      	mov	sp, r7
 8004cd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd6:	4770      	bx	lr

08004cd8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004cd8:	b480      	push	{r7}
 8004cda:	b085      	sub	sp, #20
 8004cdc:	af00      	add	r7, sp, #0
 8004cde:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004ce0:	2300      	movs	r3, #0
 8004ce2:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	3301      	adds	r3, #1
 8004ce8:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004cf0:	d901      	bls.n	8004cf6 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e018      	b.n	8004d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	691b      	ldr	r3, [r3, #16]
 8004cfa:	2b00      	cmp	r3, #0
 8004cfc:	daf2      	bge.n	8004ce4 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004cfe:	2300      	movs	r3, #0
 8004d00:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004d02:	687b      	ldr	r3, [r7, #4]
 8004d04:	2210      	movs	r2, #16
 8004d06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	3301      	adds	r3, #1
 8004d0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004d0e:	68fb      	ldr	r3, [r7, #12]
 8004d10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004d14:	d901      	bls.n	8004d1a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004d16:	2303      	movs	r3, #3
 8004d18:	e006      	b.n	8004d28 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	691b      	ldr	r3, [r3, #16]
 8004d1e:	f003 0310 	and.w	r3, r3, #16
 8004d22:	2b10      	cmp	r3, #16
 8004d24:	d0f0      	beq.n	8004d08 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004d26:	2300      	movs	r3, #0
}
 8004d28:	4618      	mov	r0, r3
 8004d2a:	3714      	adds	r7, #20
 8004d2c:	46bd      	mov	sp, r7
 8004d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d32:	4770      	bx	lr

08004d34 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(const USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004d34:	b480      	push	{r7}
 8004d36:	b085      	sub	sp, #20
 8004d38:	af00      	add	r7, sp, #0
 8004d3a:	6078      	str	r0, [r7, #4]
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	78fb      	ldrb	r3, [r7, #3]
 8004d4e:	68f9      	ldr	r1, [r7, #12]
 8004d50:	f501 6100 	add.w	r1, r1, #2048	@ 0x800
 8004d54:	4313      	orrs	r3, r2
 8004d56:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004d58:	2300      	movs	r3, #0
}
 8004d5a:	4618      	mov	r0, r3
 8004d5c:	3714      	adds	r7, #20
 8004d5e:	46bd      	mov	sp, r7
 8004d60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d64:	4770      	bx	lr

08004d66 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevDisconnect(const USB_OTG_GlobalTypeDef *USBx)
{
 8004d66:	b480      	push	{r7}
 8004d68:	b085      	sub	sp, #20
 8004d6a:	af00      	add	r7, sp, #0
 8004d6c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	f503 6360 	add.w	r3, r3, #3584	@ 0xe00
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	68fa      	ldr	r2, [r7, #12]
 8004d7c:	f502 6260 	add.w	r2, r2, #3584	@ 0xe00
 8004d80:	f023 0303 	bic.w	r3, r3, #3
 8004d84:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	f503 6300 	add.w	r3, r3, #2048	@ 0x800
 8004d8c:	685b      	ldr	r3, [r3, #4]
 8004d8e:	68fa      	ldr	r2, [r7, #12]
 8004d90:	f502 6200 	add.w	r2, r2, #2048	@ 0x800
 8004d94:	f043 0302 	orr.w	r3, r3, #2
 8004d98:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d9a:	2300      	movs	r3, #0
}
 8004d9c:	4618      	mov	r0, r3
 8004d9e:	3714      	adds	r7, #20
 8004da0:	46bd      	mov	sp, r7
 8004da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004da6:	4770      	bx	lr

08004da8 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           1 : Host
  *           0 : Device
  */
uint32_t USB_GetMode(const USB_OTG_GlobalTypeDef *USBx)
{
 8004da8:	b480      	push	{r7}
 8004daa:	b083      	sub	sp, #12
 8004dac:	af00      	add	r7, sp, #0
 8004dae:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f003 0301 	and.w	r3, r3, #1
}
 8004db8:	4618      	mov	r0, r3
 8004dba:	370c      	adds	r7, #12
 8004dbc:	46bd      	mov	sp, r7
 8004dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc2:	4770      	bx	lr

08004dc4 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004dc4:	b480      	push	{r7}
 8004dc6:	b085      	sub	sp, #20
 8004dc8:	af00      	add	r7, sp, #0
 8004dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004dcc:	2300      	movs	r3, #0
 8004dce:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004dd0:	68fb      	ldr	r3, [r7, #12]
 8004dd2:	3301      	adds	r3, #1
 8004dd4:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004dd6:	68fb      	ldr	r3, [r7, #12]
 8004dd8:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004ddc:	d901      	bls.n	8004de2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004dde:	2303      	movs	r3, #3
 8004de0:	e022      	b.n	8004e28 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	691b      	ldr	r3, [r3, #16]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	daf2      	bge.n	8004dd0 <USB_CoreReset+0xc>

  count = 10U;
 8004dea:	230a      	movs	r3, #10
 8004dec:	60fb      	str	r3, [r7, #12]

  /* few cycles before setting core reset */
  while (count > 0U)
 8004dee:	e002      	b.n	8004df6 <USB_CoreReset+0x32>
  {
    count--;
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	3b01      	subs	r3, #1
 8004df4:	60fb      	str	r3, [r7, #12]
  while (count > 0U)
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d1f9      	bne.n	8004df0 <USB_CoreReset+0x2c>
  }

  /* Core Soft Reset */
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	691b      	ldr	r3, [r3, #16]
 8004e00:	f043 0201 	orr.w	r2, r3, #1
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	3301      	adds	r3, #1
 8004e0c:	60fb      	str	r3, [r7, #12]

    if (count > HAL_USB_TIMEOUT)
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	f1b3 6f70 	cmp.w	r3, #251658240	@ 0xf000000
 8004e14:	d901      	bls.n	8004e1a <USB_CoreReset+0x56>
    {
      return HAL_TIMEOUT;
 8004e16:	2303      	movs	r3, #3
 8004e18:	e006      	b.n	8004e28 <USB_CoreReset+0x64>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	691b      	ldr	r3, [r3, #16]
 8004e1e:	f003 0301 	and.w	r3, r3, #1
 8004e22:	2b01      	cmp	r3, #1
 8004e24:	d0f0      	beq.n	8004e08 <USB_CoreReset+0x44>

  return HAL_OK;
 8004e26:	2300      	movs	r3, #0
}
 8004e28:	4618      	mov	r0, r3
 8004e2a:	3714      	adds	r7, #20
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr

08004e34 <std>:
 8004e34:	2300      	movs	r3, #0
 8004e36:	b510      	push	{r4, lr}
 8004e38:	4604      	mov	r4, r0
 8004e3a:	e9c0 3300 	strd	r3, r3, [r0]
 8004e3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004e42:	6083      	str	r3, [r0, #8]
 8004e44:	8181      	strh	r1, [r0, #12]
 8004e46:	6643      	str	r3, [r0, #100]	@ 0x64
 8004e48:	81c2      	strh	r2, [r0, #14]
 8004e4a:	6183      	str	r3, [r0, #24]
 8004e4c:	4619      	mov	r1, r3
 8004e4e:	2208      	movs	r2, #8
 8004e50:	305c      	adds	r0, #92	@ 0x5c
 8004e52:	f000 fa2f 	bl	80052b4 <memset>
 8004e56:	4b0d      	ldr	r3, [pc, #52]	@ (8004e8c <std+0x58>)
 8004e58:	6263      	str	r3, [r4, #36]	@ 0x24
 8004e5a:	4b0d      	ldr	r3, [pc, #52]	@ (8004e90 <std+0x5c>)
 8004e5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004e5e:	4b0d      	ldr	r3, [pc, #52]	@ (8004e94 <std+0x60>)
 8004e60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004e62:	4b0d      	ldr	r3, [pc, #52]	@ (8004e98 <std+0x64>)
 8004e64:	6323      	str	r3, [r4, #48]	@ 0x30
 8004e66:	4b0d      	ldr	r3, [pc, #52]	@ (8004e9c <std+0x68>)
 8004e68:	6224      	str	r4, [r4, #32]
 8004e6a:	429c      	cmp	r4, r3
 8004e6c:	d006      	beq.n	8004e7c <std+0x48>
 8004e6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004e72:	4294      	cmp	r4, r2
 8004e74:	d002      	beq.n	8004e7c <std+0x48>
 8004e76:	33d0      	adds	r3, #208	@ 0xd0
 8004e78:	429c      	cmp	r4, r3
 8004e7a:	d105      	bne.n	8004e88 <std+0x54>
 8004e7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004e80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e84:	f000 ba8e 	b.w	80053a4 <__retarget_lock_init_recursive>
 8004e88:	bd10      	pop	{r4, pc}
 8004e8a:	bf00      	nop
 8004e8c:	08005105 	.word	0x08005105
 8004e90:	08005127 	.word	0x08005127
 8004e94:	0800515f 	.word	0x0800515f
 8004e98:	08005183 	.word	0x08005183
 8004e9c:	20000984 	.word	0x20000984

08004ea0 <stdio_exit_handler>:
 8004ea0:	4a02      	ldr	r2, [pc, #8]	@ (8004eac <stdio_exit_handler+0xc>)
 8004ea2:	4903      	ldr	r1, [pc, #12]	@ (8004eb0 <stdio_exit_handler+0x10>)
 8004ea4:	4803      	ldr	r0, [pc, #12]	@ (8004eb4 <stdio_exit_handler+0x14>)
 8004ea6:	f000 b869 	b.w	8004f7c <_fwalk_sglue>
 8004eaa:	bf00      	nop
 8004eac:	2000000c 	.word	0x2000000c
 8004eb0:	08005f0d 	.word	0x08005f0d
 8004eb4:	2000001c 	.word	0x2000001c

08004eb8 <cleanup_stdio>:
 8004eb8:	6841      	ldr	r1, [r0, #4]
 8004eba:	4b0c      	ldr	r3, [pc, #48]	@ (8004eec <cleanup_stdio+0x34>)
 8004ebc:	4299      	cmp	r1, r3
 8004ebe:	b510      	push	{r4, lr}
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	d001      	beq.n	8004ec8 <cleanup_stdio+0x10>
 8004ec4:	f001 f822 	bl	8005f0c <_fflush_r>
 8004ec8:	68a1      	ldr	r1, [r4, #8]
 8004eca:	4b09      	ldr	r3, [pc, #36]	@ (8004ef0 <cleanup_stdio+0x38>)
 8004ecc:	4299      	cmp	r1, r3
 8004ece:	d002      	beq.n	8004ed6 <cleanup_stdio+0x1e>
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	f001 f81b 	bl	8005f0c <_fflush_r>
 8004ed6:	68e1      	ldr	r1, [r4, #12]
 8004ed8:	4b06      	ldr	r3, [pc, #24]	@ (8004ef4 <cleanup_stdio+0x3c>)
 8004eda:	4299      	cmp	r1, r3
 8004edc:	d004      	beq.n	8004ee8 <cleanup_stdio+0x30>
 8004ede:	4620      	mov	r0, r4
 8004ee0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ee4:	f001 b812 	b.w	8005f0c <_fflush_r>
 8004ee8:	bd10      	pop	{r4, pc}
 8004eea:	bf00      	nop
 8004eec:	20000984 	.word	0x20000984
 8004ef0:	200009ec 	.word	0x200009ec
 8004ef4:	20000a54 	.word	0x20000a54

08004ef8 <global_stdio_init.part.0>:
 8004ef8:	b510      	push	{r4, lr}
 8004efa:	4b0b      	ldr	r3, [pc, #44]	@ (8004f28 <global_stdio_init.part.0+0x30>)
 8004efc:	4c0b      	ldr	r4, [pc, #44]	@ (8004f2c <global_stdio_init.part.0+0x34>)
 8004efe:	4a0c      	ldr	r2, [pc, #48]	@ (8004f30 <global_stdio_init.part.0+0x38>)
 8004f00:	601a      	str	r2, [r3, #0]
 8004f02:	4620      	mov	r0, r4
 8004f04:	2200      	movs	r2, #0
 8004f06:	2104      	movs	r1, #4
 8004f08:	f7ff ff94 	bl	8004e34 <std>
 8004f0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8004f10:	2201      	movs	r2, #1
 8004f12:	2109      	movs	r1, #9
 8004f14:	f7ff ff8e 	bl	8004e34 <std>
 8004f18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004f1c:	2202      	movs	r2, #2
 8004f1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f22:	2112      	movs	r1, #18
 8004f24:	f7ff bf86 	b.w	8004e34 <std>
 8004f28:	20000abc 	.word	0x20000abc
 8004f2c:	20000984 	.word	0x20000984
 8004f30:	08004ea1 	.word	0x08004ea1

08004f34 <__sfp_lock_acquire>:
 8004f34:	4801      	ldr	r0, [pc, #4]	@ (8004f3c <__sfp_lock_acquire+0x8>)
 8004f36:	f000 ba36 	b.w	80053a6 <__retarget_lock_acquire_recursive>
 8004f3a:	bf00      	nop
 8004f3c:	20000ac5 	.word	0x20000ac5

08004f40 <__sfp_lock_release>:
 8004f40:	4801      	ldr	r0, [pc, #4]	@ (8004f48 <__sfp_lock_release+0x8>)
 8004f42:	f000 ba31 	b.w	80053a8 <__retarget_lock_release_recursive>
 8004f46:	bf00      	nop
 8004f48:	20000ac5 	.word	0x20000ac5

08004f4c <__sinit>:
 8004f4c:	b510      	push	{r4, lr}
 8004f4e:	4604      	mov	r4, r0
 8004f50:	f7ff fff0 	bl	8004f34 <__sfp_lock_acquire>
 8004f54:	6a23      	ldr	r3, [r4, #32]
 8004f56:	b11b      	cbz	r3, 8004f60 <__sinit+0x14>
 8004f58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004f5c:	f7ff bff0 	b.w	8004f40 <__sfp_lock_release>
 8004f60:	4b04      	ldr	r3, [pc, #16]	@ (8004f74 <__sinit+0x28>)
 8004f62:	6223      	str	r3, [r4, #32]
 8004f64:	4b04      	ldr	r3, [pc, #16]	@ (8004f78 <__sinit+0x2c>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d1f5      	bne.n	8004f58 <__sinit+0xc>
 8004f6c:	f7ff ffc4 	bl	8004ef8 <global_stdio_init.part.0>
 8004f70:	e7f2      	b.n	8004f58 <__sinit+0xc>
 8004f72:	bf00      	nop
 8004f74:	08004eb9 	.word	0x08004eb9
 8004f78:	20000abc 	.word	0x20000abc

08004f7c <_fwalk_sglue>:
 8004f7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f80:	4607      	mov	r7, r0
 8004f82:	4688      	mov	r8, r1
 8004f84:	4614      	mov	r4, r2
 8004f86:	2600      	movs	r6, #0
 8004f88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f8c:	f1b9 0901 	subs.w	r9, r9, #1
 8004f90:	d505      	bpl.n	8004f9e <_fwalk_sglue+0x22>
 8004f92:	6824      	ldr	r4, [r4, #0]
 8004f94:	2c00      	cmp	r4, #0
 8004f96:	d1f7      	bne.n	8004f88 <_fwalk_sglue+0xc>
 8004f98:	4630      	mov	r0, r6
 8004f9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f9e:	89ab      	ldrh	r3, [r5, #12]
 8004fa0:	2b01      	cmp	r3, #1
 8004fa2:	d907      	bls.n	8004fb4 <_fwalk_sglue+0x38>
 8004fa4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004fa8:	3301      	adds	r3, #1
 8004faa:	d003      	beq.n	8004fb4 <_fwalk_sglue+0x38>
 8004fac:	4629      	mov	r1, r5
 8004fae:	4638      	mov	r0, r7
 8004fb0:	47c0      	blx	r8
 8004fb2:	4306      	orrs	r6, r0
 8004fb4:	3568      	adds	r5, #104	@ 0x68
 8004fb6:	e7e9      	b.n	8004f8c <_fwalk_sglue+0x10>

08004fb8 <iprintf>:
 8004fb8:	b40f      	push	{r0, r1, r2, r3}
 8004fba:	b507      	push	{r0, r1, r2, lr}
 8004fbc:	4906      	ldr	r1, [pc, #24]	@ (8004fd8 <iprintf+0x20>)
 8004fbe:	ab04      	add	r3, sp, #16
 8004fc0:	6808      	ldr	r0, [r1, #0]
 8004fc2:	f853 2b04 	ldr.w	r2, [r3], #4
 8004fc6:	6881      	ldr	r1, [r0, #8]
 8004fc8:	9301      	str	r3, [sp, #4]
 8004fca:	f000 fc77 	bl	80058bc <_vfiprintf_r>
 8004fce:	b003      	add	sp, #12
 8004fd0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004fd4:	b004      	add	sp, #16
 8004fd6:	4770      	bx	lr
 8004fd8:	20000018 	.word	0x20000018

08004fdc <_puts_r>:
 8004fdc:	6a03      	ldr	r3, [r0, #32]
 8004fde:	b570      	push	{r4, r5, r6, lr}
 8004fe0:	6884      	ldr	r4, [r0, #8]
 8004fe2:	4605      	mov	r5, r0
 8004fe4:	460e      	mov	r6, r1
 8004fe6:	b90b      	cbnz	r3, 8004fec <_puts_r+0x10>
 8004fe8:	f7ff ffb0 	bl	8004f4c <__sinit>
 8004fec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004fee:	07db      	lsls	r3, r3, #31
 8004ff0:	d405      	bmi.n	8004ffe <_puts_r+0x22>
 8004ff2:	89a3      	ldrh	r3, [r4, #12]
 8004ff4:	0598      	lsls	r0, r3, #22
 8004ff6:	d402      	bmi.n	8004ffe <_puts_r+0x22>
 8004ff8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004ffa:	f000 f9d4 	bl	80053a6 <__retarget_lock_acquire_recursive>
 8004ffe:	89a3      	ldrh	r3, [r4, #12]
 8005000:	0719      	lsls	r1, r3, #28
 8005002:	d502      	bpl.n	800500a <_puts_r+0x2e>
 8005004:	6923      	ldr	r3, [r4, #16]
 8005006:	2b00      	cmp	r3, #0
 8005008:	d135      	bne.n	8005076 <_puts_r+0x9a>
 800500a:	4621      	mov	r1, r4
 800500c:	4628      	mov	r0, r5
 800500e:	f000 f8fb 	bl	8005208 <__swsetup_r>
 8005012:	b380      	cbz	r0, 8005076 <_puts_r+0x9a>
 8005014:	f04f 35ff 	mov.w	r5, #4294967295
 8005018:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800501a:	07da      	lsls	r2, r3, #31
 800501c:	d405      	bmi.n	800502a <_puts_r+0x4e>
 800501e:	89a3      	ldrh	r3, [r4, #12]
 8005020:	059b      	lsls	r3, r3, #22
 8005022:	d402      	bmi.n	800502a <_puts_r+0x4e>
 8005024:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005026:	f000 f9bf 	bl	80053a8 <__retarget_lock_release_recursive>
 800502a:	4628      	mov	r0, r5
 800502c:	bd70      	pop	{r4, r5, r6, pc}
 800502e:	2b00      	cmp	r3, #0
 8005030:	da04      	bge.n	800503c <_puts_r+0x60>
 8005032:	69a2      	ldr	r2, [r4, #24]
 8005034:	429a      	cmp	r2, r3
 8005036:	dc17      	bgt.n	8005068 <_puts_r+0x8c>
 8005038:	290a      	cmp	r1, #10
 800503a:	d015      	beq.n	8005068 <_puts_r+0x8c>
 800503c:	6823      	ldr	r3, [r4, #0]
 800503e:	1c5a      	adds	r2, r3, #1
 8005040:	6022      	str	r2, [r4, #0]
 8005042:	7019      	strb	r1, [r3, #0]
 8005044:	68a3      	ldr	r3, [r4, #8]
 8005046:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800504a:	3b01      	subs	r3, #1
 800504c:	60a3      	str	r3, [r4, #8]
 800504e:	2900      	cmp	r1, #0
 8005050:	d1ed      	bne.n	800502e <_puts_r+0x52>
 8005052:	2b00      	cmp	r3, #0
 8005054:	da11      	bge.n	800507a <_puts_r+0x9e>
 8005056:	4622      	mov	r2, r4
 8005058:	210a      	movs	r1, #10
 800505a:	4628      	mov	r0, r5
 800505c:	f000 f895 	bl	800518a <__swbuf_r>
 8005060:	3001      	adds	r0, #1
 8005062:	d0d7      	beq.n	8005014 <_puts_r+0x38>
 8005064:	250a      	movs	r5, #10
 8005066:	e7d7      	b.n	8005018 <_puts_r+0x3c>
 8005068:	4622      	mov	r2, r4
 800506a:	4628      	mov	r0, r5
 800506c:	f000 f88d 	bl	800518a <__swbuf_r>
 8005070:	3001      	adds	r0, #1
 8005072:	d1e7      	bne.n	8005044 <_puts_r+0x68>
 8005074:	e7ce      	b.n	8005014 <_puts_r+0x38>
 8005076:	3e01      	subs	r6, #1
 8005078:	e7e4      	b.n	8005044 <_puts_r+0x68>
 800507a:	6823      	ldr	r3, [r4, #0]
 800507c:	1c5a      	adds	r2, r3, #1
 800507e:	6022      	str	r2, [r4, #0]
 8005080:	220a      	movs	r2, #10
 8005082:	701a      	strb	r2, [r3, #0]
 8005084:	e7ee      	b.n	8005064 <_puts_r+0x88>
	...

08005088 <puts>:
 8005088:	4b02      	ldr	r3, [pc, #8]	@ (8005094 <puts+0xc>)
 800508a:	4601      	mov	r1, r0
 800508c:	6818      	ldr	r0, [r3, #0]
 800508e:	f7ff bfa5 	b.w	8004fdc <_puts_r>
 8005092:	bf00      	nop
 8005094:	20000018 	.word	0x20000018

08005098 <sniprintf>:
 8005098:	b40c      	push	{r2, r3}
 800509a:	b530      	push	{r4, r5, lr}
 800509c:	4b18      	ldr	r3, [pc, #96]	@ (8005100 <sniprintf+0x68>)
 800509e:	1e0c      	subs	r4, r1, #0
 80050a0:	681d      	ldr	r5, [r3, #0]
 80050a2:	b09d      	sub	sp, #116	@ 0x74
 80050a4:	da08      	bge.n	80050b8 <sniprintf+0x20>
 80050a6:	238b      	movs	r3, #139	@ 0x8b
 80050a8:	602b      	str	r3, [r5, #0]
 80050aa:	f04f 30ff 	mov.w	r0, #4294967295
 80050ae:	b01d      	add	sp, #116	@ 0x74
 80050b0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 80050b4:	b002      	add	sp, #8
 80050b6:	4770      	bx	lr
 80050b8:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80050bc:	f8ad 3014 	strh.w	r3, [sp, #20]
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	931b      	str	r3, [sp, #108]	@ 0x6c
 80050c6:	bf14      	ite	ne
 80050c8:	f104 33ff 	addne.w	r3, r4, #4294967295
 80050cc:	4623      	moveq	r3, r4
 80050ce:	9304      	str	r3, [sp, #16]
 80050d0:	9307      	str	r3, [sp, #28]
 80050d2:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80050d6:	9002      	str	r0, [sp, #8]
 80050d8:	9006      	str	r0, [sp, #24]
 80050da:	f8ad 3016 	strh.w	r3, [sp, #22]
 80050de:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80050e0:	ab21      	add	r3, sp, #132	@ 0x84
 80050e2:	a902      	add	r1, sp, #8
 80050e4:	4628      	mov	r0, r5
 80050e6:	9301      	str	r3, [sp, #4]
 80050e8:	f000 fac2 	bl	8005670 <_svfiprintf_r>
 80050ec:	1c43      	adds	r3, r0, #1
 80050ee:	bfbc      	itt	lt
 80050f0:	238b      	movlt	r3, #139	@ 0x8b
 80050f2:	602b      	strlt	r3, [r5, #0]
 80050f4:	2c00      	cmp	r4, #0
 80050f6:	d0da      	beq.n	80050ae <sniprintf+0x16>
 80050f8:	9b02      	ldr	r3, [sp, #8]
 80050fa:	2200      	movs	r2, #0
 80050fc:	701a      	strb	r2, [r3, #0]
 80050fe:	e7d6      	b.n	80050ae <sniprintf+0x16>
 8005100:	20000018 	.word	0x20000018

08005104 <__sread>:
 8005104:	b510      	push	{r4, lr}
 8005106:	460c      	mov	r4, r1
 8005108:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800510c:	f000 f8fc 	bl	8005308 <_read_r>
 8005110:	2800      	cmp	r0, #0
 8005112:	bfab      	itete	ge
 8005114:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8005116:	89a3      	ldrhlt	r3, [r4, #12]
 8005118:	181b      	addge	r3, r3, r0
 800511a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800511e:	bfac      	ite	ge
 8005120:	6563      	strge	r3, [r4, #84]	@ 0x54
 8005122:	81a3      	strhlt	r3, [r4, #12]
 8005124:	bd10      	pop	{r4, pc}

08005126 <__swrite>:
 8005126:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800512a:	461f      	mov	r7, r3
 800512c:	898b      	ldrh	r3, [r1, #12]
 800512e:	05db      	lsls	r3, r3, #23
 8005130:	4605      	mov	r5, r0
 8005132:	460c      	mov	r4, r1
 8005134:	4616      	mov	r6, r2
 8005136:	d505      	bpl.n	8005144 <__swrite+0x1e>
 8005138:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800513c:	2302      	movs	r3, #2
 800513e:	2200      	movs	r2, #0
 8005140:	f000 f8d0 	bl	80052e4 <_lseek_r>
 8005144:	89a3      	ldrh	r3, [r4, #12]
 8005146:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800514a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800514e:	81a3      	strh	r3, [r4, #12]
 8005150:	4632      	mov	r2, r6
 8005152:	463b      	mov	r3, r7
 8005154:	4628      	mov	r0, r5
 8005156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800515a:	f000 b8e7 	b.w	800532c <_write_r>

0800515e <__sseek>:
 800515e:	b510      	push	{r4, lr}
 8005160:	460c      	mov	r4, r1
 8005162:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005166:	f000 f8bd 	bl	80052e4 <_lseek_r>
 800516a:	1c43      	adds	r3, r0, #1
 800516c:	89a3      	ldrh	r3, [r4, #12]
 800516e:	bf15      	itete	ne
 8005170:	6560      	strne	r0, [r4, #84]	@ 0x54
 8005172:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8005176:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800517a:	81a3      	strheq	r3, [r4, #12]
 800517c:	bf18      	it	ne
 800517e:	81a3      	strhne	r3, [r4, #12]
 8005180:	bd10      	pop	{r4, pc}

08005182 <__sclose>:
 8005182:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005186:	f000 b89d 	b.w	80052c4 <_close_r>

0800518a <__swbuf_r>:
 800518a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800518c:	460e      	mov	r6, r1
 800518e:	4614      	mov	r4, r2
 8005190:	4605      	mov	r5, r0
 8005192:	b118      	cbz	r0, 800519c <__swbuf_r+0x12>
 8005194:	6a03      	ldr	r3, [r0, #32]
 8005196:	b90b      	cbnz	r3, 800519c <__swbuf_r+0x12>
 8005198:	f7ff fed8 	bl	8004f4c <__sinit>
 800519c:	69a3      	ldr	r3, [r4, #24]
 800519e:	60a3      	str	r3, [r4, #8]
 80051a0:	89a3      	ldrh	r3, [r4, #12]
 80051a2:	071a      	lsls	r2, r3, #28
 80051a4:	d501      	bpl.n	80051aa <__swbuf_r+0x20>
 80051a6:	6923      	ldr	r3, [r4, #16]
 80051a8:	b943      	cbnz	r3, 80051bc <__swbuf_r+0x32>
 80051aa:	4621      	mov	r1, r4
 80051ac:	4628      	mov	r0, r5
 80051ae:	f000 f82b 	bl	8005208 <__swsetup_r>
 80051b2:	b118      	cbz	r0, 80051bc <__swbuf_r+0x32>
 80051b4:	f04f 37ff 	mov.w	r7, #4294967295
 80051b8:	4638      	mov	r0, r7
 80051ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80051bc:	6823      	ldr	r3, [r4, #0]
 80051be:	6922      	ldr	r2, [r4, #16]
 80051c0:	1a98      	subs	r0, r3, r2
 80051c2:	6963      	ldr	r3, [r4, #20]
 80051c4:	b2f6      	uxtb	r6, r6
 80051c6:	4283      	cmp	r3, r0
 80051c8:	4637      	mov	r7, r6
 80051ca:	dc05      	bgt.n	80051d8 <__swbuf_r+0x4e>
 80051cc:	4621      	mov	r1, r4
 80051ce:	4628      	mov	r0, r5
 80051d0:	f000 fe9c 	bl	8005f0c <_fflush_r>
 80051d4:	2800      	cmp	r0, #0
 80051d6:	d1ed      	bne.n	80051b4 <__swbuf_r+0x2a>
 80051d8:	68a3      	ldr	r3, [r4, #8]
 80051da:	3b01      	subs	r3, #1
 80051dc:	60a3      	str	r3, [r4, #8]
 80051de:	6823      	ldr	r3, [r4, #0]
 80051e0:	1c5a      	adds	r2, r3, #1
 80051e2:	6022      	str	r2, [r4, #0]
 80051e4:	701e      	strb	r6, [r3, #0]
 80051e6:	6962      	ldr	r2, [r4, #20]
 80051e8:	1c43      	adds	r3, r0, #1
 80051ea:	429a      	cmp	r2, r3
 80051ec:	d004      	beq.n	80051f8 <__swbuf_r+0x6e>
 80051ee:	89a3      	ldrh	r3, [r4, #12]
 80051f0:	07db      	lsls	r3, r3, #31
 80051f2:	d5e1      	bpl.n	80051b8 <__swbuf_r+0x2e>
 80051f4:	2e0a      	cmp	r6, #10
 80051f6:	d1df      	bne.n	80051b8 <__swbuf_r+0x2e>
 80051f8:	4621      	mov	r1, r4
 80051fa:	4628      	mov	r0, r5
 80051fc:	f000 fe86 	bl	8005f0c <_fflush_r>
 8005200:	2800      	cmp	r0, #0
 8005202:	d0d9      	beq.n	80051b8 <__swbuf_r+0x2e>
 8005204:	e7d6      	b.n	80051b4 <__swbuf_r+0x2a>
	...

08005208 <__swsetup_r>:
 8005208:	b538      	push	{r3, r4, r5, lr}
 800520a:	4b29      	ldr	r3, [pc, #164]	@ (80052b0 <__swsetup_r+0xa8>)
 800520c:	4605      	mov	r5, r0
 800520e:	6818      	ldr	r0, [r3, #0]
 8005210:	460c      	mov	r4, r1
 8005212:	b118      	cbz	r0, 800521c <__swsetup_r+0x14>
 8005214:	6a03      	ldr	r3, [r0, #32]
 8005216:	b90b      	cbnz	r3, 800521c <__swsetup_r+0x14>
 8005218:	f7ff fe98 	bl	8004f4c <__sinit>
 800521c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005220:	0719      	lsls	r1, r3, #28
 8005222:	d422      	bmi.n	800526a <__swsetup_r+0x62>
 8005224:	06da      	lsls	r2, r3, #27
 8005226:	d407      	bmi.n	8005238 <__swsetup_r+0x30>
 8005228:	2209      	movs	r2, #9
 800522a:	602a      	str	r2, [r5, #0]
 800522c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005230:	81a3      	strh	r3, [r4, #12]
 8005232:	f04f 30ff 	mov.w	r0, #4294967295
 8005236:	e033      	b.n	80052a0 <__swsetup_r+0x98>
 8005238:	0758      	lsls	r0, r3, #29
 800523a:	d512      	bpl.n	8005262 <__swsetup_r+0x5a>
 800523c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800523e:	b141      	cbz	r1, 8005252 <__swsetup_r+0x4a>
 8005240:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005244:	4299      	cmp	r1, r3
 8005246:	d002      	beq.n	800524e <__swsetup_r+0x46>
 8005248:	4628      	mov	r0, r5
 800524a:	f000 f8bd 	bl	80053c8 <_free_r>
 800524e:	2300      	movs	r3, #0
 8005250:	6363      	str	r3, [r4, #52]	@ 0x34
 8005252:	89a3      	ldrh	r3, [r4, #12]
 8005254:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005258:	81a3      	strh	r3, [r4, #12]
 800525a:	2300      	movs	r3, #0
 800525c:	6063      	str	r3, [r4, #4]
 800525e:	6923      	ldr	r3, [r4, #16]
 8005260:	6023      	str	r3, [r4, #0]
 8005262:	89a3      	ldrh	r3, [r4, #12]
 8005264:	f043 0308 	orr.w	r3, r3, #8
 8005268:	81a3      	strh	r3, [r4, #12]
 800526a:	6923      	ldr	r3, [r4, #16]
 800526c:	b94b      	cbnz	r3, 8005282 <__swsetup_r+0x7a>
 800526e:	89a3      	ldrh	r3, [r4, #12]
 8005270:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005274:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005278:	d003      	beq.n	8005282 <__swsetup_r+0x7a>
 800527a:	4621      	mov	r1, r4
 800527c:	4628      	mov	r0, r5
 800527e:	f000 fe93 	bl	8005fa8 <__smakebuf_r>
 8005282:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005286:	f013 0201 	ands.w	r2, r3, #1
 800528a:	d00a      	beq.n	80052a2 <__swsetup_r+0x9a>
 800528c:	2200      	movs	r2, #0
 800528e:	60a2      	str	r2, [r4, #8]
 8005290:	6962      	ldr	r2, [r4, #20]
 8005292:	4252      	negs	r2, r2
 8005294:	61a2      	str	r2, [r4, #24]
 8005296:	6922      	ldr	r2, [r4, #16]
 8005298:	b942      	cbnz	r2, 80052ac <__swsetup_r+0xa4>
 800529a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800529e:	d1c5      	bne.n	800522c <__swsetup_r+0x24>
 80052a0:	bd38      	pop	{r3, r4, r5, pc}
 80052a2:	0799      	lsls	r1, r3, #30
 80052a4:	bf58      	it	pl
 80052a6:	6962      	ldrpl	r2, [r4, #20]
 80052a8:	60a2      	str	r2, [r4, #8]
 80052aa:	e7f4      	b.n	8005296 <__swsetup_r+0x8e>
 80052ac:	2000      	movs	r0, #0
 80052ae:	e7f7      	b.n	80052a0 <__swsetup_r+0x98>
 80052b0:	20000018 	.word	0x20000018

080052b4 <memset>:
 80052b4:	4402      	add	r2, r0
 80052b6:	4603      	mov	r3, r0
 80052b8:	4293      	cmp	r3, r2
 80052ba:	d100      	bne.n	80052be <memset+0xa>
 80052bc:	4770      	bx	lr
 80052be:	f803 1b01 	strb.w	r1, [r3], #1
 80052c2:	e7f9      	b.n	80052b8 <memset+0x4>

080052c4 <_close_r>:
 80052c4:	b538      	push	{r3, r4, r5, lr}
 80052c6:	4d06      	ldr	r5, [pc, #24]	@ (80052e0 <_close_r+0x1c>)
 80052c8:	2300      	movs	r3, #0
 80052ca:	4604      	mov	r4, r0
 80052cc:	4608      	mov	r0, r1
 80052ce:	602b      	str	r3, [r5, #0]
 80052d0:	f7fc f8e9 	bl	80014a6 <_close>
 80052d4:	1c43      	adds	r3, r0, #1
 80052d6:	d102      	bne.n	80052de <_close_r+0x1a>
 80052d8:	682b      	ldr	r3, [r5, #0]
 80052da:	b103      	cbz	r3, 80052de <_close_r+0x1a>
 80052dc:	6023      	str	r3, [r4, #0]
 80052de:	bd38      	pop	{r3, r4, r5, pc}
 80052e0:	20000ac0 	.word	0x20000ac0

080052e4 <_lseek_r>:
 80052e4:	b538      	push	{r3, r4, r5, lr}
 80052e6:	4d07      	ldr	r5, [pc, #28]	@ (8005304 <_lseek_r+0x20>)
 80052e8:	4604      	mov	r4, r0
 80052ea:	4608      	mov	r0, r1
 80052ec:	4611      	mov	r1, r2
 80052ee:	2200      	movs	r2, #0
 80052f0:	602a      	str	r2, [r5, #0]
 80052f2:	461a      	mov	r2, r3
 80052f4:	f7fc f8fe 	bl	80014f4 <_lseek>
 80052f8:	1c43      	adds	r3, r0, #1
 80052fa:	d102      	bne.n	8005302 <_lseek_r+0x1e>
 80052fc:	682b      	ldr	r3, [r5, #0]
 80052fe:	b103      	cbz	r3, 8005302 <_lseek_r+0x1e>
 8005300:	6023      	str	r3, [r4, #0]
 8005302:	bd38      	pop	{r3, r4, r5, pc}
 8005304:	20000ac0 	.word	0x20000ac0

08005308 <_read_r>:
 8005308:	b538      	push	{r3, r4, r5, lr}
 800530a:	4d07      	ldr	r5, [pc, #28]	@ (8005328 <_read_r+0x20>)
 800530c:	4604      	mov	r4, r0
 800530e:	4608      	mov	r0, r1
 8005310:	4611      	mov	r1, r2
 8005312:	2200      	movs	r2, #0
 8005314:	602a      	str	r2, [r5, #0]
 8005316:	461a      	mov	r2, r3
 8005318:	f7fc f8a8 	bl	800146c <_read>
 800531c:	1c43      	adds	r3, r0, #1
 800531e:	d102      	bne.n	8005326 <_read_r+0x1e>
 8005320:	682b      	ldr	r3, [r5, #0]
 8005322:	b103      	cbz	r3, 8005326 <_read_r+0x1e>
 8005324:	6023      	str	r3, [r4, #0]
 8005326:	bd38      	pop	{r3, r4, r5, pc}
 8005328:	20000ac0 	.word	0x20000ac0

0800532c <_write_r>:
 800532c:	b538      	push	{r3, r4, r5, lr}
 800532e:	4d07      	ldr	r5, [pc, #28]	@ (800534c <_write_r+0x20>)
 8005330:	4604      	mov	r4, r0
 8005332:	4608      	mov	r0, r1
 8005334:	4611      	mov	r1, r2
 8005336:	2200      	movs	r2, #0
 8005338:	602a      	str	r2, [r5, #0]
 800533a:	461a      	mov	r2, r3
 800533c:	f7fb fdd8 	bl	8000ef0 <_write>
 8005340:	1c43      	adds	r3, r0, #1
 8005342:	d102      	bne.n	800534a <_write_r+0x1e>
 8005344:	682b      	ldr	r3, [r5, #0]
 8005346:	b103      	cbz	r3, 800534a <_write_r+0x1e>
 8005348:	6023      	str	r3, [r4, #0]
 800534a:	bd38      	pop	{r3, r4, r5, pc}
 800534c:	20000ac0 	.word	0x20000ac0

08005350 <__errno>:
 8005350:	4b01      	ldr	r3, [pc, #4]	@ (8005358 <__errno+0x8>)
 8005352:	6818      	ldr	r0, [r3, #0]
 8005354:	4770      	bx	lr
 8005356:	bf00      	nop
 8005358:	20000018 	.word	0x20000018

0800535c <__libc_init_array>:
 800535c:	b570      	push	{r4, r5, r6, lr}
 800535e:	4d0d      	ldr	r5, [pc, #52]	@ (8005394 <__libc_init_array+0x38>)
 8005360:	4c0d      	ldr	r4, [pc, #52]	@ (8005398 <__libc_init_array+0x3c>)
 8005362:	1b64      	subs	r4, r4, r5
 8005364:	10a4      	asrs	r4, r4, #2
 8005366:	2600      	movs	r6, #0
 8005368:	42a6      	cmp	r6, r4
 800536a:	d109      	bne.n	8005380 <__libc_init_array+0x24>
 800536c:	4d0b      	ldr	r5, [pc, #44]	@ (800539c <__libc_init_array+0x40>)
 800536e:	4c0c      	ldr	r4, [pc, #48]	@ (80053a0 <__libc_init_array+0x44>)
 8005370:	f000 fed8 	bl	8006124 <_init>
 8005374:	1b64      	subs	r4, r4, r5
 8005376:	10a4      	asrs	r4, r4, #2
 8005378:	2600      	movs	r6, #0
 800537a:	42a6      	cmp	r6, r4
 800537c:	d105      	bne.n	800538a <__libc_init_array+0x2e>
 800537e:	bd70      	pop	{r4, r5, r6, pc}
 8005380:	f855 3b04 	ldr.w	r3, [r5], #4
 8005384:	4798      	blx	r3
 8005386:	3601      	adds	r6, #1
 8005388:	e7ee      	b.n	8005368 <__libc_init_array+0xc>
 800538a:	f855 3b04 	ldr.w	r3, [r5], #4
 800538e:	4798      	blx	r3
 8005390:	3601      	adds	r6, #1
 8005392:	e7f2      	b.n	800537a <__libc_init_array+0x1e>
 8005394:	08006200 	.word	0x08006200
 8005398:	08006200 	.word	0x08006200
 800539c:	08006200 	.word	0x08006200
 80053a0:	08006204 	.word	0x08006204

080053a4 <__retarget_lock_init_recursive>:
 80053a4:	4770      	bx	lr

080053a6 <__retarget_lock_acquire_recursive>:
 80053a6:	4770      	bx	lr

080053a8 <__retarget_lock_release_recursive>:
 80053a8:	4770      	bx	lr

080053aa <memcpy>:
 80053aa:	440a      	add	r2, r1
 80053ac:	4291      	cmp	r1, r2
 80053ae:	f100 33ff 	add.w	r3, r0, #4294967295
 80053b2:	d100      	bne.n	80053b6 <memcpy+0xc>
 80053b4:	4770      	bx	lr
 80053b6:	b510      	push	{r4, lr}
 80053b8:	f811 4b01 	ldrb.w	r4, [r1], #1
 80053bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80053c0:	4291      	cmp	r1, r2
 80053c2:	d1f9      	bne.n	80053b8 <memcpy+0xe>
 80053c4:	bd10      	pop	{r4, pc}
	...

080053c8 <_free_r>:
 80053c8:	b538      	push	{r3, r4, r5, lr}
 80053ca:	4605      	mov	r5, r0
 80053cc:	2900      	cmp	r1, #0
 80053ce:	d041      	beq.n	8005454 <_free_r+0x8c>
 80053d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80053d4:	1f0c      	subs	r4, r1, #4
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	bfb8      	it	lt
 80053da:	18e4      	addlt	r4, r4, r3
 80053dc:	f000 f8e0 	bl	80055a0 <__malloc_lock>
 80053e0:	4a1d      	ldr	r2, [pc, #116]	@ (8005458 <_free_r+0x90>)
 80053e2:	6813      	ldr	r3, [r2, #0]
 80053e4:	b933      	cbnz	r3, 80053f4 <_free_r+0x2c>
 80053e6:	6063      	str	r3, [r4, #4]
 80053e8:	6014      	str	r4, [r2, #0]
 80053ea:	4628      	mov	r0, r5
 80053ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80053f0:	f000 b8dc 	b.w	80055ac <__malloc_unlock>
 80053f4:	42a3      	cmp	r3, r4
 80053f6:	d908      	bls.n	800540a <_free_r+0x42>
 80053f8:	6820      	ldr	r0, [r4, #0]
 80053fa:	1821      	adds	r1, r4, r0
 80053fc:	428b      	cmp	r3, r1
 80053fe:	bf01      	itttt	eq
 8005400:	6819      	ldreq	r1, [r3, #0]
 8005402:	685b      	ldreq	r3, [r3, #4]
 8005404:	1809      	addeq	r1, r1, r0
 8005406:	6021      	streq	r1, [r4, #0]
 8005408:	e7ed      	b.n	80053e6 <_free_r+0x1e>
 800540a:	461a      	mov	r2, r3
 800540c:	685b      	ldr	r3, [r3, #4]
 800540e:	b10b      	cbz	r3, 8005414 <_free_r+0x4c>
 8005410:	42a3      	cmp	r3, r4
 8005412:	d9fa      	bls.n	800540a <_free_r+0x42>
 8005414:	6811      	ldr	r1, [r2, #0]
 8005416:	1850      	adds	r0, r2, r1
 8005418:	42a0      	cmp	r0, r4
 800541a:	d10b      	bne.n	8005434 <_free_r+0x6c>
 800541c:	6820      	ldr	r0, [r4, #0]
 800541e:	4401      	add	r1, r0
 8005420:	1850      	adds	r0, r2, r1
 8005422:	4283      	cmp	r3, r0
 8005424:	6011      	str	r1, [r2, #0]
 8005426:	d1e0      	bne.n	80053ea <_free_r+0x22>
 8005428:	6818      	ldr	r0, [r3, #0]
 800542a:	685b      	ldr	r3, [r3, #4]
 800542c:	6053      	str	r3, [r2, #4]
 800542e:	4408      	add	r0, r1
 8005430:	6010      	str	r0, [r2, #0]
 8005432:	e7da      	b.n	80053ea <_free_r+0x22>
 8005434:	d902      	bls.n	800543c <_free_r+0x74>
 8005436:	230c      	movs	r3, #12
 8005438:	602b      	str	r3, [r5, #0]
 800543a:	e7d6      	b.n	80053ea <_free_r+0x22>
 800543c:	6820      	ldr	r0, [r4, #0]
 800543e:	1821      	adds	r1, r4, r0
 8005440:	428b      	cmp	r3, r1
 8005442:	bf04      	itt	eq
 8005444:	6819      	ldreq	r1, [r3, #0]
 8005446:	685b      	ldreq	r3, [r3, #4]
 8005448:	6063      	str	r3, [r4, #4]
 800544a:	bf04      	itt	eq
 800544c:	1809      	addeq	r1, r1, r0
 800544e:	6021      	streq	r1, [r4, #0]
 8005450:	6054      	str	r4, [r2, #4]
 8005452:	e7ca      	b.n	80053ea <_free_r+0x22>
 8005454:	bd38      	pop	{r3, r4, r5, pc}
 8005456:	bf00      	nop
 8005458:	20000acc 	.word	0x20000acc

0800545c <sbrk_aligned>:
 800545c:	b570      	push	{r4, r5, r6, lr}
 800545e:	4e0f      	ldr	r6, [pc, #60]	@ (800549c <sbrk_aligned+0x40>)
 8005460:	460c      	mov	r4, r1
 8005462:	6831      	ldr	r1, [r6, #0]
 8005464:	4605      	mov	r5, r0
 8005466:	b911      	cbnz	r1, 800546e <sbrk_aligned+0x12>
 8005468:	f000 fe16 	bl	8006098 <_sbrk_r>
 800546c:	6030      	str	r0, [r6, #0]
 800546e:	4621      	mov	r1, r4
 8005470:	4628      	mov	r0, r5
 8005472:	f000 fe11 	bl	8006098 <_sbrk_r>
 8005476:	1c43      	adds	r3, r0, #1
 8005478:	d103      	bne.n	8005482 <sbrk_aligned+0x26>
 800547a:	f04f 34ff 	mov.w	r4, #4294967295
 800547e:	4620      	mov	r0, r4
 8005480:	bd70      	pop	{r4, r5, r6, pc}
 8005482:	1cc4      	adds	r4, r0, #3
 8005484:	f024 0403 	bic.w	r4, r4, #3
 8005488:	42a0      	cmp	r0, r4
 800548a:	d0f8      	beq.n	800547e <sbrk_aligned+0x22>
 800548c:	1a21      	subs	r1, r4, r0
 800548e:	4628      	mov	r0, r5
 8005490:	f000 fe02 	bl	8006098 <_sbrk_r>
 8005494:	3001      	adds	r0, #1
 8005496:	d1f2      	bne.n	800547e <sbrk_aligned+0x22>
 8005498:	e7ef      	b.n	800547a <sbrk_aligned+0x1e>
 800549a:	bf00      	nop
 800549c:	20000ac8 	.word	0x20000ac8

080054a0 <_malloc_r>:
 80054a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80054a4:	1ccd      	adds	r5, r1, #3
 80054a6:	f025 0503 	bic.w	r5, r5, #3
 80054aa:	3508      	adds	r5, #8
 80054ac:	2d0c      	cmp	r5, #12
 80054ae:	bf38      	it	cc
 80054b0:	250c      	movcc	r5, #12
 80054b2:	2d00      	cmp	r5, #0
 80054b4:	4606      	mov	r6, r0
 80054b6:	db01      	blt.n	80054bc <_malloc_r+0x1c>
 80054b8:	42a9      	cmp	r1, r5
 80054ba:	d904      	bls.n	80054c6 <_malloc_r+0x26>
 80054bc:	230c      	movs	r3, #12
 80054be:	6033      	str	r3, [r6, #0]
 80054c0:	2000      	movs	r0, #0
 80054c2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80054c6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800559c <_malloc_r+0xfc>
 80054ca:	f000 f869 	bl	80055a0 <__malloc_lock>
 80054ce:	f8d8 3000 	ldr.w	r3, [r8]
 80054d2:	461c      	mov	r4, r3
 80054d4:	bb44      	cbnz	r4, 8005528 <_malloc_r+0x88>
 80054d6:	4629      	mov	r1, r5
 80054d8:	4630      	mov	r0, r6
 80054da:	f7ff ffbf 	bl	800545c <sbrk_aligned>
 80054de:	1c43      	adds	r3, r0, #1
 80054e0:	4604      	mov	r4, r0
 80054e2:	d158      	bne.n	8005596 <_malloc_r+0xf6>
 80054e4:	f8d8 4000 	ldr.w	r4, [r8]
 80054e8:	4627      	mov	r7, r4
 80054ea:	2f00      	cmp	r7, #0
 80054ec:	d143      	bne.n	8005576 <_malloc_r+0xd6>
 80054ee:	2c00      	cmp	r4, #0
 80054f0:	d04b      	beq.n	800558a <_malloc_r+0xea>
 80054f2:	6823      	ldr	r3, [r4, #0]
 80054f4:	4639      	mov	r1, r7
 80054f6:	4630      	mov	r0, r6
 80054f8:	eb04 0903 	add.w	r9, r4, r3
 80054fc:	f000 fdcc 	bl	8006098 <_sbrk_r>
 8005500:	4581      	cmp	r9, r0
 8005502:	d142      	bne.n	800558a <_malloc_r+0xea>
 8005504:	6821      	ldr	r1, [r4, #0]
 8005506:	1a6d      	subs	r5, r5, r1
 8005508:	4629      	mov	r1, r5
 800550a:	4630      	mov	r0, r6
 800550c:	f7ff ffa6 	bl	800545c <sbrk_aligned>
 8005510:	3001      	adds	r0, #1
 8005512:	d03a      	beq.n	800558a <_malloc_r+0xea>
 8005514:	6823      	ldr	r3, [r4, #0]
 8005516:	442b      	add	r3, r5
 8005518:	6023      	str	r3, [r4, #0]
 800551a:	f8d8 3000 	ldr.w	r3, [r8]
 800551e:	685a      	ldr	r2, [r3, #4]
 8005520:	bb62      	cbnz	r2, 800557c <_malloc_r+0xdc>
 8005522:	f8c8 7000 	str.w	r7, [r8]
 8005526:	e00f      	b.n	8005548 <_malloc_r+0xa8>
 8005528:	6822      	ldr	r2, [r4, #0]
 800552a:	1b52      	subs	r2, r2, r5
 800552c:	d420      	bmi.n	8005570 <_malloc_r+0xd0>
 800552e:	2a0b      	cmp	r2, #11
 8005530:	d917      	bls.n	8005562 <_malloc_r+0xc2>
 8005532:	1961      	adds	r1, r4, r5
 8005534:	42a3      	cmp	r3, r4
 8005536:	6025      	str	r5, [r4, #0]
 8005538:	bf18      	it	ne
 800553a:	6059      	strne	r1, [r3, #4]
 800553c:	6863      	ldr	r3, [r4, #4]
 800553e:	bf08      	it	eq
 8005540:	f8c8 1000 	streq.w	r1, [r8]
 8005544:	5162      	str	r2, [r4, r5]
 8005546:	604b      	str	r3, [r1, #4]
 8005548:	4630      	mov	r0, r6
 800554a:	f000 f82f 	bl	80055ac <__malloc_unlock>
 800554e:	f104 000b 	add.w	r0, r4, #11
 8005552:	1d23      	adds	r3, r4, #4
 8005554:	f020 0007 	bic.w	r0, r0, #7
 8005558:	1ac2      	subs	r2, r0, r3
 800555a:	bf1c      	itt	ne
 800555c:	1a1b      	subne	r3, r3, r0
 800555e:	50a3      	strne	r3, [r4, r2]
 8005560:	e7af      	b.n	80054c2 <_malloc_r+0x22>
 8005562:	6862      	ldr	r2, [r4, #4]
 8005564:	42a3      	cmp	r3, r4
 8005566:	bf0c      	ite	eq
 8005568:	f8c8 2000 	streq.w	r2, [r8]
 800556c:	605a      	strne	r2, [r3, #4]
 800556e:	e7eb      	b.n	8005548 <_malloc_r+0xa8>
 8005570:	4623      	mov	r3, r4
 8005572:	6864      	ldr	r4, [r4, #4]
 8005574:	e7ae      	b.n	80054d4 <_malloc_r+0x34>
 8005576:	463c      	mov	r4, r7
 8005578:	687f      	ldr	r7, [r7, #4]
 800557a:	e7b6      	b.n	80054ea <_malloc_r+0x4a>
 800557c:	461a      	mov	r2, r3
 800557e:	685b      	ldr	r3, [r3, #4]
 8005580:	42a3      	cmp	r3, r4
 8005582:	d1fb      	bne.n	800557c <_malloc_r+0xdc>
 8005584:	2300      	movs	r3, #0
 8005586:	6053      	str	r3, [r2, #4]
 8005588:	e7de      	b.n	8005548 <_malloc_r+0xa8>
 800558a:	230c      	movs	r3, #12
 800558c:	6033      	str	r3, [r6, #0]
 800558e:	4630      	mov	r0, r6
 8005590:	f000 f80c 	bl	80055ac <__malloc_unlock>
 8005594:	e794      	b.n	80054c0 <_malloc_r+0x20>
 8005596:	6005      	str	r5, [r0, #0]
 8005598:	e7d6      	b.n	8005548 <_malloc_r+0xa8>
 800559a:	bf00      	nop
 800559c:	20000acc 	.word	0x20000acc

080055a0 <__malloc_lock>:
 80055a0:	4801      	ldr	r0, [pc, #4]	@ (80055a8 <__malloc_lock+0x8>)
 80055a2:	f7ff bf00 	b.w	80053a6 <__retarget_lock_acquire_recursive>
 80055a6:	bf00      	nop
 80055a8:	20000ac4 	.word	0x20000ac4

080055ac <__malloc_unlock>:
 80055ac:	4801      	ldr	r0, [pc, #4]	@ (80055b4 <__malloc_unlock+0x8>)
 80055ae:	f7ff befb 	b.w	80053a8 <__retarget_lock_release_recursive>
 80055b2:	bf00      	nop
 80055b4:	20000ac4 	.word	0x20000ac4

080055b8 <__ssputs_r>:
 80055b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80055bc:	688e      	ldr	r6, [r1, #8]
 80055be:	461f      	mov	r7, r3
 80055c0:	42be      	cmp	r6, r7
 80055c2:	680b      	ldr	r3, [r1, #0]
 80055c4:	4682      	mov	sl, r0
 80055c6:	460c      	mov	r4, r1
 80055c8:	4690      	mov	r8, r2
 80055ca:	d82d      	bhi.n	8005628 <__ssputs_r+0x70>
 80055cc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80055d0:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80055d4:	d026      	beq.n	8005624 <__ssputs_r+0x6c>
 80055d6:	6965      	ldr	r5, [r4, #20]
 80055d8:	6909      	ldr	r1, [r1, #16]
 80055da:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 80055de:	eba3 0901 	sub.w	r9, r3, r1
 80055e2:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 80055e6:	1c7b      	adds	r3, r7, #1
 80055e8:	444b      	add	r3, r9
 80055ea:	106d      	asrs	r5, r5, #1
 80055ec:	429d      	cmp	r5, r3
 80055ee:	bf38      	it	cc
 80055f0:	461d      	movcc	r5, r3
 80055f2:	0553      	lsls	r3, r2, #21
 80055f4:	d527      	bpl.n	8005646 <__ssputs_r+0x8e>
 80055f6:	4629      	mov	r1, r5
 80055f8:	f7ff ff52 	bl	80054a0 <_malloc_r>
 80055fc:	4606      	mov	r6, r0
 80055fe:	b360      	cbz	r0, 800565a <__ssputs_r+0xa2>
 8005600:	6921      	ldr	r1, [r4, #16]
 8005602:	464a      	mov	r2, r9
 8005604:	f7ff fed1 	bl	80053aa <memcpy>
 8005608:	89a3      	ldrh	r3, [r4, #12]
 800560a:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800560e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005612:	81a3      	strh	r3, [r4, #12]
 8005614:	6126      	str	r6, [r4, #16]
 8005616:	6165      	str	r5, [r4, #20]
 8005618:	444e      	add	r6, r9
 800561a:	eba5 0509 	sub.w	r5, r5, r9
 800561e:	6026      	str	r6, [r4, #0]
 8005620:	60a5      	str	r5, [r4, #8]
 8005622:	463e      	mov	r6, r7
 8005624:	42be      	cmp	r6, r7
 8005626:	d900      	bls.n	800562a <__ssputs_r+0x72>
 8005628:	463e      	mov	r6, r7
 800562a:	6820      	ldr	r0, [r4, #0]
 800562c:	4632      	mov	r2, r6
 800562e:	4641      	mov	r1, r8
 8005630:	f000 fcf6 	bl	8006020 <memmove>
 8005634:	68a3      	ldr	r3, [r4, #8]
 8005636:	1b9b      	subs	r3, r3, r6
 8005638:	60a3      	str	r3, [r4, #8]
 800563a:	6823      	ldr	r3, [r4, #0]
 800563c:	4433      	add	r3, r6
 800563e:	6023      	str	r3, [r4, #0]
 8005640:	2000      	movs	r0, #0
 8005642:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005646:	462a      	mov	r2, r5
 8005648:	f000 fd36 	bl	80060b8 <_realloc_r>
 800564c:	4606      	mov	r6, r0
 800564e:	2800      	cmp	r0, #0
 8005650:	d1e0      	bne.n	8005614 <__ssputs_r+0x5c>
 8005652:	6921      	ldr	r1, [r4, #16]
 8005654:	4650      	mov	r0, sl
 8005656:	f7ff feb7 	bl	80053c8 <_free_r>
 800565a:	230c      	movs	r3, #12
 800565c:	f8ca 3000 	str.w	r3, [sl]
 8005660:	89a3      	ldrh	r3, [r4, #12]
 8005662:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005666:	81a3      	strh	r3, [r4, #12]
 8005668:	f04f 30ff 	mov.w	r0, #4294967295
 800566c:	e7e9      	b.n	8005642 <__ssputs_r+0x8a>
	...

08005670 <_svfiprintf_r>:
 8005670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005674:	4698      	mov	r8, r3
 8005676:	898b      	ldrh	r3, [r1, #12]
 8005678:	061b      	lsls	r3, r3, #24
 800567a:	b09d      	sub	sp, #116	@ 0x74
 800567c:	4607      	mov	r7, r0
 800567e:	460d      	mov	r5, r1
 8005680:	4614      	mov	r4, r2
 8005682:	d510      	bpl.n	80056a6 <_svfiprintf_r+0x36>
 8005684:	690b      	ldr	r3, [r1, #16]
 8005686:	b973      	cbnz	r3, 80056a6 <_svfiprintf_r+0x36>
 8005688:	2140      	movs	r1, #64	@ 0x40
 800568a:	f7ff ff09 	bl	80054a0 <_malloc_r>
 800568e:	6028      	str	r0, [r5, #0]
 8005690:	6128      	str	r0, [r5, #16]
 8005692:	b930      	cbnz	r0, 80056a2 <_svfiprintf_r+0x32>
 8005694:	230c      	movs	r3, #12
 8005696:	603b      	str	r3, [r7, #0]
 8005698:	f04f 30ff 	mov.w	r0, #4294967295
 800569c:	b01d      	add	sp, #116	@ 0x74
 800569e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80056a2:	2340      	movs	r3, #64	@ 0x40
 80056a4:	616b      	str	r3, [r5, #20]
 80056a6:	2300      	movs	r3, #0
 80056a8:	9309      	str	r3, [sp, #36]	@ 0x24
 80056aa:	2320      	movs	r3, #32
 80056ac:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80056b0:	f8cd 800c 	str.w	r8, [sp, #12]
 80056b4:	2330      	movs	r3, #48	@ 0x30
 80056b6:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8005854 <_svfiprintf_r+0x1e4>
 80056ba:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80056be:	f04f 0901 	mov.w	r9, #1
 80056c2:	4623      	mov	r3, r4
 80056c4:	469a      	mov	sl, r3
 80056c6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80056ca:	b10a      	cbz	r2, 80056d0 <_svfiprintf_r+0x60>
 80056cc:	2a25      	cmp	r2, #37	@ 0x25
 80056ce:	d1f9      	bne.n	80056c4 <_svfiprintf_r+0x54>
 80056d0:	ebba 0b04 	subs.w	fp, sl, r4
 80056d4:	d00b      	beq.n	80056ee <_svfiprintf_r+0x7e>
 80056d6:	465b      	mov	r3, fp
 80056d8:	4622      	mov	r2, r4
 80056da:	4629      	mov	r1, r5
 80056dc:	4638      	mov	r0, r7
 80056de:	f7ff ff6b 	bl	80055b8 <__ssputs_r>
 80056e2:	3001      	adds	r0, #1
 80056e4:	f000 80a7 	beq.w	8005836 <_svfiprintf_r+0x1c6>
 80056e8:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80056ea:	445a      	add	r2, fp
 80056ec:	9209      	str	r2, [sp, #36]	@ 0x24
 80056ee:	f89a 3000 	ldrb.w	r3, [sl]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	f000 809f 	beq.w	8005836 <_svfiprintf_r+0x1c6>
 80056f8:	2300      	movs	r3, #0
 80056fa:	f04f 32ff 	mov.w	r2, #4294967295
 80056fe:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005702:	f10a 0a01 	add.w	sl, sl, #1
 8005706:	9304      	str	r3, [sp, #16]
 8005708:	9307      	str	r3, [sp, #28]
 800570a:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800570e:	931a      	str	r3, [sp, #104]	@ 0x68
 8005710:	4654      	mov	r4, sl
 8005712:	2205      	movs	r2, #5
 8005714:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005718:	484e      	ldr	r0, [pc, #312]	@ (8005854 <_svfiprintf_r+0x1e4>)
 800571a:	f7fa fd79 	bl	8000210 <memchr>
 800571e:	9a04      	ldr	r2, [sp, #16]
 8005720:	b9d8      	cbnz	r0, 800575a <_svfiprintf_r+0xea>
 8005722:	06d0      	lsls	r0, r2, #27
 8005724:	bf44      	itt	mi
 8005726:	2320      	movmi	r3, #32
 8005728:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800572c:	0711      	lsls	r1, r2, #28
 800572e:	bf44      	itt	mi
 8005730:	232b      	movmi	r3, #43	@ 0x2b
 8005732:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005736:	f89a 3000 	ldrb.w	r3, [sl]
 800573a:	2b2a      	cmp	r3, #42	@ 0x2a
 800573c:	d015      	beq.n	800576a <_svfiprintf_r+0xfa>
 800573e:	9a07      	ldr	r2, [sp, #28]
 8005740:	4654      	mov	r4, sl
 8005742:	2000      	movs	r0, #0
 8005744:	f04f 0c0a 	mov.w	ip, #10
 8005748:	4621      	mov	r1, r4
 800574a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800574e:	3b30      	subs	r3, #48	@ 0x30
 8005750:	2b09      	cmp	r3, #9
 8005752:	d94b      	bls.n	80057ec <_svfiprintf_r+0x17c>
 8005754:	b1b0      	cbz	r0, 8005784 <_svfiprintf_r+0x114>
 8005756:	9207      	str	r2, [sp, #28]
 8005758:	e014      	b.n	8005784 <_svfiprintf_r+0x114>
 800575a:	eba0 0308 	sub.w	r3, r0, r8
 800575e:	fa09 f303 	lsl.w	r3, r9, r3
 8005762:	4313      	orrs	r3, r2
 8005764:	9304      	str	r3, [sp, #16]
 8005766:	46a2      	mov	sl, r4
 8005768:	e7d2      	b.n	8005710 <_svfiprintf_r+0xa0>
 800576a:	9b03      	ldr	r3, [sp, #12]
 800576c:	1d19      	adds	r1, r3, #4
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	9103      	str	r1, [sp, #12]
 8005772:	2b00      	cmp	r3, #0
 8005774:	bfbb      	ittet	lt
 8005776:	425b      	neglt	r3, r3
 8005778:	f042 0202 	orrlt.w	r2, r2, #2
 800577c:	9307      	strge	r3, [sp, #28]
 800577e:	9307      	strlt	r3, [sp, #28]
 8005780:	bfb8      	it	lt
 8005782:	9204      	strlt	r2, [sp, #16]
 8005784:	7823      	ldrb	r3, [r4, #0]
 8005786:	2b2e      	cmp	r3, #46	@ 0x2e
 8005788:	d10a      	bne.n	80057a0 <_svfiprintf_r+0x130>
 800578a:	7863      	ldrb	r3, [r4, #1]
 800578c:	2b2a      	cmp	r3, #42	@ 0x2a
 800578e:	d132      	bne.n	80057f6 <_svfiprintf_r+0x186>
 8005790:	9b03      	ldr	r3, [sp, #12]
 8005792:	1d1a      	adds	r2, r3, #4
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	9203      	str	r2, [sp, #12]
 8005798:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800579c:	3402      	adds	r4, #2
 800579e:	9305      	str	r3, [sp, #20]
 80057a0:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8005864 <_svfiprintf_r+0x1f4>
 80057a4:	7821      	ldrb	r1, [r4, #0]
 80057a6:	2203      	movs	r2, #3
 80057a8:	4650      	mov	r0, sl
 80057aa:	f7fa fd31 	bl	8000210 <memchr>
 80057ae:	b138      	cbz	r0, 80057c0 <_svfiprintf_r+0x150>
 80057b0:	9b04      	ldr	r3, [sp, #16]
 80057b2:	eba0 000a 	sub.w	r0, r0, sl
 80057b6:	2240      	movs	r2, #64	@ 0x40
 80057b8:	4082      	lsls	r2, r0
 80057ba:	4313      	orrs	r3, r2
 80057bc:	3401      	adds	r4, #1
 80057be:	9304      	str	r3, [sp, #16]
 80057c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80057c4:	4824      	ldr	r0, [pc, #144]	@ (8005858 <_svfiprintf_r+0x1e8>)
 80057c6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80057ca:	2206      	movs	r2, #6
 80057cc:	f7fa fd20 	bl	8000210 <memchr>
 80057d0:	2800      	cmp	r0, #0
 80057d2:	d036      	beq.n	8005842 <_svfiprintf_r+0x1d2>
 80057d4:	4b21      	ldr	r3, [pc, #132]	@ (800585c <_svfiprintf_r+0x1ec>)
 80057d6:	bb1b      	cbnz	r3, 8005820 <_svfiprintf_r+0x1b0>
 80057d8:	9b03      	ldr	r3, [sp, #12]
 80057da:	3307      	adds	r3, #7
 80057dc:	f023 0307 	bic.w	r3, r3, #7
 80057e0:	3308      	adds	r3, #8
 80057e2:	9303      	str	r3, [sp, #12]
 80057e4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057e6:	4433      	add	r3, r6
 80057e8:	9309      	str	r3, [sp, #36]	@ 0x24
 80057ea:	e76a      	b.n	80056c2 <_svfiprintf_r+0x52>
 80057ec:	fb0c 3202 	mla	r2, ip, r2, r3
 80057f0:	460c      	mov	r4, r1
 80057f2:	2001      	movs	r0, #1
 80057f4:	e7a8      	b.n	8005748 <_svfiprintf_r+0xd8>
 80057f6:	2300      	movs	r3, #0
 80057f8:	3401      	adds	r4, #1
 80057fa:	9305      	str	r3, [sp, #20]
 80057fc:	4619      	mov	r1, r3
 80057fe:	f04f 0c0a 	mov.w	ip, #10
 8005802:	4620      	mov	r0, r4
 8005804:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005808:	3a30      	subs	r2, #48	@ 0x30
 800580a:	2a09      	cmp	r2, #9
 800580c:	d903      	bls.n	8005816 <_svfiprintf_r+0x1a6>
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0c6      	beq.n	80057a0 <_svfiprintf_r+0x130>
 8005812:	9105      	str	r1, [sp, #20]
 8005814:	e7c4      	b.n	80057a0 <_svfiprintf_r+0x130>
 8005816:	fb0c 2101 	mla	r1, ip, r1, r2
 800581a:	4604      	mov	r4, r0
 800581c:	2301      	movs	r3, #1
 800581e:	e7f0      	b.n	8005802 <_svfiprintf_r+0x192>
 8005820:	ab03      	add	r3, sp, #12
 8005822:	9300      	str	r3, [sp, #0]
 8005824:	462a      	mov	r2, r5
 8005826:	4b0e      	ldr	r3, [pc, #56]	@ (8005860 <_svfiprintf_r+0x1f0>)
 8005828:	a904      	add	r1, sp, #16
 800582a:	4638      	mov	r0, r7
 800582c:	f3af 8000 	nop.w
 8005830:	1c42      	adds	r2, r0, #1
 8005832:	4606      	mov	r6, r0
 8005834:	d1d6      	bne.n	80057e4 <_svfiprintf_r+0x174>
 8005836:	89ab      	ldrh	r3, [r5, #12]
 8005838:	065b      	lsls	r3, r3, #25
 800583a:	f53f af2d 	bmi.w	8005698 <_svfiprintf_r+0x28>
 800583e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005840:	e72c      	b.n	800569c <_svfiprintf_r+0x2c>
 8005842:	ab03      	add	r3, sp, #12
 8005844:	9300      	str	r3, [sp, #0]
 8005846:	462a      	mov	r2, r5
 8005848:	4b05      	ldr	r3, [pc, #20]	@ (8005860 <_svfiprintf_r+0x1f0>)
 800584a:	a904      	add	r1, sp, #16
 800584c:	4638      	mov	r0, r7
 800584e:	f000 f9bb 	bl	8005bc8 <_printf_i>
 8005852:	e7ed      	b.n	8005830 <_svfiprintf_r+0x1c0>
 8005854:	080061c4 	.word	0x080061c4
 8005858:	080061ce 	.word	0x080061ce
 800585c:	00000000 	.word	0x00000000
 8005860:	080055b9 	.word	0x080055b9
 8005864:	080061ca 	.word	0x080061ca

08005868 <__sfputc_r>:
 8005868:	6893      	ldr	r3, [r2, #8]
 800586a:	3b01      	subs	r3, #1
 800586c:	2b00      	cmp	r3, #0
 800586e:	b410      	push	{r4}
 8005870:	6093      	str	r3, [r2, #8]
 8005872:	da08      	bge.n	8005886 <__sfputc_r+0x1e>
 8005874:	6994      	ldr	r4, [r2, #24]
 8005876:	42a3      	cmp	r3, r4
 8005878:	db01      	blt.n	800587e <__sfputc_r+0x16>
 800587a:	290a      	cmp	r1, #10
 800587c:	d103      	bne.n	8005886 <__sfputc_r+0x1e>
 800587e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005882:	f7ff bc82 	b.w	800518a <__swbuf_r>
 8005886:	6813      	ldr	r3, [r2, #0]
 8005888:	1c58      	adds	r0, r3, #1
 800588a:	6010      	str	r0, [r2, #0]
 800588c:	7019      	strb	r1, [r3, #0]
 800588e:	4608      	mov	r0, r1
 8005890:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005894:	4770      	bx	lr

08005896 <__sfputs_r>:
 8005896:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005898:	4606      	mov	r6, r0
 800589a:	460f      	mov	r7, r1
 800589c:	4614      	mov	r4, r2
 800589e:	18d5      	adds	r5, r2, r3
 80058a0:	42ac      	cmp	r4, r5
 80058a2:	d101      	bne.n	80058a8 <__sfputs_r+0x12>
 80058a4:	2000      	movs	r0, #0
 80058a6:	e007      	b.n	80058b8 <__sfputs_r+0x22>
 80058a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 80058ac:	463a      	mov	r2, r7
 80058ae:	4630      	mov	r0, r6
 80058b0:	f7ff ffda 	bl	8005868 <__sfputc_r>
 80058b4:	1c43      	adds	r3, r0, #1
 80058b6:	d1f3      	bne.n	80058a0 <__sfputs_r+0xa>
 80058b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080058bc <_vfiprintf_r>:
 80058bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80058c0:	460d      	mov	r5, r1
 80058c2:	b09d      	sub	sp, #116	@ 0x74
 80058c4:	4614      	mov	r4, r2
 80058c6:	4698      	mov	r8, r3
 80058c8:	4606      	mov	r6, r0
 80058ca:	b118      	cbz	r0, 80058d4 <_vfiprintf_r+0x18>
 80058cc:	6a03      	ldr	r3, [r0, #32]
 80058ce:	b90b      	cbnz	r3, 80058d4 <_vfiprintf_r+0x18>
 80058d0:	f7ff fb3c 	bl	8004f4c <__sinit>
 80058d4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058d6:	07d9      	lsls	r1, r3, #31
 80058d8:	d405      	bmi.n	80058e6 <_vfiprintf_r+0x2a>
 80058da:	89ab      	ldrh	r3, [r5, #12]
 80058dc:	059a      	lsls	r2, r3, #22
 80058de:	d402      	bmi.n	80058e6 <_vfiprintf_r+0x2a>
 80058e0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80058e2:	f7ff fd60 	bl	80053a6 <__retarget_lock_acquire_recursive>
 80058e6:	89ab      	ldrh	r3, [r5, #12]
 80058e8:	071b      	lsls	r3, r3, #28
 80058ea:	d501      	bpl.n	80058f0 <_vfiprintf_r+0x34>
 80058ec:	692b      	ldr	r3, [r5, #16]
 80058ee:	b99b      	cbnz	r3, 8005918 <_vfiprintf_r+0x5c>
 80058f0:	4629      	mov	r1, r5
 80058f2:	4630      	mov	r0, r6
 80058f4:	f7ff fc88 	bl	8005208 <__swsetup_r>
 80058f8:	b170      	cbz	r0, 8005918 <_vfiprintf_r+0x5c>
 80058fa:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80058fc:	07dc      	lsls	r4, r3, #31
 80058fe:	d504      	bpl.n	800590a <_vfiprintf_r+0x4e>
 8005900:	f04f 30ff 	mov.w	r0, #4294967295
 8005904:	b01d      	add	sp, #116	@ 0x74
 8005906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800590a:	89ab      	ldrh	r3, [r5, #12]
 800590c:	0598      	lsls	r0, r3, #22
 800590e:	d4f7      	bmi.n	8005900 <_vfiprintf_r+0x44>
 8005910:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005912:	f7ff fd49 	bl	80053a8 <__retarget_lock_release_recursive>
 8005916:	e7f3      	b.n	8005900 <_vfiprintf_r+0x44>
 8005918:	2300      	movs	r3, #0
 800591a:	9309      	str	r3, [sp, #36]	@ 0x24
 800591c:	2320      	movs	r3, #32
 800591e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005922:	f8cd 800c 	str.w	r8, [sp, #12]
 8005926:	2330      	movs	r3, #48	@ 0x30
 8005928:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005ad8 <_vfiprintf_r+0x21c>
 800592c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005930:	f04f 0901 	mov.w	r9, #1
 8005934:	4623      	mov	r3, r4
 8005936:	469a      	mov	sl, r3
 8005938:	f813 2b01 	ldrb.w	r2, [r3], #1
 800593c:	b10a      	cbz	r2, 8005942 <_vfiprintf_r+0x86>
 800593e:	2a25      	cmp	r2, #37	@ 0x25
 8005940:	d1f9      	bne.n	8005936 <_vfiprintf_r+0x7a>
 8005942:	ebba 0b04 	subs.w	fp, sl, r4
 8005946:	d00b      	beq.n	8005960 <_vfiprintf_r+0xa4>
 8005948:	465b      	mov	r3, fp
 800594a:	4622      	mov	r2, r4
 800594c:	4629      	mov	r1, r5
 800594e:	4630      	mov	r0, r6
 8005950:	f7ff ffa1 	bl	8005896 <__sfputs_r>
 8005954:	3001      	adds	r0, #1
 8005956:	f000 80a7 	beq.w	8005aa8 <_vfiprintf_r+0x1ec>
 800595a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800595c:	445a      	add	r2, fp
 800595e:	9209      	str	r2, [sp, #36]	@ 0x24
 8005960:	f89a 3000 	ldrb.w	r3, [sl]
 8005964:	2b00      	cmp	r3, #0
 8005966:	f000 809f 	beq.w	8005aa8 <_vfiprintf_r+0x1ec>
 800596a:	2300      	movs	r3, #0
 800596c:	f04f 32ff 	mov.w	r2, #4294967295
 8005970:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005974:	f10a 0a01 	add.w	sl, sl, #1
 8005978:	9304      	str	r3, [sp, #16]
 800597a:	9307      	str	r3, [sp, #28]
 800597c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005980:	931a      	str	r3, [sp, #104]	@ 0x68
 8005982:	4654      	mov	r4, sl
 8005984:	2205      	movs	r2, #5
 8005986:	f814 1b01 	ldrb.w	r1, [r4], #1
 800598a:	4853      	ldr	r0, [pc, #332]	@ (8005ad8 <_vfiprintf_r+0x21c>)
 800598c:	f7fa fc40 	bl	8000210 <memchr>
 8005990:	9a04      	ldr	r2, [sp, #16]
 8005992:	b9d8      	cbnz	r0, 80059cc <_vfiprintf_r+0x110>
 8005994:	06d1      	lsls	r1, r2, #27
 8005996:	bf44      	itt	mi
 8005998:	2320      	movmi	r3, #32
 800599a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800599e:	0713      	lsls	r3, r2, #28
 80059a0:	bf44      	itt	mi
 80059a2:	232b      	movmi	r3, #43	@ 0x2b
 80059a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80059a8:	f89a 3000 	ldrb.w	r3, [sl]
 80059ac:	2b2a      	cmp	r3, #42	@ 0x2a
 80059ae:	d015      	beq.n	80059dc <_vfiprintf_r+0x120>
 80059b0:	9a07      	ldr	r2, [sp, #28]
 80059b2:	4654      	mov	r4, sl
 80059b4:	2000      	movs	r0, #0
 80059b6:	f04f 0c0a 	mov.w	ip, #10
 80059ba:	4621      	mov	r1, r4
 80059bc:	f811 3b01 	ldrb.w	r3, [r1], #1
 80059c0:	3b30      	subs	r3, #48	@ 0x30
 80059c2:	2b09      	cmp	r3, #9
 80059c4:	d94b      	bls.n	8005a5e <_vfiprintf_r+0x1a2>
 80059c6:	b1b0      	cbz	r0, 80059f6 <_vfiprintf_r+0x13a>
 80059c8:	9207      	str	r2, [sp, #28]
 80059ca:	e014      	b.n	80059f6 <_vfiprintf_r+0x13a>
 80059cc:	eba0 0308 	sub.w	r3, r0, r8
 80059d0:	fa09 f303 	lsl.w	r3, r9, r3
 80059d4:	4313      	orrs	r3, r2
 80059d6:	9304      	str	r3, [sp, #16]
 80059d8:	46a2      	mov	sl, r4
 80059da:	e7d2      	b.n	8005982 <_vfiprintf_r+0xc6>
 80059dc:	9b03      	ldr	r3, [sp, #12]
 80059de:	1d19      	adds	r1, r3, #4
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	9103      	str	r1, [sp, #12]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	bfbb      	ittet	lt
 80059e8:	425b      	neglt	r3, r3
 80059ea:	f042 0202 	orrlt.w	r2, r2, #2
 80059ee:	9307      	strge	r3, [sp, #28]
 80059f0:	9307      	strlt	r3, [sp, #28]
 80059f2:	bfb8      	it	lt
 80059f4:	9204      	strlt	r2, [sp, #16]
 80059f6:	7823      	ldrb	r3, [r4, #0]
 80059f8:	2b2e      	cmp	r3, #46	@ 0x2e
 80059fa:	d10a      	bne.n	8005a12 <_vfiprintf_r+0x156>
 80059fc:	7863      	ldrb	r3, [r4, #1]
 80059fe:	2b2a      	cmp	r3, #42	@ 0x2a
 8005a00:	d132      	bne.n	8005a68 <_vfiprintf_r+0x1ac>
 8005a02:	9b03      	ldr	r3, [sp, #12]
 8005a04:	1d1a      	adds	r2, r3, #4
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	9203      	str	r2, [sp, #12]
 8005a0a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005a0e:	3402      	adds	r4, #2
 8005a10:	9305      	str	r3, [sp, #20]
 8005a12:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005ae8 <_vfiprintf_r+0x22c>
 8005a16:	7821      	ldrb	r1, [r4, #0]
 8005a18:	2203      	movs	r2, #3
 8005a1a:	4650      	mov	r0, sl
 8005a1c:	f7fa fbf8 	bl	8000210 <memchr>
 8005a20:	b138      	cbz	r0, 8005a32 <_vfiprintf_r+0x176>
 8005a22:	9b04      	ldr	r3, [sp, #16]
 8005a24:	eba0 000a 	sub.w	r0, r0, sl
 8005a28:	2240      	movs	r2, #64	@ 0x40
 8005a2a:	4082      	lsls	r2, r0
 8005a2c:	4313      	orrs	r3, r2
 8005a2e:	3401      	adds	r4, #1
 8005a30:	9304      	str	r3, [sp, #16]
 8005a32:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005a36:	4829      	ldr	r0, [pc, #164]	@ (8005adc <_vfiprintf_r+0x220>)
 8005a38:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005a3c:	2206      	movs	r2, #6
 8005a3e:	f7fa fbe7 	bl	8000210 <memchr>
 8005a42:	2800      	cmp	r0, #0
 8005a44:	d03f      	beq.n	8005ac6 <_vfiprintf_r+0x20a>
 8005a46:	4b26      	ldr	r3, [pc, #152]	@ (8005ae0 <_vfiprintf_r+0x224>)
 8005a48:	bb1b      	cbnz	r3, 8005a92 <_vfiprintf_r+0x1d6>
 8005a4a:	9b03      	ldr	r3, [sp, #12]
 8005a4c:	3307      	adds	r3, #7
 8005a4e:	f023 0307 	bic.w	r3, r3, #7
 8005a52:	3308      	adds	r3, #8
 8005a54:	9303      	str	r3, [sp, #12]
 8005a56:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a58:	443b      	add	r3, r7
 8005a5a:	9309      	str	r3, [sp, #36]	@ 0x24
 8005a5c:	e76a      	b.n	8005934 <_vfiprintf_r+0x78>
 8005a5e:	fb0c 3202 	mla	r2, ip, r2, r3
 8005a62:	460c      	mov	r4, r1
 8005a64:	2001      	movs	r0, #1
 8005a66:	e7a8      	b.n	80059ba <_vfiprintf_r+0xfe>
 8005a68:	2300      	movs	r3, #0
 8005a6a:	3401      	adds	r4, #1
 8005a6c:	9305      	str	r3, [sp, #20]
 8005a6e:	4619      	mov	r1, r3
 8005a70:	f04f 0c0a 	mov.w	ip, #10
 8005a74:	4620      	mov	r0, r4
 8005a76:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005a7a:	3a30      	subs	r2, #48	@ 0x30
 8005a7c:	2a09      	cmp	r2, #9
 8005a7e:	d903      	bls.n	8005a88 <_vfiprintf_r+0x1cc>
 8005a80:	2b00      	cmp	r3, #0
 8005a82:	d0c6      	beq.n	8005a12 <_vfiprintf_r+0x156>
 8005a84:	9105      	str	r1, [sp, #20]
 8005a86:	e7c4      	b.n	8005a12 <_vfiprintf_r+0x156>
 8005a88:	fb0c 2101 	mla	r1, ip, r1, r2
 8005a8c:	4604      	mov	r4, r0
 8005a8e:	2301      	movs	r3, #1
 8005a90:	e7f0      	b.n	8005a74 <_vfiprintf_r+0x1b8>
 8005a92:	ab03      	add	r3, sp, #12
 8005a94:	9300      	str	r3, [sp, #0]
 8005a96:	462a      	mov	r2, r5
 8005a98:	4b12      	ldr	r3, [pc, #72]	@ (8005ae4 <_vfiprintf_r+0x228>)
 8005a9a:	a904      	add	r1, sp, #16
 8005a9c:	4630      	mov	r0, r6
 8005a9e:	f3af 8000 	nop.w
 8005aa2:	4607      	mov	r7, r0
 8005aa4:	1c78      	adds	r0, r7, #1
 8005aa6:	d1d6      	bne.n	8005a56 <_vfiprintf_r+0x19a>
 8005aa8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005aaa:	07d9      	lsls	r1, r3, #31
 8005aac:	d405      	bmi.n	8005aba <_vfiprintf_r+0x1fe>
 8005aae:	89ab      	ldrh	r3, [r5, #12]
 8005ab0:	059a      	lsls	r2, r3, #22
 8005ab2:	d402      	bmi.n	8005aba <_vfiprintf_r+0x1fe>
 8005ab4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005ab6:	f7ff fc77 	bl	80053a8 <__retarget_lock_release_recursive>
 8005aba:	89ab      	ldrh	r3, [r5, #12]
 8005abc:	065b      	lsls	r3, r3, #25
 8005abe:	f53f af1f 	bmi.w	8005900 <_vfiprintf_r+0x44>
 8005ac2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005ac4:	e71e      	b.n	8005904 <_vfiprintf_r+0x48>
 8005ac6:	ab03      	add	r3, sp, #12
 8005ac8:	9300      	str	r3, [sp, #0]
 8005aca:	462a      	mov	r2, r5
 8005acc:	4b05      	ldr	r3, [pc, #20]	@ (8005ae4 <_vfiprintf_r+0x228>)
 8005ace:	a904      	add	r1, sp, #16
 8005ad0:	4630      	mov	r0, r6
 8005ad2:	f000 f879 	bl	8005bc8 <_printf_i>
 8005ad6:	e7e4      	b.n	8005aa2 <_vfiprintf_r+0x1e6>
 8005ad8:	080061c4 	.word	0x080061c4
 8005adc:	080061ce 	.word	0x080061ce
 8005ae0:	00000000 	.word	0x00000000
 8005ae4:	08005897 	.word	0x08005897
 8005ae8:	080061ca 	.word	0x080061ca

08005aec <_printf_common>:
 8005aec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005af0:	4616      	mov	r6, r2
 8005af2:	4698      	mov	r8, r3
 8005af4:	688a      	ldr	r2, [r1, #8]
 8005af6:	690b      	ldr	r3, [r1, #16]
 8005af8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005afc:	4293      	cmp	r3, r2
 8005afe:	bfb8      	it	lt
 8005b00:	4613      	movlt	r3, r2
 8005b02:	6033      	str	r3, [r6, #0]
 8005b04:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005b08:	4607      	mov	r7, r0
 8005b0a:	460c      	mov	r4, r1
 8005b0c:	b10a      	cbz	r2, 8005b12 <_printf_common+0x26>
 8005b0e:	3301      	adds	r3, #1
 8005b10:	6033      	str	r3, [r6, #0]
 8005b12:	6823      	ldr	r3, [r4, #0]
 8005b14:	0699      	lsls	r1, r3, #26
 8005b16:	bf42      	ittt	mi
 8005b18:	6833      	ldrmi	r3, [r6, #0]
 8005b1a:	3302      	addmi	r3, #2
 8005b1c:	6033      	strmi	r3, [r6, #0]
 8005b1e:	6825      	ldr	r5, [r4, #0]
 8005b20:	f015 0506 	ands.w	r5, r5, #6
 8005b24:	d106      	bne.n	8005b34 <_printf_common+0x48>
 8005b26:	f104 0a19 	add.w	sl, r4, #25
 8005b2a:	68e3      	ldr	r3, [r4, #12]
 8005b2c:	6832      	ldr	r2, [r6, #0]
 8005b2e:	1a9b      	subs	r3, r3, r2
 8005b30:	42ab      	cmp	r3, r5
 8005b32:	dc26      	bgt.n	8005b82 <_printf_common+0x96>
 8005b34:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005b38:	6822      	ldr	r2, [r4, #0]
 8005b3a:	3b00      	subs	r3, #0
 8005b3c:	bf18      	it	ne
 8005b3e:	2301      	movne	r3, #1
 8005b40:	0692      	lsls	r2, r2, #26
 8005b42:	d42b      	bmi.n	8005b9c <_printf_common+0xb0>
 8005b44:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005b48:	4641      	mov	r1, r8
 8005b4a:	4638      	mov	r0, r7
 8005b4c:	47c8      	blx	r9
 8005b4e:	3001      	adds	r0, #1
 8005b50:	d01e      	beq.n	8005b90 <_printf_common+0xa4>
 8005b52:	6823      	ldr	r3, [r4, #0]
 8005b54:	6922      	ldr	r2, [r4, #16]
 8005b56:	f003 0306 	and.w	r3, r3, #6
 8005b5a:	2b04      	cmp	r3, #4
 8005b5c:	bf02      	ittt	eq
 8005b5e:	68e5      	ldreq	r5, [r4, #12]
 8005b60:	6833      	ldreq	r3, [r6, #0]
 8005b62:	1aed      	subeq	r5, r5, r3
 8005b64:	68a3      	ldr	r3, [r4, #8]
 8005b66:	bf0c      	ite	eq
 8005b68:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005b6c:	2500      	movne	r5, #0
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	bfc4      	itt	gt
 8005b72:	1a9b      	subgt	r3, r3, r2
 8005b74:	18ed      	addgt	r5, r5, r3
 8005b76:	2600      	movs	r6, #0
 8005b78:	341a      	adds	r4, #26
 8005b7a:	42b5      	cmp	r5, r6
 8005b7c:	d11a      	bne.n	8005bb4 <_printf_common+0xc8>
 8005b7e:	2000      	movs	r0, #0
 8005b80:	e008      	b.n	8005b94 <_printf_common+0xa8>
 8005b82:	2301      	movs	r3, #1
 8005b84:	4652      	mov	r2, sl
 8005b86:	4641      	mov	r1, r8
 8005b88:	4638      	mov	r0, r7
 8005b8a:	47c8      	blx	r9
 8005b8c:	3001      	adds	r0, #1
 8005b8e:	d103      	bne.n	8005b98 <_printf_common+0xac>
 8005b90:	f04f 30ff 	mov.w	r0, #4294967295
 8005b94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005b98:	3501      	adds	r5, #1
 8005b9a:	e7c6      	b.n	8005b2a <_printf_common+0x3e>
 8005b9c:	18e1      	adds	r1, r4, r3
 8005b9e:	1c5a      	adds	r2, r3, #1
 8005ba0:	2030      	movs	r0, #48	@ 0x30
 8005ba2:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005ba6:	4422      	add	r2, r4
 8005ba8:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005bac:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005bb0:	3302      	adds	r3, #2
 8005bb2:	e7c7      	b.n	8005b44 <_printf_common+0x58>
 8005bb4:	2301      	movs	r3, #1
 8005bb6:	4622      	mov	r2, r4
 8005bb8:	4641      	mov	r1, r8
 8005bba:	4638      	mov	r0, r7
 8005bbc:	47c8      	blx	r9
 8005bbe:	3001      	adds	r0, #1
 8005bc0:	d0e6      	beq.n	8005b90 <_printf_common+0xa4>
 8005bc2:	3601      	adds	r6, #1
 8005bc4:	e7d9      	b.n	8005b7a <_printf_common+0x8e>
	...

08005bc8 <_printf_i>:
 8005bc8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005bcc:	7e0f      	ldrb	r7, [r1, #24]
 8005bce:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005bd0:	2f78      	cmp	r7, #120	@ 0x78
 8005bd2:	4691      	mov	r9, r2
 8005bd4:	4680      	mov	r8, r0
 8005bd6:	460c      	mov	r4, r1
 8005bd8:	469a      	mov	sl, r3
 8005bda:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005bde:	d807      	bhi.n	8005bf0 <_printf_i+0x28>
 8005be0:	2f62      	cmp	r7, #98	@ 0x62
 8005be2:	d80a      	bhi.n	8005bfa <_printf_i+0x32>
 8005be4:	2f00      	cmp	r7, #0
 8005be6:	f000 80d1 	beq.w	8005d8c <_printf_i+0x1c4>
 8005bea:	2f58      	cmp	r7, #88	@ 0x58
 8005bec:	f000 80b8 	beq.w	8005d60 <_printf_i+0x198>
 8005bf0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005bf4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005bf8:	e03a      	b.n	8005c70 <_printf_i+0xa8>
 8005bfa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005bfe:	2b15      	cmp	r3, #21
 8005c00:	d8f6      	bhi.n	8005bf0 <_printf_i+0x28>
 8005c02:	a101      	add	r1, pc, #4	@ (adr r1, 8005c08 <_printf_i+0x40>)
 8005c04:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005c08:	08005c61 	.word	0x08005c61
 8005c0c:	08005c75 	.word	0x08005c75
 8005c10:	08005bf1 	.word	0x08005bf1
 8005c14:	08005bf1 	.word	0x08005bf1
 8005c18:	08005bf1 	.word	0x08005bf1
 8005c1c:	08005bf1 	.word	0x08005bf1
 8005c20:	08005c75 	.word	0x08005c75
 8005c24:	08005bf1 	.word	0x08005bf1
 8005c28:	08005bf1 	.word	0x08005bf1
 8005c2c:	08005bf1 	.word	0x08005bf1
 8005c30:	08005bf1 	.word	0x08005bf1
 8005c34:	08005d73 	.word	0x08005d73
 8005c38:	08005c9f 	.word	0x08005c9f
 8005c3c:	08005d2d 	.word	0x08005d2d
 8005c40:	08005bf1 	.word	0x08005bf1
 8005c44:	08005bf1 	.word	0x08005bf1
 8005c48:	08005d95 	.word	0x08005d95
 8005c4c:	08005bf1 	.word	0x08005bf1
 8005c50:	08005c9f 	.word	0x08005c9f
 8005c54:	08005bf1 	.word	0x08005bf1
 8005c58:	08005bf1 	.word	0x08005bf1
 8005c5c:	08005d35 	.word	0x08005d35
 8005c60:	6833      	ldr	r3, [r6, #0]
 8005c62:	1d1a      	adds	r2, r3, #4
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	6032      	str	r2, [r6, #0]
 8005c68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005c6c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005c70:	2301      	movs	r3, #1
 8005c72:	e09c      	b.n	8005dae <_printf_i+0x1e6>
 8005c74:	6833      	ldr	r3, [r6, #0]
 8005c76:	6820      	ldr	r0, [r4, #0]
 8005c78:	1d19      	adds	r1, r3, #4
 8005c7a:	6031      	str	r1, [r6, #0]
 8005c7c:	0606      	lsls	r6, r0, #24
 8005c7e:	d501      	bpl.n	8005c84 <_printf_i+0xbc>
 8005c80:	681d      	ldr	r5, [r3, #0]
 8005c82:	e003      	b.n	8005c8c <_printf_i+0xc4>
 8005c84:	0645      	lsls	r5, r0, #25
 8005c86:	d5fb      	bpl.n	8005c80 <_printf_i+0xb8>
 8005c88:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005c8c:	2d00      	cmp	r5, #0
 8005c8e:	da03      	bge.n	8005c98 <_printf_i+0xd0>
 8005c90:	232d      	movs	r3, #45	@ 0x2d
 8005c92:	426d      	negs	r5, r5
 8005c94:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005c98:	4858      	ldr	r0, [pc, #352]	@ (8005dfc <_printf_i+0x234>)
 8005c9a:	230a      	movs	r3, #10
 8005c9c:	e011      	b.n	8005cc2 <_printf_i+0xfa>
 8005c9e:	6821      	ldr	r1, [r4, #0]
 8005ca0:	6833      	ldr	r3, [r6, #0]
 8005ca2:	0608      	lsls	r0, r1, #24
 8005ca4:	f853 5b04 	ldr.w	r5, [r3], #4
 8005ca8:	d402      	bmi.n	8005cb0 <_printf_i+0xe8>
 8005caa:	0649      	lsls	r1, r1, #25
 8005cac:	bf48      	it	mi
 8005cae:	b2ad      	uxthmi	r5, r5
 8005cb0:	2f6f      	cmp	r7, #111	@ 0x6f
 8005cb2:	4852      	ldr	r0, [pc, #328]	@ (8005dfc <_printf_i+0x234>)
 8005cb4:	6033      	str	r3, [r6, #0]
 8005cb6:	bf14      	ite	ne
 8005cb8:	230a      	movne	r3, #10
 8005cba:	2308      	moveq	r3, #8
 8005cbc:	2100      	movs	r1, #0
 8005cbe:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005cc2:	6866      	ldr	r6, [r4, #4]
 8005cc4:	60a6      	str	r6, [r4, #8]
 8005cc6:	2e00      	cmp	r6, #0
 8005cc8:	db05      	blt.n	8005cd6 <_printf_i+0x10e>
 8005cca:	6821      	ldr	r1, [r4, #0]
 8005ccc:	432e      	orrs	r6, r5
 8005cce:	f021 0104 	bic.w	r1, r1, #4
 8005cd2:	6021      	str	r1, [r4, #0]
 8005cd4:	d04b      	beq.n	8005d6e <_printf_i+0x1a6>
 8005cd6:	4616      	mov	r6, r2
 8005cd8:	fbb5 f1f3 	udiv	r1, r5, r3
 8005cdc:	fb03 5711 	mls	r7, r3, r1, r5
 8005ce0:	5dc7      	ldrb	r7, [r0, r7]
 8005ce2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005ce6:	462f      	mov	r7, r5
 8005ce8:	42bb      	cmp	r3, r7
 8005cea:	460d      	mov	r5, r1
 8005cec:	d9f4      	bls.n	8005cd8 <_printf_i+0x110>
 8005cee:	2b08      	cmp	r3, #8
 8005cf0:	d10b      	bne.n	8005d0a <_printf_i+0x142>
 8005cf2:	6823      	ldr	r3, [r4, #0]
 8005cf4:	07df      	lsls	r7, r3, #31
 8005cf6:	d508      	bpl.n	8005d0a <_printf_i+0x142>
 8005cf8:	6923      	ldr	r3, [r4, #16]
 8005cfa:	6861      	ldr	r1, [r4, #4]
 8005cfc:	4299      	cmp	r1, r3
 8005cfe:	bfde      	ittt	le
 8005d00:	2330      	movle	r3, #48	@ 0x30
 8005d02:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005d06:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005d0a:	1b92      	subs	r2, r2, r6
 8005d0c:	6122      	str	r2, [r4, #16]
 8005d0e:	f8cd a000 	str.w	sl, [sp]
 8005d12:	464b      	mov	r3, r9
 8005d14:	aa03      	add	r2, sp, #12
 8005d16:	4621      	mov	r1, r4
 8005d18:	4640      	mov	r0, r8
 8005d1a:	f7ff fee7 	bl	8005aec <_printf_common>
 8005d1e:	3001      	adds	r0, #1
 8005d20:	d14a      	bne.n	8005db8 <_printf_i+0x1f0>
 8005d22:	f04f 30ff 	mov.w	r0, #4294967295
 8005d26:	b004      	add	sp, #16
 8005d28:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005d2c:	6823      	ldr	r3, [r4, #0]
 8005d2e:	f043 0320 	orr.w	r3, r3, #32
 8005d32:	6023      	str	r3, [r4, #0]
 8005d34:	4832      	ldr	r0, [pc, #200]	@ (8005e00 <_printf_i+0x238>)
 8005d36:	2778      	movs	r7, #120	@ 0x78
 8005d38:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005d3c:	6823      	ldr	r3, [r4, #0]
 8005d3e:	6831      	ldr	r1, [r6, #0]
 8005d40:	061f      	lsls	r7, r3, #24
 8005d42:	f851 5b04 	ldr.w	r5, [r1], #4
 8005d46:	d402      	bmi.n	8005d4e <_printf_i+0x186>
 8005d48:	065f      	lsls	r7, r3, #25
 8005d4a:	bf48      	it	mi
 8005d4c:	b2ad      	uxthmi	r5, r5
 8005d4e:	6031      	str	r1, [r6, #0]
 8005d50:	07d9      	lsls	r1, r3, #31
 8005d52:	bf44      	itt	mi
 8005d54:	f043 0320 	orrmi.w	r3, r3, #32
 8005d58:	6023      	strmi	r3, [r4, #0]
 8005d5a:	b11d      	cbz	r5, 8005d64 <_printf_i+0x19c>
 8005d5c:	2310      	movs	r3, #16
 8005d5e:	e7ad      	b.n	8005cbc <_printf_i+0xf4>
 8005d60:	4826      	ldr	r0, [pc, #152]	@ (8005dfc <_printf_i+0x234>)
 8005d62:	e7e9      	b.n	8005d38 <_printf_i+0x170>
 8005d64:	6823      	ldr	r3, [r4, #0]
 8005d66:	f023 0320 	bic.w	r3, r3, #32
 8005d6a:	6023      	str	r3, [r4, #0]
 8005d6c:	e7f6      	b.n	8005d5c <_printf_i+0x194>
 8005d6e:	4616      	mov	r6, r2
 8005d70:	e7bd      	b.n	8005cee <_printf_i+0x126>
 8005d72:	6833      	ldr	r3, [r6, #0]
 8005d74:	6825      	ldr	r5, [r4, #0]
 8005d76:	6961      	ldr	r1, [r4, #20]
 8005d78:	1d18      	adds	r0, r3, #4
 8005d7a:	6030      	str	r0, [r6, #0]
 8005d7c:	062e      	lsls	r6, r5, #24
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	d501      	bpl.n	8005d86 <_printf_i+0x1be>
 8005d82:	6019      	str	r1, [r3, #0]
 8005d84:	e002      	b.n	8005d8c <_printf_i+0x1c4>
 8005d86:	0668      	lsls	r0, r5, #25
 8005d88:	d5fb      	bpl.n	8005d82 <_printf_i+0x1ba>
 8005d8a:	8019      	strh	r1, [r3, #0]
 8005d8c:	2300      	movs	r3, #0
 8005d8e:	6123      	str	r3, [r4, #16]
 8005d90:	4616      	mov	r6, r2
 8005d92:	e7bc      	b.n	8005d0e <_printf_i+0x146>
 8005d94:	6833      	ldr	r3, [r6, #0]
 8005d96:	1d1a      	adds	r2, r3, #4
 8005d98:	6032      	str	r2, [r6, #0]
 8005d9a:	681e      	ldr	r6, [r3, #0]
 8005d9c:	6862      	ldr	r2, [r4, #4]
 8005d9e:	2100      	movs	r1, #0
 8005da0:	4630      	mov	r0, r6
 8005da2:	f7fa fa35 	bl	8000210 <memchr>
 8005da6:	b108      	cbz	r0, 8005dac <_printf_i+0x1e4>
 8005da8:	1b80      	subs	r0, r0, r6
 8005daa:	6060      	str	r0, [r4, #4]
 8005dac:	6863      	ldr	r3, [r4, #4]
 8005dae:	6123      	str	r3, [r4, #16]
 8005db0:	2300      	movs	r3, #0
 8005db2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005db6:	e7aa      	b.n	8005d0e <_printf_i+0x146>
 8005db8:	6923      	ldr	r3, [r4, #16]
 8005dba:	4632      	mov	r2, r6
 8005dbc:	4649      	mov	r1, r9
 8005dbe:	4640      	mov	r0, r8
 8005dc0:	47d0      	blx	sl
 8005dc2:	3001      	adds	r0, #1
 8005dc4:	d0ad      	beq.n	8005d22 <_printf_i+0x15a>
 8005dc6:	6823      	ldr	r3, [r4, #0]
 8005dc8:	079b      	lsls	r3, r3, #30
 8005dca:	d413      	bmi.n	8005df4 <_printf_i+0x22c>
 8005dcc:	68e0      	ldr	r0, [r4, #12]
 8005dce:	9b03      	ldr	r3, [sp, #12]
 8005dd0:	4298      	cmp	r0, r3
 8005dd2:	bfb8      	it	lt
 8005dd4:	4618      	movlt	r0, r3
 8005dd6:	e7a6      	b.n	8005d26 <_printf_i+0x15e>
 8005dd8:	2301      	movs	r3, #1
 8005dda:	4632      	mov	r2, r6
 8005ddc:	4649      	mov	r1, r9
 8005dde:	4640      	mov	r0, r8
 8005de0:	47d0      	blx	sl
 8005de2:	3001      	adds	r0, #1
 8005de4:	d09d      	beq.n	8005d22 <_printf_i+0x15a>
 8005de6:	3501      	adds	r5, #1
 8005de8:	68e3      	ldr	r3, [r4, #12]
 8005dea:	9903      	ldr	r1, [sp, #12]
 8005dec:	1a5b      	subs	r3, r3, r1
 8005dee:	42ab      	cmp	r3, r5
 8005df0:	dcf2      	bgt.n	8005dd8 <_printf_i+0x210>
 8005df2:	e7eb      	b.n	8005dcc <_printf_i+0x204>
 8005df4:	2500      	movs	r5, #0
 8005df6:	f104 0619 	add.w	r6, r4, #25
 8005dfa:	e7f5      	b.n	8005de8 <_printf_i+0x220>
 8005dfc:	080061d5 	.word	0x080061d5
 8005e00:	080061e6 	.word	0x080061e6

08005e04 <__sflush_r>:
 8005e04:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e08:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e0c:	0716      	lsls	r6, r2, #28
 8005e0e:	4605      	mov	r5, r0
 8005e10:	460c      	mov	r4, r1
 8005e12:	d454      	bmi.n	8005ebe <__sflush_r+0xba>
 8005e14:	684b      	ldr	r3, [r1, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	dc02      	bgt.n	8005e20 <__sflush_r+0x1c>
 8005e1a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	dd48      	ble.n	8005eb2 <__sflush_r+0xae>
 8005e20:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e22:	2e00      	cmp	r6, #0
 8005e24:	d045      	beq.n	8005eb2 <__sflush_r+0xae>
 8005e26:	2300      	movs	r3, #0
 8005e28:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e2c:	682f      	ldr	r7, [r5, #0]
 8005e2e:	6a21      	ldr	r1, [r4, #32]
 8005e30:	602b      	str	r3, [r5, #0]
 8005e32:	d030      	beq.n	8005e96 <__sflush_r+0x92>
 8005e34:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e36:	89a3      	ldrh	r3, [r4, #12]
 8005e38:	0759      	lsls	r1, r3, #29
 8005e3a:	d505      	bpl.n	8005e48 <__sflush_r+0x44>
 8005e3c:	6863      	ldr	r3, [r4, #4]
 8005e3e:	1ad2      	subs	r2, r2, r3
 8005e40:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e42:	b10b      	cbz	r3, 8005e48 <__sflush_r+0x44>
 8005e44:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e46:	1ad2      	subs	r2, r2, r3
 8005e48:	2300      	movs	r3, #0
 8005e4a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e4c:	6a21      	ldr	r1, [r4, #32]
 8005e4e:	4628      	mov	r0, r5
 8005e50:	47b0      	blx	r6
 8005e52:	1c43      	adds	r3, r0, #1
 8005e54:	89a3      	ldrh	r3, [r4, #12]
 8005e56:	d106      	bne.n	8005e66 <__sflush_r+0x62>
 8005e58:	6829      	ldr	r1, [r5, #0]
 8005e5a:	291d      	cmp	r1, #29
 8005e5c:	d82b      	bhi.n	8005eb6 <__sflush_r+0xb2>
 8005e5e:	4a2a      	ldr	r2, [pc, #168]	@ (8005f08 <__sflush_r+0x104>)
 8005e60:	40ca      	lsrs	r2, r1
 8005e62:	07d6      	lsls	r6, r2, #31
 8005e64:	d527      	bpl.n	8005eb6 <__sflush_r+0xb2>
 8005e66:	2200      	movs	r2, #0
 8005e68:	6062      	str	r2, [r4, #4]
 8005e6a:	04d9      	lsls	r1, r3, #19
 8005e6c:	6922      	ldr	r2, [r4, #16]
 8005e6e:	6022      	str	r2, [r4, #0]
 8005e70:	d504      	bpl.n	8005e7c <__sflush_r+0x78>
 8005e72:	1c42      	adds	r2, r0, #1
 8005e74:	d101      	bne.n	8005e7a <__sflush_r+0x76>
 8005e76:	682b      	ldr	r3, [r5, #0]
 8005e78:	b903      	cbnz	r3, 8005e7c <__sflush_r+0x78>
 8005e7a:	6560      	str	r0, [r4, #84]	@ 0x54
 8005e7c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005e7e:	602f      	str	r7, [r5, #0]
 8005e80:	b1b9      	cbz	r1, 8005eb2 <__sflush_r+0xae>
 8005e82:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005e86:	4299      	cmp	r1, r3
 8005e88:	d002      	beq.n	8005e90 <__sflush_r+0x8c>
 8005e8a:	4628      	mov	r0, r5
 8005e8c:	f7ff fa9c 	bl	80053c8 <_free_r>
 8005e90:	2300      	movs	r3, #0
 8005e92:	6363      	str	r3, [r4, #52]	@ 0x34
 8005e94:	e00d      	b.n	8005eb2 <__sflush_r+0xae>
 8005e96:	2301      	movs	r3, #1
 8005e98:	4628      	mov	r0, r5
 8005e9a:	47b0      	blx	r6
 8005e9c:	4602      	mov	r2, r0
 8005e9e:	1c50      	adds	r0, r2, #1
 8005ea0:	d1c9      	bne.n	8005e36 <__sflush_r+0x32>
 8005ea2:	682b      	ldr	r3, [r5, #0]
 8005ea4:	2b00      	cmp	r3, #0
 8005ea6:	d0c6      	beq.n	8005e36 <__sflush_r+0x32>
 8005ea8:	2b1d      	cmp	r3, #29
 8005eaa:	d001      	beq.n	8005eb0 <__sflush_r+0xac>
 8005eac:	2b16      	cmp	r3, #22
 8005eae:	d11e      	bne.n	8005eee <__sflush_r+0xea>
 8005eb0:	602f      	str	r7, [r5, #0]
 8005eb2:	2000      	movs	r0, #0
 8005eb4:	e022      	b.n	8005efc <__sflush_r+0xf8>
 8005eb6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005eba:	b21b      	sxth	r3, r3
 8005ebc:	e01b      	b.n	8005ef6 <__sflush_r+0xf2>
 8005ebe:	690f      	ldr	r7, [r1, #16]
 8005ec0:	2f00      	cmp	r7, #0
 8005ec2:	d0f6      	beq.n	8005eb2 <__sflush_r+0xae>
 8005ec4:	0793      	lsls	r3, r2, #30
 8005ec6:	680e      	ldr	r6, [r1, #0]
 8005ec8:	bf08      	it	eq
 8005eca:	694b      	ldreq	r3, [r1, #20]
 8005ecc:	600f      	str	r7, [r1, #0]
 8005ece:	bf18      	it	ne
 8005ed0:	2300      	movne	r3, #0
 8005ed2:	eba6 0807 	sub.w	r8, r6, r7
 8005ed6:	608b      	str	r3, [r1, #8]
 8005ed8:	f1b8 0f00 	cmp.w	r8, #0
 8005edc:	dde9      	ble.n	8005eb2 <__sflush_r+0xae>
 8005ede:	6a21      	ldr	r1, [r4, #32]
 8005ee0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005ee2:	4643      	mov	r3, r8
 8005ee4:	463a      	mov	r2, r7
 8005ee6:	4628      	mov	r0, r5
 8005ee8:	47b0      	blx	r6
 8005eea:	2800      	cmp	r0, #0
 8005eec:	dc08      	bgt.n	8005f00 <__sflush_r+0xfc>
 8005eee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005ef2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005ef6:	81a3      	strh	r3, [r4, #12]
 8005ef8:	f04f 30ff 	mov.w	r0, #4294967295
 8005efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f00:	4407      	add	r7, r0
 8005f02:	eba8 0800 	sub.w	r8, r8, r0
 8005f06:	e7e7      	b.n	8005ed8 <__sflush_r+0xd4>
 8005f08:	20400001 	.word	0x20400001

08005f0c <_fflush_r>:
 8005f0c:	b538      	push	{r3, r4, r5, lr}
 8005f0e:	690b      	ldr	r3, [r1, #16]
 8005f10:	4605      	mov	r5, r0
 8005f12:	460c      	mov	r4, r1
 8005f14:	b913      	cbnz	r3, 8005f1c <_fflush_r+0x10>
 8005f16:	2500      	movs	r5, #0
 8005f18:	4628      	mov	r0, r5
 8005f1a:	bd38      	pop	{r3, r4, r5, pc}
 8005f1c:	b118      	cbz	r0, 8005f26 <_fflush_r+0x1a>
 8005f1e:	6a03      	ldr	r3, [r0, #32]
 8005f20:	b90b      	cbnz	r3, 8005f26 <_fflush_r+0x1a>
 8005f22:	f7ff f813 	bl	8004f4c <__sinit>
 8005f26:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d0f3      	beq.n	8005f16 <_fflush_r+0xa>
 8005f2e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f30:	07d0      	lsls	r0, r2, #31
 8005f32:	d404      	bmi.n	8005f3e <_fflush_r+0x32>
 8005f34:	0599      	lsls	r1, r3, #22
 8005f36:	d402      	bmi.n	8005f3e <_fflush_r+0x32>
 8005f38:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f3a:	f7ff fa34 	bl	80053a6 <__retarget_lock_acquire_recursive>
 8005f3e:	4628      	mov	r0, r5
 8005f40:	4621      	mov	r1, r4
 8005f42:	f7ff ff5f 	bl	8005e04 <__sflush_r>
 8005f46:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f48:	07da      	lsls	r2, r3, #31
 8005f4a:	4605      	mov	r5, r0
 8005f4c:	d4e4      	bmi.n	8005f18 <_fflush_r+0xc>
 8005f4e:	89a3      	ldrh	r3, [r4, #12]
 8005f50:	059b      	lsls	r3, r3, #22
 8005f52:	d4e1      	bmi.n	8005f18 <_fflush_r+0xc>
 8005f54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f56:	f7ff fa27 	bl	80053a8 <__retarget_lock_release_recursive>
 8005f5a:	e7dd      	b.n	8005f18 <_fflush_r+0xc>

08005f5c <__swhatbuf_r>:
 8005f5c:	b570      	push	{r4, r5, r6, lr}
 8005f5e:	460c      	mov	r4, r1
 8005f60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005f64:	2900      	cmp	r1, #0
 8005f66:	b096      	sub	sp, #88	@ 0x58
 8005f68:	4615      	mov	r5, r2
 8005f6a:	461e      	mov	r6, r3
 8005f6c:	da0d      	bge.n	8005f8a <__swhatbuf_r+0x2e>
 8005f6e:	89a3      	ldrh	r3, [r4, #12]
 8005f70:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005f74:	f04f 0100 	mov.w	r1, #0
 8005f78:	bf14      	ite	ne
 8005f7a:	2340      	movne	r3, #64	@ 0x40
 8005f7c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005f80:	2000      	movs	r0, #0
 8005f82:	6031      	str	r1, [r6, #0]
 8005f84:	602b      	str	r3, [r5, #0]
 8005f86:	b016      	add	sp, #88	@ 0x58
 8005f88:	bd70      	pop	{r4, r5, r6, pc}
 8005f8a:	466a      	mov	r2, sp
 8005f8c:	f000 f862 	bl	8006054 <_fstat_r>
 8005f90:	2800      	cmp	r0, #0
 8005f92:	dbec      	blt.n	8005f6e <__swhatbuf_r+0x12>
 8005f94:	9901      	ldr	r1, [sp, #4]
 8005f96:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005f9a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005f9e:	4259      	negs	r1, r3
 8005fa0:	4159      	adcs	r1, r3
 8005fa2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005fa6:	e7eb      	b.n	8005f80 <__swhatbuf_r+0x24>

08005fa8 <__smakebuf_r>:
 8005fa8:	898b      	ldrh	r3, [r1, #12]
 8005faa:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005fac:	079d      	lsls	r5, r3, #30
 8005fae:	4606      	mov	r6, r0
 8005fb0:	460c      	mov	r4, r1
 8005fb2:	d507      	bpl.n	8005fc4 <__smakebuf_r+0x1c>
 8005fb4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005fb8:	6023      	str	r3, [r4, #0]
 8005fba:	6123      	str	r3, [r4, #16]
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	6163      	str	r3, [r4, #20]
 8005fc0:	b003      	add	sp, #12
 8005fc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fc4:	ab01      	add	r3, sp, #4
 8005fc6:	466a      	mov	r2, sp
 8005fc8:	f7ff ffc8 	bl	8005f5c <__swhatbuf_r>
 8005fcc:	9f00      	ldr	r7, [sp, #0]
 8005fce:	4605      	mov	r5, r0
 8005fd0:	4639      	mov	r1, r7
 8005fd2:	4630      	mov	r0, r6
 8005fd4:	f7ff fa64 	bl	80054a0 <_malloc_r>
 8005fd8:	b948      	cbnz	r0, 8005fee <__smakebuf_r+0x46>
 8005fda:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005fde:	059a      	lsls	r2, r3, #22
 8005fe0:	d4ee      	bmi.n	8005fc0 <__smakebuf_r+0x18>
 8005fe2:	f023 0303 	bic.w	r3, r3, #3
 8005fe6:	f043 0302 	orr.w	r3, r3, #2
 8005fea:	81a3      	strh	r3, [r4, #12]
 8005fec:	e7e2      	b.n	8005fb4 <__smakebuf_r+0xc>
 8005fee:	89a3      	ldrh	r3, [r4, #12]
 8005ff0:	6020      	str	r0, [r4, #0]
 8005ff2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005ff6:	81a3      	strh	r3, [r4, #12]
 8005ff8:	9b01      	ldr	r3, [sp, #4]
 8005ffa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005ffe:	b15b      	cbz	r3, 8006018 <__smakebuf_r+0x70>
 8006000:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006004:	4630      	mov	r0, r6
 8006006:	f000 f837 	bl	8006078 <_isatty_r>
 800600a:	b128      	cbz	r0, 8006018 <__smakebuf_r+0x70>
 800600c:	89a3      	ldrh	r3, [r4, #12]
 800600e:	f023 0303 	bic.w	r3, r3, #3
 8006012:	f043 0301 	orr.w	r3, r3, #1
 8006016:	81a3      	strh	r3, [r4, #12]
 8006018:	89a3      	ldrh	r3, [r4, #12]
 800601a:	431d      	orrs	r5, r3
 800601c:	81a5      	strh	r5, [r4, #12]
 800601e:	e7cf      	b.n	8005fc0 <__smakebuf_r+0x18>

08006020 <memmove>:
 8006020:	4288      	cmp	r0, r1
 8006022:	b510      	push	{r4, lr}
 8006024:	eb01 0402 	add.w	r4, r1, r2
 8006028:	d902      	bls.n	8006030 <memmove+0x10>
 800602a:	4284      	cmp	r4, r0
 800602c:	4623      	mov	r3, r4
 800602e:	d807      	bhi.n	8006040 <memmove+0x20>
 8006030:	1e43      	subs	r3, r0, #1
 8006032:	42a1      	cmp	r1, r4
 8006034:	d008      	beq.n	8006048 <memmove+0x28>
 8006036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800603a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800603e:	e7f8      	b.n	8006032 <memmove+0x12>
 8006040:	4402      	add	r2, r0
 8006042:	4601      	mov	r1, r0
 8006044:	428a      	cmp	r2, r1
 8006046:	d100      	bne.n	800604a <memmove+0x2a>
 8006048:	bd10      	pop	{r4, pc}
 800604a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800604e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006052:	e7f7      	b.n	8006044 <memmove+0x24>

08006054 <_fstat_r>:
 8006054:	b538      	push	{r3, r4, r5, lr}
 8006056:	4d07      	ldr	r5, [pc, #28]	@ (8006074 <_fstat_r+0x20>)
 8006058:	2300      	movs	r3, #0
 800605a:	4604      	mov	r4, r0
 800605c:	4608      	mov	r0, r1
 800605e:	4611      	mov	r1, r2
 8006060:	602b      	str	r3, [r5, #0]
 8006062:	f7fb fa2c 	bl	80014be <_fstat>
 8006066:	1c43      	adds	r3, r0, #1
 8006068:	d102      	bne.n	8006070 <_fstat_r+0x1c>
 800606a:	682b      	ldr	r3, [r5, #0]
 800606c:	b103      	cbz	r3, 8006070 <_fstat_r+0x1c>
 800606e:	6023      	str	r3, [r4, #0]
 8006070:	bd38      	pop	{r3, r4, r5, pc}
 8006072:	bf00      	nop
 8006074:	20000ac0 	.word	0x20000ac0

08006078 <_isatty_r>:
 8006078:	b538      	push	{r3, r4, r5, lr}
 800607a:	4d06      	ldr	r5, [pc, #24]	@ (8006094 <_isatty_r+0x1c>)
 800607c:	2300      	movs	r3, #0
 800607e:	4604      	mov	r4, r0
 8006080:	4608      	mov	r0, r1
 8006082:	602b      	str	r3, [r5, #0]
 8006084:	f7fb fa2b 	bl	80014de <_isatty>
 8006088:	1c43      	adds	r3, r0, #1
 800608a:	d102      	bne.n	8006092 <_isatty_r+0x1a>
 800608c:	682b      	ldr	r3, [r5, #0]
 800608e:	b103      	cbz	r3, 8006092 <_isatty_r+0x1a>
 8006090:	6023      	str	r3, [r4, #0]
 8006092:	bd38      	pop	{r3, r4, r5, pc}
 8006094:	20000ac0 	.word	0x20000ac0

08006098 <_sbrk_r>:
 8006098:	b538      	push	{r3, r4, r5, lr}
 800609a:	4d06      	ldr	r5, [pc, #24]	@ (80060b4 <_sbrk_r+0x1c>)
 800609c:	2300      	movs	r3, #0
 800609e:	4604      	mov	r4, r0
 80060a0:	4608      	mov	r0, r1
 80060a2:	602b      	str	r3, [r5, #0]
 80060a4:	f7fb fa34 	bl	8001510 <_sbrk>
 80060a8:	1c43      	adds	r3, r0, #1
 80060aa:	d102      	bne.n	80060b2 <_sbrk_r+0x1a>
 80060ac:	682b      	ldr	r3, [r5, #0]
 80060ae:	b103      	cbz	r3, 80060b2 <_sbrk_r+0x1a>
 80060b0:	6023      	str	r3, [r4, #0]
 80060b2:	bd38      	pop	{r3, r4, r5, pc}
 80060b4:	20000ac0 	.word	0x20000ac0

080060b8 <_realloc_r>:
 80060b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060bc:	4607      	mov	r7, r0
 80060be:	4614      	mov	r4, r2
 80060c0:	460d      	mov	r5, r1
 80060c2:	b921      	cbnz	r1, 80060ce <_realloc_r+0x16>
 80060c4:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80060c8:	4611      	mov	r1, r2
 80060ca:	f7ff b9e9 	b.w	80054a0 <_malloc_r>
 80060ce:	b92a      	cbnz	r2, 80060dc <_realloc_r+0x24>
 80060d0:	f7ff f97a 	bl	80053c8 <_free_r>
 80060d4:	4625      	mov	r5, r4
 80060d6:	4628      	mov	r0, r5
 80060d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80060dc:	f000 f81a 	bl	8006114 <_malloc_usable_size_r>
 80060e0:	4284      	cmp	r4, r0
 80060e2:	4606      	mov	r6, r0
 80060e4:	d802      	bhi.n	80060ec <_realloc_r+0x34>
 80060e6:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80060ea:	d8f4      	bhi.n	80060d6 <_realloc_r+0x1e>
 80060ec:	4621      	mov	r1, r4
 80060ee:	4638      	mov	r0, r7
 80060f0:	f7ff f9d6 	bl	80054a0 <_malloc_r>
 80060f4:	4680      	mov	r8, r0
 80060f6:	b908      	cbnz	r0, 80060fc <_realloc_r+0x44>
 80060f8:	4645      	mov	r5, r8
 80060fa:	e7ec      	b.n	80060d6 <_realloc_r+0x1e>
 80060fc:	42b4      	cmp	r4, r6
 80060fe:	4622      	mov	r2, r4
 8006100:	4629      	mov	r1, r5
 8006102:	bf28      	it	cs
 8006104:	4632      	movcs	r2, r6
 8006106:	f7ff f950 	bl	80053aa <memcpy>
 800610a:	4629      	mov	r1, r5
 800610c:	4638      	mov	r0, r7
 800610e:	f7ff f95b 	bl	80053c8 <_free_r>
 8006112:	e7f1      	b.n	80060f8 <_realloc_r+0x40>

08006114 <_malloc_usable_size_r>:
 8006114:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006118:	1f18      	subs	r0, r3, #4
 800611a:	2b00      	cmp	r3, #0
 800611c:	bfbc      	itt	lt
 800611e:	580b      	ldrlt	r3, [r1, r0]
 8006120:	18c0      	addlt	r0, r0, r3
 8006122:	4770      	bx	lr

08006124 <_init>:
 8006124:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006126:	bf00      	nop
 8006128:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800612a:	bc08      	pop	{r3}
 800612c:	469e      	mov	lr, r3
 800612e:	4770      	bx	lr

08006130 <_fini>:
 8006130:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006132:	bf00      	nop
 8006134:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006136:	bc08      	pop	{r3}
 8006138:	469e      	mov	lr, r3
 800613a:	4770      	bx	lr
