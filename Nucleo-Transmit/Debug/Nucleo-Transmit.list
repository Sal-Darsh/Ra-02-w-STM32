
Nucleo-Transmit.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005394  080001d0  080001d0  000011d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000118  08005564  08005564  00006564  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800567c  0800567c  00007068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800567c  0800567c  0000667c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08005684  08005684  00007068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005684  08005684  00006684  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005688  08005688  00006688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  0800568c  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000058c  20000068  080056f4  00007068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200005f4  080056f4  000075f4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00007068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000da24  00000000  00000000  00007098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026b2  00000000  00000000  00014abc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000bf8  00000000  00000000  00017170  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000905  00000000  00000000  00017d68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00023f3c  00000000  00000000  0001866d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010554  00000000  00000000  0003c5a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000d303b  00000000  00000000  0004cafd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0011fb38  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038c8  00000000  00000000  0011fb7c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006b  00000000  00000000  00123444  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	@ (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	@ (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	@ (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	20000068 	.word	0x20000068
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800554c 	.word	0x0800554c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	@ (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	@ (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	@ (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	2000006c 	.word	0x2000006c
 800020c:	0800554c 	.word	0x0800554c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b988 	b.w	80005d8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9d08      	ldr	r5, [sp, #32]
 80002e6:	468e      	mov	lr, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	4688      	mov	r8, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4617      	mov	r7, r2
 80002f4:	d962      	bls.n	80003bc <__udivmoddi4+0xdc>
 80002f6:	fab2 f682 	clz	r6, r2
 80002fa:	b14e      	cbz	r6, 8000310 <__udivmoddi4+0x30>
 80002fc:	f1c6 0320 	rsb	r3, r6, #32
 8000300:	fa01 f806 	lsl.w	r8, r1, r6
 8000304:	fa20 f303 	lsr.w	r3, r0, r3
 8000308:	40b7      	lsls	r7, r6
 800030a:	ea43 0808 	orr.w	r8, r3, r8
 800030e:	40b4      	lsls	r4, r6
 8000310:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000314:	fa1f fc87 	uxth.w	ip, r7
 8000318:	fbb8 f1fe 	udiv	r1, r8, lr
 800031c:	0c23      	lsrs	r3, r4, #16
 800031e:	fb0e 8811 	mls	r8, lr, r1, r8
 8000322:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000326:	fb01 f20c 	mul.w	r2, r1, ip
 800032a:	429a      	cmp	r2, r3
 800032c:	d909      	bls.n	8000342 <__udivmoddi4+0x62>
 800032e:	18fb      	adds	r3, r7, r3
 8000330:	f101 30ff 	add.w	r0, r1, #4294967295
 8000334:	f080 80ea 	bcs.w	800050c <__udivmoddi4+0x22c>
 8000338:	429a      	cmp	r2, r3
 800033a:	f240 80e7 	bls.w	800050c <__udivmoddi4+0x22c>
 800033e:	3902      	subs	r1, #2
 8000340:	443b      	add	r3, r7
 8000342:	1a9a      	subs	r2, r3, r2
 8000344:	b2a3      	uxth	r3, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000352:	fb00 fc0c 	mul.w	ip, r0, ip
 8000356:	459c      	cmp	ip, r3
 8000358:	d909      	bls.n	800036e <__udivmoddi4+0x8e>
 800035a:	18fb      	adds	r3, r7, r3
 800035c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000360:	f080 80d6 	bcs.w	8000510 <__udivmoddi4+0x230>
 8000364:	459c      	cmp	ip, r3
 8000366:	f240 80d3 	bls.w	8000510 <__udivmoddi4+0x230>
 800036a:	443b      	add	r3, r7
 800036c:	3802      	subs	r0, #2
 800036e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000372:	eba3 030c 	sub.w	r3, r3, ip
 8000376:	2100      	movs	r1, #0
 8000378:	b11d      	cbz	r5, 8000382 <__udivmoddi4+0xa2>
 800037a:	40f3      	lsrs	r3, r6
 800037c:	2200      	movs	r2, #0
 800037e:	e9c5 3200 	strd	r3, r2, [r5]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d905      	bls.n	8000396 <__udivmoddi4+0xb6>
 800038a:	b10d      	cbz	r5, 8000390 <__udivmoddi4+0xb0>
 800038c:	e9c5 0100 	strd	r0, r1, [r5]
 8000390:	2100      	movs	r1, #0
 8000392:	4608      	mov	r0, r1
 8000394:	e7f5      	b.n	8000382 <__udivmoddi4+0xa2>
 8000396:	fab3 f183 	clz	r1, r3
 800039a:	2900      	cmp	r1, #0
 800039c:	d146      	bne.n	800042c <__udivmoddi4+0x14c>
 800039e:	4573      	cmp	r3, lr
 80003a0:	d302      	bcc.n	80003a8 <__udivmoddi4+0xc8>
 80003a2:	4282      	cmp	r2, r0
 80003a4:	f200 8105 	bhi.w	80005b2 <__udivmoddi4+0x2d2>
 80003a8:	1a84      	subs	r4, r0, r2
 80003aa:	eb6e 0203 	sbc.w	r2, lr, r3
 80003ae:	2001      	movs	r0, #1
 80003b0:	4690      	mov	r8, r2
 80003b2:	2d00      	cmp	r5, #0
 80003b4:	d0e5      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003b6:	e9c5 4800 	strd	r4, r8, [r5]
 80003ba:	e7e2      	b.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	2a00      	cmp	r2, #0
 80003be:	f000 8090 	beq.w	80004e2 <__udivmoddi4+0x202>
 80003c2:	fab2 f682 	clz	r6, r2
 80003c6:	2e00      	cmp	r6, #0
 80003c8:	f040 80a4 	bne.w	8000514 <__udivmoddi4+0x234>
 80003cc:	1a8a      	subs	r2, r1, r2
 80003ce:	0c03      	lsrs	r3, r0, #16
 80003d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003d4:	b280      	uxth	r0, r0
 80003d6:	b2bc      	uxth	r4, r7
 80003d8:	2101      	movs	r1, #1
 80003da:	fbb2 fcfe 	udiv	ip, r2, lr
 80003de:	fb0e 221c 	mls	r2, lr, ip, r2
 80003e2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003e6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ea:	429a      	cmp	r2, r3
 80003ec:	d907      	bls.n	80003fe <__udivmoddi4+0x11e>
 80003ee:	18fb      	adds	r3, r7, r3
 80003f0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x11c>
 80003f6:	429a      	cmp	r2, r3
 80003f8:	f200 80e0 	bhi.w	80005bc <__udivmoddi4+0x2dc>
 80003fc:	46c4      	mov	ip, r8
 80003fe:	1a9b      	subs	r3, r3, r2
 8000400:	fbb3 f2fe 	udiv	r2, r3, lr
 8000404:	fb0e 3312 	mls	r3, lr, r2, r3
 8000408:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 800040c:	fb02 f404 	mul.w	r4, r2, r4
 8000410:	429c      	cmp	r4, r3
 8000412:	d907      	bls.n	8000424 <__udivmoddi4+0x144>
 8000414:	18fb      	adds	r3, r7, r3
 8000416:	f102 30ff 	add.w	r0, r2, #4294967295
 800041a:	d202      	bcs.n	8000422 <__udivmoddi4+0x142>
 800041c:	429c      	cmp	r4, r3
 800041e:	f200 80ca 	bhi.w	80005b6 <__udivmoddi4+0x2d6>
 8000422:	4602      	mov	r2, r0
 8000424:	1b1b      	subs	r3, r3, r4
 8000426:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800042a:	e7a5      	b.n	8000378 <__udivmoddi4+0x98>
 800042c:	f1c1 0620 	rsb	r6, r1, #32
 8000430:	408b      	lsls	r3, r1
 8000432:	fa22 f706 	lsr.w	r7, r2, r6
 8000436:	431f      	orrs	r7, r3
 8000438:	fa0e f401 	lsl.w	r4, lr, r1
 800043c:	fa20 f306 	lsr.w	r3, r0, r6
 8000440:	fa2e fe06 	lsr.w	lr, lr, r6
 8000444:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000448:	4323      	orrs	r3, r4
 800044a:	fa00 f801 	lsl.w	r8, r0, r1
 800044e:	fa1f fc87 	uxth.w	ip, r7
 8000452:	fbbe f0f9 	udiv	r0, lr, r9
 8000456:	0c1c      	lsrs	r4, r3, #16
 8000458:	fb09 ee10 	mls	lr, r9, r0, lr
 800045c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000460:	fb00 fe0c 	mul.w	lr, r0, ip
 8000464:	45a6      	cmp	lr, r4
 8000466:	fa02 f201 	lsl.w	r2, r2, r1
 800046a:	d909      	bls.n	8000480 <__udivmoddi4+0x1a0>
 800046c:	193c      	adds	r4, r7, r4
 800046e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000472:	f080 809c 	bcs.w	80005ae <__udivmoddi4+0x2ce>
 8000476:	45a6      	cmp	lr, r4
 8000478:	f240 8099 	bls.w	80005ae <__udivmoddi4+0x2ce>
 800047c:	3802      	subs	r0, #2
 800047e:	443c      	add	r4, r7
 8000480:	eba4 040e 	sub.w	r4, r4, lr
 8000484:	fa1f fe83 	uxth.w	lr, r3
 8000488:	fbb4 f3f9 	udiv	r3, r4, r9
 800048c:	fb09 4413 	mls	r4, r9, r3, r4
 8000490:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000494:	fb03 fc0c 	mul.w	ip, r3, ip
 8000498:	45a4      	cmp	ip, r4
 800049a:	d908      	bls.n	80004ae <__udivmoddi4+0x1ce>
 800049c:	193c      	adds	r4, r7, r4
 800049e:	f103 3eff 	add.w	lr, r3, #4294967295
 80004a2:	f080 8082 	bcs.w	80005aa <__udivmoddi4+0x2ca>
 80004a6:	45a4      	cmp	ip, r4
 80004a8:	d97f      	bls.n	80005aa <__udivmoddi4+0x2ca>
 80004aa:	3b02      	subs	r3, #2
 80004ac:	443c      	add	r4, r7
 80004ae:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80004b2:	eba4 040c 	sub.w	r4, r4, ip
 80004b6:	fba0 ec02 	umull	lr, ip, r0, r2
 80004ba:	4564      	cmp	r4, ip
 80004bc:	4673      	mov	r3, lr
 80004be:	46e1      	mov	r9, ip
 80004c0:	d362      	bcc.n	8000588 <__udivmoddi4+0x2a8>
 80004c2:	d05f      	beq.n	8000584 <__udivmoddi4+0x2a4>
 80004c4:	b15d      	cbz	r5, 80004de <__udivmoddi4+0x1fe>
 80004c6:	ebb8 0203 	subs.w	r2, r8, r3
 80004ca:	eb64 0409 	sbc.w	r4, r4, r9
 80004ce:	fa04 f606 	lsl.w	r6, r4, r6
 80004d2:	fa22 f301 	lsr.w	r3, r2, r1
 80004d6:	431e      	orrs	r6, r3
 80004d8:	40cc      	lsrs	r4, r1
 80004da:	e9c5 6400 	strd	r6, r4, [r5]
 80004de:	2100      	movs	r1, #0
 80004e0:	e74f      	b.n	8000382 <__udivmoddi4+0xa2>
 80004e2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004e6:	0c01      	lsrs	r1, r0, #16
 80004e8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ec:	b280      	uxth	r0, r0
 80004ee:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004f2:	463b      	mov	r3, r7
 80004f4:	4638      	mov	r0, r7
 80004f6:	463c      	mov	r4, r7
 80004f8:	46b8      	mov	r8, r7
 80004fa:	46be      	mov	lr, r7
 80004fc:	2620      	movs	r6, #32
 80004fe:	fbb1 f1f7 	udiv	r1, r1, r7
 8000502:	eba2 0208 	sub.w	r2, r2, r8
 8000506:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 800050a:	e766      	b.n	80003da <__udivmoddi4+0xfa>
 800050c:	4601      	mov	r1, r0
 800050e:	e718      	b.n	8000342 <__udivmoddi4+0x62>
 8000510:	4610      	mov	r0, r2
 8000512:	e72c      	b.n	800036e <__udivmoddi4+0x8e>
 8000514:	f1c6 0220 	rsb	r2, r6, #32
 8000518:	fa2e f302 	lsr.w	r3, lr, r2
 800051c:	40b7      	lsls	r7, r6
 800051e:	40b1      	lsls	r1, r6
 8000520:	fa20 f202 	lsr.w	r2, r0, r2
 8000524:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000528:	430a      	orrs	r2, r1
 800052a:	fbb3 f8fe 	udiv	r8, r3, lr
 800052e:	b2bc      	uxth	r4, r7
 8000530:	fb0e 3318 	mls	r3, lr, r8, r3
 8000534:	0c11      	lsrs	r1, r2, #16
 8000536:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800053a:	fb08 f904 	mul.w	r9, r8, r4
 800053e:	40b0      	lsls	r0, r6
 8000540:	4589      	cmp	r9, r1
 8000542:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000546:	b280      	uxth	r0, r0
 8000548:	d93e      	bls.n	80005c8 <__udivmoddi4+0x2e8>
 800054a:	1879      	adds	r1, r7, r1
 800054c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000550:	d201      	bcs.n	8000556 <__udivmoddi4+0x276>
 8000552:	4589      	cmp	r9, r1
 8000554:	d81f      	bhi.n	8000596 <__udivmoddi4+0x2b6>
 8000556:	eba1 0109 	sub.w	r1, r1, r9
 800055a:	fbb1 f9fe 	udiv	r9, r1, lr
 800055e:	fb09 f804 	mul.w	r8, r9, r4
 8000562:	fb0e 1119 	mls	r1, lr, r9, r1
 8000566:	b292      	uxth	r2, r2
 8000568:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800056c:	4542      	cmp	r2, r8
 800056e:	d229      	bcs.n	80005c4 <__udivmoddi4+0x2e4>
 8000570:	18ba      	adds	r2, r7, r2
 8000572:	f109 31ff 	add.w	r1, r9, #4294967295
 8000576:	d2c4      	bcs.n	8000502 <__udivmoddi4+0x222>
 8000578:	4542      	cmp	r2, r8
 800057a:	d2c2      	bcs.n	8000502 <__udivmoddi4+0x222>
 800057c:	f1a9 0102 	sub.w	r1, r9, #2
 8000580:	443a      	add	r2, r7
 8000582:	e7be      	b.n	8000502 <__udivmoddi4+0x222>
 8000584:	45f0      	cmp	r8, lr
 8000586:	d29d      	bcs.n	80004c4 <__udivmoddi4+0x1e4>
 8000588:	ebbe 0302 	subs.w	r3, lr, r2
 800058c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000590:	3801      	subs	r0, #1
 8000592:	46e1      	mov	r9, ip
 8000594:	e796      	b.n	80004c4 <__udivmoddi4+0x1e4>
 8000596:	eba7 0909 	sub.w	r9, r7, r9
 800059a:	4449      	add	r1, r9
 800059c:	f1a8 0c02 	sub.w	ip, r8, #2
 80005a0:	fbb1 f9fe 	udiv	r9, r1, lr
 80005a4:	fb09 f804 	mul.w	r8, r9, r4
 80005a8:	e7db      	b.n	8000562 <__udivmoddi4+0x282>
 80005aa:	4673      	mov	r3, lr
 80005ac:	e77f      	b.n	80004ae <__udivmoddi4+0x1ce>
 80005ae:	4650      	mov	r0, sl
 80005b0:	e766      	b.n	8000480 <__udivmoddi4+0x1a0>
 80005b2:	4608      	mov	r0, r1
 80005b4:	e6fd      	b.n	80003b2 <__udivmoddi4+0xd2>
 80005b6:	443b      	add	r3, r7
 80005b8:	3a02      	subs	r2, #2
 80005ba:	e733      	b.n	8000424 <__udivmoddi4+0x144>
 80005bc:	f1ac 0c02 	sub.w	ip, ip, #2
 80005c0:	443b      	add	r3, r7
 80005c2:	e71c      	b.n	80003fe <__udivmoddi4+0x11e>
 80005c4:	4649      	mov	r1, r9
 80005c6:	e79c      	b.n	8000502 <__udivmoddi4+0x222>
 80005c8:	eba1 0109 	sub.w	r1, r1, r9
 80005cc:	46c4      	mov	ip, r8
 80005ce:	fbb1 f9fe 	udiv	r9, r1, lr
 80005d2:	fb09 f804 	mul.w	r8, r9, r4
 80005d6:	e7c4      	b.n	8000562 <__udivmoddi4+0x282>

080005d8 <__aeabi_idiv0>:
 80005d8:	4770      	bx	lr
 80005da:	bf00      	nop

080005dc <SX1278_SPIRead>:
 */

#include "SX1278.h"
#include <string.h>

uint8_t SX1278_SPIRead(SX1278_t *module, uint8_t addr) {
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
 80005e4:	460b      	mov	r3, r1
 80005e6:	70fb      	strb	r3, [r7, #3]
	uint8_t tmp;
	SX1278_hw_SPICommand(module->hw, addr);
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	681b      	ldr	r3, [r3, #0]
 80005ec:	78fa      	ldrb	r2, [r7, #3]
 80005ee:	4611      	mov	r1, r2
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 faef 	bl	8000bd4 <SX1278_hw_SPICommand>
	tmp = SX1278_hw_SPIReadByte(module->hw);
 80005f6:	687b      	ldr	r3, [r7, #4]
 80005f8:	681b      	ldr	r3, [r3, #0]
 80005fa:	4618      	mov	r0, r3
 80005fc:	f000 fb0a 	bl	8000c14 <SX1278_hw_SPIReadByte>
 8000600:	4603      	mov	r3, r0
 8000602:	73fb      	strb	r3, [r7, #15]
	SX1278_hw_SetNSS(module->hw, 1);
 8000604:	687b      	ldr	r3, [r7, #4]
 8000606:	681b      	ldr	r3, [r3, #0]
 8000608:	2101      	movs	r1, #1
 800060a:	4618      	mov	r0, r3
 800060c:	f000 faa7 	bl	8000b5e <SX1278_hw_SetNSS>
	return tmp;
 8000610:	7bfb      	ldrb	r3, [r7, #15]
}
 8000612:	4618      	mov	r0, r3
 8000614:	3710      	adds	r7, #16
 8000616:	46bd      	mov	sp, r7
 8000618:	bd80      	pop	{r7, pc}

0800061a <SX1278_SPIWrite>:

void SX1278_SPIWrite(SX1278_t *module, uint8_t addr, uint8_t cmd) {
 800061a:	b580      	push	{r7, lr}
 800061c:	b082      	sub	sp, #8
 800061e:	af00      	add	r7, sp, #0
 8000620:	6078      	str	r0, [r7, #4]
 8000622:	460b      	mov	r3, r1
 8000624:	70fb      	strb	r3, [r7, #3]
 8000626:	4613      	mov	r3, r2
 8000628:	70bb      	strb	r3, [r7, #2]
	SX1278_hw_SetNSS(module->hw, 0);
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	681b      	ldr	r3, [r3, #0]
 800062e:	2100      	movs	r1, #0
 8000630:	4618      	mov	r0, r3
 8000632:	f000 fa94 	bl	8000b5e <SX1278_hw_SetNSS>
	SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000636:	687b      	ldr	r3, [r7, #4]
 8000638:	681a      	ldr	r2, [r3, #0]
 800063a:	78fb      	ldrb	r3, [r7, #3]
 800063c:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000640:	b2db      	uxtb	r3, r3
 8000642:	4619      	mov	r1, r3
 8000644:	4610      	mov	r0, r2
 8000646:	f000 fac5 	bl	8000bd4 <SX1278_hw_SPICommand>
	SX1278_hw_SPICommand(module->hw, cmd);
 800064a:	687b      	ldr	r3, [r7, #4]
 800064c:	681b      	ldr	r3, [r3, #0]
 800064e:	78ba      	ldrb	r2, [r7, #2]
 8000650:	4611      	mov	r1, r2
 8000652:	4618      	mov	r0, r3
 8000654:	f000 fabe 	bl	8000bd4 <SX1278_hw_SPICommand>
	SX1278_hw_SetNSS(module->hw, 1);
 8000658:	687b      	ldr	r3, [r7, #4]
 800065a:	681b      	ldr	r3, [r3, #0]
 800065c:	2101      	movs	r1, #1
 800065e:	4618      	mov	r0, r3
 8000660:	f000 fa7d 	bl	8000b5e <SX1278_hw_SetNSS>
}
 8000664:	bf00      	nop
 8000666:	3708      	adds	r7, #8
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <SX1278_SPIBurstWrite>:
		SX1278_hw_SetNSS(module->hw, 1);
	}
}

void SX1278_SPIBurstWrite(SX1278_t *module, uint8_t addr, uint8_t *txBuf,
		uint8_t length) {
 800066c:	b580      	push	{r7, lr}
 800066e:	b086      	sub	sp, #24
 8000670:	af00      	add	r7, sp, #0
 8000672:	60f8      	str	r0, [r7, #12]
 8000674:	607a      	str	r2, [r7, #4]
 8000676:	461a      	mov	r2, r3
 8000678:	460b      	mov	r3, r1
 800067a:	72fb      	strb	r3, [r7, #11]
 800067c:	4613      	mov	r3, r2
 800067e:	72bb      	strb	r3, [r7, #10]
	unsigned char i;
	if (length <= 1) {
 8000680:	7abb      	ldrb	r3, [r7, #10]
 8000682:	2b01      	cmp	r3, #1
 8000684:	d929      	bls.n	80006da <SX1278_SPIBurstWrite+0x6e>
		return;
	} else {
		SX1278_hw_SetNSS(module->hw, 0);
 8000686:	68fb      	ldr	r3, [r7, #12]
 8000688:	681b      	ldr	r3, [r3, #0]
 800068a:	2100      	movs	r1, #0
 800068c:	4618      	mov	r0, r3
 800068e:	f000 fa66 	bl	8000b5e <SX1278_hw_SetNSS>
		SX1278_hw_SPICommand(module->hw, addr | 0x80);
 8000692:	68fb      	ldr	r3, [r7, #12]
 8000694:	681a      	ldr	r2, [r3, #0]
 8000696:	7afb      	ldrb	r3, [r7, #11]
 8000698:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 800069c:	b2db      	uxtb	r3, r3
 800069e:	4619      	mov	r1, r3
 80006a0:	4610      	mov	r0, r2
 80006a2:	f000 fa97 	bl	8000bd4 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80006a6:	2300      	movs	r3, #0
 80006a8:	75fb      	strb	r3, [r7, #23]
 80006aa:	e00b      	b.n	80006c4 <SX1278_SPIBurstWrite+0x58>
			SX1278_hw_SPICommand(module->hw, *(txBuf + i));
 80006ac:	68fb      	ldr	r3, [r7, #12]
 80006ae:	6818      	ldr	r0, [r3, #0]
 80006b0:	7dfb      	ldrb	r3, [r7, #23]
 80006b2:	687a      	ldr	r2, [r7, #4]
 80006b4:	4413      	add	r3, r2
 80006b6:	781b      	ldrb	r3, [r3, #0]
 80006b8:	4619      	mov	r1, r3
 80006ba:	f000 fa8b 	bl	8000bd4 <SX1278_hw_SPICommand>
		for (i = 0; i < length; i++) {
 80006be:	7dfb      	ldrb	r3, [r7, #23]
 80006c0:	3301      	adds	r3, #1
 80006c2:	75fb      	strb	r3, [r7, #23]
 80006c4:	7dfa      	ldrb	r2, [r7, #23]
 80006c6:	7abb      	ldrb	r3, [r7, #10]
 80006c8:	429a      	cmp	r2, r3
 80006ca:	d3ef      	bcc.n	80006ac <SX1278_SPIBurstWrite+0x40>
		}
		SX1278_hw_SetNSS(module->hw, 1);
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	2101      	movs	r1, #1
 80006d2:	4618      	mov	r0, r3
 80006d4:	f000 fa43 	bl	8000b5e <SX1278_hw_SetNSS>
 80006d8:	e000      	b.n	80006dc <SX1278_SPIBurstWrite+0x70>
		return;
 80006da:	bf00      	nop
	}
}
 80006dc:	3718      	adds	r7, #24
 80006de:	46bd      	mov	sp, r7
 80006e0:	bd80      	pop	{r7, pc}
	...

080006e4 <SX1278_config>:

void SX1278_config(SX1278_t *module) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	b086      	sub	sp, #24
 80006e8:	af00      	add	r7, sp, #0
 80006ea:	6078      	str	r0, [r7, #4]
	SX1278_sleep(module); //Change modem mode Must in Sleep mode
 80006ec:	6878      	ldr	r0, [r7, #4]
 80006ee:	f000 f90d 	bl	800090c <SX1278_sleep>
	SX1278_hw_DelayMs(15);
 80006f2:	200f      	movs	r0, #15
 80006f4:	f000 fab4 	bl	8000c60 <SX1278_hw_DelayMs>

	SX1278_entryLoRa(module);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f000 f917 	bl	800092c <SX1278_entryLoRa>
	//SX1278_SPIWrite(module, 0x5904); //?? Change digital regulator form 1.6V to 1.47V: see errata note

	uint64_t freq = ((uint64_t) module->frequency << 19) / 32000000;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	e9d3 2302 	ldrd	r2, r3, [r3, #8]
 8000704:	f04f 0000 	mov.w	r0, #0
 8000708:	f04f 0100 	mov.w	r1, #0
 800070c:	04d9      	lsls	r1, r3, #19
 800070e:	ea41 3152 	orr.w	r1, r1, r2, lsr #13
 8000712:	04d0      	lsls	r0, r2, #19
 8000714:	4a6f      	ldr	r2, [pc, #444]	@ (80008d4 <SX1278_config+0x1f0>)
 8000716:	f04f 0300 	mov.w	r3, #0
 800071a:	f7ff fdc9 	bl	80002b0 <__aeabi_uldivmod>
 800071e:	4602      	mov	r2, r0
 8000720:	460b      	mov	r3, r1
 8000722:	e9c7 2304 	strd	r2, r3, [r7, #16]
	uint8_t freq_reg[3];
	freq_reg[0] = (uint8_t) (freq >> 16);
 8000726:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 800072a:	f04f 0200 	mov.w	r2, #0
 800072e:	f04f 0300 	mov.w	r3, #0
 8000732:	0c02      	lsrs	r2, r0, #16
 8000734:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000738:	0c0b      	lsrs	r3, r1, #16
 800073a:	b2d3      	uxtb	r3, r2
 800073c:	733b      	strb	r3, [r7, #12]
	freq_reg[1] = (uint8_t) (freq >> 8);
 800073e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000742:	f04f 0200 	mov.w	r2, #0
 8000746:	f04f 0300 	mov.w	r3, #0
 800074a:	0a02      	lsrs	r2, r0, #8
 800074c:	ea42 6201 	orr.w	r2, r2, r1, lsl #24
 8000750:	0a0b      	lsrs	r3, r1, #8
 8000752:	b2d3      	uxtb	r3, r2
 8000754:	737b      	strb	r3, [r7, #13]
	freq_reg[2] = (uint8_t) (freq >> 0);
 8000756:	7c3b      	ldrb	r3, [r7, #16]
 8000758:	73bb      	strb	r3, [r7, #14]
	SX1278_SPIBurstWrite(module, LR_RegFrMsb, (uint8_t*) freq_reg, 3); //setting  frequency parameter
 800075a:	f107 020c 	add.w	r2, r7, #12
 800075e:	2303      	movs	r3, #3
 8000760:	2106      	movs	r1, #6
 8000762:	6878      	ldr	r0, [r7, #4]
 8000764:	f7ff ff82 	bl	800066c <SX1278_SPIBurstWrite>

	SX1278_SPIWrite(module, RegSyncWord, 0x34);
 8000768:	2234      	movs	r2, #52	@ 0x34
 800076a:	2139      	movs	r1, #57	@ 0x39
 800076c:	6878      	ldr	r0, [r7, #4]
 800076e:	f7ff ff54 	bl	800061a <SX1278_SPIWrite>

	//setting base parameter
	SX1278_SPIWrite(module, LR_RegPaConfig, SX1278_Power[module->power]); //Setting output power parameter
 8000772:	687b      	ldr	r3, [r7, #4]
 8000774:	7c1b      	ldrb	r3, [r3, #16]
 8000776:	461a      	mov	r2, r3
 8000778:	4b57      	ldr	r3, [pc, #348]	@ (80008d8 <SX1278_config+0x1f4>)
 800077a:	5c9b      	ldrb	r3, [r3, r2]
 800077c:	461a      	mov	r2, r3
 800077e:	2109      	movs	r1, #9
 8000780:	6878      	ldr	r0, [r7, #4]
 8000782:	f7ff ff4a 	bl	800061a <SX1278_SPIWrite>

	SX1278_SPIWrite(module, LR_RegOcp, 0x0B);			//RegOcp,Close Ocp
 8000786:	220b      	movs	r2, #11
 8000788:	210b      	movs	r1, #11
 800078a:	6878      	ldr	r0, [r7, #4]
 800078c:	f7ff ff45 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegLna, 0x23);		//RegLNA,High & LNA Enable
 8000790:	2223      	movs	r2, #35	@ 0x23
 8000792:	210c      	movs	r1, #12
 8000794:	6878      	ldr	r0, [r7, #4]
 8000796:	f7ff ff40 	bl	800061a <SX1278_SPIWrite>
	if (SX1278_SpreadFactor[module->LoRa_SF] == 6) {	//SFactor=6
 800079a:	687b      	ldr	r3, [r7, #4]
 800079c:	7c5b      	ldrb	r3, [r3, #17]
 800079e:	461a      	mov	r2, r3
 80007a0:	4b4e      	ldr	r3, [pc, #312]	@ (80008dc <SX1278_config+0x1f8>)
 80007a2:	5c9b      	ldrb	r3, [r3, r2]
 80007a4:	2b06      	cmp	r3, #6
 80007a6:	d147      	bne.n	8000838 <SX1278_config+0x154>
		uint8_t tmp;
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 80007a8:	687b      	ldr	r3, [r7, #4]
 80007aa:	7c9b      	ldrb	r3, [r3, #18]
 80007ac:	461a      	mov	r2, r3
 80007ae:	4b4c      	ldr	r3, [pc, #304]	@ (80008e0 <SX1278_config+0x1fc>)
 80007b0:	5c9b      	ldrb	r3, [r3, r2]
 80007b2:	011b      	lsls	r3, r3, #4
 80007b4:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x01)); //Implicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 80007b6:	687b      	ldr	r3, [r7, #4]
 80007b8:	7cdb      	ldrb	r3, [r3, #19]
 80007ba:	4619      	mov	r1, r3
 80007bc:	4b49      	ldr	r3, [pc, #292]	@ (80008e4 <SX1278_config+0x200>)
 80007be:	5c5b      	ldrb	r3, [r3, r1]
 80007c0:	005b      	lsls	r3, r3, #1
 80007c2:	b2db      	uxtb	r3, r3
 80007c4:	4413      	add	r3, r2
 80007c6:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80007c8:	3301      	adds	r3, #1
 80007ca:	b2db      	uxtb	r3, r3
 80007cc:	461a      	mov	r2, r3
 80007ce:	211d      	movs	r1, #29
 80007d0:	6878      	ldr	r0, [r7, #4]
 80007d2:	f7ff ff22 	bl	800061a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	7c5b      	ldrb	r3, [r3, #17]
 80007da:	461a      	mov	r2, r3
 80007dc:	4b3f      	ldr	r3, [pc, #252]	@ (80008dc <SX1278_config+0x1f8>)
 80007de:	5c9b      	ldrb	r3, [r3, r2]
 80007e0:	011b      	lsls	r3, r3, #4
 80007e2:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x03));
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	7d1b      	ldrb	r3, [r3, #20]
 80007e8:	4619      	mov	r1, r3
 80007ea:	4b3f      	ldr	r3, [pc, #252]	@ (80008e8 <SX1278_config+0x204>)
 80007ec:	5c5b      	ldrb	r3, [r3, r1]
 80007ee:	009b      	lsls	r3, r3, #2
 80007f0:	b2db      	uxtb	r3, r3
 80007f2:	4413      	add	r3, r2
 80007f4:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 80007f6:	3303      	adds	r3, #3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	461a      	mov	r2, r3
 80007fc:	211e      	movs	r1, #30
 80007fe:	6878      	ldr	r0, [r7, #4]
 8000800:	f7ff ff0b 	bl	800061a <SX1278_SPIWrite>

		tmp = SX1278_SPIRead(module, 0x31);
 8000804:	2131      	movs	r1, #49	@ 0x31
 8000806:	6878      	ldr	r0, [r7, #4]
 8000808:	f7ff fee8 	bl	80005dc <SX1278_SPIRead>
 800080c:	4603      	mov	r3, r0
 800080e:	73fb      	strb	r3, [r7, #15]
		tmp &= 0xF8;
 8000810:	7bfb      	ldrb	r3, [r7, #15]
 8000812:	f023 0307 	bic.w	r3, r3, #7
 8000816:	73fb      	strb	r3, [r7, #15]
		tmp |= 0x05;
 8000818:	7bfb      	ldrb	r3, [r7, #15]
 800081a:	f043 0305 	orr.w	r3, r3, #5
 800081e:	73fb      	strb	r3, [r7, #15]
		SX1278_SPIWrite(module, 0x31, tmp);
 8000820:	7bfb      	ldrb	r3, [r7, #15]
 8000822:	461a      	mov	r2, r3
 8000824:	2131      	movs	r1, #49	@ 0x31
 8000826:	6878      	ldr	r0, [r7, #4]
 8000828:	f7ff fef7 	bl	800061a <SX1278_SPIWrite>
		SX1278_SPIWrite(module, 0x37, 0x0C);
 800082c:	220c      	movs	r2, #12
 800082e:	2137      	movs	r1, #55	@ 0x37
 8000830:	6878      	ldr	r0, [r7, #4]
 8000832:	f7ff fef2 	bl	800061a <SX1278_SPIWrite>
 8000836:	e029      	b.n	800088c <SX1278_config+0x1a8>
	} else {
		SX1278_SPIWrite(module,
		LR_RegModemConfig1,
				((SX1278_LoRaBandwidth[module->LoRa_BW] << 4)
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	7c9b      	ldrb	r3, [r3, #18]
 800083c:	461a      	mov	r2, r3
 800083e:	4b28      	ldr	r3, [pc, #160]	@ (80008e0 <SX1278_config+0x1fc>)
 8000840:	5c9b      	ldrb	r3, [r3, r2]
 8000842:	011b      	lsls	r3, r3, #4
 8000844:	b2da      	uxtb	r2, r3
						+ (SX1278_CodingRate[module->LoRa_CR] << 1) + 0x00)); //Explicit Enable CRC Enable(0x02) & Error Coding rate 4/5(0x01), 4/6(0x02), 4/7(0x03), 4/8(0x04)
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	7cdb      	ldrb	r3, [r3, #19]
 800084a:	4619      	mov	r1, r3
 800084c:	4b25      	ldr	r3, [pc, #148]	@ (80008e4 <SX1278_config+0x200>)
 800084e:	5c5b      	ldrb	r3, [r3, r1]
 8000850:	005b      	lsls	r3, r3, #1
 8000852:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 8000854:	4413      	add	r3, r2
 8000856:	b2db      	uxtb	r3, r3
 8000858:	461a      	mov	r2, r3
 800085a:	211d      	movs	r1, #29
 800085c:	6878      	ldr	r0, [r7, #4]
 800085e:	f7ff fedc 	bl	800061a <SX1278_SPIWrite>

		SX1278_SPIWrite(module,
		LR_RegModemConfig2,
				((SX1278_SpreadFactor[module->LoRa_SF] << 4)
 8000862:	687b      	ldr	r3, [r7, #4]
 8000864:	7c5b      	ldrb	r3, [r3, #17]
 8000866:	461a      	mov	r2, r3
 8000868:	4b1c      	ldr	r3, [pc, #112]	@ (80008dc <SX1278_config+0x1f8>)
 800086a:	5c9b      	ldrb	r3, [r3, r2]
 800086c:	011b      	lsls	r3, r3, #4
 800086e:	b2da      	uxtb	r2, r3
						+ (SX1278_CRC_Sum[module->LoRa_CRC_sum] << 2) + 0x00)); //SFactor &  LNA gain set by the internal AGC loop
 8000870:	687b      	ldr	r3, [r7, #4]
 8000872:	7d1b      	ldrb	r3, [r3, #20]
 8000874:	4619      	mov	r1, r3
 8000876:	4b1c      	ldr	r3, [pc, #112]	@ (80008e8 <SX1278_config+0x204>)
 8000878:	5c5b      	ldrb	r3, [r3, r1]
 800087a:	009b      	lsls	r3, r3, #2
 800087c:	b2db      	uxtb	r3, r3
		SX1278_SPIWrite(module,
 800087e:	4413      	add	r3, r2
 8000880:	b2db      	uxtb	r3, r3
 8000882:	461a      	mov	r2, r3
 8000884:	211e      	movs	r1, #30
 8000886:	6878      	ldr	r0, [r7, #4]
 8000888:	f7ff fec7 	bl	800061a <SX1278_SPIWrite>
	}

	SX1278_SPIWrite(module, LR_RegModemConfig3, 0x04);
 800088c:	2204      	movs	r2, #4
 800088e:	2126      	movs	r1, #38	@ 0x26
 8000890:	6878      	ldr	r0, [r7, #4]
 8000892:	f7ff fec2 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegSymbTimeoutLsb, 0x08); //RegSymbTimeoutLsb Timeout = 0x3FF(Max)
 8000896:	2208      	movs	r2, #8
 8000898:	211f      	movs	r1, #31
 800089a:	6878      	ldr	r0, [r7, #4]
 800089c:	f7ff febd 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleMsb, 0x00); //RegPreambleMsb
 80008a0:	2200      	movs	r2, #0
 80008a2:	2120      	movs	r1, #32
 80008a4:	6878      	ldr	r0, [r7, #4]
 80008a6:	f7ff feb8 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPreambleLsb, 8); //RegPreambleLsb 8+4=12byte Preamble
 80008aa:	2208      	movs	r2, #8
 80008ac:	2121      	movs	r1, #33	@ 0x21
 80008ae:	6878      	ldr	r0, [r7, #4]
 80008b0:	f7ff feb3 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING2, 0x01); //RegDioMapping2 DIO5=00, DIO4=01
 80008b4:	2201      	movs	r2, #1
 80008b6:	2141      	movs	r1, #65	@ 0x41
 80008b8:	6878      	ldr	r0, [r7, #4]
 80008ba:	f7ff feae 	bl	800061a <SX1278_SPIWrite>
	module->readBytes = 0;
 80008be:	687b      	ldr	r3, [r7, #4]
 80008c0:	2200      	movs	r2, #0
 80008c2:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	SX1278_standby(module); //Entry standby mode
 80008c6:	6878      	ldr	r0, [r7, #4]
 80008c8:	f000 f810 	bl	80008ec <SX1278_standby>
}
 80008cc:	bf00      	nop
 80008ce:	3718      	adds	r7, #24
 80008d0:	46bd      	mov	sp, r7
 80008d2:	bd80      	pop	{r7, pc}
 80008d4:	01e84800 	.word	0x01e84800
 80008d8:	0800560c 	.word	0x0800560c
 80008dc:	08005614 	.word	0x08005614
 80008e0:	0800561c 	.word	0x0800561c
 80008e4:	08005628 	.word	0x08005628
 80008e8:	0800562c 	.word	0x0800562c

080008ec <SX1278_standby>:

void SX1278_standby(SX1278_t *module) {
 80008ec:	b580      	push	{r7, lr}
 80008ee:	b082      	sub	sp, #8
 80008f0:	af00      	add	r7, sp, #0
 80008f2:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x09);
 80008f4:	2209      	movs	r2, #9
 80008f6:	2101      	movs	r1, #1
 80008f8:	6878      	ldr	r0, [r7, #4]
 80008fa:	f7ff fe8e 	bl	800061a <SX1278_SPIWrite>
	module->status = STANDBY;
 80008fe:	687b      	ldr	r3, [r7, #4]
 8000900:	2201      	movs	r2, #1
 8000902:	759a      	strb	r2, [r3, #22]
}
 8000904:	bf00      	nop
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}

0800090c <SX1278_sleep>:

void SX1278_sleep(SX1278_t *module) {
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x08);
 8000914:	2208      	movs	r2, #8
 8000916:	2101      	movs	r1, #1
 8000918:	6878      	ldr	r0, [r7, #4]
 800091a:	f7ff fe7e 	bl	800061a <SX1278_SPIWrite>
	module->status = SLEEP;
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	2200      	movs	r2, #0
 8000922:	759a      	strb	r2, [r3, #22]
}
 8000924:	bf00      	nop
 8000926:	3708      	adds	r7, #8
 8000928:	46bd      	mov	sp, r7
 800092a:	bd80      	pop	{r7, pc}

0800092c <SX1278_entryLoRa>:

void SX1278_entryLoRa(SX1278_t *module) {
 800092c:	b580      	push	{r7, lr}
 800092e:	b082      	sub	sp, #8
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegOpMode, 0x88);
 8000934:	2288      	movs	r2, #136	@ 0x88
 8000936:	2101      	movs	r1, #1
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	f7ff fe6e 	bl	800061a <SX1278_SPIWrite>
}
 800093e:	bf00      	nop
 8000940:	3708      	adds	r7, #8
 8000942:	46bd      	mov	sp, r7
 8000944:	bd80      	pop	{r7, pc}

08000946 <SX1278_clearLoRaIrq>:

void SX1278_clearLoRaIrq(SX1278_t *module) {
 8000946:	b580      	push	{r7, lr}
 8000948:	b082      	sub	sp, #8
 800094a:	af00      	add	r7, sp, #0
 800094c:	6078      	str	r0, [r7, #4]
	SX1278_SPIWrite(module, LR_RegIrqFlags, 0xFF);
 800094e:	22ff      	movs	r2, #255	@ 0xff
 8000950:	2112      	movs	r1, #18
 8000952:	6878      	ldr	r0, [r7, #4]
 8000954:	f7ff fe61 	bl	800061a <SX1278_SPIWrite>
}
 8000958:	bf00      	nop
 800095a:	3708      	adds	r7, #8
 800095c:	46bd      	mov	sp, r7
 800095e:	bd80      	pop	{r7, pc}

08000960 <SX1278_LoRaEntryTx>:
		SX1278_clearLoRaIrq(module);
	}
	return module->readBytes;
}

int SX1278_LoRaEntryTx(SX1278_t *module, uint8_t length, uint32_t timeout) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b086      	sub	sp, #24
 8000964:	af00      	add	r7, sp, #0
 8000966:	60f8      	str	r0, [r7, #12]
 8000968:	460b      	mov	r3, r1
 800096a:	607a      	str	r2, [r7, #4]
 800096c:	72fb      	strb	r3, [r7, #11]
	uint8_t addr;
	uint8_t temp;

	module->packetLength = length;
 800096e:	68fb      	ldr	r3, [r7, #12]
 8000970:	7afa      	ldrb	r2, [r7, #11]
 8000972:	755a      	strb	r2, [r3, #21]

	SX1278_config(module); //setting base parameter
 8000974:	68f8      	ldr	r0, [r7, #12]
 8000976:	f7ff feb5 	bl	80006e4 <SX1278_config>
	SX1278_SPIWrite(module, REG_LR_PADAC, 0x87);	//Tx for 20dBm
 800097a:	2287      	movs	r2, #135	@ 0x87
 800097c:	214d      	movs	r1, #77	@ 0x4d
 800097e:	68f8      	ldr	r0, [r7, #12]
 8000980:	f7ff fe4b 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegHopPeriod, 0x00); //RegHopPeriod NO FHSS
 8000984:	2200      	movs	r2, #0
 8000986:	2124      	movs	r1, #36	@ 0x24
 8000988:	68f8      	ldr	r0, [r7, #12]
 800098a:	f7ff fe46 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, REG_LR_DIOMAPPING1, 0x41); //DIO0=01, DIO1=00,DIO2=00, DIO3=01
 800098e:	2241      	movs	r2, #65	@ 0x41
 8000990:	2140      	movs	r1, #64	@ 0x40
 8000992:	68f8      	ldr	r0, [r7, #12]
 8000994:	f7ff fe41 	bl	800061a <SX1278_SPIWrite>
	SX1278_clearLoRaIrq(module);
 8000998:	68f8      	ldr	r0, [r7, #12]
 800099a:	f7ff ffd4 	bl	8000946 <SX1278_clearLoRaIrq>
	SX1278_SPIWrite(module, LR_RegIrqFlagsMask, 0xF7); //Open TxDone interrupt
 800099e:	22f7      	movs	r2, #247	@ 0xf7
 80009a0:	2111      	movs	r1, #17
 80009a2:	68f8      	ldr	r0, [r7, #12]
 80009a4:	f7ff fe39 	bl	800061a <SX1278_SPIWrite>
	SX1278_SPIWrite(module, LR_RegPayloadLength, length); //RegPayloadLength 21byte
 80009a8:	7afb      	ldrb	r3, [r7, #11]
 80009aa:	461a      	mov	r2, r3
 80009ac:	2122      	movs	r1, #34	@ 0x22
 80009ae:	68f8      	ldr	r0, [r7, #12]
 80009b0:	f7ff fe33 	bl	800061a <SX1278_SPIWrite>
	addr = SX1278_SPIRead(module, LR_RegFifoTxBaseAddr); //RegFiFoTxBaseAddr
 80009b4:	210e      	movs	r1, #14
 80009b6:	68f8      	ldr	r0, [r7, #12]
 80009b8:	f7ff fe10 	bl	80005dc <SX1278_SPIRead>
 80009bc:	4603      	mov	r3, r0
 80009be:	75fb      	strb	r3, [r7, #23]
	SX1278_SPIWrite(module, LR_RegFifoAddrPtr, addr); //RegFifoAddrPtr
 80009c0:	7dfb      	ldrb	r3, [r7, #23]
 80009c2:	461a      	mov	r2, r3
 80009c4:	210d      	movs	r1, #13
 80009c6:	68f8      	ldr	r0, [r7, #12]
 80009c8:	f7ff fe27 	bl	800061a <SX1278_SPIWrite>

	while (1) {
		temp = SX1278_SPIRead(module, LR_RegPayloadLength);
 80009cc:	2122      	movs	r1, #34	@ 0x22
 80009ce:	68f8      	ldr	r0, [r7, #12]
 80009d0:	f7ff fe04 	bl	80005dc <SX1278_SPIRead>
 80009d4:	4603      	mov	r3, r0
 80009d6:	75bb      	strb	r3, [r7, #22]
		if (temp == length) {
 80009d8:	7dba      	ldrb	r2, [r7, #22]
 80009da:	7afb      	ldrb	r3, [r7, #11]
 80009dc:	429a      	cmp	r2, r3
 80009de:	d104      	bne.n	80009ea <SX1278_LoRaEntryTx+0x8a>
			module->status = TX;
 80009e0:	68fb      	ldr	r3, [r7, #12]
 80009e2:	2202      	movs	r2, #2
 80009e4:	759a      	strb	r2, [r3, #22]
			return 1;
 80009e6:	2301      	movs	r3, #1
 80009e8:	e00e      	b.n	8000a08 <SX1278_LoRaEntryTx+0xa8>
		}

		if (--timeout == 0) {
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	3b01      	subs	r3, #1
 80009ee:	607b      	str	r3, [r7, #4]
 80009f0:	687b      	ldr	r3, [r7, #4]
 80009f2:	2b00      	cmp	r3, #0
 80009f4:	d1ea      	bne.n	80009cc <SX1278_LoRaEntryTx+0x6c>
			SX1278_hw_Reset(module->hw);
 80009f6:	68fb      	ldr	r3, [r7, #12]
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	4618      	mov	r0, r3
 80009fc:	f000 f8c6 	bl	8000b8c <SX1278_hw_Reset>
			SX1278_config(module);
 8000a00:	68f8      	ldr	r0, [r7, #12]
 8000a02:	f7ff fe6f 	bl	80006e4 <SX1278_config>
			return 0;
 8000a06:	2300      	movs	r3, #0
		}
	}
}
 8000a08:	4618      	mov	r0, r3
 8000a0a:	3718      	adds	r7, #24
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}

08000a10 <SX1278_LoRaTxPacket>:

int SX1278_LoRaTxPacket(SX1278_t *module, uint8_t *txBuffer, uint8_t length,
		uint32_t timeout) {
 8000a10:	b580      	push	{r7, lr}
 8000a12:	b084      	sub	sp, #16
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	60f8      	str	r0, [r7, #12]
 8000a18:	60b9      	str	r1, [r7, #8]
 8000a1a:	603b      	str	r3, [r7, #0]
 8000a1c:	4613      	mov	r3, r2
 8000a1e:	71fb      	strb	r3, [r7, #7]
	SX1278_SPIBurstWrite(module, 0x00, txBuffer, length);
 8000a20:	79fb      	ldrb	r3, [r7, #7]
 8000a22:	68ba      	ldr	r2, [r7, #8]
 8000a24:	2100      	movs	r1, #0
 8000a26:	68f8      	ldr	r0, [r7, #12]
 8000a28:	f7ff fe20 	bl	800066c <SX1278_SPIBurstWrite>
	SX1278_SPIWrite(module, LR_RegOpMode, 0x8b);	//Tx Mode
 8000a2c:	228b      	movs	r2, #139	@ 0x8b
 8000a2e:	2101      	movs	r1, #1
 8000a30:	68f8      	ldr	r0, [r7, #12]
 8000a32:	f7ff fdf2 	bl	800061a <SX1278_SPIWrite>
	while (1) {
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a36:	68fb      	ldr	r3, [r7, #12]
 8000a38:	681b      	ldr	r3, [r3, #0]
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 f91b 	bl	8000c76 <SX1278_hw_GetDIO0>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d00b      	beq.n	8000a5e <SX1278_LoRaTxPacket+0x4e>
			SX1278_SPIRead(module, LR_RegIrqFlags);
 8000a46:	2112      	movs	r1, #18
 8000a48:	68f8      	ldr	r0, [r7, #12]
 8000a4a:	f7ff fdc7 	bl	80005dc <SX1278_SPIRead>
			SX1278_clearLoRaIrq(module); //Clear irq
 8000a4e:	68f8      	ldr	r0, [r7, #12]
 8000a50:	f7ff ff79 	bl	8000946 <SX1278_clearLoRaIrq>
			SX1278_standby(module); //Entry Standby mode
 8000a54:	68f8      	ldr	r0, [r7, #12]
 8000a56:	f7ff ff49 	bl	80008ec <SX1278_standby>
			return 1;
 8000a5a:	2301      	movs	r3, #1
 8000a5c:	e013      	b.n	8000a86 <SX1278_LoRaTxPacket+0x76>
		}

		if (--timeout == 0) {
 8000a5e:	683b      	ldr	r3, [r7, #0]
 8000a60:	3b01      	subs	r3, #1
 8000a62:	603b      	str	r3, [r7, #0]
 8000a64:	683b      	ldr	r3, [r7, #0]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d109      	bne.n	8000a7e <SX1278_LoRaTxPacket+0x6e>
			SX1278_hw_Reset(module->hw);
 8000a6a:	68fb      	ldr	r3, [r7, #12]
 8000a6c:	681b      	ldr	r3, [r3, #0]
 8000a6e:	4618      	mov	r0, r3
 8000a70:	f000 f88c 	bl	8000b8c <SX1278_hw_Reset>
			SX1278_config(module);
 8000a74:	68f8      	ldr	r0, [r7, #12]
 8000a76:	f7ff fe35 	bl	80006e4 <SX1278_config>
			return 0;
 8000a7a:	2300      	movs	r3, #0
 8000a7c:	e003      	b.n	8000a86 <SX1278_LoRaTxPacket+0x76>
		}
		SX1278_hw_DelayMs(1);
 8000a7e:	2001      	movs	r0, #1
 8000a80:	f000 f8ee 	bl	8000c60 <SX1278_hw_DelayMs>
		if (SX1278_hw_GetDIO0(module->hw)) { //if(Get_NIRQ()) //Packet send over
 8000a84:	e7d7      	b.n	8000a36 <SX1278_LoRaTxPacket+0x26>
	}
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	3710      	adds	r7, #16
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	bd80      	pop	{r7, pc}

08000a8e <SX1278_init>:

void SX1278_init(SX1278_t *module, uint64_t frequency, uint8_t power,
		uint8_t LoRa_SF, uint8_t LoRa_BW, uint8_t LoRa_CR,
		uint8_t LoRa_CRC_sum, uint8_t packetLength) {
 8000a8e:	b580      	push	{r7, lr}
 8000a90:	b084      	sub	sp, #16
 8000a92:	af00      	add	r7, sp, #0
 8000a94:	60f8      	str	r0, [r7, #12]
 8000a96:	e9c7 2300 	strd	r2, r3, [r7]
	SX1278_hw_init(module->hw);
 8000a9a:	68fb      	ldr	r3, [r7, #12]
 8000a9c:	681b      	ldr	r3, [r3, #0]
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	f000 f848 	bl	8000b34 <SX1278_hw_init>
	module->frequency = frequency;
 8000aa4:	68f9      	ldr	r1, [r7, #12]
 8000aa6:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000aaa:	e9c1 2302 	strd	r2, r3, [r1, #8]
	module->power = power;
 8000aae:	68fb      	ldr	r3, [r7, #12]
 8000ab0:	7e3a      	ldrb	r2, [r7, #24]
 8000ab2:	741a      	strb	r2, [r3, #16]
	module->LoRa_SF = LoRa_SF;
 8000ab4:	68fb      	ldr	r3, [r7, #12]
 8000ab6:	7f3a      	ldrb	r2, [r7, #28]
 8000ab8:	745a      	strb	r2, [r3, #17]
	module->LoRa_BW = LoRa_BW;
 8000aba:	68fb      	ldr	r3, [r7, #12]
 8000abc:	f897 2020 	ldrb.w	r2, [r7, #32]
 8000ac0:	749a      	strb	r2, [r3, #18]
	module->LoRa_CR = LoRa_CR;
 8000ac2:	68fb      	ldr	r3, [r7, #12]
 8000ac4:	f897 2024 	ldrb.w	r2, [r7, #36]	@ 0x24
 8000ac8:	74da      	strb	r2, [r3, #19]
	module->LoRa_CRC_sum = LoRa_CRC_sum;
 8000aca:	68fb      	ldr	r3, [r7, #12]
 8000acc:	f897 2028 	ldrb.w	r2, [r7, #40]	@ 0x28
 8000ad0:	751a      	strb	r2, [r3, #20]
	module->packetLength = packetLength;
 8000ad2:	68fb      	ldr	r3, [r7, #12]
 8000ad4:	f897 202c 	ldrb.w	r2, [r7, #44]	@ 0x2c
 8000ad8:	755a      	strb	r2, [r3, #21]
	SX1278_config(module);
 8000ada:	68f8      	ldr	r0, [r7, #12]
 8000adc:	f7ff fe02 	bl	80006e4 <SX1278_config>
}
 8000ae0:	bf00      	nop
 8000ae2:	3710      	adds	r7, #16
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	bd80      	pop	{r7, pc}

08000ae8 <SX1278_read>:

uint8_t SX1278_available(SX1278_t *module) {
	return SX1278_LoRaRxPacket(module);
}

uint8_t SX1278_read(SX1278_t *module, uint8_t *rxBuf, uint8_t length) {
 8000ae8:	b580      	push	{r7, lr}
 8000aea:	b084      	sub	sp, #16
 8000aec:	af00      	add	r7, sp, #0
 8000aee:	60f8      	str	r0, [r7, #12]
 8000af0:	60b9      	str	r1, [r7, #8]
 8000af2:	4613      	mov	r3, r2
 8000af4:	71fb      	strb	r3, [r7, #7]
	if (length != module->readBytes)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000afc:	79fa      	ldrb	r2, [r7, #7]
 8000afe:	429a      	cmp	r2, r3
 8000b00:	d003      	beq.n	8000b0a <SX1278_read+0x22>
		length = module->readBytes;
 8000b02:	68fb      	ldr	r3, [r7, #12]
 8000b04:	f893 3117 	ldrb.w	r3, [r3, #279]	@ 0x117
 8000b08:	71fb      	strb	r3, [r7, #7]
	memcpy(rxBuf, module->rxBuffer, length);
 8000b0a:	68fb      	ldr	r3, [r7, #12]
 8000b0c:	3317      	adds	r3, #23
 8000b0e:	79fa      	ldrb	r2, [r7, #7]
 8000b10:	4619      	mov	r1, r3
 8000b12:	68b8      	ldr	r0, [r7, #8]
 8000b14:	f003 fe5d 	bl	80047d2 <memcpy>
	rxBuf[length] = '\0';
 8000b18:	79fb      	ldrb	r3, [r7, #7]
 8000b1a:	68ba      	ldr	r2, [r7, #8]
 8000b1c:	4413      	add	r3, r2
 8000b1e:	2200      	movs	r2, #0
 8000b20:	701a      	strb	r2, [r3, #0]
	module->readBytes = 0;
 8000b22:	68fb      	ldr	r3, [r7, #12]
 8000b24:	2200      	movs	r2, #0
 8000b26:	f883 2117 	strb.w	r2, [r3, #279]	@ 0x117
	return length;
 8000b2a:	79fb      	ldrb	r3, [r7, #7]
}
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	3710      	adds	r7, #16
 8000b30:	46bd      	mov	sp, r7
 8000b32:	bd80      	pop	{r7, pc}

08000b34 <SX1278_hw_init>:
	#include <string.h>

	#include "gpio.h"
	#include "spi.h"

	__weak void SX1278_hw_init(SX1278_hw_t *hw) {
 8000b34:	b580      	push	{r7, lr}
 8000b36:	b082      	sub	sp, #8
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	6078      	str	r0, [r7, #4]
		SX1278_hw_SetNSS(hw, 1);
 8000b3c:	2101      	movs	r1, #1
 8000b3e:	6878      	ldr	r0, [r7, #4]
 8000b40:	f000 f80d 	bl	8000b5e <SX1278_hw_SetNSS>
		HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000b44:	687b      	ldr	r3, [r7, #4]
 8000b46:	6858      	ldr	r0, [r3, #4]
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	681b      	ldr	r3, [r3, #0]
 8000b4c:	b29b      	uxth	r3, r3
 8000b4e:	2201      	movs	r2, #1
 8000b50:	4619      	mov	r1, r3
 8000b52:	f001 f91f 	bl	8001d94 <HAL_GPIO_WritePin>
	}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}

08000b5e <SX1278_hw_SetNSS>:

	__weak void SX1278_hw_SetNSS(SX1278_hw_t *hw, int value) {
 8000b5e:	b580      	push	{r7, lr}
 8000b60:	b082      	sub	sp, #8
 8000b62:	af00      	add	r7, sp, #0
 8000b64:	6078      	str	r0, [r7, #4]
 8000b66:	6039      	str	r1, [r7, #0]
		HAL_GPIO_WritePin(hw->nss.port, hw->nss.pin,
 8000b68:	687b      	ldr	r3, [r7, #4]
 8000b6a:	6958      	ldr	r0, [r3, #20]
 8000b6c:	687b      	ldr	r3, [r7, #4]
 8000b6e:	691b      	ldr	r3, [r3, #16]
 8000b70:	b299      	uxth	r1, r3
 8000b72:	683b      	ldr	r3, [r7, #0]
 8000b74:	2b01      	cmp	r3, #1
 8000b76:	bf0c      	ite	eq
 8000b78:	2301      	moveq	r3, #1
 8000b7a:	2300      	movne	r3, #0
 8000b7c:	b2db      	uxtb	r3, r3
 8000b7e:	461a      	mov	r2, r3
 8000b80:	f001 f908 	bl	8001d94 <HAL_GPIO_WritePin>
				(value == 1) ? GPIO_PIN_SET : GPIO_PIN_RESET);
	}
 8000b84:	bf00      	nop
 8000b86:	3708      	adds	r7, #8
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}

08000b8c <SX1278_hw_Reset>:

	__weak void SX1278_hw_Reset(SX1278_hw_t *hw) {
 8000b8c:	b580      	push	{r7, lr}
 8000b8e:	b082      	sub	sp, #8
 8000b90:	af00      	add	r7, sp, #0
 8000b92:	6078      	str	r0, [r7, #4]
		SX1278_hw_SetNSS(hw, 1);
 8000b94:	2101      	movs	r1, #1
 8000b96:	6878      	ldr	r0, [r7, #4]
 8000b98:	f7ff ffe1 	bl	8000b5e <SX1278_hw_SetNSS>
		HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_RESET);
 8000b9c:	687b      	ldr	r3, [r7, #4]
 8000b9e:	6858      	ldr	r0, [r3, #4]
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	b29b      	uxth	r3, r3
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	4619      	mov	r1, r3
 8000baa:	f001 f8f3 	bl	8001d94 <HAL_GPIO_WritePin>

		SX1278_hw_DelayMs(1);
 8000bae:	2001      	movs	r0, #1
 8000bb0:	f000 f856 	bl	8000c60 <SX1278_hw_DelayMs>

		HAL_GPIO_WritePin(hw->reset.port, hw->reset.pin, GPIO_PIN_SET);
 8000bb4:	687b      	ldr	r3, [r7, #4]
 8000bb6:	6858      	ldr	r0, [r3, #4]
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	b29b      	uxth	r3, r3
 8000bbe:	2201      	movs	r2, #1
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	f001 f8e7 	bl	8001d94 <HAL_GPIO_WritePin>

		SX1278_hw_DelayMs(100);
 8000bc6:	2064      	movs	r0, #100	@ 0x64
 8000bc8:	f000 f84a 	bl	8000c60 <SX1278_hw_DelayMs>
	}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}

08000bd4 <SX1278_hw_SPICommand>:

	__weak void SX1278_hw_SPICommand(SX1278_hw_t *hw, uint8_t cmd) {
 8000bd4:	b580      	push	{r7, lr}
 8000bd6:	b082      	sub	sp, #8
 8000bd8:	af00      	add	r7, sp, #0
 8000bda:	6078      	str	r0, [r7, #4]
 8000bdc:	460b      	mov	r3, r1
 8000bde:	70fb      	strb	r3, [r7, #3]
		SX1278_hw_SetNSS(hw, 0);
 8000be0:	2100      	movs	r1, #0
 8000be2:	6878      	ldr	r0, [r7, #4]
 8000be4:	f7ff ffbb 	bl	8000b5e <SX1278_hw_SetNSS>
		HAL_SPI_Transmit(hw->spi, &cmd, 1, 1000);
 8000be8:	687b      	ldr	r3, [r7, #4]
 8000bea:	6998      	ldr	r0, [r3, #24]
 8000bec:	1cf9      	adds	r1, r7, #3
 8000bee:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	f002 fc75 	bl	80034e2 <HAL_SPI_Transmit>
		while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000bf8:	bf00      	nop
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	699b      	ldr	r3, [r3, #24]
 8000bfe:	4618      	mov	r0, r3
 8000c00:	f002 ff5c 	bl	8003abc <HAL_SPI_GetState>
 8000c04:	4603      	mov	r3, r0
 8000c06:	2b01      	cmp	r3, #1
 8000c08:	d1f7      	bne.n	8000bfa <SX1278_hw_SPICommand+0x26>
			;
	}
 8000c0a:	bf00      	nop
 8000c0c:	bf00      	nop
 8000c0e:	3708      	adds	r7, #8
 8000c10:	46bd      	mov	sp, r7
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <SX1278_hw_SPIReadByte>:

	__weak uint8_t SX1278_hw_SPIReadByte(SX1278_hw_t *hw) {
 8000c14:	b580      	push	{r7, lr}
 8000c16:	b086      	sub	sp, #24
 8000c18:	af02      	add	r7, sp, #8
 8000c1a:	6078      	str	r0, [r7, #4]
		uint8_t txByte = 0x00;
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	73fb      	strb	r3, [r7, #15]
		uint8_t rxByte = 0x00;
 8000c20:	2300      	movs	r3, #0
 8000c22:	73bb      	strb	r3, [r7, #14]

		SX1278_hw_SetNSS(hw, 0);
 8000c24:	2100      	movs	r1, #0
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ff99 	bl	8000b5e <SX1278_hw_SetNSS>
		HAL_SPI_TransmitReceive(hw->spi, &txByte, &rxByte, 1, 1000);
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	6998      	ldr	r0, [r3, #24]
 8000c30:	f107 020e 	add.w	r2, r7, #14
 8000c34:	f107 010f 	add.w	r1, r7, #15
 8000c38:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c3c:	9300      	str	r3, [sp, #0]
 8000c3e:	2301      	movs	r3, #1
 8000c40:	f002 fd93 	bl	800376a <HAL_SPI_TransmitReceive>
		while (HAL_SPI_GetState(hw->spi) != HAL_SPI_STATE_READY)
 8000c44:	bf00      	nop
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	699b      	ldr	r3, [r3, #24]
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	f002 ff36 	bl	8003abc <HAL_SPI_GetState>
 8000c50:	4603      	mov	r3, r0
 8000c52:	2b01      	cmp	r3, #1
 8000c54:	d1f7      	bne.n	8000c46 <SX1278_hw_SPIReadByte+0x32>
			;
		return rxByte;
 8000c56:	7bbb      	ldrb	r3, [r7, #14]
	}
 8000c58:	4618      	mov	r0, r3
 8000c5a:	3710      	adds	r7, #16
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	bd80      	pop	{r7, pc}

08000c60 <SX1278_hw_DelayMs>:

	__weak void SX1278_hw_DelayMs(uint32_t msec) {
 8000c60:	b580      	push	{r7, lr}
 8000c62:	b082      	sub	sp, #8
 8000c64:	af00      	add	r7, sp, #0
 8000c66:	6078      	str	r0, [r7, #4]
		HAL_Delay(msec);
 8000c68:	6878      	ldr	r0, [r7, #4]
 8000c6a:	f000 fdb1 	bl	80017d0 <HAL_Delay>
	}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}

08000c76 <SX1278_hw_GetDIO0>:

	__weak int SX1278_hw_GetDIO0(SX1278_hw_t *hw) {
 8000c76:	b580      	push	{r7, lr}
 8000c78:	b082      	sub	sp, #8
 8000c7a:	af00      	add	r7, sp, #0
 8000c7c:	6078      	str	r0, [r7, #4]
		return (HAL_GPIO_ReadPin(hw->dio0.port, hw->dio0.pin) == GPIO_PIN_SET);
 8000c7e:	687b      	ldr	r3, [r7, #4]
 8000c80:	68da      	ldr	r2, [r3, #12]
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	689b      	ldr	r3, [r3, #8]
 8000c86:	b29b      	uxth	r3, r3
 8000c88:	4619      	mov	r1, r3
 8000c8a:	4610      	mov	r0, r2
 8000c8c:	f001 f86a 	bl	8001d64 <HAL_GPIO_ReadPin>
 8000c90:	4603      	mov	r3, r0
 8000c92:	2b01      	cmp	r3, #1
 8000c94:	bf0c      	ite	eq
 8000c96:	2301      	moveq	r3, #1
 8000c98:	2300      	movne	r3, #0
 8000c9a:	b2db      	uxtb	r3, r3
	}
 8000c9c:	4618      	mov	r0, r3
 8000c9e:	3708      	adds	r7, #8
 8000ca0:	46bd      	mov	sp, r7
 8000ca2:	bd80      	pop	{r7, pc}

08000ca4 <MX_GPIO_Init>:
     PA10   ------> USB_OTG_FS_ID
     PA11   ------> USB_OTG_FS_DM
     PA12   ------> USB_OTG_FS_DP
*/
void MX_GPIO_Init(void)
{
 8000ca4:	b580      	push	{r7, lr}
 8000ca6:	b08c      	sub	sp, #48	@ 0x30
 8000ca8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000caa:	f107 031c 	add.w	r3, r7, #28
 8000cae:	2200      	movs	r2, #0
 8000cb0:	601a      	str	r2, [r3, #0]
 8000cb2:	605a      	str	r2, [r3, #4]
 8000cb4:	609a      	str	r2, [r3, #8]
 8000cb6:	60da      	str	r2, [r3, #12]
 8000cb8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cba:	2300      	movs	r3, #0
 8000cbc:	61bb      	str	r3, [r7, #24]
 8000cbe:	4b75      	ldr	r3, [pc, #468]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000cc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cc2:	4a74      	ldr	r2, [pc, #464]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000cc4:	f043 0304 	orr.w	r3, r3, #4
 8000cc8:	6313      	str	r3, [r2, #48]	@ 0x30
 8000cca:	4b72      	ldr	r3, [pc, #456]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000ccc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cce:	f003 0304 	and.w	r3, r3, #4
 8000cd2:	61bb      	str	r3, [r7, #24]
 8000cd4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cd6:	2300      	movs	r3, #0
 8000cd8:	617b      	str	r3, [r7, #20]
 8000cda:	4b6e      	ldr	r3, [pc, #440]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000cdc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cde:	4a6d      	ldr	r2, [pc, #436]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000ce0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000ce4:	6313      	str	r3, [r2, #48]	@ 0x30
 8000ce6:	4b6b      	ldr	r3, [pc, #428]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000cee:	617b      	str	r3, [r7, #20]
 8000cf0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	613b      	str	r3, [r7, #16]
 8000cf6:	4b67      	ldr	r3, [pc, #412]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000cf8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000cfa:	4a66      	ldr	r2, [pc, #408]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000cfc:	f043 0301 	orr.w	r3, r3, #1
 8000d00:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d02:	4b64      	ldr	r3, [pc, #400]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d06:	f003 0301 	and.w	r3, r3, #1
 8000d0a:	613b      	str	r3, [r7, #16]
 8000d0c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d0e:	2300      	movs	r3, #0
 8000d10:	60fb      	str	r3, [r7, #12]
 8000d12:	4b60      	ldr	r3, [pc, #384]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000d14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d16:	4a5f      	ldr	r2, [pc, #380]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000d18:	f043 0302 	orr.w	r3, r3, #2
 8000d1c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d1e:	4b5d      	ldr	r3, [pc, #372]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d22:	f003 0302 	and.w	r3, r3, #2
 8000d26:	60fb      	str	r3, [r7, #12]
 8000d28:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d2a:	2300      	movs	r3, #0
 8000d2c:	60bb      	str	r3, [r7, #8]
 8000d2e:	4b59      	ldr	r3, [pc, #356]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000d30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d32:	4a58      	ldr	r2, [pc, #352]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000d34:	f043 0308 	orr.w	r3, r3, #8
 8000d38:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d3a:	4b56      	ldr	r3, [pc, #344]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000d3c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d3e:	f003 0308 	and.w	r3, r3, #8
 8000d42:	60bb      	str	r3, [r7, #8]
 8000d44:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000d46:	2300      	movs	r3, #0
 8000d48:	607b      	str	r3, [r7, #4]
 8000d4a:	4b52      	ldr	r3, [pc, #328]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000d4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d4e:	4a51      	ldr	r2, [pc, #324]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000d50:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000d54:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d56:	4b4f      	ldr	r3, [pc, #316]	@ (8000e94 <MX_GPIO_Init+0x1f0>)
 8000d58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d5a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000d5e:	607b      	str	r3, [r7, #4]
 8000d60:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NSS_GPIO_Port, NSS_Pin, GPIO_PIN_SET);
 8000d62:	2201      	movs	r2, #1
 8000d64:	2110      	movs	r1, #16
 8000d66:	484c      	ldr	r0, [pc, #304]	@ (8000e98 <MX_GPIO_Init+0x1f4>)
 8000d68:	f001 f814 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	f244 0181 	movw	r1, #16513	@ 0x4081
 8000d72:	484a      	ldr	r0, [pc, #296]	@ (8000e9c <MX_GPIO_Init+0x1f8>)
 8000d74:	f001 f80e 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000d78:	2200      	movs	r2, #0
 8000d7a:	2140      	movs	r1, #64	@ 0x40
 8000d7c:	4848      	ldr	r0, [pc, #288]	@ (8000ea0 <MX_GPIO_Init+0x1fc>)
 8000d7e:	f001 f809 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(RESET_GPIO_Port, RESET_Pin, GPIO_PIN_SET);
 8000d82:	2201      	movs	r2, #1
 8000d84:	2110      	movs	r1, #16
 8000d86:	4845      	ldr	r0, [pc, #276]	@ (8000e9c <MX_GPIO_Init+0x1f8>)
 8000d88:	f001 f804 	bl	8001d94 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MODE_Pin */
  GPIO_InitStruct.Pin = MODE_Pin;
 8000d8c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000d92:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000d96:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(MODE_GPIO_Port, &GPIO_InitStruct);
 8000d9c:	f107 031c 	add.w	r3, r7, #28
 8000da0:	4619      	mov	r1, r3
 8000da2:	4840      	ldr	r0, [pc, #256]	@ (8000ea4 <MX_GPIO_Init+0x200>)
 8000da4:	f000 fe4a 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : NSS_Pin */
  GPIO_InitStruct.Pin = NSS_Pin;
 8000da8:	2310      	movs	r3, #16
 8000daa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dac:	2301      	movs	r3, #1
 8000dae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000db4:	2300      	movs	r3, #0
 8000db6:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(NSS_GPIO_Port, &GPIO_InitStruct);
 8000db8:	f107 031c 	add.w	r3, r7, #28
 8000dbc:	4619      	mov	r1, r3
 8000dbe:	4836      	ldr	r0, [pc, #216]	@ (8000e98 <MX_GPIO_Init+0x1f4>)
 8000dc0:	f000 fe3c 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin RESET_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|RESET_Pin|LD2_Pin;
 8000dc4:	f244 0391 	movw	r3, #16529	@ 0x4091
 8000dc8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000dca:	2301      	movs	r3, #1
 8000dcc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dce:	2300      	movs	r3, #0
 8000dd0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000dd6:	f107 031c 	add.w	r3, r7, #28
 8000dda:	4619      	mov	r1, r3
 8000ddc:	482f      	ldr	r0, [pc, #188]	@ (8000e9c <MX_GPIO_Init+0x1f8>)
 8000dde:	f000 fe2d 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : DIO0_Pin */
  GPIO_InitStruct.Pin = DIO0_Pin;
 8000de2:	2302      	movs	r3, #2
 8000de4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000de6:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000dea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000dec:	2300      	movs	r3, #0
 8000dee:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(DIO0_GPIO_Port, &GPIO_InitStruct);
 8000df0:	f107 031c 	add.w	r3, r7, #28
 8000df4:	4619      	mov	r1, r3
 8000df6:	4829      	ldr	r0, [pc, #164]	@ (8000e9c <MX_GPIO_Init+0x1f8>)
 8000df8:	f000 fe20 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 8000dfc:	2340      	movs	r3, #64	@ 0x40
 8000dfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e00:	2301      	movs	r3, #1
 8000e02:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e04:	2300      	movs	r3, #0
 8000e06:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e08:	2300      	movs	r3, #0
 8000e0a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000e0c:	f107 031c 	add.w	r3, r7, #28
 8000e10:	4619      	mov	r1, r3
 8000e12:	4823      	ldr	r0, [pc, #140]	@ (8000ea0 <MX_GPIO_Init+0x1fc>)
 8000e14:	f000 fe12 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000e18:	2380      	movs	r3, #128	@ 0x80
 8000e1a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000e24:	f107 031c 	add.w	r3, r7, #28
 8000e28:	4619      	mov	r1, r3
 8000e2a:	481d      	ldr	r0, [pc, #116]	@ (8000ea0 <MX_GPIO_Init+0x1fc>)
 8000e2c:	f000 fe06 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pins : USB_SOF_Pin PA10 USB_DM_Pin USB_DP_Pin */
  GPIO_InitStruct.Pin = USB_SOF_Pin|GPIO_PIN_10|USB_DM_Pin|USB_DP_Pin;
 8000e30:	f44f 53e8 	mov.w	r3, #7424	@ 0x1d00
 8000e34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e36:	2302      	movs	r3, #2
 8000e38:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e3e:	2303      	movs	r3, #3
 8000e40:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e42:	230a      	movs	r3, #10
 8000e44:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e46:	f107 031c 	add.w	r3, r7, #28
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4812      	ldr	r0, [pc, #72]	@ (8000e98 <MX_GPIO_Init+0x1f4>)
 8000e4e:	f000 fdf5 	bl	8001a3c <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_VBUS_Pin */
  GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e52:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000e56:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e5c:	2300      	movs	r3, #0
 8000e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e60:	f107 031c 	add.w	r3, r7, #28
 8000e64:	4619      	mov	r1, r3
 8000e66:	480c      	ldr	r0, [pc, #48]	@ (8000e98 <MX_GPIO_Init+0x1f4>)
 8000e68:	f000 fde8 	bl	8001a3c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI1_IRQn, 0, 0);
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	2100      	movs	r1, #0
 8000e70:	2007      	movs	r0, #7
 8000e72:	f000 fdac 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 8000e76:	2007      	movs	r0, #7
 8000e78:	f000 fdc5 	bl	8001a06 <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	2100      	movs	r1, #0
 8000e80:	2028      	movs	r0, #40	@ 0x28
 8000e82:	f000 fda4 	bl	80019ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000e86:	2028      	movs	r0, #40	@ 0x28
 8000e88:	f000 fdbd 	bl	8001a06 <HAL_NVIC_EnableIRQ>

}
 8000e8c:	bf00      	nop
 8000e8e:	3730      	adds	r7, #48	@ 0x30
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}
 8000e94:	40023800 	.word	0x40023800
 8000e98:	40020000 	.word	0x40020000
 8000e9c:	40020400 	.word	0x40020400
 8000ea0:	40021800 	.word	0x40021800
 8000ea4:	40020800 	.word	0x40020800

08000ea8 <_write>:

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

	int _write(int file, char *ptr, int len) {
 8000ea8:	b480      	push	{r7}
 8000eaa:	b087      	sub	sp, #28
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	60f8      	str	r0, [r7, #12]
 8000eb0:	60b9      	str	r1, [r7, #8]
 8000eb2:	607a      	str	r2, [r7, #4]
		for (int idx = 0; idx < len; idx++) {
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	617b      	str	r3, [r7, #20]
 8000eb8:	e00f      	b.n	8000eda <_write+0x32>
				while(!(USART3 -> SR & USART_SR_TXE));
 8000eba:	bf00      	nop
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <_write+0x48>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d0f9      	beq.n	8000ebc <_write+0x14>
				USART3->DR = (uint8_t)ptr[idx];
 8000ec8:	697b      	ldr	r3, [r7, #20]
 8000eca:	68ba      	ldr	r2, [r7, #8]
 8000ecc:	4413      	add	r3, r2
 8000ece:	781a      	ldrb	r2, [r3, #0]
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <_write+0x48>)
 8000ed2:	605a      	str	r2, [r3, #4]
		for (int idx = 0; idx < len; idx++) {
 8000ed4:	697b      	ldr	r3, [r7, #20]
 8000ed6:	3301      	adds	r3, #1
 8000ed8:	617b      	str	r3, [r7, #20]
 8000eda:	697a      	ldr	r2, [r7, #20]
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	429a      	cmp	r2, r3
 8000ee0:	dbeb      	blt.n	8000eba <_write+0x12>
		}
		return len;
 8000ee2:	687b      	ldr	r3, [r7, #4]
	}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	371c      	adds	r7, #28
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	40004800 	.word	0x40004800

08000ef4 <get_timestamp_string>:

	RTC_TimeTypeDef sTime;
	RTC_DateTypeDef sDate;

	void get_timestamp_string(char *timestamp_str, uint32_t max_len)
	{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af02      	add	r7, sp, #8
 8000efa:	6078      	str	r0, [r7, #4]
 8000efc:	6039      	str	r1, [r7, #0]
	  // Get current time and date from RTC
	  HAL_RTC_GetTime(&hrtc, &sTime, RTC_FORMAT_BIN);
 8000efe:	2200      	movs	r2, #0
 8000f00:	490e      	ldr	r1, [pc, #56]	@ (8000f3c <get_timestamp_string+0x48>)
 8000f02:	480f      	ldr	r0, [pc, #60]	@ (8000f40 <get_timestamp_string+0x4c>)
 8000f04:	f002 f917 	bl	8003136 <HAL_RTC_GetTime>
	  HAL_RTC_GetDate(&hrtc, &sDate, RTC_FORMAT_BIN); // This is necessary after HAL_RTC_GetTime
 8000f08:	2200      	movs	r2, #0
 8000f0a:	490e      	ldr	r1, [pc, #56]	@ (8000f44 <get_timestamp_string+0x50>)
 8000f0c:	480c      	ldr	r0, [pc, #48]	@ (8000f40 <get_timestamp_string+0x4c>)
 8000f0e:	f002 f970 	bl	80031f2 <HAL_RTC_GetDate>

	  // Format the timestamp string as "YYYY-MM-DD HH:MM:SS"
	  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
			   sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f12:	4b0a      	ldr	r3, [pc, #40]	@ (8000f3c <get_timestamp_string+0x48>)
 8000f14:	781b      	ldrb	r3, [r3, #0]
	  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000f16:	4619      	mov	r1, r3
			   sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f18:	4b08      	ldr	r3, [pc, #32]	@ (8000f3c <get_timestamp_string+0x48>)
 8000f1a:	785b      	ldrb	r3, [r3, #1]
	  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000f1c:	461a      	mov	r2, r3
			   sTime.Hours, sTime.Minutes, sTime.Seconds);
 8000f1e:	4b07      	ldr	r3, [pc, #28]	@ (8000f3c <get_timestamp_string+0x48>)
 8000f20:	789b      	ldrb	r3, [r3, #2]
	  snprintf(timestamp_str, max_len, "%02d:%02d:%02d",
 8000f22:	9301      	str	r3, [sp, #4]
 8000f24:	9200      	str	r2, [sp, #0]
 8000f26:	460b      	mov	r3, r1
 8000f28:	4a07      	ldr	r2, [pc, #28]	@ (8000f48 <get_timestamp_string+0x54>)
 8000f2a:	6839      	ldr	r1, [r7, #0]
 8000f2c:	6878      	ldr	r0, [r7, #4]
 8000f2e:	f003 faa5 	bl	800447c <sniprintf>
	}
 8000f32:	bf00      	nop
 8000f34:	3708      	adds	r7, #8
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bd80      	pop	{r7, pc}
 8000f3a:	bf00      	nop
 8000f3c:	20000088 	.word	0x20000088
 8000f40:	200003e0 	.word	0x200003e0
 8000f44:	2000009c 	.word	0x2000009c
 8000f48:	08005564 	.word	0x08005564
 8000f4c:	00000000 	.word	0x00000000

08000f50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f50:	b580      	push	{r7, lr}
 8000f52:	b08c      	sub	sp, #48	@ 0x30
 8000f54:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f56:	f000 fbc9 	bl	80016ec <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f5a:	f000 f8bf 	bl	80010dc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5e:	f7ff fea1 	bl	8000ca4 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f62:	f000 fb1f 	bl	80015a4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_USB_Init();
 8000f66:	f000 fb8f 	bl	8001688 <MX_USB_OTG_FS_USB_Init>
  MX_SPI2_Init();
 8000f6a:	f000 f97d 	bl	8001268 <MX_SPI2_Init>
  MX_RTC_Init();
 8000f6e:	f000 f92b 	bl	80011c8 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */

		//initialize LoRa module
		SX1278_hw.dio0.port = DIO0_GPIO_Port;
 8000f72:	4b49      	ldr	r3, [pc, #292]	@ (8001098 <main+0x148>)
 8000f74:	4a49      	ldr	r2, [pc, #292]	@ (800109c <main+0x14c>)
 8000f76:	60da      	str	r2, [r3, #12]
		SX1278_hw.dio0.pin = DIO0_Pin;
 8000f78:	4b47      	ldr	r3, [pc, #284]	@ (8001098 <main+0x148>)
 8000f7a:	2202      	movs	r2, #2
 8000f7c:	609a      	str	r2, [r3, #8]
		SX1278_hw.nss.port = NSS_GPIO_Port;
 8000f7e:	4b46      	ldr	r3, [pc, #280]	@ (8001098 <main+0x148>)
 8000f80:	4a47      	ldr	r2, [pc, #284]	@ (80010a0 <main+0x150>)
 8000f82:	615a      	str	r2, [r3, #20]
		SX1278_hw.nss.pin = NSS_Pin;
 8000f84:	4b44      	ldr	r3, [pc, #272]	@ (8001098 <main+0x148>)
 8000f86:	2210      	movs	r2, #16
 8000f88:	611a      	str	r2, [r3, #16]
		SX1278_hw.reset.port = RESET_GPIO_Port;
 8000f8a:	4b43      	ldr	r3, [pc, #268]	@ (8001098 <main+0x148>)
 8000f8c:	4a43      	ldr	r2, [pc, #268]	@ (800109c <main+0x14c>)
 8000f8e:	605a      	str	r2, [r3, #4]
		SX1278_hw.reset.pin = RESET_Pin;
 8000f90:	4b41      	ldr	r3, [pc, #260]	@ (8001098 <main+0x148>)
 8000f92:	2210      	movs	r2, #16
 8000f94:	601a      	str	r2, [r3, #0]
		SX1278_hw.spi = &hspi2;
 8000f96:	4b40      	ldr	r3, [pc, #256]	@ (8001098 <main+0x148>)
 8000f98:	4a42      	ldr	r2, [pc, #264]	@ (80010a4 <main+0x154>)
 8000f9a:	619a      	str	r2, [r3, #24]

		SX1278.hw = &SX1278_hw;
 8000f9c:	4b42      	ldr	r3, [pc, #264]	@ (80010a8 <main+0x158>)
 8000f9e:	4a3e      	ldr	r2, [pc, #248]	@ (8001098 <main+0x148>)
 8000fa0:	601a      	str	r2, [r3, #0]

		printf("Configuring LoRa module\r\n");
 8000fa2:	4842      	ldr	r0, [pc, #264]	@ (80010ac <main+0x15c>)
 8000fa4:	f003 fa62 	bl	800446c <puts>
		SX1278_hw_Reset(SX1278.hw);
 8000fa8:	4b3f      	ldr	r3, [pc, #252]	@ (80010a8 <main+0x158>)
 8000faa:	681b      	ldr	r3, [r3, #0]
 8000fac:	4618      	mov	r0, r3
 8000fae:	f7ff fded 	bl	8000b8c <SX1278_hw_Reset>
		HAL_Delay(10);
 8000fb2:	200a      	movs	r0, #10
 8000fb4:	f000 fc0c 	bl	80017d0 <HAL_Delay>
		SX1278_init(&SX1278, 433000000, SX1278_POWER_17DBM, SX1278_LORA_SF_9,
 8000fb8:	23fa      	movs	r3, #250	@ 0xfa
 8000fba:	9305      	str	r3, [sp, #20]
 8000fbc:	2300      	movs	r3, #0
 8000fbe:	9304      	str	r3, [sp, #16]
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	9303      	str	r3, [sp, #12]
 8000fc4:	2307      	movs	r3, #7
 8000fc6:	9302      	str	r3, [sp, #8]
 8000fc8:	2303      	movs	r3, #3
 8000fca:	9301      	str	r3, [sp, #4]
 8000fcc:	2301      	movs	r3, #1
 8000fce:	9300      	str	r3, [sp, #0]
 8000fd0:	a32f      	add	r3, pc, #188	@ (adr r3, 8001090 <main+0x140>)
 8000fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000fd6:	4834      	ldr	r0, [pc, #208]	@ (80010a8 <main+0x158>)
 8000fd8:	f7ff fd59 	bl	8000a8e <SX1278_init>
		SX1278_LORA_BW_125KHZ, SX1278_LORA_CR_4_5, SX1278_LORA_CRC_EN, 250);
		printf("Done configuring LoRaModule\r\n");
 8000fdc:	4834      	ldr	r0, [pc, #208]	@ (80010b0 <main+0x160>)
 8000fde:	f003 fa45 	bl	800446c <puts>
	  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
					char timestamp[24]; // Buffer for timestamp string
					  SX1278_read(&SX1278, (uint8_t*) buffer, ret);
 8000fe2:	4b34      	ldr	r3, [pc, #208]	@ (80010b4 <main+0x164>)
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	b2db      	uxtb	r3, r3
 8000fe8:	461a      	mov	r2, r3
 8000fea:	4933      	ldr	r1, [pc, #204]	@ (80010b8 <main+0x168>)
 8000fec:	482e      	ldr	r0, [pc, #184]	@ (80010a8 <main+0x158>)
 8000fee:	f7ff fd7b 	bl	8000ae8 <SX1278_read>
					  printf("%s\r\n", buffer);
 8000ff2:	4931      	ldr	r1, [pc, #196]	@ (80010b8 <main+0x168>)
 8000ff4:	4831      	ldr	r0, [pc, #196]	@ (80010bc <main+0x16c>)
 8000ff6:	f003 f9d1 	bl	800439c <iprintf>
					  HAL_Delay(1000);
 8000ffa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000ffe:	f000 fbe7 	bl	80017d0 <HAL_Delay>

					message_length = sprintf(buffer, "Hello from Transmitter %d"
 8001002:	4b2f      	ldr	r3, [pc, #188]	@ (80010c0 <main+0x170>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	461a      	mov	r2, r3
 8001008:	492e      	ldr	r1, [pc, #184]	@ (80010c4 <main+0x174>)
 800100a:	482b      	ldr	r0, [pc, #172]	@ (80010b8 <main+0x168>)
 800100c:	f003 fa6c 	bl	80044e8 <siprintf>
 8001010:	4603      	mov	r3, r0
 8001012:	4a2d      	ldr	r2, [pc, #180]	@ (80010c8 <main+0x178>)
 8001014:	6013      	str	r3, [r2, #0]
							, message);
					get_timestamp_string(timestamp, sizeof(timestamp));
 8001016:	463b      	mov	r3, r7
 8001018:	2118      	movs	r1, #24
 800101a:	4618      	mov	r0, r3
 800101c:	f7ff ff6a 	bl	8000ef4 <get_timestamp_string>
					printf("%-8s \r\n", timestamp);
 8001020:	463b      	mov	r3, r7
 8001022:	4619      	mov	r1, r3
 8001024:	4829      	ldr	r0, [pc, #164]	@ (80010cc <main+0x17c>)
 8001026:	f003 f9b9 	bl	800439c <iprintf>
					printf("Sending %s\r\n", buffer);
 800102a:	4923      	ldr	r1, [pc, #140]	@ (80010b8 <main+0x168>)
 800102c:	4828      	ldr	r0, [pc, #160]	@ (80010d0 <main+0x180>)
 800102e:	f003 f9b5 	bl	800439c <iprintf>
					ret = SX1278_LoRaEntryTx(&SX1278, message_length, 2000);
 8001032:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <main+0x178>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	b2db      	uxtb	r3, r3
 8001038:	f44f 62fa 	mov.w	r2, #2000	@ 0x7d0
 800103c:	4619      	mov	r1, r3
 800103e:	481a      	ldr	r0, [pc, #104]	@ (80010a8 <main+0x158>)
 8001040:	f7ff fc8e 	bl	8000960 <SX1278_LoRaEntryTx>
 8001044:	4603      	mov	r3, r0
 8001046:	4a1b      	ldr	r2, [pc, #108]	@ (80010b4 <main+0x164>)
 8001048:	6013      	str	r3, [r2, #0]
					printf("Entry: %d\r\n", ret);
 800104a:	4b1a      	ldr	r3, [pc, #104]	@ (80010b4 <main+0x164>)
 800104c:	681b      	ldr	r3, [r3, #0]
 800104e:	4619      	mov	r1, r3
 8001050:	4820      	ldr	r0, [pc, #128]	@ (80010d4 <main+0x184>)
 8001052:	f003 f9a3 	bl	800439c <iprintf>
					ret = SX1278_LoRaTxPacket(&SX1278, (uint8_t*) buffer,
 8001056:	4b1c      	ldr	r3, [pc, #112]	@ (80010c8 <main+0x178>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	b2da      	uxtb	r2, r3
 800105c:	f44f 63fa 	mov.w	r3, #2000	@ 0x7d0
 8001060:	4915      	ldr	r1, [pc, #84]	@ (80010b8 <main+0x168>)
 8001062:	4811      	ldr	r0, [pc, #68]	@ (80010a8 <main+0x158>)
 8001064:	f7ff fcd4 	bl	8000a10 <SX1278_LoRaTxPacket>
 8001068:	4603      	mov	r3, r0
 800106a:	4a12      	ldr	r2, [pc, #72]	@ (80010b4 <main+0x164>)
 800106c:	6013      	str	r3, [r2, #0]
							message_length, 2000);
					message += 1;
 800106e:	4b14      	ldr	r3, [pc, #80]	@ (80010c0 <main+0x170>)
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	3301      	adds	r3, #1
 8001074:	4a12      	ldr	r2, [pc, #72]	@ (80010c0 <main+0x170>)
 8001076:	6013      	str	r3, [r2, #0]
					printf("Transmission: %d\r\n", ret);
 8001078:	4b0e      	ldr	r3, [pc, #56]	@ (80010b4 <main+0x164>)
 800107a:	681b      	ldr	r3, [r3, #0]
 800107c:	4619      	mov	r1, r3
 800107e:	4816      	ldr	r0, [pc, #88]	@ (80010d8 <main+0x188>)
 8001080:	f003 f98c 	bl	800439c <iprintf>

					HAL_Delay(500);
 8001084:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001088:	f000 fba2 	bl	80017d0 <HAL_Delay>
	  {
 800108c:	bf00      	nop
 800108e:	e7a8      	b.n	8000fe2 <main+0x92>
 8001090:	19cf0e40 	.word	0x19cf0e40
 8001094:	00000000 	.word	0x00000000
 8001098:	200000a0 	.word	0x200000a0
 800109c:	40020400 	.word	0x40020400
 80010a0:	40020000 	.word	0x40020000
 80010a4:	20000400 	.word	0x20000400
 80010a8:	200000c0 	.word	0x200000c0
 80010ac:	08005574 	.word	0x08005574
 80010b0:	08005590 	.word	0x08005590
 80010b4:	200001d8 	.word	0x200001d8
 80010b8:	200001dc 	.word	0x200001dc
 80010bc:	080055b0 	.word	0x080055b0
 80010c0:	20000084 	.word	0x20000084
 80010c4:	080055b8 	.word	0x080055b8
 80010c8:	200003dc 	.word	0x200003dc
 80010cc:	080055d4 	.word	0x080055d4
 80010d0:	080055dc 	.word	0x080055dc
 80010d4:	080055ec 	.word	0x080055ec
 80010d8:	080055f8 	.word	0x080055f8

080010dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b094      	sub	sp, #80	@ 0x50
 80010e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010e2:	f107 031c 	add.w	r3, r7, #28
 80010e6:	2234      	movs	r2, #52	@ 0x34
 80010e8:	2100      	movs	r1, #0
 80010ea:	4618      	mov	r0, r3
 80010ec:	f003 faf6 	bl	80046dc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010f0:	f107 0308 	add.w	r3, r7, #8
 80010f4:	2200      	movs	r2, #0
 80010f6:	601a      	str	r2, [r3, #0]
 80010f8:	605a      	str	r2, [r3, #4]
 80010fa:	609a      	str	r2, [r3, #8]
 80010fc:	60da      	str	r2, [r3, #12]
 80010fe:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001100:	2300      	movs	r3, #0
 8001102:	607b      	str	r3, [r7, #4]
 8001104:	4b2b      	ldr	r3, [pc, #172]	@ (80011b4 <SystemClock_Config+0xd8>)
 8001106:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001108:	4a2a      	ldr	r2, [pc, #168]	@ (80011b4 <SystemClock_Config+0xd8>)
 800110a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800110e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001110:	4b28      	ldr	r3, [pc, #160]	@ (80011b4 <SystemClock_Config+0xd8>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001114:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001118:	607b      	str	r3, [r7, #4]
 800111a:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800111c:	2300      	movs	r3, #0
 800111e:	603b      	str	r3, [r7, #0]
 8001120:	4b25      	ldr	r3, [pc, #148]	@ (80011b8 <SystemClock_Config+0xdc>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a24      	ldr	r2, [pc, #144]	@ (80011b8 <SystemClock_Config+0xdc>)
 8001126:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 800112a:	6013      	str	r3, [r2, #0]
 800112c:	4b22      	ldr	r3, [pc, #136]	@ (80011b8 <SystemClock_Config+0xdc>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001134:	603b      	str	r3, [r7, #0]
 8001136:	683b      	ldr	r3, [r7, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_HSE;
 8001138:	2309      	movs	r3, #9
 800113a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800113c:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001140:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.LSEState = RCC_LSE_OFF;
 8001142:	2300      	movs	r3, #0
 8001144:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 8001146:	2301      	movs	r3, #1
 8001148:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800114a:	2302      	movs	r3, #2
 800114c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800114e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001152:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001154:	2304      	movs	r3, #4
 8001156:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 168;
 8001158:	23a8      	movs	r3, #168	@ 0xa8
 800115a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800115c:	2302      	movs	r3, #2
 800115e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001160:	2307      	movs	r3, #7
 8001162:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 8001164:	2302      	movs	r3, #2
 8001166:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001168:	f107 031c 	add.w	r3, r7, #28
 800116c:	4618      	mov	r0, r3
 800116e:	f001 fcc3 	bl	8002af8 <HAL_RCC_OscConfig>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d001      	beq.n	800117c <SystemClock_Config+0xa0>
  {
    Error_Handler();
 8001178:	f000 f820 	bl	80011bc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800117c:	230f      	movs	r3, #15
 800117e:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001180:	2302      	movs	r3, #2
 8001182:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001184:	2300      	movs	r3, #0
 8001186:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001188:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800118c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800118e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001192:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001194:	f107 0308 	add.w	r3, r7, #8
 8001198:	2105      	movs	r1, #5
 800119a:	4618      	mov	r0, r3
 800119c:	f000 fe38 	bl	8001e10 <HAL_RCC_ClockConfig>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <SystemClock_Config+0xce>
  {
    Error_Handler();
 80011a6:	f000 f809 	bl	80011bc <Error_Handler>
  }
}
 80011aa:	bf00      	nop
 80011ac:	3750      	adds	r7, #80	@ 0x50
 80011ae:	46bd      	mov	sp, r7
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800
 80011b8:	40007000 	.word	0x40007000

080011bc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011bc:	b480      	push	{r7}
 80011be:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c0:	b672      	cpsid	i
}
 80011c2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	  /* User can add his own implementation to report the HAL error return state */
	  __disable_irq();
	  while (1)
 80011c4:	bf00      	nop
 80011c6:	e7fd      	b.n	80011c4 <Error_Handler+0x8>

080011c8 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 80011c8:	b580      	push	{r7, lr}
 80011ca:	af00      	add	r7, sp, #0

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 80011cc:	4b0f      	ldr	r3, [pc, #60]	@ (800120c <MX_RTC_Init+0x44>)
 80011ce:	4a10      	ldr	r2, [pc, #64]	@ (8001210 <MX_RTC_Init+0x48>)
 80011d0:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 80011d2:	4b0e      	ldr	r3, [pc, #56]	@ (800120c <MX_RTC_Init+0x44>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 80011d8:	4b0c      	ldr	r3, [pc, #48]	@ (800120c <MX_RTC_Init+0x44>)
 80011da:	227f      	movs	r2, #127	@ 0x7f
 80011dc:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 80011de:	4b0b      	ldr	r3, [pc, #44]	@ (800120c <MX_RTC_Init+0x44>)
 80011e0:	22ff      	movs	r2, #255	@ 0xff
 80011e2:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 80011e4:	4b09      	ldr	r3, [pc, #36]	@ (800120c <MX_RTC_Init+0x44>)
 80011e6:	2200      	movs	r2, #0
 80011e8:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 80011ea:	4b08      	ldr	r3, [pc, #32]	@ (800120c <MX_RTC_Init+0x44>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 80011f0:	4b06      	ldr	r3, [pc, #24]	@ (800120c <MX_RTC_Init+0x44>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	619a      	str	r2, [r3, #24]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 80011f6:	4805      	ldr	r0, [pc, #20]	@ (800120c <MX_RTC_Init+0x44>)
 80011f8:	f001 ff1c 	bl	8003034 <HAL_RTC_Init>
 80011fc:	4603      	mov	r3, r0
 80011fe:	2b00      	cmp	r3, #0
 8001200:	d001      	beq.n	8001206 <MX_RTC_Init+0x3e>
  {
    Error_Handler();
 8001202:	f7ff ffdb 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200003e0 	.word	0x200003e0
 8001210:	40002800 	.word	0x40002800

08001214 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b09a      	sub	sp, #104	@ 0x68
 8001218:	af00      	add	r7, sp, #0
 800121a:	6078      	str	r0, [r7, #4]

  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800121c:	f107 030c 	add.w	r3, r7, #12
 8001220:	225c      	movs	r2, #92	@ 0x5c
 8001222:	2100      	movs	r1, #0
 8001224:	4618      	mov	r0, r3
 8001226:	f003 fa59 	bl	80046dc <memset>
  if(rtcHandle->Instance==RTC)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a0c      	ldr	r2, [pc, #48]	@ (8001260 <HAL_RTC_MspInit+0x4c>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d111      	bne.n	8001258 <HAL_RTC_MspInit+0x44>

  /* USER CODE END RTC_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001234:	2320      	movs	r3, #32
 8001236:	60fb      	str	r3, [r7, #12]
    PeriphClkInitStruct.RTCClockSelection = RCC_RTCCLKSOURCE_LSI;
 8001238:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800123c:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	4618      	mov	r0, r3
 8001244:	f000 fefe 	bl	8002044 <HAL_RCCEx_PeriphCLKConfig>
 8001248:	4603      	mov	r3, r0
 800124a:	2b00      	cmp	r3, #0
 800124c:	d001      	beq.n	8001252 <HAL_RTC_MspInit+0x3e>
    {
      Error_Handler();
 800124e:	f7ff ffb5 	bl	80011bc <Error_Handler>
    }

    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001252:	4b04      	ldr	r3, [pc, #16]	@ (8001264 <HAL_RTC_MspInit+0x50>)
 8001254:	2201      	movs	r2, #1
 8001256:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8001258:	bf00      	nop
 800125a:	3768      	adds	r7, #104	@ 0x68
 800125c:	46bd      	mov	sp, r7
 800125e:	bd80      	pop	{r7, pc}
 8001260:	40002800 	.word	0x40002800
 8001264:	42470e3c 	.word	0x42470e3c

08001268 <MX_SPI2_Init>:

SPI_HandleTypeDef hspi2;

/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 800126c:	4b17      	ldr	r3, [pc, #92]	@ (80012cc <MX_SPI2_Init+0x64>)
 800126e:	4a18      	ldr	r2, [pc, #96]	@ (80012d0 <MX_SPI2_Init+0x68>)
 8001270:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8001272:	4b16      	ldr	r3, [pc, #88]	@ (80012cc <MX_SPI2_Init+0x64>)
 8001274:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001278:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800127a:	4b14      	ldr	r3, [pc, #80]	@ (80012cc <MX_SPI2_Init+0x64>)
 800127c:	2200      	movs	r2, #0
 800127e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001280:	4b12      	ldr	r3, [pc, #72]	@ (80012cc <MX_SPI2_Init+0x64>)
 8001282:	2200      	movs	r2, #0
 8001284:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001286:	4b11      	ldr	r3, [pc, #68]	@ (80012cc <MX_SPI2_Init+0x64>)
 8001288:	2200      	movs	r2, #0
 800128a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800128c:	4b0f      	ldr	r3, [pc, #60]	@ (80012cc <MX_SPI2_Init+0x64>)
 800128e:	2200      	movs	r2, #0
 8001290:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8001292:	4b0e      	ldr	r3, [pc, #56]	@ (80012cc <MX_SPI2_Init+0x64>)
 8001294:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001298:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800129a:	4b0c      	ldr	r3, [pc, #48]	@ (80012cc <MX_SPI2_Init+0x64>)
 800129c:	2200      	movs	r2, #0
 800129e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80012a0:	4b0a      	ldr	r3, [pc, #40]	@ (80012cc <MX_SPI2_Init+0x64>)
 80012a2:	2200      	movs	r2, #0
 80012a4:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80012a6:	4b09      	ldr	r3, [pc, #36]	@ (80012cc <MX_SPI2_Init+0x64>)
 80012a8:	2200      	movs	r2, #0
 80012aa:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80012ac:	4b07      	ldr	r3, [pc, #28]	@ (80012cc <MX_SPI2_Init+0x64>)
 80012ae:	2200      	movs	r2, #0
 80012b0:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi2.Init.CRCPolynomial = 10;
 80012b2:	4b06      	ldr	r3, [pc, #24]	@ (80012cc <MX_SPI2_Init+0x64>)
 80012b4:	220a      	movs	r2, #10
 80012b6:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80012b8:	4804      	ldr	r0, [pc, #16]	@ (80012cc <MX_SPI2_Init+0x64>)
 80012ba:	f002 f889 	bl	80033d0 <HAL_SPI_Init>
 80012be:	4603      	mov	r3, r0
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d001      	beq.n	80012c8 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80012c4:	f7ff ff7a 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80012c8:	bf00      	nop
 80012ca:	bd80      	pop	{r7, pc}
 80012cc:	20000400 	.word	0x20000400
 80012d0:	40003800 	.word	0x40003800

080012d4 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	b08a      	sub	sp, #40	@ 0x28
 80012d8:	af00      	add	r7, sp, #0
 80012da:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012dc:	f107 0314 	add.w	r3, r7, #20
 80012e0:	2200      	movs	r2, #0
 80012e2:	601a      	str	r2, [r3, #0]
 80012e4:	605a      	str	r2, [r3, #4]
 80012e6:	609a      	str	r2, [r3, #8]
 80012e8:	60da      	str	r2, [r3, #12]
 80012ea:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI2)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a28      	ldr	r2, [pc, #160]	@ (8001394 <HAL_SPI_MspInit+0xc0>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	d14a      	bne.n	800138c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* SPI2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80012f6:	2300      	movs	r3, #0
 80012f8:	613b      	str	r3, [r7, #16]
 80012fa:	4b27      	ldr	r3, [pc, #156]	@ (8001398 <HAL_SPI_MspInit+0xc4>)
 80012fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80012fe:	4a26      	ldr	r2, [pc, #152]	@ (8001398 <HAL_SPI_MspInit+0xc4>)
 8001300:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001304:	6413      	str	r3, [r2, #64]	@ 0x40
 8001306:	4b24      	ldr	r3, [pc, #144]	@ (8001398 <HAL_SPI_MspInit+0xc4>)
 8001308:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800130a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800130e:	613b      	str	r3, [r7, #16]
 8001310:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001312:	2300      	movs	r3, #0
 8001314:	60fb      	str	r3, [r7, #12]
 8001316:	4b20      	ldr	r3, [pc, #128]	@ (8001398 <HAL_SPI_MspInit+0xc4>)
 8001318:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800131a:	4a1f      	ldr	r2, [pc, #124]	@ (8001398 <HAL_SPI_MspInit+0xc4>)
 800131c:	f043 0304 	orr.w	r3, r3, #4
 8001320:	6313      	str	r3, [r2, #48]	@ 0x30
 8001322:	4b1d      	ldr	r3, [pc, #116]	@ (8001398 <HAL_SPI_MspInit+0xc4>)
 8001324:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001326:	f003 0304 	and.w	r3, r3, #4
 800132a:	60fb      	str	r3, [r7, #12]
 800132c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800132e:	2300      	movs	r3, #0
 8001330:	60bb      	str	r3, [r7, #8]
 8001332:	4b19      	ldr	r3, [pc, #100]	@ (8001398 <HAL_SPI_MspInit+0xc4>)
 8001334:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001336:	4a18      	ldr	r2, [pc, #96]	@ (8001398 <HAL_SPI_MspInit+0xc4>)
 8001338:	f043 0302 	orr.w	r3, r3, #2
 800133c:	6313      	str	r3, [r2, #48]	@ 0x30
 800133e:	4b16      	ldr	r3, [pc, #88]	@ (8001398 <HAL_SPI_MspInit+0xc4>)
 8001340:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001342:	f003 0302 	and.w	r3, r3, #2
 8001346:	60bb      	str	r3, [r7, #8]
 8001348:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC2     ------> SPI2_MISO
    PB13     ------> SPI2_SCK
    PB15     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 800134a:	2304      	movs	r3, #4
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001356:	2303      	movs	r3, #3
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800135a:	2305      	movs	r3, #5
 800135c:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	480d      	ldr	r0, [pc, #52]	@ (800139c <HAL_SPI_MspInit+0xc8>)
 8001366:	f000 fb69 	bl	8001a3c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_15;
 800136a:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 800136e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001370:	2302      	movs	r3, #2
 8001372:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001374:	2300      	movs	r3, #0
 8001376:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001378:	2303      	movs	r3, #3
 800137a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800137c:	2305      	movs	r3, #5
 800137e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001380:	f107 0314 	add.w	r3, r7, #20
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	@ (80013a0 <HAL_SPI_MspInit+0xcc>)
 8001388:	f000 fb58 	bl	8001a3c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 800138c:	bf00      	nop
 800138e:	3728      	adds	r7, #40	@ 0x28
 8001390:	46bd      	mov	sp, r7
 8001392:	bd80      	pop	{r7, pc}
 8001394:	40003800 	.word	0x40003800
 8001398:	40023800 	.word	0x40023800
 800139c:	40020800 	.word	0x40020800
 80013a0:	40020400 	.word	0x40020400

080013a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	b083      	sub	sp, #12
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013aa:	2300      	movs	r3, #0
 80013ac:	607b      	str	r3, [r7, #4]
 80013ae:	4b10      	ldr	r3, [pc, #64]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013b2:	4a0f      	ldr	r2, [pc, #60]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013b4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80013b8:	6453      	str	r3, [r2, #68]	@ 0x44
 80013ba:	4b0d      	ldr	r3, [pc, #52]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013bc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80013be:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80013c2:	607b      	str	r3, [r7, #4]
 80013c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c6:	2300      	movs	r3, #0
 80013c8:	603b      	str	r3, [r7, #0]
 80013ca:	4b09      	ldr	r3, [pc, #36]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013ce:	4a08      	ldr	r2, [pc, #32]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013d4:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d6:	4b06      	ldr	r3, [pc, #24]	@ (80013f0 <HAL_MspInit+0x4c>)
 80013d8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013de:	603b      	str	r3, [r7, #0]
 80013e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ec:	4770      	bx	lr
 80013ee:	bf00      	nop
 80013f0:	40023800 	.word	0x40023800

080013f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80013f8:	bf00      	nop
 80013fa:	e7fd      	b.n	80013f8 <NMI_Handler+0x4>

080013fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013fc:	b480      	push	{r7}
 80013fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001400:	bf00      	nop
 8001402:	e7fd      	b.n	8001400 <HardFault_Handler+0x4>

08001404 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001404:	b480      	push	{r7}
 8001406:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001408:	bf00      	nop
 800140a:	e7fd      	b.n	8001408 <MemManage_Handler+0x4>

0800140c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800140c:	b480      	push	{r7}
 800140e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001410:	bf00      	nop
 8001412:	e7fd      	b.n	8001410 <BusFault_Handler+0x4>

08001414 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001414:	b480      	push	{r7}
 8001416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001418:	bf00      	nop
 800141a:	e7fd      	b.n	8001418 <UsageFault_Handler+0x4>

0800141c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001420:	bf00      	nop
 8001422:	46bd      	mov	sp, r7
 8001424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001428:	4770      	bx	lr

0800142a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800142a:	b480      	push	{r7}
 800142c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800142e:	bf00      	nop
 8001430:	46bd      	mov	sp, r7
 8001432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001436:	4770      	bx	lr

08001438 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001438:	b480      	push	{r7}
 800143a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr

08001446 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001446:	b580      	push	{r7, lr}
 8001448:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800144a:	f000 f9a1 	bl	8001790 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800144e:	bf00      	nop
 8001450:	bd80      	pop	{r7, pc}

08001452 <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line 1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8001452:	b580      	push	{r7, lr}
 8001454:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(DIO0_Pin);
 8001456:	2002      	movs	r0, #2
 8001458:	f000 fcb6 	bl	8001dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 800145c:	bf00      	nop
 800145e:	bd80      	pop	{r7, pc}

08001460 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MODE_Pin);
 8001464:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8001468:	f000 fcae 	bl	8001dc8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 800146c:	bf00      	nop
 800146e:	bd80      	pop	{r7, pc}

08001470 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b086      	sub	sp, #24
 8001474:	af00      	add	r7, sp, #0
 8001476:	60f8      	str	r0, [r7, #12]
 8001478:	60b9      	str	r1, [r7, #8]
 800147a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
 8001480:	e00a      	b.n	8001498 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001482:	f3af 8000 	nop.w
 8001486:	4601      	mov	r1, r0
 8001488:	68bb      	ldr	r3, [r7, #8]
 800148a:	1c5a      	adds	r2, r3, #1
 800148c:	60ba      	str	r2, [r7, #8]
 800148e:	b2ca      	uxtb	r2, r1
 8001490:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001492:	697b      	ldr	r3, [r7, #20]
 8001494:	3301      	adds	r3, #1
 8001496:	617b      	str	r3, [r7, #20]
 8001498:	697a      	ldr	r2, [r7, #20]
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	429a      	cmp	r2, r3
 800149e:	dbf0      	blt.n	8001482 <_read+0x12>
  }

  return len;
 80014a0:	687b      	ldr	r3, [r7, #4]
}
 80014a2:	4618      	mov	r0, r3
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}

080014aa <_close>:
  }
  return len;
}

int _close(int file)
{
 80014aa:	b480      	push	{r7}
 80014ac:	b083      	sub	sp, #12
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80014b2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	370c      	adds	r7, #12
 80014ba:	46bd      	mov	sp, r7
 80014bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014c0:	4770      	bx	lr

080014c2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80014c2:	b480      	push	{r7}
 80014c4:	b083      	sub	sp, #12
 80014c6:	af00      	add	r7, sp, #0
 80014c8:	6078      	str	r0, [r7, #4]
 80014ca:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80014d2:	605a      	str	r2, [r3, #4]
  return 0;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	370c      	adds	r7, #12
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr

080014e2 <_isatty>:

int _isatty(int file)
{
 80014e2:	b480      	push	{r7}
 80014e4:	b083      	sub	sp, #12
 80014e6:	af00      	add	r7, sp, #0
 80014e8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80014ea:	2301      	movs	r3, #1
}
 80014ec:	4618      	mov	r0, r3
 80014ee:	370c      	adds	r7, #12
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr

080014f8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80014f8:	b480      	push	{r7}
 80014fa:	b085      	sub	sp, #20
 80014fc:	af00      	add	r7, sp, #0
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001504:	2300      	movs	r3, #0
}
 8001506:	4618      	mov	r0, r3
 8001508:	3714      	adds	r7, #20
 800150a:	46bd      	mov	sp, r7
 800150c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001510:	4770      	bx	lr
	...

08001514 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001514:	b580      	push	{r7, lr}
 8001516:	b086      	sub	sp, #24
 8001518:	af00      	add	r7, sp, #0
 800151a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800151c:	4a14      	ldr	r2, [pc, #80]	@ (8001570 <_sbrk+0x5c>)
 800151e:	4b15      	ldr	r3, [pc, #84]	@ (8001574 <_sbrk+0x60>)
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001524:	697b      	ldr	r3, [r7, #20]
 8001526:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001528:	4b13      	ldr	r3, [pc, #76]	@ (8001578 <_sbrk+0x64>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d102      	bne.n	8001536 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001530:	4b11      	ldr	r3, [pc, #68]	@ (8001578 <_sbrk+0x64>)
 8001532:	4a12      	ldr	r2, [pc, #72]	@ (800157c <_sbrk+0x68>)
 8001534:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001536:	4b10      	ldr	r3, [pc, #64]	@ (8001578 <_sbrk+0x64>)
 8001538:	681a      	ldr	r2, [r3, #0]
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	4413      	add	r3, r2
 800153e:	693a      	ldr	r2, [r7, #16]
 8001540:	429a      	cmp	r2, r3
 8001542:	d207      	bcs.n	8001554 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001544:	f003 f918 	bl	8004778 <__errno>
 8001548:	4603      	mov	r3, r0
 800154a:	220c      	movs	r2, #12
 800154c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800154e:	f04f 33ff 	mov.w	r3, #4294967295
 8001552:	e009      	b.n	8001568 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001554:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <_sbrk+0x64>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800155a:	4b07      	ldr	r3, [pc, #28]	@ (8001578 <_sbrk+0x64>)
 800155c:	681a      	ldr	r2, [r3, #0]
 800155e:	687b      	ldr	r3, [r7, #4]
 8001560:	4413      	add	r3, r2
 8001562:	4a05      	ldr	r2, [pc, #20]	@ (8001578 <_sbrk+0x64>)
 8001564:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001566:	68fb      	ldr	r3, [r7, #12]
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	20020000 	.word	0x20020000
 8001574:	00000400 	.word	0x00000400
 8001578:	20000458 	.word	0x20000458
 800157c:	200005f8 	.word	0x200005f8

08001580 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001580:	b480      	push	{r7}
 8001582:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001584:	4b06      	ldr	r3, [pc, #24]	@ (80015a0 <SystemInit+0x20>)
 8001586:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800158a:	4a05      	ldr	r2, [pc, #20]	@ (80015a0 <SystemInit+0x20>)
 800158c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001590:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001594:	bf00      	nop
 8001596:	46bd      	mov	sp, r7
 8001598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159c:	4770      	bx	lr
 800159e:	bf00      	nop
 80015a0:	e000ed00 	.word	0xe000ed00

080015a4 <MX_USART3_UART_Init>:
UART_HandleTypeDef huart3;

/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80015a8:	4b11      	ldr	r3, [pc, #68]	@ (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015aa:	4a12      	ldr	r2, [pc, #72]	@ (80015f4 <MX_USART3_UART_Init+0x50>)
 80015ac:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 80015ae:	4b10      	ldr	r3, [pc, #64]	@ (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015b0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80015b4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80015b6:	4b0e      	ldr	r3, [pc, #56]	@ (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80015bc:	4b0c      	ldr	r3, [pc, #48]	@ (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015be:	2200      	movs	r2, #0
 80015c0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80015c2:	4b0b      	ldr	r3, [pc, #44]	@ (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80015c8:	4b09      	ldr	r3, [pc, #36]	@ (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015ca:	220c      	movs	r2, #12
 80015cc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80015ce:	4b08      	ldr	r3, [pc, #32]	@ (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015d0:	2200      	movs	r2, #0
 80015d2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80015d4:	4b06      	ldr	r3, [pc, #24]	@ (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015d6:	2200      	movs	r2, #0
 80015d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80015da:	4805      	ldr	r0, [pc, #20]	@ (80015f0 <MX_USART3_UART_Init+0x4c>)
 80015dc:	f002 fb58 	bl	8003c90 <HAL_UART_Init>
 80015e0:	4603      	mov	r3, r0
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d001      	beq.n	80015ea <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80015e6:	f7ff fde9 	bl	80011bc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80015ea:	bf00      	nop
 80015ec:	bd80      	pop	{r7, pc}
 80015ee:	bf00      	nop
 80015f0:	2000045c 	.word	0x2000045c
 80015f4:	40004800 	.word	0x40004800

080015f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b08a      	sub	sp, #40	@ 0x28
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	2200      	movs	r2, #0
 8001606:	601a      	str	r2, [r3, #0]
 8001608:	605a      	str	r2, [r3, #4]
 800160a:	609a      	str	r2, [r3, #8]
 800160c:	60da      	str	r2, [r3, #12]
 800160e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART3)
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	4a19      	ldr	r2, [pc, #100]	@ (800167c <HAL_UART_MspInit+0x84>)
 8001616:	4293      	cmp	r3, r2
 8001618:	d12c      	bne.n	8001674 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* USART3 clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	613b      	str	r3, [r7, #16]
 800161e:	4b18      	ldr	r3, [pc, #96]	@ (8001680 <HAL_UART_MspInit+0x88>)
 8001620:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001622:	4a17      	ldr	r2, [pc, #92]	@ (8001680 <HAL_UART_MspInit+0x88>)
 8001624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001628:	6413      	str	r3, [r2, #64]	@ 0x40
 800162a:	4b15      	ldr	r3, [pc, #84]	@ (8001680 <HAL_UART_MspInit+0x88>)
 800162c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800162e:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8001632:	613b      	str	r3, [r7, #16]
 8001634:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001636:	2300      	movs	r3, #0
 8001638:	60fb      	str	r3, [r7, #12]
 800163a:	4b11      	ldr	r3, [pc, #68]	@ (8001680 <HAL_UART_MspInit+0x88>)
 800163c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800163e:	4a10      	ldr	r2, [pc, #64]	@ (8001680 <HAL_UART_MspInit+0x88>)
 8001640:	f043 0308 	orr.w	r3, r3, #8
 8001644:	6313      	str	r3, [r2, #48]	@ 0x30
 8001646:	4b0e      	ldr	r3, [pc, #56]	@ (8001680 <HAL_UART_MspInit+0x88>)
 8001648:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800164a:	f003 0308 	and.w	r3, r3, #8
 800164e:	60fb      	str	r3, [r7, #12]
 8001650:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001652:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001656:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001658:	2302      	movs	r3, #2
 800165a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165c:	2300      	movs	r3, #0
 800165e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001660:	2303      	movs	r3, #3
 8001662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8001664:	2307      	movs	r3, #7
 8001666:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001668:	f107 0314 	add.w	r3, r7, #20
 800166c:	4619      	mov	r1, r3
 800166e:	4805      	ldr	r0, [pc, #20]	@ (8001684 <HAL_UART_MspInit+0x8c>)
 8001670:	f000 f9e4 	bl	8001a3c <HAL_GPIO_Init>

  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001674:	bf00      	nop
 8001676:	3728      	adds	r7, #40	@ 0x28
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	40004800 	.word	0x40004800
 8001680:	40023800 	.word	0x40023800
 8001684:	40020c00 	.word	0x40020c00

08001688 <MX_USB_OTG_FS_USB_Init>:
/* USER CODE END 0 */

/* USB_OTG_FS init function */

void MX_USB_OTG_FS_USB_Init(void)
{
 8001688:	b480      	push	{r7}
 800168a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 1 */
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800168c:	bf00      	nop
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
	...

08001698 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001698:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80016d0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800169c:	f7ff ff70 	bl	8001580 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80016a0:	480c      	ldr	r0, [pc, #48]	@ (80016d4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80016a2:	490d      	ldr	r1, [pc, #52]	@ (80016d8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80016a4:	4a0d      	ldr	r2, [pc, #52]	@ (80016dc <LoopFillZerobss+0x1a>)
  movs r3, #0
 80016a6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80016a8:	e002      	b.n	80016b0 <LoopCopyDataInit>

080016aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80016aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80016ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80016ae:	3304      	adds	r3, #4

080016b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80016b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80016b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80016b4:	d3f9      	bcc.n	80016aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80016b6:	4a0a      	ldr	r2, [pc, #40]	@ (80016e0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80016b8:	4c0a      	ldr	r4, [pc, #40]	@ (80016e4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80016ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80016bc:	e001      	b.n	80016c2 <LoopFillZerobss>

080016be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80016be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80016c0:	3204      	adds	r2, #4

080016c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80016c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80016c4:	d3fb      	bcc.n	80016be <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80016c6:	f003 f85d 	bl	8004784 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80016ca:	f7ff fc41 	bl	8000f50 <main>
  bx  lr    
 80016ce:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80016d0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80016d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80016d8:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 80016dc:	0800568c 	.word	0x0800568c
  ldr r2, =_sbss
 80016e0:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80016e4:	200005f4 	.word	0x200005f4

080016e8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80016e8:	e7fe      	b.n	80016e8 <ADC_IRQHandler>
	...

080016ec <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80016ec:	b580      	push	{r7, lr}
 80016ee:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80016f0:	4b0e      	ldr	r3, [pc, #56]	@ (800172c <HAL_Init+0x40>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a0d      	ldr	r2, [pc, #52]	@ (800172c <HAL_Init+0x40>)
 80016f6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80016fa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80016fc:	4b0b      	ldr	r3, [pc, #44]	@ (800172c <HAL_Init+0x40>)
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a0a      	ldr	r2, [pc, #40]	@ (800172c <HAL_Init+0x40>)
 8001702:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001706:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001708:	4b08      	ldr	r3, [pc, #32]	@ (800172c <HAL_Init+0x40>)
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	4a07      	ldr	r2, [pc, #28]	@ (800172c <HAL_Init+0x40>)
 800170e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001712:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001714:	2003      	movs	r0, #3
 8001716:	f000 f94f 	bl	80019b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800171a:	2000      	movs	r0, #0
 800171c:	f000 f808 	bl	8001730 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001720:	f7ff fe40 	bl	80013a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001724:	2300      	movs	r3, #0
}
 8001726:	4618      	mov	r0, r3
 8001728:	bd80      	pop	{r7, pc}
 800172a:	bf00      	nop
 800172c:	40023c00 	.word	0x40023c00

08001730 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001738:	4b12      	ldr	r3, [pc, #72]	@ (8001784 <HAL_InitTick+0x54>)
 800173a:	681a      	ldr	r2, [r3, #0]
 800173c:	4b12      	ldr	r3, [pc, #72]	@ (8001788 <HAL_InitTick+0x58>)
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4619      	mov	r1, r3
 8001742:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001746:	fbb3 f3f1 	udiv	r3, r3, r1
 800174a:	fbb2 f3f3 	udiv	r3, r2, r3
 800174e:	4618      	mov	r0, r3
 8001750:	f000 f967 	bl	8001a22 <HAL_SYSTICK_Config>
 8001754:	4603      	mov	r3, r0
 8001756:	2b00      	cmp	r3, #0
 8001758:	d001      	beq.n	800175e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800175a:	2301      	movs	r3, #1
 800175c:	e00e      	b.n	800177c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	2b0f      	cmp	r3, #15
 8001762:	d80a      	bhi.n	800177a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001764:	2200      	movs	r2, #0
 8001766:	6879      	ldr	r1, [r7, #4]
 8001768:	f04f 30ff 	mov.w	r0, #4294967295
 800176c:	f000 f92f 	bl	80019ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001770:	4a06      	ldr	r2, [pc, #24]	@ (800178c <HAL_InitTick+0x5c>)
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001776:	2300      	movs	r3, #0
 8001778:	e000      	b.n	800177c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800177a:	2301      	movs	r3, #1
}
 800177c:	4618      	mov	r0, r3
 800177e:	3708      	adds	r7, #8
 8001780:	46bd      	mov	sp, r7
 8001782:	bd80      	pop	{r7, pc}
 8001784:	20000000 	.word	0x20000000
 8001788:	20000008 	.word	0x20000008
 800178c:	20000004 	.word	0x20000004

08001790 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001790:	b480      	push	{r7}
 8001792:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001794:	4b06      	ldr	r3, [pc, #24]	@ (80017b0 <HAL_IncTick+0x20>)
 8001796:	781b      	ldrb	r3, [r3, #0]
 8001798:	461a      	mov	r2, r3
 800179a:	4b06      	ldr	r3, [pc, #24]	@ (80017b4 <HAL_IncTick+0x24>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4413      	add	r3, r2
 80017a0:	4a04      	ldr	r2, [pc, #16]	@ (80017b4 <HAL_IncTick+0x24>)
 80017a2:	6013      	str	r3, [r2, #0]
}
 80017a4:	bf00      	nop
 80017a6:	46bd      	mov	sp, r7
 80017a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ac:	4770      	bx	lr
 80017ae:	bf00      	nop
 80017b0:	20000008 	.word	0x20000008
 80017b4:	200004a4 	.word	0x200004a4

080017b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  return uwTick;
 80017bc:	4b03      	ldr	r3, [pc, #12]	@ (80017cc <HAL_GetTick+0x14>)
 80017be:	681b      	ldr	r3, [r3, #0]
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	46bd      	mov	sp, r7
 80017c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c8:	4770      	bx	lr
 80017ca:	bf00      	nop
 80017cc:	200004a4 	.word	0x200004a4

080017d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b084      	sub	sp, #16
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80017d8:	f7ff ffee 	bl	80017b8 <HAL_GetTick>
 80017dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80017e8:	d005      	beq.n	80017f6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80017ea:	4b0a      	ldr	r3, [pc, #40]	@ (8001814 <HAL_Delay+0x44>)
 80017ec:	781b      	ldrb	r3, [r3, #0]
 80017ee:	461a      	mov	r2, r3
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	4413      	add	r3, r2
 80017f4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80017f6:	bf00      	nop
 80017f8:	f7ff ffde 	bl	80017b8 <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	68fa      	ldr	r2, [r7, #12]
 8001804:	429a      	cmp	r2, r3
 8001806:	d8f7      	bhi.n	80017f8 <HAL_Delay+0x28>
  {
  }
}
 8001808:	bf00      	nop
 800180a:	bf00      	nop
 800180c:	3710      	adds	r7, #16
 800180e:	46bd      	mov	sp, r7
 8001810:	bd80      	pop	{r7, pc}
 8001812:	bf00      	nop
 8001814:	20000008 	.word	0x20000008

08001818 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	f003 0307 	and.w	r3, r3, #7
 8001826:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001828:	4b0c      	ldr	r3, [pc, #48]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800182a:	68db      	ldr	r3, [r3, #12]
 800182c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800182e:	68ba      	ldr	r2, [r7, #8]
 8001830:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001834:	4013      	ands	r3, r2
 8001836:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800183c:	68bb      	ldr	r3, [r7, #8]
 800183e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001840:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001844:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001848:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800184a:	4a04      	ldr	r2, [pc, #16]	@ (800185c <__NVIC_SetPriorityGrouping+0x44>)
 800184c:	68bb      	ldr	r3, [r7, #8]
 800184e:	60d3      	str	r3, [r2, #12]
}
 8001850:	bf00      	nop
 8001852:	3714      	adds	r7, #20
 8001854:	46bd      	mov	sp, r7
 8001856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800185a:	4770      	bx	lr
 800185c:	e000ed00 	.word	0xe000ed00

08001860 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001860:	b480      	push	{r7}
 8001862:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001864:	4b04      	ldr	r3, [pc, #16]	@ (8001878 <__NVIC_GetPriorityGrouping+0x18>)
 8001866:	68db      	ldr	r3, [r3, #12]
 8001868:	0a1b      	lsrs	r3, r3, #8
 800186a:	f003 0307 	and.w	r3, r3, #7
}
 800186e:	4618      	mov	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr
 8001878:	e000ed00 	.word	0xe000ed00

0800187c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800187c:	b480      	push	{r7}
 800187e:	b083      	sub	sp, #12
 8001880:	af00      	add	r7, sp, #0
 8001882:	4603      	mov	r3, r0
 8001884:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001886:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800188a:	2b00      	cmp	r3, #0
 800188c:	db0b      	blt.n	80018a6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800188e:	79fb      	ldrb	r3, [r7, #7]
 8001890:	f003 021f 	and.w	r2, r3, #31
 8001894:	4907      	ldr	r1, [pc, #28]	@ (80018b4 <__NVIC_EnableIRQ+0x38>)
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	095b      	lsrs	r3, r3, #5
 800189c:	2001      	movs	r0, #1
 800189e:	fa00 f202 	lsl.w	r2, r0, r2
 80018a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80018a6:	bf00      	nop
 80018a8:	370c      	adds	r7, #12
 80018aa:	46bd      	mov	sp, r7
 80018ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b0:	4770      	bx	lr
 80018b2:	bf00      	nop
 80018b4:	e000e100 	.word	0xe000e100

080018b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b083      	sub	sp, #12
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	6039      	str	r1, [r7, #0]
 80018c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	db0a      	blt.n	80018e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018cc:	683b      	ldr	r3, [r7, #0]
 80018ce:	b2da      	uxtb	r2, r3
 80018d0:	490c      	ldr	r1, [pc, #48]	@ (8001904 <__NVIC_SetPriority+0x4c>)
 80018d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018d6:	0112      	lsls	r2, r2, #4
 80018d8:	b2d2      	uxtb	r2, r2
 80018da:	440b      	add	r3, r1
 80018dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018e0:	e00a      	b.n	80018f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e2:	683b      	ldr	r3, [r7, #0]
 80018e4:	b2da      	uxtb	r2, r3
 80018e6:	4908      	ldr	r1, [pc, #32]	@ (8001908 <__NVIC_SetPriority+0x50>)
 80018e8:	79fb      	ldrb	r3, [r7, #7]
 80018ea:	f003 030f 	and.w	r3, r3, #15
 80018ee:	3b04      	subs	r3, #4
 80018f0:	0112      	lsls	r2, r2, #4
 80018f2:	b2d2      	uxtb	r2, r2
 80018f4:	440b      	add	r3, r1
 80018f6:	761a      	strb	r2, [r3, #24]
}
 80018f8:	bf00      	nop
 80018fa:	370c      	adds	r7, #12
 80018fc:	46bd      	mov	sp, r7
 80018fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001902:	4770      	bx	lr
 8001904:	e000e100 	.word	0xe000e100
 8001908:	e000ed00 	.word	0xe000ed00

0800190c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800190c:	b480      	push	{r7}
 800190e:	b089      	sub	sp, #36	@ 0x24
 8001910:	af00      	add	r7, sp, #0
 8001912:	60f8      	str	r0, [r7, #12]
 8001914:	60b9      	str	r1, [r7, #8]
 8001916:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001918:	68fb      	ldr	r3, [r7, #12]
 800191a:	f003 0307 	and.w	r3, r3, #7
 800191e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001920:	69fb      	ldr	r3, [r7, #28]
 8001922:	f1c3 0307 	rsb	r3, r3, #7
 8001926:	2b04      	cmp	r3, #4
 8001928:	bf28      	it	cs
 800192a:	2304      	movcs	r3, #4
 800192c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	3304      	adds	r3, #4
 8001932:	2b06      	cmp	r3, #6
 8001934:	d902      	bls.n	800193c <NVIC_EncodePriority+0x30>
 8001936:	69fb      	ldr	r3, [r7, #28]
 8001938:	3b03      	subs	r3, #3
 800193a:	e000      	b.n	800193e <NVIC_EncodePriority+0x32>
 800193c:	2300      	movs	r3, #0
 800193e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001940:	f04f 32ff 	mov.w	r2, #4294967295
 8001944:	69bb      	ldr	r3, [r7, #24]
 8001946:	fa02 f303 	lsl.w	r3, r2, r3
 800194a:	43da      	mvns	r2, r3
 800194c:	68bb      	ldr	r3, [r7, #8]
 800194e:	401a      	ands	r2, r3
 8001950:	697b      	ldr	r3, [r7, #20]
 8001952:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001954:	f04f 31ff 	mov.w	r1, #4294967295
 8001958:	697b      	ldr	r3, [r7, #20]
 800195a:	fa01 f303 	lsl.w	r3, r1, r3
 800195e:	43d9      	mvns	r1, r3
 8001960:	687b      	ldr	r3, [r7, #4]
 8001962:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001964:	4313      	orrs	r3, r2
         );
}
 8001966:	4618      	mov	r0, r3
 8001968:	3724      	adds	r7, #36	@ 0x24
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
	...

08001974 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001974:	b580      	push	{r7, lr}
 8001976:	b082      	sub	sp, #8
 8001978:	af00      	add	r7, sp, #0
 800197a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	3b01      	subs	r3, #1
 8001980:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001984:	d301      	bcc.n	800198a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001986:	2301      	movs	r3, #1
 8001988:	e00f      	b.n	80019aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800198a:	4a0a      	ldr	r2, [pc, #40]	@ (80019b4 <SysTick_Config+0x40>)
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	3b01      	subs	r3, #1
 8001990:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001992:	210f      	movs	r1, #15
 8001994:	f04f 30ff 	mov.w	r0, #4294967295
 8001998:	f7ff ff8e 	bl	80018b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800199c:	4b05      	ldr	r3, [pc, #20]	@ (80019b4 <SysTick_Config+0x40>)
 800199e:	2200      	movs	r2, #0
 80019a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019a2:	4b04      	ldr	r3, [pc, #16]	@ (80019b4 <SysTick_Config+0x40>)
 80019a4:	2207      	movs	r2, #7
 80019a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019a8:	2300      	movs	r3, #0
}
 80019aa:	4618      	mov	r0, r3
 80019ac:	3708      	adds	r7, #8
 80019ae:	46bd      	mov	sp, r7
 80019b0:	bd80      	pop	{r7, pc}
 80019b2:	bf00      	nop
 80019b4:	e000e010 	.word	0xe000e010

080019b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b082      	sub	sp, #8
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019c0:	6878      	ldr	r0, [r7, #4]
 80019c2:	f7ff ff29 	bl	8001818 <__NVIC_SetPriorityGrouping>
}
 80019c6:	bf00      	nop
 80019c8:	3708      	adds	r7, #8
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}

080019ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019ce:	b580      	push	{r7, lr}
 80019d0:	b086      	sub	sp, #24
 80019d2:	af00      	add	r7, sp, #0
 80019d4:	4603      	mov	r3, r0
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019e0:	f7ff ff3e 	bl	8001860 <__NVIC_GetPriorityGrouping>
 80019e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019e6:	687a      	ldr	r2, [r7, #4]
 80019e8:	68b9      	ldr	r1, [r7, #8]
 80019ea:	6978      	ldr	r0, [r7, #20]
 80019ec:	f7ff ff8e 	bl	800190c <NVIC_EncodePriority>
 80019f0:	4602      	mov	r2, r0
 80019f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff ff5d 	bl	80018b8 <__NVIC_SetPriority>
}
 80019fe:	bf00      	nop
 8001a00:	3718      	adds	r7, #24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bd80      	pop	{r7, pc}

08001a06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a06:	b580      	push	{r7, lr}
 8001a08:	b082      	sub	sp, #8
 8001a0a:	af00      	add	r7, sp, #0
 8001a0c:	4603      	mov	r3, r0
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f7ff ff31 	bl	800187c <__NVIC_EnableIRQ>
}
 8001a1a:	bf00      	nop
 8001a1c:	3708      	adds	r7, #8
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	bd80      	pop	{r7, pc}

08001a22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a22:	b580      	push	{r7, lr}
 8001a24:	b082      	sub	sp, #8
 8001a26:	af00      	add	r7, sp, #0
 8001a28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a2a:	6878      	ldr	r0, [r7, #4]
 8001a2c:	f7ff ffa2 	bl	8001974 <SysTick_Config>
 8001a30:	4603      	mov	r3, r0
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}
	...

08001a3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	b089      	sub	sp, #36	@ 0x24
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	6078      	str	r0, [r7, #4]
 8001a44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001a46:	2300      	movs	r3, #0
 8001a48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001a52:	2300      	movs	r3, #0
 8001a54:	61fb      	str	r3, [r7, #28]
 8001a56:	e165      	b.n	8001d24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001a58:	2201      	movs	r2, #1
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001a62:	683b      	ldr	r3, [r7, #0]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	697a      	ldr	r2, [r7, #20]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001a6c:	693a      	ldr	r2, [r7, #16]
 8001a6e:	697b      	ldr	r3, [r7, #20]
 8001a70:	429a      	cmp	r2, r3
 8001a72:	f040 8154 	bne.w	8001d1e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a76:	683b      	ldr	r3, [r7, #0]
 8001a78:	685b      	ldr	r3, [r3, #4]
 8001a7a:	f003 0303 	and.w	r3, r3, #3
 8001a7e:	2b01      	cmp	r3, #1
 8001a80:	d005      	beq.n	8001a8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a82:	683b      	ldr	r3, [r7, #0]
 8001a84:	685b      	ldr	r3, [r3, #4]
 8001a86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001a8a:	2b02      	cmp	r3, #2
 8001a8c:	d130      	bne.n	8001af0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	689b      	ldr	r3, [r3, #8]
 8001a92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	005b      	lsls	r3, r3, #1
 8001a98:	2203      	movs	r2, #3
 8001a9a:	fa02 f303 	lsl.w	r3, r2, r3
 8001a9e:	43db      	mvns	r3, r3
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4013      	ands	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	68da      	ldr	r2, [r3, #12]
 8001aaa:	69fb      	ldr	r3, [r7, #28]
 8001aac:	005b      	lsls	r3, r3, #1
 8001aae:	fa02 f303 	lsl.w	r3, r2, r3
 8001ab2:	69ba      	ldr	r2, [r7, #24]
 8001ab4:	4313      	orrs	r3, r2
 8001ab6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	69ba      	ldr	r2, [r7, #24]
 8001abc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	685b      	ldr	r3, [r3, #4]
 8001ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ac4:	2201      	movs	r2, #1
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	fa02 f303 	lsl.w	r3, r2, r3
 8001acc:	43db      	mvns	r3, r3
 8001ace:	69ba      	ldr	r2, [r7, #24]
 8001ad0:	4013      	ands	r3, r2
 8001ad2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	685b      	ldr	r3, [r3, #4]
 8001ad8:	091b      	lsrs	r3, r3, #4
 8001ada:	f003 0201 	and.w	r2, r3, #1
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae4:	69ba      	ldr	r2, [r7, #24]
 8001ae6:	4313      	orrs	r3, r2
 8001ae8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	69ba      	ldr	r2, [r7, #24]
 8001aee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001af0:	683b      	ldr	r3, [r7, #0]
 8001af2:	685b      	ldr	r3, [r3, #4]
 8001af4:	f003 0303 	and.w	r3, r3, #3
 8001af8:	2b03      	cmp	r3, #3
 8001afa:	d017      	beq.n	8001b2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001b02:	69fb      	ldr	r3, [r7, #28]
 8001b04:	005b      	lsls	r3, r3, #1
 8001b06:	2203      	movs	r2, #3
 8001b08:	fa02 f303 	lsl.w	r3, r2, r3
 8001b0c:	43db      	mvns	r3, r3
 8001b0e:	69ba      	ldr	r2, [r7, #24]
 8001b10:	4013      	ands	r3, r2
 8001b12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001b14:	683b      	ldr	r3, [r7, #0]
 8001b16:	689a      	ldr	r2, [r3, #8]
 8001b18:	69fb      	ldr	r3, [r7, #28]
 8001b1a:	005b      	lsls	r3, r3, #1
 8001b1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b20:	69ba      	ldr	r2, [r7, #24]
 8001b22:	4313      	orrs	r3, r2
 8001b24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	69ba      	ldr	r2, [r7, #24]
 8001b2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001b2c:	683b      	ldr	r3, [r7, #0]
 8001b2e:	685b      	ldr	r3, [r3, #4]
 8001b30:	f003 0303 	and.w	r3, r3, #3
 8001b34:	2b02      	cmp	r3, #2
 8001b36:	d123      	bne.n	8001b80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001b38:	69fb      	ldr	r3, [r7, #28]
 8001b3a:	08da      	lsrs	r2, r3, #3
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	3208      	adds	r2, #8
 8001b40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001b46:	69fb      	ldr	r3, [r7, #28]
 8001b48:	f003 0307 	and.w	r3, r3, #7
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	220f      	movs	r2, #15
 8001b50:	fa02 f303 	lsl.w	r3, r2, r3
 8001b54:	43db      	mvns	r3, r3
 8001b56:	69ba      	ldr	r2, [r7, #24]
 8001b58:	4013      	ands	r3, r2
 8001b5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001b5c:	683b      	ldr	r3, [r7, #0]
 8001b5e:	691a      	ldr	r2, [r3, #16]
 8001b60:	69fb      	ldr	r3, [r7, #28]
 8001b62:	f003 0307 	and.w	r3, r3, #7
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	fa02 f303 	lsl.w	r3, r2, r3
 8001b6c:	69ba      	ldr	r2, [r7, #24]
 8001b6e:	4313      	orrs	r3, r2
 8001b70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	08da      	lsrs	r2, r3, #3
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	3208      	adds	r2, #8
 8001b7a:	69b9      	ldr	r1, [r7, #24]
 8001b7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001b86:	69fb      	ldr	r3, [r7, #28]
 8001b88:	005b      	lsls	r3, r3, #1
 8001b8a:	2203      	movs	r2, #3
 8001b8c:	fa02 f303 	lsl.w	r3, r2, r3
 8001b90:	43db      	mvns	r3, r3
 8001b92:	69ba      	ldr	r2, [r7, #24]
 8001b94:	4013      	ands	r3, r2
 8001b96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001b98:	683b      	ldr	r3, [r7, #0]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	f003 0203 	and.w	r2, r3, #3
 8001ba0:	69fb      	ldr	r3, [r7, #28]
 8001ba2:	005b      	lsls	r3, r3, #1
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	69ba      	ldr	r2, [r7, #24]
 8001baa:	4313      	orrs	r3, r2
 8001bac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	69ba      	ldr	r2, [r7, #24]
 8001bb2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	685b      	ldr	r3, [r3, #4]
 8001bb8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8001bbc:	2b00      	cmp	r3, #0
 8001bbe:	f000 80ae 	beq.w	8001d1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	60fb      	str	r3, [r7, #12]
 8001bc6:	4b5d      	ldr	r3, [pc, #372]	@ (8001d3c <HAL_GPIO_Init+0x300>)
 8001bc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bca:	4a5c      	ldr	r2, [pc, #368]	@ (8001d3c <HAL_GPIO_Init+0x300>)
 8001bcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001bd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd2:	4b5a      	ldr	r3, [pc, #360]	@ (8001d3c <HAL_GPIO_Init+0x300>)
 8001bd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001bda:	60fb      	str	r3, [r7, #12]
 8001bdc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001bde:	4a58      	ldr	r2, [pc, #352]	@ (8001d40 <HAL_GPIO_Init+0x304>)
 8001be0:	69fb      	ldr	r3, [r7, #28]
 8001be2:	089b      	lsrs	r3, r3, #2
 8001be4:	3302      	adds	r3, #2
 8001be6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001bea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001bec:	69fb      	ldr	r3, [r7, #28]
 8001bee:	f003 0303 	and.w	r3, r3, #3
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	220f      	movs	r2, #15
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43db      	mvns	r3, r3
 8001bfc:	69ba      	ldr	r2, [r7, #24]
 8001bfe:	4013      	ands	r3, r2
 8001c00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	4a4f      	ldr	r2, [pc, #316]	@ (8001d44 <HAL_GPIO_Init+0x308>)
 8001c06:	4293      	cmp	r3, r2
 8001c08:	d025      	beq.n	8001c56 <HAL_GPIO_Init+0x21a>
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	4a4e      	ldr	r2, [pc, #312]	@ (8001d48 <HAL_GPIO_Init+0x30c>)
 8001c0e:	4293      	cmp	r3, r2
 8001c10:	d01f      	beq.n	8001c52 <HAL_GPIO_Init+0x216>
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	4a4d      	ldr	r2, [pc, #308]	@ (8001d4c <HAL_GPIO_Init+0x310>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d019      	beq.n	8001c4e <HAL_GPIO_Init+0x212>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	4a4c      	ldr	r2, [pc, #304]	@ (8001d50 <HAL_GPIO_Init+0x314>)
 8001c1e:	4293      	cmp	r3, r2
 8001c20:	d013      	beq.n	8001c4a <HAL_GPIO_Init+0x20e>
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	4a4b      	ldr	r2, [pc, #300]	@ (8001d54 <HAL_GPIO_Init+0x318>)
 8001c26:	4293      	cmp	r3, r2
 8001c28:	d00d      	beq.n	8001c46 <HAL_GPIO_Init+0x20a>
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	4a4a      	ldr	r2, [pc, #296]	@ (8001d58 <HAL_GPIO_Init+0x31c>)
 8001c2e:	4293      	cmp	r3, r2
 8001c30:	d007      	beq.n	8001c42 <HAL_GPIO_Init+0x206>
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	4a49      	ldr	r2, [pc, #292]	@ (8001d5c <HAL_GPIO_Init+0x320>)
 8001c36:	4293      	cmp	r3, r2
 8001c38:	d101      	bne.n	8001c3e <HAL_GPIO_Init+0x202>
 8001c3a:	2306      	movs	r3, #6
 8001c3c:	e00c      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c3e:	2307      	movs	r3, #7
 8001c40:	e00a      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c42:	2305      	movs	r3, #5
 8001c44:	e008      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c46:	2304      	movs	r3, #4
 8001c48:	e006      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c4a:	2303      	movs	r3, #3
 8001c4c:	e004      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c4e:	2302      	movs	r3, #2
 8001c50:	e002      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c52:	2301      	movs	r3, #1
 8001c54:	e000      	b.n	8001c58 <HAL_GPIO_Init+0x21c>
 8001c56:	2300      	movs	r3, #0
 8001c58:	69fa      	ldr	r2, [r7, #28]
 8001c5a:	f002 0203 	and.w	r2, r2, #3
 8001c5e:	0092      	lsls	r2, r2, #2
 8001c60:	4093      	lsls	r3, r2
 8001c62:	69ba      	ldr	r2, [r7, #24]
 8001c64:	4313      	orrs	r3, r2
 8001c66:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001c68:	4935      	ldr	r1, [pc, #212]	@ (8001d40 <HAL_GPIO_Init+0x304>)
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	089b      	lsrs	r3, r3, #2
 8001c6e:	3302      	adds	r3, #2
 8001c70:	69ba      	ldr	r2, [r7, #24]
 8001c72:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001c76:	4b3a      	ldr	r3, [pc, #232]	@ (8001d60 <HAL_GPIO_Init+0x324>)
 8001c78:	689b      	ldr	r3, [r3, #8]
 8001c7a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001c7c:	693b      	ldr	r3, [r7, #16]
 8001c7e:	43db      	mvns	r3, r3
 8001c80:	69ba      	ldr	r2, [r7, #24]
 8001c82:	4013      	ands	r3, r2
 8001c84:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	685b      	ldr	r3, [r3, #4]
 8001c8a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 8001c92:	69ba      	ldr	r2, [r7, #24]
 8001c94:	693b      	ldr	r3, [r7, #16]
 8001c96:	4313      	orrs	r3, r2
 8001c98:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001c9a:	4a31      	ldr	r2, [pc, #196]	@ (8001d60 <HAL_GPIO_Init+0x324>)
 8001c9c:	69bb      	ldr	r3, [r7, #24]
 8001c9e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8001d60 <HAL_GPIO_Init+0x324>)
 8001ca2:	68db      	ldr	r3, [r3, #12]
 8001ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ca6:	693b      	ldr	r3, [r7, #16]
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	69ba      	ldr	r2, [r7, #24]
 8001cac:	4013      	ands	r3, r2
 8001cae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	d003      	beq.n	8001cc4 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 8001cbc:	69ba      	ldr	r2, [r7, #24]
 8001cbe:	693b      	ldr	r3, [r7, #16]
 8001cc0:	4313      	orrs	r3, r2
 8001cc2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001cc4:	4a26      	ldr	r2, [pc, #152]	@ (8001d60 <HAL_GPIO_Init+0x324>)
 8001cc6:	69bb      	ldr	r3, [r7, #24]
 8001cc8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001cca:	4b25      	ldr	r3, [pc, #148]	@ (8001d60 <HAL_GPIO_Init+0x324>)
 8001ccc:	685b      	ldr	r3, [r3, #4]
 8001cce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cd0:	693b      	ldr	r3, [r7, #16]
 8001cd2:	43db      	mvns	r3, r3
 8001cd4:	69ba      	ldr	r2, [r7, #24]
 8001cd6:	4013      	ands	r3, r2
 8001cd8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	685b      	ldr	r3, [r3, #4]
 8001cde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8001ce6:	69ba      	ldr	r2, [r7, #24]
 8001ce8:	693b      	ldr	r3, [r7, #16]
 8001cea:	4313      	orrs	r3, r2
 8001cec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001cee:	4a1c      	ldr	r2, [pc, #112]	@ (8001d60 <HAL_GPIO_Init+0x324>)
 8001cf0:	69bb      	ldr	r3, [r7, #24]
 8001cf2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001cf4:	4b1a      	ldr	r3, [pc, #104]	@ (8001d60 <HAL_GPIO_Init+0x324>)
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001cfa:	693b      	ldr	r3, [r7, #16]
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	69ba      	ldr	r2, [r7, #24]
 8001d00:	4013      	ands	r3, r2
 8001d02:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001d04:	683b      	ldr	r3, [r7, #0]
 8001d06:	685b      	ldr	r3, [r3, #4]
 8001d08:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d003      	beq.n	8001d18 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8001d10:	69ba      	ldr	r2, [r7, #24]
 8001d12:	693b      	ldr	r3, [r7, #16]
 8001d14:	4313      	orrs	r3, r2
 8001d16:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001d18:	4a11      	ldr	r2, [pc, #68]	@ (8001d60 <HAL_GPIO_Init+0x324>)
 8001d1a:	69bb      	ldr	r3, [r7, #24]
 8001d1c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	3301      	adds	r3, #1
 8001d22:	61fb      	str	r3, [r7, #28]
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	2b0f      	cmp	r3, #15
 8001d28:	f67f ae96 	bls.w	8001a58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001d2c:	bf00      	nop
 8001d2e:	bf00      	nop
 8001d30:	3724      	adds	r7, #36	@ 0x24
 8001d32:	46bd      	mov	sp, r7
 8001d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d38:	4770      	bx	lr
 8001d3a:	bf00      	nop
 8001d3c:	40023800 	.word	0x40023800
 8001d40:	40013800 	.word	0x40013800
 8001d44:	40020000 	.word	0x40020000
 8001d48:	40020400 	.word	0x40020400
 8001d4c:	40020800 	.word	0x40020800
 8001d50:	40020c00 	.word	0x40020c00
 8001d54:	40021000 	.word	0x40021000
 8001d58:	40021400 	.word	0x40021400
 8001d5c:	40021800 	.word	0x40021800
 8001d60:	40013c00 	.word	0x40013c00

08001d64 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001d64:	b480      	push	{r7}
 8001d66:	b085      	sub	sp, #20
 8001d68:	af00      	add	r7, sp, #0
 8001d6a:	6078      	str	r0, [r7, #4]
 8001d6c:	460b      	mov	r3, r1
 8001d6e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	691a      	ldr	r2, [r3, #16]
 8001d74:	887b      	ldrh	r3, [r7, #2]
 8001d76:	4013      	ands	r3, r2
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	d002      	beq.n	8001d82 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001d7c:	2301      	movs	r3, #1
 8001d7e:	73fb      	strb	r3, [r7, #15]
 8001d80:	e001      	b.n	8001d86 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001d82:	2300      	movs	r3, #0
 8001d84:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001d86:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3714      	adds	r7, #20
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d92:	4770      	bx	lr

08001d94 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001d94:	b480      	push	{r7}
 8001d96:	b083      	sub	sp, #12
 8001d98:	af00      	add	r7, sp, #0
 8001d9a:	6078      	str	r0, [r7, #4]
 8001d9c:	460b      	mov	r3, r1
 8001d9e:	807b      	strh	r3, [r7, #2]
 8001da0:	4613      	mov	r3, r2
 8001da2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001da4:	787b      	ldrb	r3, [r7, #1]
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	d003      	beq.n	8001db2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001daa:	887a      	ldrh	r2, [r7, #2]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001db0:	e003      	b.n	8001dba <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001db2:	887b      	ldrh	r3, [r7, #2]
 8001db4:	041a      	lsls	r2, r3, #16
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	619a      	str	r2, [r3, #24]
}
 8001dba:	bf00      	nop
 8001dbc:	370c      	adds	r7, #12
 8001dbe:	46bd      	mov	sp, r7
 8001dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc4:	4770      	bx	lr
	...

08001dc8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001dd2:	4b08      	ldr	r3, [pc, #32]	@ (8001df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001dd4:	695a      	ldr	r2, [r3, #20]
 8001dd6:	88fb      	ldrh	r3, [r7, #6]
 8001dd8:	4013      	ands	r3, r2
 8001dda:	2b00      	cmp	r3, #0
 8001ddc:	d006      	beq.n	8001dec <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001dde:	4a05      	ldr	r2, [pc, #20]	@ (8001df4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001de0:	88fb      	ldrh	r3, [r7, #6]
 8001de2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001de4:	88fb      	ldrh	r3, [r7, #6]
 8001de6:	4618      	mov	r0, r3
 8001de8:	f000 f806 	bl	8001df8 <HAL_GPIO_EXTI_Callback>
  }
}
 8001dec:	bf00      	nop
 8001dee:	3708      	adds	r7, #8
 8001df0:	46bd      	mov	sp, r7
 8001df2:	bd80      	pop	{r7, pc}
 8001df4:	40013c00 	.word	0x40013c00

08001df8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001df8:	b480      	push	{r7}
 8001dfa:	b083      	sub	sp, #12
 8001dfc:	af00      	add	r7, sp, #0
 8001dfe:	4603      	mov	r3, r0
 8001e00:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001e02:	bf00      	nop
 8001e04:	370c      	adds	r7, #12
 8001e06:	46bd      	mov	sp, r7
 8001e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e0c:	4770      	bx	lr
	...

08001e10 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001e10:	b580      	push	{r7, lr}
 8001e12:	b084      	sub	sp, #16
 8001e14:	af00      	add	r7, sp, #0
 8001e16:	6078      	str	r0, [r7, #4]
 8001e18:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d101      	bne.n	8001e24 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001e20:	2301      	movs	r3, #1
 8001e22:	e0cc      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001e24:	4b68      	ldr	r3, [pc, #416]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	f003 030f 	and.w	r3, r3, #15
 8001e2c:	683a      	ldr	r2, [r7, #0]
 8001e2e:	429a      	cmp	r2, r3
 8001e30:	d90c      	bls.n	8001e4c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001e32:	4b65      	ldr	r3, [pc, #404]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e34:	683a      	ldr	r2, [r7, #0]
 8001e36:	b2d2      	uxtb	r2, r2
 8001e38:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001e3a:	4b63      	ldr	r3, [pc, #396]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f003 030f 	and.w	r3, r3, #15
 8001e42:	683a      	ldr	r2, [r7, #0]
 8001e44:	429a      	cmp	r2, r3
 8001e46:	d001      	beq.n	8001e4c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001e48:	2301      	movs	r3, #1
 8001e4a:	e0b8      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f003 0302 	and.w	r3, r3, #2
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d020      	beq.n	8001e9a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	f003 0304 	and.w	r3, r3, #4
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d005      	beq.n	8001e70 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001e64:	4b59      	ldr	r3, [pc, #356]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001e66:	689b      	ldr	r3, [r3, #8]
 8001e68:	4a58      	ldr	r2, [pc, #352]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001e6a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001e6e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	f003 0308 	and.w	r3, r3, #8
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d005      	beq.n	8001e88 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001e7c:	4b53      	ldr	r3, [pc, #332]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001e7e:	689b      	ldr	r3, [r3, #8]
 8001e80:	4a52      	ldr	r2, [pc, #328]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001e82:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001e86:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001e88:	4b50      	ldr	r3, [pc, #320]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001e8a:	689b      	ldr	r3, [r3, #8]
 8001e8c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	689b      	ldr	r3, [r3, #8]
 8001e94:	494d      	ldr	r1, [pc, #308]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001e96:	4313      	orrs	r3, r2
 8001e98:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	f003 0301 	and.w	r3, r3, #1
 8001ea2:	2b00      	cmp	r3, #0
 8001ea4:	d044      	beq.n	8001f30 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	685b      	ldr	r3, [r3, #4]
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d107      	bne.n	8001ebe <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eae:	4b47      	ldr	r3, [pc, #284]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001eb0:	681b      	ldr	r3, [r3, #0]
 8001eb2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d119      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eba:	2301      	movs	r3, #1
 8001ebc:	e07f      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	685b      	ldr	r3, [r3, #4]
 8001ec2:	2b02      	cmp	r3, #2
 8001ec4:	d003      	beq.n	8001ece <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001eca:	2b03      	cmp	r3, #3
 8001ecc:	d107      	bne.n	8001ede <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ece:	4b3f      	ldr	r3, [pc, #252]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ed0:	681b      	ldr	r3, [r3, #0]
 8001ed2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d109      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eda:	2301      	movs	r3, #1
 8001edc:	e06f      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ede:	4b3b      	ldr	r3, [pc, #236]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ee0:	681b      	ldr	r3, [r3, #0]
 8001ee2:	f003 0302 	and.w	r3, r3, #2
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d101      	bne.n	8001eee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001eea:	2301      	movs	r3, #1
 8001eec:	e067      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001eee:	4b37      	ldr	r3, [pc, #220]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001ef0:	689b      	ldr	r3, [r3, #8]
 8001ef2:	f023 0203 	bic.w	r2, r3, #3
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	4934      	ldr	r1, [pc, #208]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001efc:	4313      	orrs	r3, r2
 8001efe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001f00:	f7ff fc5a 	bl	80017b8 <HAL_GetTick>
 8001f04:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f06:	e00a      	b.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001f08:	f7ff fc56 	bl	80017b8 <HAL_GetTick>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	68fb      	ldr	r3, [r7, #12]
 8001f10:	1ad3      	subs	r3, r2, r3
 8001f12:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f16:	4293      	cmp	r3, r2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e04f      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001f1e:	4b2b      	ldr	r3, [pc, #172]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001f20:	689b      	ldr	r3, [r3, #8]
 8001f22:	f003 020c 	and.w	r2, r3, #12
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	009b      	lsls	r3, r3, #2
 8001f2c:	429a      	cmp	r2, r3
 8001f2e:	d1eb      	bne.n	8001f08 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001f30:	4b25      	ldr	r3, [pc, #148]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f003 030f 	and.w	r3, r3, #15
 8001f38:	683a      	ldr	r2, [r7, #0]
 8001f3a:	429a      	cmp	r2, r3
 8001f3c:	d20c      	bcs.n	8001f58 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001f3e:	4b22      	ldr	r3, [pc, #136]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f40:	683a      	ldr	r2, [r7, #0]
 8001f42:	b2d2      	uxtb	r2, r2
 8001f44:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001f46:	4b20      	ldr	r3, [pc, #128]	@ (8001fc8 <HAL_RCC_ClockConfig+0x1b8>)
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	f003 030f 	and.w	r3, r3, #15
 8001f4e:	683a      	ldr	r2, [r7, #0]
 8001f50:	429a      	cmp	r2, r3
 8001f52:	d001      	beq.n	8001f58 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001f54:	2301      	movs	r3, #1
 8001f56:	e032      	b.n	8001fbe <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f003 0304 	and.w	r3, r3, #4
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	d008      	beq.n	8001f76 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001f64:	4b19      	ldr	r3, [pc, #100]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001f66:	689b      	ldr	r3, [r3, #8]
 8001f68:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	68db      	ldr	r3, [r3, #12]
 8001f70:	4916      	ldr	r1, [pc, #88]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001f72:	4313      	orrs	r3, r2
 8001f74:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001f76:	687b      	ldr	r3, [r7, #4]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0308 	and.w	r3, r3, #8
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001f82:	4b12      	ldr	r3, [pc, #72]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001f84:	689b      	ldr	r3, [r3, #8]
 8001f86:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	691b      	ldr	r3, [r3, #16]
 8001f8e:	00db      	lsls	r3, r3, #3
 8001f90:	490e      	ldr	r1, [pc, #56]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001f92:	4313      	orrs	r3, r2
 8001f94:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001f96:	f000 fb7f 	bl	8002698 <HAL_RCC_GetSysClockFreq>
 8001f9a:	4602      	mov	r2, r0
 8001f9c:	4b0b      	ldr	r3, [pc, #44]	@ (8001fcc <HAL_RCC_ClockConfig+0x1bc>)
 8001f9e:	689b      	ldr	r3, [r3, #8]
 8001fa0:	091b      	lsrs	r3, r3, #4
 8001fa2:	f003 030f 	and.w	r3, r3, #15
 8001fa6:	490a      	ldr	r1, [pc, #40]	@ (8001fd0 <HAL_RCC_ClockConfig+0x1c0>)
 8001fa8:	5ccb      	ldrb	r3, [r1, r3]
 8001faa:	fa22 f303 	lsr.w	r3, r2, r3
 8001fae:	4a09      	ldr	r2, [pc, #36]	@ (8001fd4 <HAL_RCC_ClockConfig+0x1c4>)
 8001fb0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001fb2:	4b09      	ldr	r3, [pc, #36]	@ (8001fd8 <HAL_RCC_ClockConfig+0x1c8>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	f7ff fbba 	bl	8001730 <HAL_InitTick>

  return HAL_OK;
 8001fbc:	2300      	movs	r3, #0
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	3710      	adds	r7, #16
 8001fc2:	46bd      	mov	sp, r7
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	40023c00 	.word	0x40023c00
 8001fcc:	40023800 	.word	0x40023800
 8001fd0:	08005630 	.word	0x08005630
 8001fd4:	20000000 	.word	0x20000000
 8001fd8:	20000004 	.word	0x20000004

08001fdc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001fe0:	4b03      	ldr	r3, [pc, #12]	@ (8001ff0 <HAL_RCC_GetHCLKFreq+0x14>)
 8001fe2:	681b      	ldr	r3, [r3, #0]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fec:	4770      	bx	lr
 8001fee:	bf00      	nop
 8001ff0:	20000000 	.word	0x20000000

08001ff4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001ff8:	f7ff fff0 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	4b05      	ldr	r3, [pc, #20]	@ (8002014 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002000:	689b      	ldr	r3, [r3, #8]
 8002002:	0a9b      	lsrs	r3, r3, #10
 8002004:	f003 0307 	and.w	r3, r3, #7
 8002008:	4903      	ldr	r1, [pc, #12]	@ (8002018 <HAL_RCC_GetPCLK1Freq+0x24>)
 800200a:	5ccb      	ldrb	r3, [r1, r3]
 800200c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002010:	4618      	mov	r0, r3
 8002012:	bd80      	pop	{r7, pc}
 8002014:	40023800 	.word	0x40023800
 8002018:	08005640 	.word	0x08005640

0800201c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002020:	f7ff ffdc 	bl	8001fdc <HAL_RCC_GetHCLKFreq>
 8002024:	4602      	mov	r2, r0
 8002026:	4b05      	ldr	r3, [pc, #20]	@ (800203c <HAL_RCC_GetPCLK2Freq+0x20>)
 8002028:	689b      	ldr	r3, [r3, #8]
 800202a:	0b5b      	lsrs	r3, r3, #13
 800202c:	f003 0307 	and.w	r3, r3, #7
 8002030:	4903      	ldr	r1, [pc, #12]	@ (8002040 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002032:	5ccb      	ldrb	r3, [r1, r3]
 8002034:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002038:	4618      	mov	r0, r3
 800203a:	bd80      	pop	{r7, pc}
 800203c:	40023800 	.word	0x40023800
 8002040:	08005640 	.word	0x08005640

08002044 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) and RCC_BDCR register are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	@ 0x30
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmpreg1 = 0U;
 8002050:	2300      	movs	r3, #0
 8002052:	623b      	str	r3, [r7, #32]
  uint32_t plli2sp = 0U;
 8002054:	2300      	movs	r3, #0
 8002056:	61fb      	str	r3, [r7, #28]
  uint32_t plli2sq = 0U;
 8002058:	2300      	movs	r3, #0
 800205a:	61bb      	str	r3, [r7, #24]
  uint32_t plli2sr = 0U;
 800205c:	2300      	movs	r3, #0
 800205e:	617b      	str	r3, [r7, #20]
  uint32_t pllsaip = 0U;
 8002060:	2300      	movs	r3, #0
 8002062:	613b      	str	r3, [r7, #16]
  uint32_t pllsaiq = 0U;
 8002064:	2300      	movs	r3, #0
 8002066:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0U;
 8002068:	2300      	movs	r3, #0
 800206a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint32_t pllsaiused = 0U;
 800206c:	2300      	movs	r3, #0
 800206e:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check the peripheral clock selection parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------ I2S APB1 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == (RCC_PERIPHCLK_I2S_APB1))
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f003 0301 	and.w	r3, r3, #1
 8002078:	2b00      	cmp	r3, #0
 800207a:	d010      	beq.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x5a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB1CLKSOURCE(PeriphClkInit->I2sApb1ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB1_CONFIG(PeriphClkInit->I2sApb1ClockSelection);
 800207c:	4b6f      	ldr	r3, [pc, #444]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800207e:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8002082:	f023 62c0 	bic.w	r2, r3, #100663296	@ 0x6000000
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800208a:	496c      	ldr	r1, [pc, #432]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800208c:	4313      	orrs	r3, r2
 800208e:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002096:	2b00      	cmp	r3, #0
 8002098:	d101      	bne.n	800209e <HAL_RCCEx_PeriphCLKConfig+0x5a>
    {
      plli2sused = 1U;
 800209a:	2301      	movs	r3, #1
 800209c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- I2S APB2 configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == (RCC_PERIPHCLK_I2S_APB2))
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	f003 0302 	and.w	r3, r3, #2
 80020a6:	2b00      	cmp	r3, #0
 80020a8:	d010      	beq.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x88>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SAPB2CLKSOURCE(PeriphClkInit->I2sApb2ClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_APB2_CONFIG(PeriphClkInit->I2sApb2ClockSelection);
 80020aa:	4b64      	ldr	r3, [pc, #400]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020b0:	f023 52c0 	bic.w	r2, r3, #402653184	@ 0x18000000
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020b8:	4960      	ldr	r1, [pc, #384]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020ba:	4313      	orrs	r3, r2
 80020bc:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for I2S */
    if (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d101      	bne.n	80020cc <HAL_RCCEx_PeriphCLKConfig+0x88>
    {
      plli2sused = 1U;
 80020c8:	2301      	movs	r3, #1
 80020ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
  }
  /*--------------------------------------------------------------------------*/

  /*--------------------------- SAI1 configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	f003 0304 	and.w	r3, r3, #4
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d017      	beq.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xc4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80020d8:	4b58      	ldr	r3, [pc, #352]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020da:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80020de:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e6:	4955      	ldr	r1, [pc, #340]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80020e8:	4313      	orrs	r3, r2
 80020ea:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020f2:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80020f6:	d101      	bne.n	80020fc <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      plli2sused = 1U;
 80020f8:	2301      	movs	r3, #1
 80020fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002100:	2b00      	cmp	r3, #0
 8002102:	d101      	bne.n	8002108 <HAL_RCCEx_PeriphCLKConfig+0xc4>
    {
      pllsaiused = 1U;
 8002104:	2301      	movs	r3, #1
 8002106:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*-------------------------- SAI2 configuration ----------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	f003 0308 	and.w	r3, r3, #8
 8002110:	2b00      	cmp	r3, #0
 8002112:	d017      	beq.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002114:	4b49      	ldr	r3, [pc, #292]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002116:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800211a:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002122:	4946      	ldr	r1, [pc, #280]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002124:	4313      	orrs	r3, r2
 8002126:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800212e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002132:	d101      	bne.n	8002138 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      plli2sused = 1U;
 8002134:	2301      	movs	r3, #1
 8002136:	62fb      	str	r3, [r7, #44]	@ 0x2c
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800213c:	2b00      	cmp	r3, #0
 800213e:	d101      	bne.n	8002144 <HAL_RCCEx_PeriphCLKConfig+0x100>
    {
      pllsaiused = 1U;
 8002140:	2301      	movs	r3, #1
 8002142:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- RTC configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002144:	687b      	ldr	r3, [r7, #4]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	f003 0320 	and.w	r3, r3, #32
 800214c:	2b00      	cmp	r3, #0
 800214e:	f000 808a 	beq.w	8002266 <HAL_RCCEx_PeriphCLKConfig+0x222>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60bb      	str	r3, [r7, #8]
 8002156:	4b39      	ldr	r3, [pc, #228]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800215a:	4a38      	ldr	r2, [pc, #224]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 800215c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002160:	6413      	str	r3, [r2, #64]	@ 0x40
 8002162:	4b36      	ldr	r3, [pc, #216]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002164:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002166:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800216a:	60bb      	str	r3, [r7, #8]
 800216c:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR |= PWR_CR_DBP;
 800216e:	4b34      	ldr	r3, [pc, #208]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	4a33      	ldr	r2, [pc, #204]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002178:	6013      	str	r3, [r2, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800217a:	f7ff fb1d 	bl	80017b8 <HAL_GetTick>
 800217e:	6278      	str	r0, [r7, #36]	@ 0x24

    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002180:	e008      	b.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x150>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002182:	f7ff fb19 	bl	80017b8 <HAL_GetTick>
 8002186:	4602      	mov	r2, r0
 8002188:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800218a:	1ad3      	subs	r3, r2, r3
 800218c:	2b02      	cmp	r3, #2
 800218e:	d901      	bls.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x150>
      {
        return HAL_TIMEOUT;
 8002190:	2303      	movs	r3, #3
 8002192:	e278      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while ((PWR->CR & PWR_CR_DBP) == RESET)
 8002194:	4b2a      	ldr	r3, [pc, #168]	@ (8002240 <HAL_RCCEx_PeriphCLKConfig+0x1fc>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800219c:	2b00      	cmp	r3, #0
 800219e:	d0f0      	beq.n	8002182 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      }
    }
    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    tmpreg1 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80021a0:	4b26      	ldr	r3, [pc, #152]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021a2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021a4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021a8:	623b      	str	r3, [r7, #32]
    if ((tmpreg1 != 0x00000000U) && ((tmpreg1) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80021aa:	6a3b      	ldr	r3, [r7, #32]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d02f      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021b4:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021b8:	6a3a      	ldr	r2, [r7, #32]
 80021ba:	429a      	cmp	r2, r3
 80021bc:	d028      	beq.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg1 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 80021be:	4b1f      	ldr	r3, [pc, #124]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021c0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80021c6:	623b      	str	r3, [r7, #32]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 80021c8:	4b1e      	ldr	r3, [pc, #120]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80021ca:	2201      	movs	r2, #1
 80021cc:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 80021ce:	4b1d      	ldr	r3, [pc, #116]	@ (8002244 <HAL_RCCEx_PeriphCLKConfig+0x200>)
 80021d0:	2200      	movs	r2, #0
 80021d2:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg1;
 80021d4:	4a19      	ldr	r2, [pc, #100]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021d6:	6a3b      	ldr	r3, [r7, #32]
 80021d8:	6713      	str	r3, [r2, #112]	@ 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 80021da:	4b18      	ldr	r3, [pc, #96]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 80021dc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80021de:	f003 0301 	and.w	r3, r3, #1
 80021e2:	2b01      	cmp	r3, #1
 80021e4:	d114      	bne.n	8002210 <HAL_RCCEx_PeriphCLKConfig+0x1cc>
      {
        /* Get tick */
        tickstart = HAL_GetTick();
 80021e6:	f7ff fae7 	bl	80017b8 <HAL_GetTick>
 80021ea:	6278      	str	r0, [r7, #36]	@ 0x24

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80021ec:	e00a      	b.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80021ee:	f7ff fae3 	bl	80017b8 <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d901      	bls.n	8002204 <HAL_RCCEx_PeriphCLKConfig+0x1c0>
          {
            return HAL_TIMEOUT;
 8002200:	2303      	movs	r3, #3
 8002202:	e240      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x642>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002204:	4b0d      	ldr	r3, [pc, #52]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002206:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002208:	f003 0302 	and.w	r3, r3, #2
 800220c:	2b00      	cmp	r3, #0
 800220e:	d0ee      	beq.n	80021ee <HAL_RCCEx_PeriphCLKConfig+0x1aa>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002214:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002218:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800221c:	d114      	bne.n	8002248 <HAL_RCCEx_PeriphCLKConfig+0x204>
 800221e:	4b07      	ldr	r3, [pc, #28]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002220:	689b      	ldr	r3, [r3, #8]
 8002222:	f423 12f8 	bic.w	r2, r3, #2031616	@ 0x1f0000
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800222a:	f023 4370 	bic.w	r3, r3, #4026531840	@ 0xf0000000
 800222e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002232:	4902      	ldr	r1, [pc, #8]	@ (800223c <HAL_RCCEx_PeriphCLKConfig+0x1f8>)
 8002234:	4313      	orrs	r3, r2
 8002236:	608b      	str	r3, [r1, #8]
 8002238:	e00c      	b.n	8002254 <HAL_RCCEx_PeriphCLKConfig+0x210>
 800223a:	bf00      	nop
 800223c:	40023800 	.word	0x40023800
 8002240:	40007000 	.word	0x40007000
 8002244:	42470e40 	.word	0x42470e40
 8002248:	4b4a      	ldr	r3, [pc, #296]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800224a:	689b      	ldr	r3, [r3, #8]
 800224c:	4a49      	ldr	r2, [pc, #292]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800224e:	f423 13f8 	bic.w	r3, r3, #2031616	@ 0x1f0000
 8002252:	6093      	str	r3, [r2, #8]
 8002254:	4b47      	ldr	r3, [pc, #284]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002256:	6f1a      	ldr	r2, [r3, #112]	@ 0x70
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800225c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002260:	4944      	ldr	r1, [pc, #272]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002262:	4313      	orrs	r3, r2
 8002264:	670b      	str	r3, [r1, #112]	@ 0x70
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- TIM configuration ---------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 0310 	and.w	r3, r3, #16
 800226e:	2b00      	cmp	r3, #0
 8002270:	d004      	beq.n	800227c <HAL_RCCEx_PeriphCLKConfig+0x238>
  {
    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 2058 	ldrb.w	r2, [r3, #88]	@ 0x58
 8002278:	4b3f      	ldr	r3, [pc, #252]	@ (8002378 <HAL_RCCEx_PeriphCLKConfig+0x334>)
 800227a:	601a      	str	r2, [r3, #0]
  }
  /*--------------------------------------------------------------------------*/

  /*---------------------------- FMPI2C1 Configuration -----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMPI2C1) == RCC_PERIPHCLK_FMPI2C1)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002284:	2b00      	cmp	r3, #0
 8002286:	d00a      	beq.n	800229e <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FMPI2C1CLKSOURCE(PeriphClkInit->Fmpi2c1ClockSelection));

    /* Configure the FMPI2C1 clock source */
    __HAL_RCC_FMPI2C1_CONFIG(PeriphClkInit->Fmpi2c1ClockSelection);
 8002288:	4b3a      	ldr	r3, [pc, #232]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800228a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800228e:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002296:	4937      	ldr	r1, [pc, #220]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002298:	4313      	orrs	r3, r2
 800229a:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ CEC Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d00a      	beq.n	80022c0 <HAL_RCCEx_PeriphCLKConfig+0x27c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80022aa:	4b32      	ldr	r3, [pc, #200]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022ac:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022b0:	f023 6280 	bic.w	r2, r3, #67108864	@ 0x4000000
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80022b8:	492e      	ldr	r1, [pc, #184]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022ba:	4313      	orrs	r3, r2
 80022bc:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- CLK48 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d011      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48CLKSOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 clock source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80022cc:	4b29      	ldr	r3, [pc, #164]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022ce:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80022d2:	f023 6200 	bic.w	r2, r3, #134217728	@ 0x8000000
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022da:	4926      	ldr	r1, [pc, #152]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022dc:	4313      	orrs	r3, r2
 80022de:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94

    /* Enable the PLLSAI when it's used as clock source for CLK48 */
    if (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80022e6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80022ea:	d101      	bne.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x2ac>
    {
      pllsaiused = 1U;
 80022ec:	2301      	movs	r3, #1
 80022ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    }
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- SDIO Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDIO) == RCC_PERIPHCLK_SDIO)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDIOCLKSOURCE(PeriphClkInit->SdioClockSelection));

    /* Configure the SDIO clock source */
    __HAL_RCC_SDIO_CONFIG(PeriphClkInit->SdioClockSelection);
 80022fc:	4b1d      	ldr	r3, [pc, #116]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 80022fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002302:	f023 5280 	bic.w	r2, r3, #268435456	@ 0x10000000
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800230a:	491a      	ldr	r1, [pc, #104]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
  }
  /*--------------------------------------------------------------------------*/

  /*------------------------------ SPDIFRX Configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800231a:	2b00      	cmp	r3, #0
 800231c:	d011      	beq.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SPDIFRXCLKSOURCE(PeriphClkInit->SpdifClockSelection));

    /* Configure the SPDIFRX clock source */
    __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifClockSelection);
 800231e:	4b15      	ldr	r3, [pc, #84]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 8002320:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8002324:	f023 5200 	bic.w	r2, r3, #536870912	@ 0x20000000
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800232c:	4911      	ldr	r1, [pc, #68]	@ (8002374 <HAL_RCCEx_PeriphCLKConfig+0x330>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3094 	str.w	r3, [r1, #148]	@ 0x94
    /* Enable the PLLI2S when it's used as clock source for SPDIFRX */
    if (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002338:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800233c:	d101      	bne.n	8002342 <HAL_RCCEx_PeriphCLKConfig+0x2fe>
    {
      plli2sused = 1U;
 800233e:	2301      	movs	r3, #1
 8002340:	62fb      	str	r3, [r7, #44]	@ 0x2c
  /*--------------------------------------------------------------------------*/

  /*---------------------------- PLLI2S Configuration ------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S on APB1,
     I2S on APB2 or SPDIFRX */
  if ((plli2sused == 1U) || (PeriphClkInit->PeriphClockSelection == RCC_PERIPHCLK_PLLI2S))
 8002342:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002344:	2b01      	cmp	r3, #1
 8002346:	d005      	beq.n	8002354 <HAL_RCCEx_PeriphCLKConfig+0x310>
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002350:	f040 80ff 	bne.w	8002552 <HAL_RCCEx_PeriphCLKConfig+0x50e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002354:	4b09      	ldr	r3, [pc, #36]	@ (800237c <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8002356:	2200      	movs	r2, #0
 8002358:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800235a:	f7ff fa2d 	bl	80017b8 <HAL_GetTick>
 800235e:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002360:	e00e      	b.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002362:	f7ff fa29 	bl	80017b8 <HAL_GetTick>
 8002366:	4602      	mov	r2, r0
 8002368:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800236a:	1ad3      	subs	r3, r2, r3
 800236c:	2b02      	cmp	r3, #2
 800236e:	d907      	bls.n	8002380 <HAL_RCCEx_PeriphCLKConfig+0x33c>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002370:	2303      	movs	r3, #3
 8002372:	e188      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x642>
 8002374:	40023800 	.word	0x40023800
 8002378:	424711e0 	.word	0x424711e0
 800237c:	42470068 	.word	0x42470068
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002380:	4b7e      	ldr	r3, [pc, #504]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 8002388:	2b00      	cmp	r3, #0
 800238a:	d1ea      	bne.n	8002362 <HAL_RCCEx_PeriphCLKConfig+0x31e>
    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SM_VALUE(PeriphClkInit->PLLI2S.PLLI2SM));
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*------ In Case of PLLI2S is selected as source clock for I2S -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB1) == RCC_PERIPHCLK_I2S_APB1)
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f003 0301 	and.w	r3, r3, #1
 8002394:	2b00      	cmp	r3, #0
 8002396:	d003      	beq.n	80023a0 <HAL_RCCEx_PeriphCLKConfig+0x35c>
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800239c:	2b00      	cmp	r3, #0
 800239e:	d009      	beq.n	80023b4 <HAL_RCCEx_PeriphCLKConfig+0x370>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	f003 0302 	and.w	r3, r3, #2
         && (PeriphClkInit->I2sApb1ClockSelection == RCC_I2SAPB1CLKSOURCE_PLLI2S)) ||
 80023a8:	2b00      	cmp	r3, #0
 80023aa:	d028      	beq.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S_APB2) == RCC_PERIPHCLK_I2S_APB2) && (PeriphClkInit->I2sApb2ClockSelection == RCC_I2SAPB2CLKSOURCE_PLLI2S)))
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d124      	bne.n	80023fe <HAL_RCCEx_PeriphCLKConfig+0x3ba>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP/PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80023b4:	4b71      	ldr	r3, [pc, #452]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023ba:	0c1b      	lsrs	r3, r3, #16
 80023bc:	f003 0303 	and.w	r3, r3, #3
 80023c0:	3301      	adds	r3, #1
 80023c2:	005b      	lsls	r3, r3, #1
 80023c4:	61fb      	str	r3, [r7, #28]
      plli2sq = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80023c6:	4b6d      	ldr	r3, [pc, #436]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023c8:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80023cc:	0e1b      	lsrs	r3, r3, #24
 80023ce:	f003 030f 	and.w	r3, r3, #15
 80023d2:	61bb      	str	r3, [r7, #24]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp, plli2sq,
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	685a      	ldr	r2, [r3, #4]
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	689b      	ldr	r3, [r3, #8]
 80023dc:	019b      	lsls	r3, r3, #6
 80023de:	431a      	orrs	r2, r3
 80023e0:	69fb      	ldr	r3, [r7, #28]
 80023e2:	085b      	lsrs	r3, r3, #1
 80023e4:	3b01      	subs	r3, #1
 80023e6:	041b      	lsls	r3, r3, #16
 80023e8:	431a      	orrs	r2, r3
 80023ea:	69bb      	ldr	r3, [r7, #24]
 80023ec:	061b      	lsls	r3, r3, #24
 80023ee:	431a      	orrs	r2, r3
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	695b      	ldr	r3, [r3, #20]
 80023f4:	071b      	lsls	r3, r3, #28
 80023f6:	4961      	ldr	r1, [pc, #388]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80023f8:	4313      	orrs	r3, r2
 80023fa:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /*------- In Case of PLLI2S is selected as source clock for SAI ----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0304 	and.w	r3, r3, #4
 8002406:	2b00      	cmp	r3, #0
 8002408:	d004      	beq.n	8002414 <HAL_RCCEx_PeriphCLKConfig+0x3d0>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800240e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8002412:	d00a      	beq.n	800242a <HAL_RCCEx_PeriphCLKConfig+0x3e6>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800241c:	2b00      	cmp	r3, #0
 800241e:	d035      	beq.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x448>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002424:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002428:	d130      	bne.n	800248c <HAL_RCCEx_PeriphCLKConfig+0x448>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP/PLLI2SR value from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      plli2sp = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 800242a:	4b54      	ldr	r3, [pc, #336]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800242c:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002430:	0c1b      	lsrs	r3, r3, #16
 8002432:	f003 0303 	and.w	r3, r3, #3
 8002436:	3301      	adds	r3, #1
 8002438:	005b      	lsls	r3, r3, #1
 800243a:	61fb      	str	r3, [r7, #28]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 800243c:	4b4f      	ldr	r3, [pc, #316]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800243e:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 8002442:	0f1b      	lsrs	r3, r3, #28
 8002444:	f003 0307 	and.w	r3, r3, #7
 8002448:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLI2SM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, plli2sp,
 800244a:	687b      	ldr	r3, [r7, #4]
 800244c:	685a      	ldr	r2, [r3, #4]
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	019b      	lsls	r3, r3, #6
 8002454:	431a      	orrs	r2, r3
 8002456:	69fb      	ldr	r3, [r7, #28]
 8002458:	085b      	lsrs	r3, r3, #1
 800245a:	3b01      	subs	r3, #1
 800245c:	041b      	lsls	r3, r3, #16
 800245e:	431a      	orrs	r2, r3
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	691b      	ldr	r3, [r3, #16]
 8002464:	061b      	lsls	r3, r3, #24
 8002466:	431a      	orrs	r2, r3
 8002468:	697b      	ldr	r3, [r7, #20]
 800246a:	071b      	lsls	r3, r3, #28
 800246c:	4943      	ldr	r1, [pc, #268]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 800246e:	4313      	orrs	r3, r2
 8002470:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, plli2sr);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002474:	4b41      	ldr	r3, [pc, #260]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002476:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800247a:	f023 021f 	bic.w	r2, r3, #31
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002482:	3b01      	subs	r3, #1
 8002484:	493d      	ldr	r1, [pc, #244]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002486:	4313      	orrs	r3, r2
 8002488:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLI2S is selected as source clock for SPDIFRX -------*/
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002494:	2b00      	cmp	r3, #0
 8002496:	d029      	beq.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
        && (PeriphClkInit->SpdifClockSelection == RCC_SPDIFRXCLKSOURCE_PLLI2SP))
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800249c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80024a0:	d124      	bne.n	80024ec <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));
      /* Read PLLI2SR value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      plli2sq = ((((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos) + 1U) << 1U);
 80024a2:	4b36      	ldr	r3, [pc, #216]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024a8:	0c1b      	lsrs	r3, r3, #16
 80024aa:	f003 0303 	and.w	r3, r3, #3
 80024ae:	3301      	adds	r3, #1
 80024b0:	005b      	lsls	r3, r3, #1
 80024b2:	61bb      	str	r3, [r7, #24]
      plli2sr = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024b4:	4b31      	ldr	r3, [pc, #196]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	@ 0x84
 80024ba:	0f1b      	lsrs	r3, r3, #28
 80024bc:	f003 0307 	and.w	r3, r3, #7
 80024c0:	617b      	str	r3, [r7, #20]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685a      	ldr	r2, [r3, #4]
 80024c6:	687b      	ldr	r3, [r7, #4]
 80024c8:	689b      	ldr	r3, [r3, #8]
 80024ca:	019b      	lsls	r3, r3, #6
 80024cc:	431a      	orrs	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	68db      	ldr	r3, [r3, #12]
 80024d2:	085b      	lsrs	r3, r3, #1
 80024d4:	3b01      	subs	r3, #1
 80024d6:	041b      	lsls	r3, r3, #16
 80024d8:	431a      	orrs	r2, r3
 80024da:	69bb      	ldr	r3, [r7, #24]
 80024dc:	061b      	lsls	r3, r3, #24
 80024de:	431a      	orrs	r2, r3
 80024e0:	697b      	ldr	r3, [r7, #20]
 80024e2:	071b      	lsls	r3, r3, #28
 80024e4:	4925      	ldr	r1, [pc, #148]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 80024e6:	4313      	orrs	r3, r2
 80024e8:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              plli2sq, plli2sr);
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d016      	beq.n	8002526 <HAL_RCCEx_PeriphCLKConfig+0x4e2>
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) * (PLLI2SN/PLLI2SM) */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SM, PeriphClkInit->PLLI2S.PLLI2SN, PeriphClkInit->PLLI2S.PLLI2SP,
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	685a      	ldr	r2, [r3, #4]
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	689b      	ldr	r3, [r3, #8]
 8002500:	019b      	lsls	r3, r3, #6
 8002502:	431a      	orrs	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	68db      	ldr	r3, [r3, #12]
 8002508:	085b      	lsrs	r3, r3, #1
 800250a:	3b01      	subs	r3, #1
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	691b      	ldr	r3, [r3, #16]
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	431a      	orrs	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	695b      	ldr	r3, [r3, #20]
 800251c:	071b      	lsls	r3, r3, #28
 800251e:	4917      	ldr	r1, [pc, #92]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002520:	4313      	orrs	r3, r2
 8002522:	f8c1 3084 	str.w	r3, [r1, #132]	@ 0x84
                              PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8002526:	4b16      	ldr	r3, [pc, #88]	@ (8002580 <HAL_RCCEx_PeriphCLKConfig+0x53c>)
 8002528:	2201      	movs	r2, #1
 800252a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800252c:	f7ff f944 	bl	80017b8 <HAL_GetTick>
 8002530:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLI2S is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002532:	e008      	b.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x502>
    {
      if ((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002534:	f7ff f940 	bl	80017b8 <HAL_GetTick>
 8002538:	4602      	mov	r2, r0
 800253a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800253c:	1ad3      	subs	r3, r2, r3
 800253e:	2b02      	cmp	r3, #2
 8002540:	d901      	bls.n	8002546 <HAL_RCCEx_PeriphCLKConfig+0x502>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002542:	2303      	movs	r3, #3
 8002544:	e09f      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8002546:	4b0d      	ldr	r3, [pc, #52]	@ (800257c <HAL_RCCEx_PeriphCLKConfig+0x538>)
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
 800254e:	2b00      	cmp	r3, #0
 8002550:	d0f0      	beq.n	8002534 <HAL_RCCEx_PeriphCLKConfig+0x4f0>
  }
  /*--------------------------------------------------------------------------*/

  /*----------------------------- PLLSAI Configuration -----------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, CLK48 or SDIO */
  if (pllsaiused == 1U)
 8002552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002554:	2b01      	cmp	r3, #1
 8002556:	f040 8095 	bne.w	8002684 <HAL_RCCEx_PeriphCLKConfig+0x640>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800255a:	4b0a      	ldr	r3, [pc, #40]	@ (8002584 <HAL_RCCEx_PeriphCLKConfig+0x540>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 8002560:	f7ff f92a 	bl	80017b8 <HAL_GetTick>
 8002564:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is disabled */
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002566:	e00f      	b.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x544>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002568:	f7ff f926 	bl	80017b8 <HAL_GetTick>
 800256c:	4602      	mov	r2, r0
 800256e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002570:	1ad3      	subs	r3, r2, r3
 8002572:	2b02      	cmp	r3, #2
 8002574:	d908      	bls.n	8002588 <HAL_RCCEx_PeriphCLKConfig+0x544>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002576:	2303      	movs	r3, #3
 8002578:	e085      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x642>
 800257a:	bf00      	nop
 800257c:	40023800 	.word	0x40023800
 8002580:	42470068 	.word	0x42470068
 8002584:	42470070 	.word	0x42470070
    while (__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002588:	4b41      	ldr	r3, [pc, #260]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8002590:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002594:	d0e8      	beq.n	8002568 <HAL_RCCEx_PeriphCLKConfig+0x524>
    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIM_VALUE(PeriphClkInit->PLLSAI.PLLSAIM));
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*------ In Case of PLLSAI is selected as source clock for SAI -----------*/
    if (((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f003 0304 	and.w	r3, r3, #4
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d003      	beq.n	80025aa <HAL_RCCEx_PeriphCLKConfig+0x566>
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d009      	beq.n	80025be <HAL_RCCEx_PeriphCLKConfig+0x57a>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	f003 0308 	and.w	r3, r3, #8
         && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	d02b      	beq.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
        ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d127      	bne.n	800260e <HAL_RCCEx_PeriphCLKConfig+0x5ca>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      pllsaip = ((((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos) + 1U) << 1U);
 80025be:	4b34      	ldr	r3, [pc, #208]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025c0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025c4:	0c1b      	lsrs	r3, r3, #16
 80025c6:	f003 0303 	and.w	r3, r3, #3
 80025ca:	3301      	adds	r3, #1
 80025cc:	005b      	lsls	r3, r3, #1
 80025ce:	613b      	str	r3, [r7, #16]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, pllsaip,
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	699a      	ldr	r2, [r3, #24]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	69db      	ldr	r3, [r3, #28]
 80025d8:	019b      	lsls	r3, r3, #6
 80025da:	431a      	orrs	r2, r3
 80025dc:	693b      	ldr	r3, [r7, #16]
 80025de:	085b      	lsrs	r3, r3, #1
 80025e0:	3b01      	subs	r3, #1
 80025e2:	041b      	lsls	r3, r3, #16
 80025e4:	431a      	orrs	r2, r3
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80025ea:	061b      	lsls	r3, r3, #24
 80025ec:	4928      	ldr	r1, [pc, #160]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025ee:	4313      	orrs	r3, r2
 80025f0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              PeriphClkInit->PLLSAI.PLLSAIQ, 0U);

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80025f4:	4b26      	ldr	r3, [pc, #152]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 80025f6:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80025fa:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002602:	3b01      	subs	r3, #1
 8002604:	021b      	lsls	r3, r3, #8
 8002606:	4922      	ldr	r1, [pc, #136]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002608:	4313      	orrs	r3, r2
 800260a:	f8c1 308c 	str.w	r3, [r1, #140]	@ 0x8c
    }

    /*------ In Case of PLLSAI is selected as source clock for CLK48 ---------*/
    /* In Case of PLLI2S is selected as source clock for CLK48 */
    if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002616:	2b00      	cmp	r3, #0
 8002618:	d01d      	beq.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x612>
        && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48CLKSOURCE_PLLSAIP))
 800261a:	687b      	ldr	r3, [r7, #4]
 800261c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800261e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8002622:	d118      	bne.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x612>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ value from PLLI2SCFGR register (this value is not need for SAI configuration) */
      pllsaiq = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002624:	4b1a      	ldr	r3, [pc, #104]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002626:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800262a:	0e1b      	lsrs	r3, r3, #24
 800262c:	f003 030f 	and.w	r3, r3, #15
 8002630:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) * (PLLI2SN/PLLSAIM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIM, PeriphClkInit->PLLSAI.PLLSAIN, PeriphClkInit->PLLSAI.PLLSAIP,
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	699a      	ldr	r2, [r3, #24]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	69db      	ldr	r3, [r3, #28]
 800263a:	019b      	lsls	r3, r3, #6
 800263c:	431a      	orrs	r2, r3
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	6a1b      	ldr	r3, [r3, #32]
 8002642:	085b      	lsrs	r3, r3, #1
 8002644:	3b01      	subs	r3, #1
 8002646:	041b      	lsls	r3, r3, #16
 8002648:	431a      	orrs	r2, r3
 800264a:	68fb      	ldr	r3, [r7, #12]
 800264c:	061b      	lsls	r3, r3, #24
 800264e:	4910      	ldr	r1, [pc, #64]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002650:	4313      	orrs	r3, r2
 8002652:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
                              pllsaiq, 0U);
    }

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002656:	4b0f      	ldr	r3, [pc, #60]	@ (8002694 <HAL_RCCEx_PeriphCLKConfig+0x650>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]
    /* Get tick */
    tickstart = HAL_GetTick();
 800265c:	f7ff f8ac 	bl	80017b8 <HAL_GetTick>
 8002660:	6278      	str	r0, [r7, #36]	@ 0x24
    /* Wait till PLLSAI is ready */
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x632>
    {
      if ((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002664:	f7ff f8a8 	bl	80017b8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCCEx_PeriphCLKConfig+0x632>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e007      	b.n	8002686 <HAL_RCCEx_PeriphCLKConfig+0x642>
    while (__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002676:	4b06      	ldr	r3, [pc, #24]	@ (8002690 <HAL_RCCEx_PeriphCLKConfig+0x64c>)
 8002678:	681b      	ldr	r3, [r3, #0]
 800267a:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 800267e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8002682:	d1ef      	bne.n	8002664 <HAL_RCCEx_PeriphCLKConfig+0x620>
      }
    }
  }
  return HAL_OK;
 8002684:	2300      	movs	r3, #0
}
 8002686:	4618      	mov	r0, r3
 8002688:	3730      	adds	r7, #48	@ 0x30
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}
 800268e:	bf00      	nop
 8002690:	40023800 	.word	0x40023800
 8002694:	42470070 	.word	0x42470070

08002698 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002698:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800269c:	b0ae      	sub	sp, #184	@ 0xb8
 800269e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80026a0:	2300      	movs	r3, #0
 80026a2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t pllvco = 0U;
 80026a6:	2300      	movs	r3, #0
 80026a8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t pllp = 0U;
 80026ac:	2300      	movs	r3, #0
 80026ae:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  uint32_t pllr = 0U;
 80026b2:	2300      	movs	r3, #0
 80026b4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t sysclockfreq = 0U;
 80026b8:	2300      	movs	r3, #0
 80026ba:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80026be:	4bcb      	ldr	r3, [pc, #812]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x354>)
 80026c0:	689b      	ldr	r3, [r3, #8]
 80026c2:	f003 030c 	and.w	r3, r3, #12
 80026c6:	2b0c      	cmp	r3, #12
 80026c8:	f200 8206 	bhi.w	8002ad8 <HAL_RCC_GetSysClockFreq+0x440>
 80026cc:	a201      	add	r2, pc, #4	@ (adr r2, 80026d4 <HAL_RCC_GetSysClockFreq+0x3c>)
 80026ce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80026d2:	bf00      	nop
 80026d4:	08002709 	.word	0x08002709
 80026d8:	08002ad9 	.word	0x08002ad9
 80026dc:	08002ad9 	.word	0x08002ad9
 80026e0:	08002ad9 	.word	0x08002ad9
 80026e4:	08002711 	.word	0x08002711
 80026e8:	08002ad9 	.word	0x08002ad9
 80026ec:	08002ad9 	.word	0x08002ad9
 80026f0:	08002ad9 	.word	0x08002ad9
 80026f4:	08002719 	.word	0x08002719
 80026f8:	08002ad9 	.word	0x08002ad9
 80026fc:	08002ad9 	.word	0x08002ad9
 8002700:	08002ad9 	.word	0x08002ad9
 8002704:	08002909 	.word	0x08002909
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002708:	4bb9      	ldr	r3, [pc, #740]	@ (80029f0 <HAL_RCC_GetSysClockFreq+0x358>)
 800270a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 800270e:	e1e7      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002710:	4bb8      	ldr	r3, [pc, #736]	@ (80029f4 <HAL_RCC_GetSysClockFreq+0x35c>)
 8002712:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002716:	e1e3      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002718:	4bb4      	ldr	r3, [pc, #720]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x354>)
 800271a:	685b      	ldr	r3, [r3, #4]
 800271c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002720:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002724:	4bb1      	ldr	r3, [pc, #708]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002726:	685b      	ldr	r3, [r3, #4]
 8002728:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800272c:	2b00      	cmp	r3, #0
 800272e:	d071      	beq.n	8002814 <HAL_RCC_GetSysClockFreq+0x17c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002730:	4bae      	ldr	r3, [pc, #696]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	099b      	lsrs	r3, r3, #6
 8002736:	2200      	movs	r2, #0
 8002738:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800273c:	f8c7 209c 	str.w	r2, [r7, #156]	@ 0x9c
 8002740:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002744:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002748:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800274c:	2300      	movs	r3, #0
 800274e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8002752:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002756:	4622      	mov	r2, r4
 8002758:	462b      	mov	r3, r5
 800275a:	f04f 0000 	mov.w	r0, #0
 800275e:	f04f 0100 	mov.w	r1, #0
 8002762:	0159      	lsls	r1, r3, #5
 8002764:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002768:	0150      	lsls	r0, r2, #5
 800276a:	4602      	mov	r2, r0
 800276c:	460b      	mov	r3, r1
 800276e:	4621      	mov	r1, r4
 8002770:	1a51      	subs	r1, r2, r1
 8002772:	6439      	str	r1, [r7, #64]	@ 0x40
 8002774:	4629      	mov	r1, r5
 8002776:	eb63 0301 	sbc.w	r3, r3, r1
 800277a:	647b      	str	r3, [r7, #68]	@ 0x44
 800277c:	f04f 0200 	mov.w	r2, #0
 8002780:	f04f 0300 	mov.w	r3, #0
 8002784:	e9d7 8910 	ldrd	r8, r9, [r7, #64]	@ 0x40
 8002788:	4649      	mov	r1, r9
 800278a:	018b      	lsls	r3, r1, #6
 800278c:	4641      	mov	r1, r8
 800278e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002792:	4641      	mov	r1, r8
 8002794:	018a      	lsls	r2, r1, #6
 8002796:	4641      	mov	r1, r8
 8002798:	1a51      	subs	r1, r2, r1
 800279a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800279c:	4649      	mov	r1, r9
 800279e:	eb63 0301 	sbc.w	r3, r3, r1
 80027a2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80027a4:	f04f 0200 	mov.w	r2, #0
 80027a8:	f04f 0300 	mov.w	r3, #0
 80027ac:	e9d7 890e 	ldrd	r8, r9, [r7, #56]	@ 0x38
 80027b0:	4649      	mov	r1, r9
 80027b2:	00cb      	lsls	r3, r1, #3
 80027b4:	4641      	mov	r1, r8
 80027b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80027ba:	4641      	mov	r1, r8
 80027bc:	00ca      	lsls	r2, r1, #3
 80027be:	4610      	mov	r0, r2
 80027c0:	4619      	mov	r1, r3
 80027c2:	4603      	mov	r3, r0
 80027c4:	4622      	mov	r2, r4
 80027c6:	189b      	adds	r3, r3, r2
 80027c8:	633b      	str	r3, [r7, #48]	@ 0x30
 80027ca:	462b      	mov	r3, r5
 80027cc:	460a      	mov	r2, r1
 80027ce:	eb42 0303 	adc.w	r3, r2, r3
 80027d2:	637b      	str	r3, [r7, #52]	@ 0x34
 80027d4:	f04f 0200 	mov.w	r2, #0
 80027d8:	f04f 0300 	mov.w	r3, #0
 80027dc:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80027e0:	4629      	mov	r1, r5
 80027e2:	024b      	lsls	r3, r1, #9
 80027e4:	4621      	mov	r1, r4
 80027e6:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80027ea:	4621      	mov	r1, r4
 80027ec:	024a      	lsls	r2, r1, #9
 80027ee:	4610      	mov	r0, r2
 80027f0:	4619      	mov	r1, r3
 80027f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80027f6:	2200      	movs	r2, #0
 80027f8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80027fc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002800:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	@ 0x88
 8002804:	f7fd fd54 	bl	80002b0 <__aeabi_uldivmod>
 8002808:	4602      	mov	r2, r0
 800280a:	460b      	mov	r3, r1
 800280c:	4613      	mov	r3, r2
 800280e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002812:	e067      	b.n	80028e4 <HAL_RCC_GetSysClockFreq+0x24c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002814:	4b75      	ldr	r3, [pc, #468]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	099b      	lsrs	r3, r3, #6
 800281a:	2200      	movs	r2, #0
 800281c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002820:	f8c7 2084 	str.w	r2, [r7, #132]	@ 0x84
 8002824:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8002828:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800282c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800282e:	2300      	movs	r3, #0
 8002830:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8002832:	e9d7 451e 	ldrd	r4, r5, [r7, #120]	@ 0x78
 8002836:	4622      	mov	r2, r4
 8002838:	462b      	mov	r3, r5
 800283a:	f04f 0000 	mov.w	r0, #0
 800283e:	f04f 0100 	mov.w	r1, #0
 8002842:	0159      	lsls	r1, r3, #5
 8002844:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002848:	0150      	lsls	r0, r2, #5
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4621      	mov	r1, r4
 8002850:	1a51      	subs	r1, r2, r1
 8002852:	62b9      	str	r1, [r7, #40]	@ 0x28
 8002854:	4629      	mov	r1, r5
 8002856:	eb63 0301 	sbc.w	r3, r3, r1
 800285a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800285c:	f04f 0200 	mov.w	r2, #0
 8002860:	f04f 0300 	mov.w	r3, #0
 8002864:	e9d7 890a 	ldrd	r8, r9, [r7, #40]	@ 0x28
 8002868:	4649      	mov	r1, r9
 800286a:	018b      	lsls	r3, r1, #6
 800286c:	4641      	mov	r1, r8
 800286e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002872:	4641      	mov	r1, r8
 8002874:	018a      	lsls	r2, r1, #6
 8002876:	4641      	mov	r1, r8
 8002878:	ebb2 0a01 	subs.w	sl, r2, r1
 800287c:	4649      	mov	r1, r9
 800287e:	eb63 0b01 	sbc.w	fp, r3, r1
 8002882:	f04f 0200 	mov.w	r2, #0
 8002886:	f04f 0300 	mov.w	r3, #0
 800288a:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800288e:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8002892:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8002896:	4692      	mov	sl, r2
 8002898:	469b      	mov	fp, r3
 800289a:	4623      	mov	r3, r4
 800289c:	eb1a 0303 	adds.w	r3, sl, r3
 80028a0:	623b      	str	r3, [r7, #32]
 80028a2:	462b      	mov	r3, r5
 80028a4:	eb4b 0303 	adc.w	r3, fp, r3
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028aa:	f04f 0200 	mov.w	r2, #0
 80028ae:	f04f 0300 	mov.w	r3, #0
 80028b2:	e9d7 4508 	ldrd	r4, r5, [r7, #32]
 80028b6:	4629      	mov	r1, r5
 80028b8:	028b      	lsls	r3, r1, #10
 80028ba:	4621      	mov	r1, r4
 80028bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80028c0:	4621      	mov	r1, r4
 80028c2:	028a      	lsls	r2, r1, #10
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80028cc:	2200      	movs	r2, #0
 80028ce:	673b      	str	r3, [r7, #112]	@ 0x70
 80028d0:	677a      	str	r2, [r7, #116]	@ 0x74
 80028d2:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	@ 0x70
 80028d6:	f7fd fceb 	bl	80002b0 <__aeabi_uldivmod>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4613      	mov	r3, r2
 80028e0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80028e4:	4b41      	ldr	r3, [pc, #260]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x354>)
 80028e6:	685b      	ldr	r3, [r3, #4]
 80028e8:	0c1b      	lsrs	r3, r3, #16
 80028ea:	f003 0303 	and.w	r3, r3, #3
 80028ee:	3301      	adds	r3, #1
 80028f0:	005b      	lsls	r3, r3, #1
 80028f2:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

      sysclockfreq = pllvco / pllp;
 80028f6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80028fa:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 80028fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002902:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002906:	e0eb      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002908:	4b38      	ldr	r3, [pc, #224]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x354>)
 800290a:	685b      	ldr	r3, [r3, #4]
 800290c:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002910:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002914:	4b35      	ldr	r3, [pc, #212]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002916:	685b      	ldr	r3, [r3, #4]
 8002918:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800291c:	2b00      	cmp	r3, #0
 800291e:	d06b      	beq.n	80029f8 <HAL_RCC_GetSysClockFreq+0x360>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002920:	4b32      	ldr	r3, [pc, #200]	@ (80029ec <HAL_RCC_GetSysClockFreq+0x354>)
 8002922:	685b      	ldr	r3, [r3, #4]
 8002924:	099b      	lsrs	r3, r3, #6
 8002926:	2200      	movs	r2, #0
 8002928:	66bb      	str	r3, [r7, #104]	@ 0x68
 800292a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800292c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800292e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002932:	663b      	str	r3, [r7, #96]	@ 0x60
 8002934:	2300      	movs	r3, #0
 8002936:	667b      	str	r3, [r7, #100]	@ 0x64
 8002938:	e9d7 4518 	ldrd	r4, r5, [r7, #96]	@ 0x60
 800293c:	4622      	mov	r2, r4
 800293e:	462b      	mov	r3, r5
 8002940:	f04f 0000 	mov.w	r0, #0
 8002944:	f04f 0100 	mov.w	r1, #0
 8002948:	0159      	lsls	r1, r3, #5
 800294a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800294e:	0150      	lsls	r0, r2, #5
 8002950:	4602      	mov	r2, r0
 8002952:	460b      	mov	r3, r1
 8002954:	4621      	mov	r1, r4
 8002956:	1a51      	subs	r1, r2, r1
 8002958:	61b9      	str	r1, [r7, #24]
 800295a:	4629      	mov	r1, r5
 800295c:	eb63 0301 	sbc.w	r3, r3, r1
 8002960:	61fb      	str	r3, [r7, #28]
 8002962:	f04f 0200 	mov.w	r2, #0
 8002966:	f04f 0300 	mov.w	r3, #0
 800296a:	e9d7 ab06 	ldrd	sl, fp, [r7, #24]
 800296e:	4659      	mov	r1, fp
 8002970:	018b      	lsls	r3, r1, #6
 8002972:	4651      	mov	r1, sl
 8002974:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002978:	4651      	mov	r1, sl
 800297a:	018a      	lsls	r2, r1, #6
 800297c:	4651      	mov	r1, sl
 800297e:	ebb2 0801 	subs.w	r8, r2, r1
 8002982:	4659      	mov	r1, fp
 8002984:	eb63 0901 	sbc.w	r9, r3, r1
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	f04f 0300 	mov.w	r3, #0
 8002990:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002994:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002998:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800299c:	4690      	mov	r8, r2
 800299e:	4699      	mov	r9, r3
 80029a0:	4623      	mov	r3, r4
 80029a2:	eb18 0303 	adds.w	r3, r8, r3
 80029a6:	613b      	str	r3, [r7, #16]
 80029a8:	462b      	mov	r3, r5
 80029aa:	eb49 0303 	adc.w	r3, r9, r3
 80029ae:	617b      	str	r3, [r7, #20]
 80029b0:	f04f 0200 	mov.w	r2, #0
 80029b4:	f04f 0300 	mov.w	r3, #0
 80029b8:	e9d7 4504 	ldrd	r4, r5, [r7, #16]
 80029bc:	4629      	mov	r1, r5
 80029be:	024b      	lsls	r3, r1, #9
 80029c0:	4621      	mov	r1, r4
 80029c2:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80029c6:	4621      	mov	r1, r4
 80029c8:	024a      	lsls	r2, r1, #9
 80029ca:	4610      	mov	r0, r2
 80029cc:	4619      	mov	r1, r3
 80029ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80029d2:	2200      	movs	r2, #0
 80029d4:	65bb      	str	r3, [r7, #88]	@ 0x58
 80029d6:	65fa      	str	r2, [r7, #92]	@ 0x5c
 80029d8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80029dc:	f7fd fc68 	bl	80002b0 <__aeabi_uldivmod>
 80029e0:	4602      	mov	r2, r0
 80029e2:	460b      	mov	r3, r1
 80029e4:	4613      	mov	r3, r2
 80029e6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80029ea:	e065      	b.n	8002ab8 <HAL_RCC_GetSysClockFreq+0x420>
 80029ec:	40023800 	.word	0x40023800
 80029f0:	00f42400 	.word	0x00f42400
 80029f4:	007a1200 	.word	0x007a1200
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029f8:	4b3d      	ldr	r3, [pc, #244]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x458>)
 80029fa:	685b      	ldr	r3, [r3, #4]
 80029fc:	099b      	lsrs	r3, r3, #6
 80029fe:	2200      	movs	r2, #0
 8002a00:	4618      	mov	r0, r3
 8002a02:	4611      	mov	r1, r2
 8002a04:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a08:	653b      	str	r3, [r7, #80]	@ 0x50
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	657b      	str	r3, [r7, #84]	@ 0x54
 8002a0e:	e9d7 8914 	ldrd	r8, r9, [r7, #80]	@ 0x50
 8002a12:	4642      	mov	r2, r8
 8002a14:	464b      	mov	r3, r9
 8002a16:	f04f 0000 	mov.w	r0, #0
 8002a1a:	f04f 0100 	mov.w	r1, #0
 8002a1e:	0159      	lsls	r1, r3, #5
 8002a20:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a24:	0150      	lsls	r0, r2, #5
 8002a26:	4602      	mov	r2, r0
 8002a28:	460b      	mov	r3, r1
 8002a2a:	4641      	mov	r1, r8
 8002a2c:	1a51      	subs	r1, r2, r1
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	4649      	mov	r1, r9
 8002a32:	eb63 0301 	sbc.w	r3, r3, r1
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	f04f 0200 	mov.w	r2, #0
 8002a3c:	f04f 0300 	mov.w	r3, #0
 8002a40:	e9d7 ab02 	ldrd	sl, fp, [r7, #8]
 8002a44:	4659      	mov	r1, fp
 8002a46:	018b      	lsls	r3, r1, #6
 8002a48:	4651      	mov	r1, sl
 8002a4a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002a4e:	4651      	mov	r1, sl
 8002a50:	018a      	lsls	r2, r1, #6
 8002a52:	4651      	mov	r1, sl
 8002a54:	1a54      	subs	r4, r2, r1
 8002a56:	4659      	mov	r1, fp
 8002a58:	eb63 0501 	sbc.w	r5, r3, r1
 8002a5c:	f04f 0200 	mov.w	r2, #0
 8002a60:	f04f 0300 	mov.w	r3, #0
 8002a64:	00eb      	lsls	r3, r5, #3
 8002a66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a6a:	00e2      	lsls	r2, r4, #3
 8002a6c:	4614      	mov	r4, r2
 8002a6e:	461d      	mov	r5, r3
 8002a70:	4643      	mov	r3, r8
 8002a72:	18e3      	adds	r3, r4, r3
 8002a74:	603b      	str	r3, [r7, #0]
 8002a76:	464b      	mov	r3, r9
 8002a78:	eb45 0303 	adc.w	r3, r5, r3
 8002a7c:	607b      	str	r3, [r7, #4]
 8002a7e:	f04f 0200 	mov.w	r2, #0
 8002a82:	f04f 0300 	mov.w	r3, #0
 8002a86:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002a8a:	4629      	mov	r1, r5
 8002a8c:	028b      	lsls	r3, r1, #10
 8002a8e:	4621      	mov	r1, r4
 8002a90:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002a94:	4621      	mov	r1, r4
 8002a96:	028a      	lsls	r2, r1, #10
 8002a98:	4610      	mov	r0, r2
 8002a9a:	4619      	mov	r1, r3
 8002a9c:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002aa4:	64fa      	str	r2, [r7, #76]	@ 0x4c
 8002aa6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8002aaa:	f7fd fc01 	bl	80002b0 <__aeabi_uldivmod>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4613      	mov	r3, r2
 8002ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8002ab8:	4b0d      	ldr	r3, [pc, #52]	@ (8002af0 <HAL_RCC_GetSysClockFreq+0x458>)
 8002aba:	685b      	ldr	r3, [r3, #4]
 8002abc:	0f1b      	lsrs	r3, r3, #28
 8002abe:	f003 0307 	and.w	r3, r3, #7
 8002ac2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4

      sysclockfreq = pllvco / pllr;
 8002ac6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002aca:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ace:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ad2:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ad6:	e003      	b.n	8002ae0 <HAL_RCC_GetSysClockFreq+0x448>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ad8:	4b06      	ldr	r3, [pc, #24]	@ (8002af4 <HAL_RCC_GetSysClockFreq+0x45c>)
 8002ada:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
      break;
 8002ade:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ae0:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	37b8      	adds	r7, #184	@ 0xb8
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002aee:	bf00      	nop
 8002af0:	40023800 	.word	0x40023800
 8002af4:	00f42400 	.word	0x00f42400

08002af8 <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002af8:	b580      	push	{r7, lr}
 8002afa:	b086      	sub	sp, #24
 8002afc:	af00      	add	r7, sp, #0
 8002afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d101      	bne.n	8002b0a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002b06:	2301      	movs	r3, #1
 8002b08:	e28d      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f003 0301 	and.w	r3, r3, #1
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	f000 8083 	beq.w	8002c1e <HAL_RCC_OscConfig+0x126>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8002b18:	4b94      	ldr	r3, [pc, #592]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002b1a:	689b      	ldr	r3, [r3, #8]
 8002b1c:	f003 030c 	and.w	r3, r3, #12
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d019      	beq.n	8002b58 <HAL_RCC_OscConfig+0x60>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b24:	4b91      	ldr	r3, [pc, #580]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002b26:	689b      	ldr	r3, [r3, #8]
 8002b28:	f003 030c 	and.w	r3, r3, #12
        || \
 8002b2c:	2b08      	cmp	r3, #8
 8002b2e:	d106      	bne.n	8002b3e <HAL_RCC_OscConfig+0x46>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b30:	4b8e      	ldr	r3, [pc, #568]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b38:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b3c:	d00c      	beq.n	8002b58 <HAL_RCC_OscConfig+0x60>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b3e:	4b8b      	ldr	r3, [pc, #556]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) || \
 8002b46:	2b0c      	cmp	r3, #12
 8002b48:	d112      	bne.n	8002b70 <HAL_RCC_OscConfig+0x78>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b4a:	4b88      	ldr	r3, [pc, #544]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002b4c:	685b      	ldr	r3, [r3, #4]
 8002b4e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b52:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b56:	d10b      	bne.n	8002b70 <HAL_RCC_OscConfig+0x78>
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b58:	4b84      	ldr	r3, [pc, #528]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b60:	2b00      	cmp	r3, #0
 8002b62:	d05b      	beq.n	8002c1c <HAL_RCC_OscConfig+0x124>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	685b      	ldr	r3, [r3, #4]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d157      	bne.n	8002c1c <HAL_RCC_OscConfig+0x124>
      {
        return HAL_ERROR;
 8002b6c:	2301      	movs	r3, #1
 8002b6e:	e25a      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	685b      	ldr	r3, [r3, #4]
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b78:	d106      	bne.n	8002b88 <HAL_RCC_OscConfig+0x90>
 8002b7a:	4b7c      	ldr	r3, [pc, #496]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	4a7b      	ldr	r2, [pc, #492]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002b80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b84:	6013      	str	r3, [r2, #0]
 8002b86:	e01d      	b.n	8002bc4 <HAL_RCC_OscConfig+0xcc>
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	685b      	ldr	r3, [r3, #4]
 8002b8c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b90:	d10c      	bne.n	8002bac <HAL_RCC_OscConfig+0xb4>
 8002b92:	4b76      	ldr	r3, [pc, #472]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4a75      	ldr	r2, [pc, #468]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002b98:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b9c:	6013      	str	r3, [r2, #0]
 8002b9e:	4b73      	ldr	r3, [pc, #460]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a72      	ldr	r2, [pc, #456]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002ba4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e00b      	b.n	8002bc4 <HAL_RCC_OscConfig+0xcc>
 8002bac:	4b6f      	ldr	r3, [pc, #444]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	4a6e      	ldr	r2, [pc, #440]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002bb2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002bb6:	6013      	str	r3, [r2, #0]
 8002bb8:	4b6c      	ldr	r3, [pc, #432]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	4a6b      	ldr	r2, [pc, #428]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002bbe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002bc2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	685b      	ldr	r3, [r3, #4]
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d013      	beq.n	8002bf4 <HAL_RCC_OscConfig+0xfc>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bcc:	f7fe fdf4 	bl	80017b8 <HAL_GetTick>
 8002bd0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bd2:	e008      	b.n	8002be6 <HAL_RCC_OscConfig+0xee>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd4:	f7fe fdf0 	bl	80017b8 <HAL_GetTick>
 8002bd8:	4602      	mov	r2, r0
 8002bda:	693b      	ldr	r3, [r7, #16]
 8002bdc:	1ad3      	subs	r3, r2, r3
 8002bde:	2b64      	cmp	r3, #100	@ 0x64
 8002be0:	d901      	bls.n	8002be6 <HAL_RCC_OscConfig+0xee>
          {
            return HAL_TIMEOUT;
 8002be2:	2303      	movs	r3, #3
 8002be4:	e21f      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002be6:	4b61      	ldr	r3, [pc, #388]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d0f0      	beq.n	8002bd4 <HAL_RCC_OscConfig+0xdc>
 8002bf2:	e014      	b.n	8002c1e <HAL_RCC_OscConfig+0x126>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002bf4:	f7fe fde0 	bl	80017b8 <HAL_GetTick>
 8002bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bfa:	e008      	b.n	8002c0e <HAL_RCC_OscConfig+0x116>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bfc:	f7fe fddc 	bl	80017b8 <HAL_GetTick>
 8002c00:	4602      	mov	r2, r0
 8002c02:	693b      	ldr	r3, [r7, #16]
 8002c04:	1ad3      	subs	r3, r2, r3
 8002c06:	2b64      	cmp	r3, #100	@ 0x64
 8002c08:	d901      	bls.n	8002c0e <HAL_RCC_OscConfig+0x116>
          {
            return HAL_TIMEOUT;
 8002c0a:	2303      	movs	r3, #3
 8002c0c:	e20b      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002c0e:	4b57      	ldr	r3, [pc, #348]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d1f0      	bne.n	8002bfc <HAL_RCC_OscConfig+0x104>
 8002c1a:	e000      	b.n	8002c1e <HAL_RCC_OscConfig+0x126>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002c1c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	f003 0302 	and.w	r3, r3, #2
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d06f      	beq.n	8002d0a <HAL_RCC_OscConfig+0x212>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8002c2a:	4b50      	ldr	r3, [pc, #320]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 030c 	and.w	r3, r3, #12
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d017      	beq.n	8002c66 <HAL_RCC_OscConfig+0x16e>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c36:	4b4d      	ldr	r3, [pc, #308]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	f003 030c 	and.w	r3, r3, #12
        || \
 8002c3e:	2b08      	cmp	r3, #8
 8002c40:	d105      	bne.n	8002c4e <HAL_RCC_OscConfig+0x156>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c42:	4b4a      	ldr	r3, [pc, #296]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002c44:	685b      	ldr	r3, [r3, #4]
 8002c46:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c4a:	2b00      	cmp	r3, #0
 8002c4c:	d00b      	beq.n	8002c66 <HAL_RCC_OscConfig+0x16e>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c4e:	4b47      	ldr	r3, [pc, #284]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002c50:	689b      	ldr	r3, [r3, #8]
 8002c52:	f003 030c 	and.w	r3, r3, #12
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) || \
 8002c56:	2b0c      	cmp	r3, #12
 8002c58:	d11c      	bne.n	8002c94 <HAL_RCC_OscConfig+0x19c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c5a:	4b44      	ldr	r3, [pc, #272]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002c5c:	685b      	ldr	r3, [r3, #4]
 8002c5e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c62:	2b00      	cmp	r3, #0
 8002c64:	d116      	bne.n	8002c94 <HAL_RCC_OscConfig+0x19c>
        || \
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c66:	4b41      	ldr	r3, [pc, #260]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f003 0302 	and.w	r3, r3, #2
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d005      	beq.n	8002c7e <HAL_RCC_OscConfig+0x186>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	68db      	ldr	r3, [r3, #12]
 8002c76:	2b01      	cmp	r3, #1
 8002c78:	d001      	beq.n	8002c7e <HAL_RCC_OscConfig+0x186>
      {
        return HAL_ERROR;
 8002c7a:	2301      	movs	r3, #1
 8002c7c:	e1d3      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c7e:	4b3b      	ldr	r3, [pc, #236]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	691b      	ldr	r3, [r3, #16]
 8002c8a:	00db      	lsls	r3, r3, #3
 8002c8c:	4937      	ldr	r1, [pc, #220]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002c8e:	4313      	orrs	r3, r2
 8002c90:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c92:	e03a      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	68db      	ldr	r3, [r3, #12]
 8002c98:	2b00      	cmp	r3, #0
 8002c9a:	d020      	beq.n	8002cde <HAL_RCC_OscConfig+0x1e6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c9c:	4b34      	ldr	r3, [pc, #208]	@ (8002d70 <HAL_RCC_OscConfig+0x278>)
 8002c9e:	2201      	movs	r2, #1
 8002ca0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca2:	f7fe fd89 	bl	80017b8 <HAL_GetTick>
 8002ca6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ca8:	e008      	b.n	8002cbc <HAL_RCC_OscConfig+0x1c4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002caa:	f7fe fd85 	bl	80017b8 <HAL_GetTick>
 8002cae:	4602      	mov	r2, r0
 8002cb0:	693b      	ldr	r3, [r7, #16]
 8002cb2:	1ad3      	subs	r3, r2, r3
 8002cb4:	2b02      	cmp	r3, #2
 8002cb6:	d901      	bls.n	8002cbc <HAL_RCC_OscConfig+0x1c4>
          {
            return HAL_TIMEOUT;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	e1b4      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002cbc:	4b2b      	ldr	r3, [pc, #172]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f003 0302 	and.w	r3, r3, #2
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d0f0      	beq.n	8002caa <HAL_RCC_OscConfig+0x1b2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002cc8:	4b28      	ldr	r3, [pc, #160]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	691b      	ldr	r3, [r3, #16]
 8002cd4:	00db      	lsls	r3, r3, #3
 8002cd6:	4925      	ldr	r1, [pc, #148]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002cd8:	4313      	orrs	r3, r2
 8002cda:	600b      	str	r3, [r1, #0]
 8002cdc:	e015      	b.n	8002d0a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002cde:	4b24      	ldr	r3, [pc, #144]	@ (8002d70 <HAL_RCC_OscConfig+0x278>)
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ce4:	f7fe fd68 	bl	80017b8 <HAL_GetTick>
 8002ce8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cea:	e008      	b.n	8002cfe <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002cec:	f7fe fd64 	bl	80017b8 <HAL_GetTick>
 8002cf0:	4602      	mov	r2, r0
 8002cf2:	693b      	ldr	r3, [r7, #16]
 8002cf4:	1ad3      	subs	r3, r2, r3
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d901      	bls.n	8002cfe <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002cfa:	2303      	movs	r3, #3
 8002cfc:	e193      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	f003 0302 	and.w	r3, r3, #2
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d1f0      	bne.n	8002cec <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	f003 0308 	and.w	r3, r3, #8
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	d036      	beq.n	8002d84 <HAL_RCC_OscConfig+0x28c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	695b      	ldr	r3, [r3, #20]
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d016      	beq.n	8002d4c <HAL_RCC_OscConfig+0x254>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002d1e:	4b15      	ldr	r3, [pc, #84]	@ (8002d74 <HAL_RCC_OscConfig+0x27c>)
 8002d20:	2201      	movs	r2, #1
 8002d22:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d24:	f7fe fd48 	bl	80017b8 <HAL_GetTick>
 8002d28:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d2a:	e008      	b.n	8002d3e <HAL_RCC_OscConfig+0x246>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d2c:	f7fe fd44 	bl	80017b8 <HAL_GetTick>
 8002d30:	4602      	mov	r2, r0
 8002d32:	693b      	ldr	r3, [r7, #16]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	2b02      	cmp	r3, #2
 8002d38:	d901      	bls.n	8002d3e <HAL_RCC_OscConfig+0x246>
        {
          return HAL_TIMEOUT;
 8002d3a:	2303      	movs	r3, #3
 8002d3c:	e173      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002d3e:	4b0b      	ldr	r3, [pc, #44]	@ (8002d6c <HAL_RCC_OscConfig+0x274>)
 8002d40:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d42:	f003 0302 	and.w	r3, r3, #2
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d0f0      	beq.n	8002d2c <HAL_RCC_OscConfig+0x234>
 8002d4a:	e01b      	b.n	8002d84 <HAL_RCC_OscConfig+0x28c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d4c:	4b09      	ldr	r3, [pc, #36]	@ (8002d74 <HAL_RCC_OscConfig+0x27c>)
 8002d4e:	2200      	movs	r2, #0
 8002d50:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002d52:	f7fe fd31 	bl	80017b8 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d58:	e00e      	b.n	8002d78 <HAL_RCC_OscConfig+0x280>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d5a:	f7fe fd2d 	bl	80017b8 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d907      	bls.n	8002d78 <HAL_RCC_OscConfig+0x280>
        {
          return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e15c      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
 8002d6c:	40023800 	.word	0x40023800
 8002d70:	42470000 	.word	0x42470000
 8002d74:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d78:	4b8a      	ldr	r3, [pc, #552]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002d7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d7c:	f003 0302 	and.w	r3, r3, #2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d1ea      	bne.n	8002d5a <HAL_RCC_OscConfig+0x262>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	f003 0304 	and.w	r3, r3, #4
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	f000 8097 	beq.w	8002ec0 <HAL_RCC_OscConfig+0x3c8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d92:	2300      	movs	r3, #0
 8002d94:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d96:	4b83      	ldr	r3, [pc, #524]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002d98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d9a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d10f      	bne.n	8002dc2 <HAL_RCC_OscConfig+0x2ca>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002da2:	2300      	movs	r3, #0
 8002da4:	60bb      	str	r3, [r7, #8]
 8002da6:	4b7f      	ldr	r3, [pc, #508]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002da8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002daa:	4a7e      	ldr	r2, [pc, #504]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002dac:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002db0:	6413      	str	r3, [r2, #64]	@ 0x40
 8002db2:	4b7c      	ldr	r3, [pc, #496]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002db4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002db6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002dba:	60bb      	str	r3, [r7, #8]
 8002dbc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002dbe:	2301      	movs	r3, #1
 8002dc0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002dc2:	4b79      	ldr	r3, [pc, #484]	@ (8002fa8 <HAL_RCC_OscConfig+0x4b0>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d118      	bne.n	8002e00 <HAL_RCC_OscConfig+0x308>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002dce:	4b76      	ldr	r3, [pc, #472]	@ (8002fa8 <HAL_RCC_OscConfig+0x4b0>)
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4a75      	ldr	r2, [pc, #468]	@ (8002fa8 <HAL_RCC_OscConfig+0x4b0>)
 8002dd4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002dd8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002dda:	f7fe fced 	bl	80017b8 <HAL_GetTick>
 8002dde:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002de0:	e008      	b.n	8002df4 <HAL_RCC_OscConfig+0x2fc>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002de2:	f7fe fce9 	bl	80017b8 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	693b      	ldr	r3, [r7, #16]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	2b02      	cmp	r3, #2
 8002dee:	d901      	bls.n	8002df4 <HAL_RCC_OscConfig+0x2fc>
        {
          return HAL_TIMEOUT;
 8002df0:	2303      	movs	r3, #3
 8002df2:	e118      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002df4:	4b6c      	ldr	r3, [pc, #432]	@ (8002fa8 <HAL_RCC_OscConfig+0x4b0>)
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d0f0      	beq.n	8002de2 <HAL_RCC_OscConfig+0x2ea>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	689b      	ldr	r3, [r3, #8]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d106      	bne.n	8002e16 <HAL_RCC_OscConfig+0x31e>
 8002e08:	4b66      	ldr	r3, [pc, #408]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002e0a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e0c:	4a65      	ldr	r2, [pc, #404]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002e0e:	f043 0301 	orr.w	r3, r3, #1
 8002e12:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e14:	e01c      	b.n	8002e50 <HAL_RCC_OscConfig+0x358>
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	689b      	ldr	r3, [r3, #8]
 8002e1a:	2b05      	cmp	r3, #5
 8002e1c:	d10c      	bne.n	8002e38 <HAL_RCC_OscConfig+0x340>
 8002e1e:	4b61      	ldr	r3, [pc, #388]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002e20:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e22:	4a60      	ldr	r2, [pc, #384]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002e24:	f043 0304 	orr.w	r3, r3, #4
 8002e28:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e2a:	4b5e      	ldr	r3, [pc, #376]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002e2c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e2e:	4a5d      	ldr	r2, [pc, #372]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002e30:	f043 0301 	orr.w	r3, r3, #1
 8002e34:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e36:	e00b      	b.n	8002e50 <HAL_RCC_OscConfig+0x358>
 8002e38:	4b5a      	ldr	r3, [pc, #360]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002e3a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e3c:	4a59      	ldr	r2, [pc, #356]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002e3e:	f023 0301 	bic.w	r3, r3, #1
 8002e42:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e44:	4b57      	ldr	r3, [pc, #348]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002e46:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e48:	4a56      	ldr	r2, [pc, #344]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002e4a:	f023 0304 	bic.w	r3, r3, #4
 8002e4e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689b      	ldr	r3, [r3, #8]
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d015      	beq.n	8002e84 <HAL_RCC_OscConfig+0x38c>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e58:	f7fe fcae 	bl	80017b8 <HAL_GetTick>
 8002e5c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e5e:	e00a      	b.n	8002e76 <HAL_RCC_OscConfig+0x37e>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e60:	f7fe fcaa 	bl	80017b8 <HAL_GetTick>
 8002e64:	4602      	mov	r2, r0
 8002e66:	693b      	ldr	r3, [r7, #16]
 8002e68:	1ad3      	subs	r3, r2, r3
 8002e6a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d901      	bls.n	8002e76 <HAL_RCC_OscConfig+0x37e>
        {
          return HAL_TIMEOUT;
 8002e72:	2303      	movs	r3, #3
 8002e74:	e0d7      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e76:	4b4b      	ldr	r3, [pc, #300]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002e78:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e7a:	f003 0302 	and.w	r3, r3, #2
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0ee      	beq.n	8002e60 <HAL_RCC_OscConfig+0x368>
 8002e82:	e014      	b.n	8002eae <HAL_RCC_OscConfig+0x3b6>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e84:	f7fe fc98 	bl	80017b8 <HAL_GetTick>
 8002e88:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e8a:	e00a      	b.n	8002ea2 <HAL_RCC_OscConfig+0x3aa>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e8c:	f7fe fc94 	bl	80017b8 <HAL_GetTick>
 8002e90:	4602      	mov	r2, r0
 8002e92:	693b      	ldr	r3, [r7, #16]
 8002e94:	1ad3      	subs	r3, r2, r3
 8002e96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e9a:	4293      	cmp	r3, r2
 8002e9c:	d901      	bls.n	8002ea2 <HAL_RCC_OscConfig+0x3aa>
        {
          return HAL_TIMEOUT;
 8002e9e:	2303      	movs	r3, #3
 8002ea0:	e0c1      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ea2:	4b40      	ldr	r3, [pc, #256]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002ea4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002ea6:	f003 0302 	and.w	r3, r3, #2
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	d1ee      	bne.n	8002e8c <HAL_RCC_OscConfig+0x394>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002eae:	7dfb      	ldrb	r3, [r7, #23]
 8002eb0:	2b01      	cmp	r3, #1
 8002eb2:	d105      	bne.n	8002ec0 <HAL_RCC_OscConfig+0x3c8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002eb4:	4b3b      	ldr	r3, [pc, #236]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002eb6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002eb8:	4a3a      	ldr	r2, [pc, #232]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002eba:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002ebe:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	699b      	ldr	r3, [r3, #24]
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	f000 80ad 	beq.w	8003024 <HAL_RCC_OscConfig+0x52c>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002eca:	4b36      	ldr	r3, [pc, #216]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002ecc:	689b      	ldr	r3, [r3, #8]
 8002ece:	f003 030c 	and.w	r3, r3, #12
 8002ed2:	2b08      	cmp	r3, #8
 8002ed4:	d060      	beq.n	8002f98 <HAL_RCC_OscConfig+0x4a0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	699b      	ldr	r3, [r3, #24]
 8002eda:	2b02      	cmp	r3, #2
 8002edc:	d145      	bne.n	8002f6a <HAL_RCC_OscConfig+0x472>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002ede:	4b33      	ldr	r3, [pc, #204]	@ (8002fac <HAL_RCC_OscConfig+0x4b4>)
 8002ee0:	2200      	movs	r2, #0
 8002ee2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ee4:	f7fe fc68 	bl	80017b8 <HAL_GetTick>
 8002ee8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eea:	e008      	b.n	8002efe <HAL_RCC_OscConfig+0x406>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002eec:	f7fe fc64 	bl	80017b8 <HAL_GetTick>
 8002ef0:	4602      	mov	r2, r0
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	1ad3      	subs	r3, r2, r3
 8002ef6:	2b02      	cmp	r3, #2
 8002ef8:	d901      	bls.n	8002efe <HAL_RCC_OscConfig+0x406>
          {
            return HAL_TIMEOUT;
 8002efa:	2303      	movs	r3, #3
 8002efc:	e093      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002efe:	4b29      	ldr	r3, [pc, #164]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d1f0      	bne.n	8002eec <HAL_RCC_OscConfig+0x3f4>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	69da      	ldr	r2, [r3, #28]
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	6a1b      	ldr	r3, [r3, #32]
 8002f12:	431a      	orrs	r2, r3
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002f18:	019b      	lsls	r3, r3, #6
 8002f1a:	431a      	orrs	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002f20:	085b      	lsrs	r3, r3, #1
 8002f22:	3b01      	subs	r3, #1
 8002f24:	041b      	lsls	r3, r3, #16
 8002f26:	431a      	orrs	r2, r3
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f2c:	061b      	lsls	r3, r3, #24
 8002f2e:	431a      	orrs	r2, r3
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f34:	071b      	lsls	r3, r3, #28
 8002f36:	491b      	ldr	r1, [pc, #108]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	604b      	str	r3, [r1, #4]
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)                       | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)        | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)                       | \
                                 (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002f3c:	4b1b      	ldr	r3, [pc, #108]	@ (8002fac <HAL_RCC_OscConfig+0x4b4>)
 8002f3e:	2201      	movs	r2, #1
 8002f40:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f42:	f7fe fc39 	bl	80017b8 <HAL_GetTick>
 8002f46:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f48:	e008      	b.n	8002f5c <HAL_RCC_OscConfig+0x464>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f4a:	f7fe fc35 	bl	80017b8 <HAL_GetTick>
 8002f4e:	4602      	mov	r2, r0
 8002f50:	693b      	ldr	r3, [r7, #16]
 8002f52:	1ad3      	subs	r3, r2, r3
 8002f54:	2b02      	cmp	r3, #2
 8002f56:	d901      	bls.n	8002f5c <HAL_RCC_OscConfig+0x464>
          {
            return HAL_TIMEOUT;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	e064      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f5c:	4b11      	ldr	r3, [pc, #68]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d0f0      	beq.n	8002f4a <HAL_RCC_OscConfig+0x452>
 8002f68:	e05c      	b.n	8003024 <HAL_RCC_OscConfig+0x52c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f6a:	4b10      	ldr	r3, [pc, #64]	@ (8002fac <HAL_RCC_OscConfig+0x4b4>)
 8002f6c:	2200      	movs	r2, #0
 8002f6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f70:	f7fe fc22 	bl	80017b8 <HAL_GetTick>
 8002f74:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f76:	e008      	b.n	8002f8a <HAL_RCC_OscConfig+0x492>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f78:	f7fe fc1e 	bl	80017b8 <HAL_GetTick>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	693b      	ldr	r3, [r7, #16]
 8002f80:	1ad3      	subs	r3, r2, r3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d901      	bls.n	8002f8a <HAL_RCC_OscConfig+0x492>
          {
            return HAL_TIMEOUT;
 8002f86:	2303      	movs	r3, #3
 8002f88:	e04d      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f8a:	4b06      	ldr	r3, [pc, #24]	@ (8002fa4 <HAL_RCC_OscConfig+0x4ac>)
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d1f0      	bne.n	8002f78 <HAL_RCC_OscConfig+0x480>
 8002f96:	e045      	b.n	8003024 <HAL_RCC_OscConfig+0x52c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	699b      	ldr	r3, [r3, #24]
 8002f9c:	2b01      	cmp	r3, #1
 8002f9e:	d107      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x4b8>
      {
        return HAL_ERROR;
 8002fa0:	2301      	movs	r3, #1
 8002fa2:	e040      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
 8002fa4:	40023800 	.word	0x40023800
 8002fa8:	40007000 	.word	0x40007000
 8002fac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002fb0:	4b1f      	ldr	r3, [pc, #124]	@ (8003030 <HAL_RCC_OscConfig+0x538>)
 8002fb2:	685b      	ldr	r3, [r3, #4]
 8002fb4:	60fb      	str	r3, [r7, #12]
#if defined (RCC_PLLCFGR_PLLR)
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	699b      	ldr	r3, [r3, #24]
 8002fba:	2b01      	cmp	r3, #1
 8002fbc:	d030      	beq.n	8003020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002fc8:	429a      	cmp	r2, r3
 8002fca:	d129      	bne.n	8003020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002fd6:	429a      	cmp	r2, r3
 8002fd8:	d122      	bne.n	8003020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fda:	68fa      	ldr	r2, [r7, #12]
 8002fdc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002fe0:	4013      	ands	r3, r2
 8002fe2:	687a      	ldr	r2, [r7, #4]
 8002fe4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002fe6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d119      	bne.n	8003020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002ff6:	085b      	lsrs	r3, r3, #1
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ffc:	429a      	cmp	r2, r3
 8002ffe:	d10f      	bne.n	8003020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800300a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800300c:	429a      	cmp	r2, r3
 800300e:	d107      	bne.n	8003020 <HAL_RCC_OscConfig+0x528>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	f003 42e0 	and.w	r2, r3, #1879048192	@ 0x70000000
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800301a:	071b      	lsls	r3, r3, #28
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
 800301c:	429a      	cmp	r2, r3
 800301e:	d001      	beq.n	8003024 <HAL_RCC_OscConfig+0x52c>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003020:	2301      	movs	r3, #1
 8003022:	e000      	b.n	8003026 <HAL_RCC_OscConfig+0x52e>
        }
      }
    }
  }
  return HAL_OK;
 8003024:	2300      	movs	r3, #0
}
 8003026:	4618      	mov	r0, r3
 8003028:	3718      	adds	r7, #24
 800302a:	46bd      	mov	sp, r7
 800302c:	bd80      	pop	{r7, pc}
 800302e:	bf00      	nop
 8003030:	40023800 	.word	0x40023800

08003034 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003034:	b580      	push	{r7, lr}
 8003036:	b084      	sub	sp, #16
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;

  /* Check RTC handler validity */
  if (hrtc == NULL)
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2b00      	cmp	r3, #0
 8003040:	d101      	bne.n	8003046 <HAL_RTC_Init+0x12>
  {
    return HAL_ERROR;
 8003042:	2301      	movs	r3, #1
 8003044:	e073      	b.n	800312e <HAL_RTC_Init+0xfa>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	7f5b      	ldrb	r3, [r3, #29]
 800304a:	b2db      	uxtb	r3, r3
 800304c:	2b00      	cmp	r3, #0
 800304e:	d105      	bne.n	800305c <HAL_RTC_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	2200      	movs	r2, #0
 8003054:	771a      	strb	r2, [r3, #28]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f7fe f8dc 	bl	8001214 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	2202      	movs	r2, #2
 8003060:	775a      	strb	r2, [r3, #29]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	68db      	ldr	r3, [r3, #12]
 8003068:	f003 0310 	and.w	r3, r3, #16
 800306c:	2b10      	cmp	r3, #16
 800306e:	d055      	beq.n	800311c <HAL_RTC_Init+0xe8>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	22ca      	movs	r2, #202	@ 0xca
 8003076:	625a      	str	r2, [r3, #36]	@ 0x24
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	2253      	movs	r2, #83	@ 0x53
 800307e:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8003080:	6878      	ldr	r0, [r7, #4]
 8003082:	f000 f92b 	bl	80032dc <RTC_EnterInitMode>
 8003086:	4603      	mov	r3, r0
 8003088:	73fb      	strb	r3, [r7, #15]

    if (status == HAL_OK)
 800308a:	7bfb      	ldrb	r3, [r7, #15]
 800308c:	2b00      	cmp	r3, #0
 800308e:	d12c      	bne.n	80030ea <HAL_RTC_Init+0xb6>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	689b      	ldr	r3, [r3, #8]
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	6812      	ldr	r2, [r2, #0]
 800309a:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 800309e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030a2:	6093      	str	r3, [r2, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	6899      	ldr	r1, [r3, #8]
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	685a      	ldr	r2, [r3, #4]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	691b      	ldr	r3, [r3, #16]
 80030b2:	431a      	orrs	r2, r3
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	695b      	ldr	r3, [r3, #20]
 80030b8:	431a      	orrs	r2, r3
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	430a      	orrs	r2, r1
 80030c0:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	687a      	ldr	r2, [r7, #4]
 80030c8:	68d2      	ldr	r2, [r2, #12]
 80030ca:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6919      	ldr	r1, [r3, #16]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	041a      	lsls	r2, r3, #16
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	430a      	orrs	r2, r1
 80030de:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 f932 	bl	800334a <RTC_ExitInitMode>
 80030e6:	4603      	mov	r3, r0
 80030e8:	73fb      	strb	r3, [r7, #15]
    }

    if (status == HAL_OK)
 80030ea:	7bfb      	ldrb	r3, [r7, #15]
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	d110      	bne.n	8003112 <HAL_RTC_Init+0xde>
    {
      hrtc->Instance->TAFCR &= (uint32_t)~RTC_OUTPUT_TYPE_PUSHPULL;
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f422 2280 	bic.w	r2, r2, #262144	@ 0x40000
 80030fe:	641a      	str	r2, [r3, #64]	@ 0x40
      hrtc->Instance->TAFCR |= (uint32_t)(hrtc->Init.OutPutType);
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	699a      	ldr	r2, [r3, #24]
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	430a      	orrs	r2, r1
 8003110:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	22ff      	movs	r2, #255	@ 0xff
 8003118:	625a      	str	r2, [r3, #36]	@ 0x24
 800311a:	e001      	b.n	8003120 <HAL_RTC_Init+0xec>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 800311c:	2300      	movs	r3, #0
 800311e:	73fb      	strb	r3, [r7, #15]
  }

  if (status == HAL_OK)
 8003120:	7bfb      	ldrb	r3, [r7, #15]
 8003122:	2b00      	cmp	r3, #0
 8003124:	d102      	bne.n	800312c <HAL_RTC_Init+0xf8>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2201      	movs	r2, #1
 800312a:	775a      	strb	r2, [r3, #29]
  }

  return status;
 800312c:	7bfb      	ldrb	r3, [r7, #15]
}
 800312e:	4618      	mov	r0, r3
 8003130:	3710      	adds	r7, #16
 8003132:	46bd      	mov	sp, r7
 8003134:	bd80      	pop	{r7, pc}

08003136 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8003136:	b580      	push	{r7, lr}
 8003138:	b086      	sub	sp, #24
 800313a:	af00      	add	r7, sp, #0
 800313c:	60f8      	str	r0, [r7, #12]
 800313e:	60b9      	str	r1, [r7, #8]
 8003140:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8003142:	2300      	movs	r3, #0
 8003144:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	f3c3 020e 	ubfx	r2, r3, #0, #15
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	f003 337f 	and.w	r3, r3, #2139062143	@ 0x7f7f7f7f
 8003168:	f023 43fe 	bic.w	r3, r3, #2130706432	@ 0x7f000000
 800316c:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 800316e:	697b      	ldr	r3, [r7, #20]
 8003170:	0c1b      	lsrs	r3, r3, #16
 8003172:	b2db      	uxtb	r3, r3
 8003174:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003178:	b2da      	uxtb	r2, r3
 800317a:	68bb      	ldr	r3, [r7, #8]
 800317c:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 800317e:	697b      	ldr	r3, [r7, #20]
 8003180:	0a1b      	lsrs	r3, r3, #8
 8003182:	b2db      	uxtb	r3, r3
 8003184:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003188:	b2da      	uxtb	r2, r3
 800318a:	68bb      	ldr	r3, [r7, #8]
 800318c:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 800318e:	697b      	ldr	r3, [r7, #20]
 8003190:	b2db      	uxtb	r3, r3
 8003192:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8003196:	b2da      	uxtb	r2, r3
 8003198:	68bb      	ldr	r3, [r7, #8]
 800319a:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 800319c:	697b      	ldr	r3, [r7, #20]
 800319e:	0d9b      	lsrs	r3, r3, #22
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	b2da      	uxtb	r2, r3
 80031a8:	68bb      	ldr	r3, [r7, #8]
 80031aa:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d11a      	bne.n	80031e8 <HAL_RTC_GetTime+0xb2>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	4618      	mov	r0, r3
 80031b8:	f000 f8ec 	bl	8003394 <RTC_Bcd2ToByte>
 80031bc:	4603      	mov	r3, r0
 80031be:	461a      	mov	r2, r3
 80031c0:	68bb      	ldr	r3, [r7, #8]
 80031c2:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 80031c4:	68bb      	ldr	r3, [r7, #8]
 80031c6:	785b      	ldrb	r3, [r3, #1]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f000 f8e3 	bl	8003394 <RTC_Bcd2ToByte>
 80031ce:	4603      	mov	r3, r0
 80031d0:	461a      	mov	r2, r3
 80031d2:	68bb      	ldr	r3, [r7, #8]
 80031d4:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 80031d6:	68bb      	ldr	r3, [r7, #8]
 80031d8:	789b      	ldrb	r3, [r3, #2]
 80031da:	4618      	mov	r0, r3
 80031dc:	f000 f8da 	bl	8003394 <RTC_Bcd2ToByte>
 80031e0:	4603      	mov	r3, r0
 80031e2:	461a      	mov	r2, r3
 80031e4:	68bb      	ldr	r3, [r7, #8]
 80031e6:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 80031e8:	2300      	movs	r3, #0
}
 80031ea:	4618      	mov	r0, r3
 80031ec:	3718      	adds	r7, #24
 80031ee:	46bd      	mov	sp, r7
 80031f0:	bd80      	pop	{r7, pc}

080031f2 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80031f2:	b580      	push	{r7, lr}
 80031f4:	b086      	sub	sp, #24
 80031f6:	af00      	add	r7, sp, #0
 80031f8:	60f8      	str	r0, [r7, #12]
 80031fa:	60b9      	str	r1, [r7, #8]
 80031fc:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 80031fe:	2300      	movs	r3, #0
 8003200:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	685b      	ldr	r3, [r3, #4]
 8003208:	f023 437f 	bic.w	r3, r3, #4278190080	@ 0xff000000
 800320c:	f023 03c0 	bic.w	r3, r3, #192	@ 0xc0
 8003210:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8003212:	697b      	ldr	r3, [r7, #20]
 8003214:	0c1b      	lsrs	r3, r3, #16
 8003216:	b2da      	uxtb	r2, r3
 8003218:	68bb      	ldr	r3, [r7, #8]
 800321a:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 800321c:	697b      	ldr	r3, [r7, #20]
 800321e:	0a1b      	lsrs	r3, r3, #8
 8003220:	b2db      	uxtb	r3, r3
 8003222:	f003 031f 	and.w	r3, r3, #31
 8003226:	b2da      	uxtb	r2, r3
 8003228:	68bb      	ldr	r3, [r7, #8]
 800322a:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	b2db      	uxtb	r3, r3
 8003230:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003234:	b2da      	uxtb	r2, r3
 8003236:	68bb      	ldr	r3, [r7, #8]
 8003238:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 800323a:	697b      	ldr	r3, [r7, #20]
 800323c:	0b5b      	lsrs	r3, r3, #13
 800323e:	b2db      	uxtb	r3, r3
 8003240:	f003 0307 	and.w	r3, r3, #7
 8003244:	b2da      	uxtb	r2, r3
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	2b00      	cmp	r3, #0
 800324e:	d11a      	bne.n	8003286 <HAL_RTC_GetDate+0x94>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 8003250:	68bb      	ldr	r3, [r7, #8]
 8003252:	78db      	ldrb	r3, [r3, #3]
 8003254:	4618      	mov	r0, r3
 8003256:	f000 f89d 	bl	8003394 <RTC_Bcd2ToByte>
 800325a:	4603      	mov	r3, r0
 800325c:	461a      	mov	r2, r3
 800325e:	68bb      	ldr	r3, [r7, #8]
 8003260:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 8003262:	68bb      	ldr	r3, [r7, #8]
 8003264:	785b      	ldrb	r3, [r3, #1]
 8003266:	4618      	mov	r0, r3
 8003268:	f000 f894 	bl	8003394 <RTC_Bcd2ToByte>
 800326c:	4603      	mov	r3, r0
 800326e:	461a      	mov	r2, r3
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 8003274:	68bb      	ldr	r3, [r7, #8]
 8003276:	789b      	ldrb	r3, [r3, #2]
 8003278:	4618      	mov	r0, r3
 800327a:	f000 f88b 	bl	8003394 <RTC_Bcd2ToByte>
 800327e:	4603      	mov	r3, r0
 8003280:	461a      	mov	r2, r3
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003286:	2300      	movs	r3, #0
}
 8003288:	4618      	mov	r0, r3
 800328a:	3718      	adds	r7, #24
 800328c:	46bd      	mov	sp, r7
 800328e:	bd80      	pop	{r7, pc}

08003290 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003290:	b580      	push	{r7, lr}
 8003292:	b084      	sub	sp, #16
 8003294:	af00      	add	r7, sp, #0
 8003296:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003298:	2300      	movs	r3, #0
 800329a:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	4a0d      	ldr	r2, [pc, #52]	@ (80032d8 <HAL_RTC_WaitForSynchro+0x48>)
 80032a2:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 80032a4:	f7fe fa88 	bl	80017b8 <HAL_GetTick>
 80032a8:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032aa:	e009      	b.n	80032c0 <HAL_RTC_WaitForSynchro+0x30>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 80032ac:	f7fe fa84 	bl	80017b8 <HAL_GetTick>
 80032b0:	4602      	mov	r2, r0
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	1ad3      	subs	r3, r2, r3
 80032b6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80032ba:	d901      	bls.n	80032c0 <HAL_RTC_WaitForSynchro+0x30>
    {
      return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e007      	b.n	80032d0 <HAL_RTC_WaitForSynchro+0x40>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	68db      	ldr	r3, [r3, #12]
 80032c6:	f003 0320 	and.w	r3, r3, #32
 80032ca:	2b00      	cmp	r3, #0
 80032cc:	d0ee      	beq.n	80032ac <HAL_RTC_WaitForSynchro+0x1c>
    }
  }

  return HAL_OK;
 80032ce:	2300      	movs	r3, #0
}
 80032d0:	4618      	mov	r0, r3
 80032d2:	3710      	adds	r7, #16
 80032d4:	46bd      	mov	sp, r7
 80032d6:	bd80      	pop	{r7, pc}
 80032d8:	00017f5f 	.word	0x00017f5f

080032dc <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 80032dc:	b580      	push	{r7, lr}
 80032de:	b084      	sub	sp, #16
 80032e0:	af00      	add	r7, sp, #0
 80032e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 80032e4:	2300      	movs	r3, #0
 80032e6:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 80032e8:	2300      	movs	r3, #0
 80032ea:	73fb      	strb	r3, [r7, #15]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	68db      	ldr	r3, [r3, #12]
 80032f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d122      	bne.n	8003340 <RTC_EnterInitMode+0x64>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68da      	ldr	r2, [r3, #12]
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8003308:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 800330a:	f7fe fa55 	bl	80017b8 <HAL_GetTick>
 800330e:	60b8      	str	r0, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8003310:	e00c      	b.n	800332c <RTC_EnterInitMode+0x50>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8003312:	f7fe fa51 	bl	80017b8 <HAL_GetTick>
 8003316:	4602      	mov	r2, r0
 8003318:	68bb      	ldr	r3, [r7, #8]
 800331a:	1ad3      	subs	r3, r2, r3
 800331c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8003320:	d904      	bls.n	800332c <RTC_EnterInitMode+0x50>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	2204      	movs	r2, #4
 8003326:	775a      	strb	r2, [r3, #29]
        status = HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	73fb      	strb	r3, [r7, #15]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	68db      	ldr	r3, [r3, #12]
 8003332:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003336:	2b00      	cmp	r3, #0
 8003338:	d102      	bne.n	8003340 <RTC_EnterInitMode+0x64>
 800333a:	7bfb      	ldrb	r3, [r7, #15]
 800333c:	2b01      	cmp	r3, #1
 800333e:	d1e8      	bne.n	8003312 <RTC_EnterInitMode+0x36>
      }
    }
  }

  return status;
 8003340:	7bfb      	ldrb	r3, [r7, #15]
}
 8003342:	4618      	mov	r0, r3
 8003344:	3710      	adds	r7, #16
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 800334a:	b580      	push	{r7, lr}
 800334c:	b084      	sub	sp, #16
 800334e:	af00      	add	r7, sp, #0
 8003350:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003352:	2300      	movs	r3, #0
 8003354:	73fb      	strb	r3, [r7, #15]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	68da      	ldr	r2, [r3, #12]
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003364:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	689b      	ldr	r3, [r3, #8]
 800336c:	f003 0320 	and.w	r3, r3, #32
 8003370:	2b00      	cmp	r3, #0
 8003372:	d10a      	bne.n	800338a <RTC_ExitInitMode+0x40>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8003374:	6878      	ldr	r0, [r7, #4]
 8003376:	f7ff ff8b 	bl	8003290 <HAL_RTC_WaitForSynchro>
 800337a:	4603      	mov	r3, r0
 800337c:	2b00      	cmp	r3, #0
 800337e:	d004      	beq.n	800338a <RTC_ExitInitMode+0x40>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	2204      	movs	r2, #4
 8003384:	775a      	strb	r2, [r3, #29]
      status = HAL_ERROR;
 8003386:	2301      	movs	r3, #1
 8003388:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800338a:	7bfb      	ldrb	r3, [r7, #15]
}
 800338c:	4618      	mov	r0, r3
 800338e:	3710      	adds	r7, #16
 8003390:	46bd      	mov	sp, r7
 8003392:	bd80      	pop	{r7, pc}

08003394 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	4603      	mov	r3, r0
 800339c:	71fb      	strb	r3, [r7, #7]
  uint32_t tens = 0U;
 800339e:	2300      	movs	r3, #0
 80033a0:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 80033a2:	79fb      	ldrb	r3, [r7, #7]
 80033a4:	091b      	lsrs	r3, r3, #4
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	461a      	mov	r2, r3
 80033aa:	4613      	mov	r3, r2
 80033ac:	009b      	lsls	r3, r3, #2
 80033ae:	4413      	add	r3, r2
 80033b0:	005b      	lsls	r3, r3, #1
 80033b2:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	b2da      	uxtb	r2, r3
 80033b8:	79fb      	ldrb	r3, [r7, #7]
 80033ba:	f003 030f 	and.w	r3, r3, #15
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	4413      	add	r3, r2
 80033c2:	b2db      	uxtb	r3, r3
}
 80033c4:	4618      	mov	r0, r3
 80033c6:	3714      	adds	r7, #20
 80033c8:	46bd      	mov	sp, r7
 80033ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ce:	4770      	bx	lr

080033d0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b082      	sub	sp, #8
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d101      	bne.n	80033e2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e07b      	b.n	80034da <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d108      	bne.n	80033fc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	685b      	ldr	r3, [r3, #4]
 80033ee:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80033f2:	d009      	beq.n	8003408 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2200      	movs	r2, #0
 80033f8:	61da      	str	r2, [r3, #28]
 80033fa:	e005      	b.n	8003408 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2200      	movs	r2, #0
 8003400:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	2200      	movs	r2, #0
 8003406:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2200      	movs	r2, #0
 800340c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d106      	bne.n	8003428 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	2200      	movs	r2, #0
 800341e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003422:	6878      	ldr	r0, [r7, #4]
 8003424:	f7fd ff56 	bl	80012d4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	2202      	movs	r2, #2
 800342c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	681a      	ldr	r2, [r3, #0]
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800343e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	689b      	ldr	r3, [r3, #8]
 800344c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003450:	431a      	orrs	r2, r3
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	68db      	ldr	r3, [r3, #12]
 8003456:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800345a:	431a      	orrs	r2, r3
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	f003 0302 	and.w	r3, r3, #2
 8003464:	431a      	orrs	r2, r3
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	695b      	ldr	r3, [r3, #20]
 800346a:	f003 0301 	and.w	r3, r3, #1
 800346e:	431a      	orrs	r2, r3
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	699b      	ldr	r3, [r3, #24]
 8003474:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003478:	431a      	orrs	r2, r3
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	69db      	ldr	r3, [r3, #28]
 800347e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003482:	431a      	orrs	r2, r3
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	6a1b      	ldr	r3, [r3, #32]
 8003488:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800348c:	ea42 0103 	orr.w	r1, r2, r3
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003494:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	430a      	orrs	r2, r1
 800349e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	699b      	ldr	r3, [r3, #24]
 80034a4:	0c1b      	lsrs	r3, r3, #16
 80034a6:	f003 0104 	and.w	r1, r3, #4
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034ae:	f003 0210 	and.w	r2, r3, #16
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	69da      	ldr	r2, [r3, #28]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80034c8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2200      	movs	r2, #0
 80034ce:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	2201      	movs	r2, #1
 80034d4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80034d8:	2300      	movs	r3, #0
}
 80034da:	4618      	mov	r0, r3
 80034dc:	3708      	adds	r7, #8
 80034de:	46bd      	mov	sp, r7
 80034e0:	bd80      	pop	{r7, pc}

080034e2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e2:	b580      	push	{r7, lr}
 80034e4:	b088      	sub	sp, #32
 80034e6:	af00      	add	r7, sp, #0
 80034e8:	60f8      	str	r0, [r7, #12]
 80034ea:	60b9      	str	r1, [r7, #8]
 80034ec:	603b      	str	r3, [r7, #0]
 80034ee:	4613      	mov	r3, r2
 80034f0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80034f2:	f7fe f961 	bl	80017b8 <HAL_GetTick>
 80034f6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80034f8:	88fb      	ldrh	r3, [r7, #6]
 80034fa:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003502:	b2db      	uxtb	r3, r3
 8003504:	2b01      	cmp	r3, #1
 8003506:	d001      	beq.n	800350c <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8003508:	2302      	movs	r3, #2
 800350a:	e12a      	b.n	8003762 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 800350c:	68bb      	ldr	r3, [r7, #8]
 800350e:	2b00      	cmp	r3, #0
 8003510:	d002      	beq.n	8003518 <HAL_SPI_Transmit+0x36>
 8003512:	88fb      	ldrh	r3, [r7, #6]
 8003514:	2b00      	cmp	r3, #0
 8003516:	d101      	bne.n	800351c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8003518:	2301      	movs	r3, #1
 800351a:	e122      	b.n	8003762 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003522:	2b01      	cmp	r3, #1
 8003524:	d101      	bne.n	800352a <HAL_SPI_Transmit+0x48>
 8003526:	2302      	movs	r3, #2
 8003528:	e11b      	b.n	8003762 <HAL_SPI_Transmit+0x280>
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	2203      	movs	r2, #3
 8003536:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	2200      	movs	r2, #0
 800353e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	68ba      	ldr	r2, [r7, #8]
 8003544:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8003546:	68fb      	ldr	r3, [r7, #12]
 8003548:	88fa      	ldrh	r2, [r7, #6]
 800354a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	88fa      	ldrh	r2, [r7, #6]
 8003550:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2200      	movs	r2, #0
 8003556:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	2200      	movs	r2, #0
 8003562:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	2200      	movs	r2, #0
 8003568:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800356a:	68fb      	ldr	r3, [r7, #12]
 800356c:	2200      	movs	r2, #0
 800356e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	689b      	ldr	r3, [r3, #8]
 8003574:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003578:	d10f      	bne.n	800359a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003588:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	681a      	ldr	r2, [r3, #0]
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003598:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80035a4:	2b40      	cmp	r3, #64	@ 0x40
 80035a6:	d007      	beq.n	80035b8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	681a      	ldr	r2, [r3, #0]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80035b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	68db      	ldr	r3, [r3, #12]
 80035bc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80035c0:	d152      	bne.n	8003668 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	685b      	ldr	r3, [r3, #4]
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d002      	beq.n	80035d0 <HAL_SPI_Transmit+0xee>
 80035ca:	8b7b      	ldrh	r3, [r7, #26]
 80035cc:	2b01      	cmp	r3, #1
 80035ce:	d145      	bne.n	800365c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035d4:	881a      	ldrh	r2, [r3, #0]
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035e0:	1c9a      	adds	r2, r3, #2
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80035ea:	b29b      	uxth	r3, r3
 80035ec:	3b01      	subs	r3, #1
 80035ee:	b29a      	uxth	r2, r3
 80035f0:	68fb      	ldr	r3, [r7, #12]
 80035f2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80035f4:	e032      	b.n	800365c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	689b      	ldr	r3, [r3, #8]
 80035fc:	f003 0302 	and.w	r3, r3, #2
 8003600:	2b02      	cmp	r3, #2
 8003602:	d112      	bne.n	800362a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003608:	881a      	ldrh	r2, [r3, #0]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003614:	1c9a      	adds	r2, r3, #2
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800361e:	b29b      	uxth	r3, r3
 8003620:	3b01      	subs	r3, #1
 8003622:	b29a      	uxth	r2, r3
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	86da      	strh	r2, [r3, #54]	@ 0x36
 8003628:	e018      	b.n	800365c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800362a:	f7fe f8c5 	bl	80017b8 <HAL_GetTick>
 800362e:	4602      	mov	r2, r0
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	1ad3      	subs	r3, r2, r3
 8003634:	683a      	ldr	r2, [r7, #0]
 8003636:	429a      	cmp	r2, r3
 8003638:	d803      	bhi.n	8003642 <HAL_SPI_Transmit+0x160>
 800363a:	683b      	ldr	r3, [r7, #0]
 800363c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003640:	d102      	bne.n	8003648 <HAL_SPI_Transmit+0x166>
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	2b00      	cmp	r3, #0
 8003646:	d109      	bne.n	800365c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003658:	2303      	movs	r3, #3
 800365a:	e082      	b.n	8003762 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003660:	b29b      	uxth	r3, r3
 8003662:	2b00      	cmp	r3, #0
 8003664:	d1c7      	bne.n	80035f6 <HAL_SPI_Transmit+0x114>
 8003666:	e053      	b.n	8003710 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	685b      	ldr	r3, [r3, #4]
 800366c:	2b00      	cmp	r3, #0
 800366e:	d002      	beq.n	8003676 <HAL_SPI_Transmit+0x194>
 8003670:	8b7b      	ldrh	r3, [r7, #26]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d147      	bne.n	8003706 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	330c      	adds	r3, #12
 8003680:	7812      	ldrb	r2, [r2, #0]
 8003682:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003688:	1c5a      	adds	r2, r3, #1
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003692:	b29b      	uxth	r3, r3
 8003694:	3b01      	subs	r3, #1
 8003696:	b29a      	uxth	r2, r3
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800369c:	e033      	b.n	8003706 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	689b      	ldr	r3, [r3, #8]
 80036a4:	f003 0302 	and.w	r3, r3, #2
 80036a8:	2b02      	cmp	r3, #2
 80036aa:	d113      	bne.n	80036d4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	330c      	adds	r3, #12
 80036b6:	7812      	ldrb	r2, [r2, #0]
 80036b8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036be:	1c5a      	adds	r2, r3, #1
 80036c0:	68fb      	ldr	r3, [r7, #12]
 80036c2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036c8:	b29b      	uxth	r3, r3
 80036ca:	3b01      	subs	r3, #1
 80036cc:	b29a      	uxth	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80036d2:	e018      	b.n	8003706 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80036d4:	f7fe f870 	bl	80017b8 <HAL_GetTick>
 80036d8:	4602      	mov	r2, r0
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	1ad3      	subs	r3, r2, r3
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d803      	bhi.n	80036ec <HAL_SPI_Transmit+0x20a>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80036ea:	d102      	bne.n	80036f2 <HAL_SPI_Transmit+0x210>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d109      	bne.n	8003706 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80036f2:	68fb      	ldr	r3, [r7, #12]
 80036f4:	2201      	movs	r2, #1
 80036f6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	2200      	movs	r2, #0
 80036fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003702:	2303      	movs	r3, #3
 8003704:	e02d      	b.n	8003762 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800370a:	b29b      	uxth	r3, r3
 800370c:	2b00      	cmp	r3, #0
 800370e:	d1c6      	bne.n	800369e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003710:	69fa      	ldr	r2, [r7, #28]
 8003712:	6839      	ldr	r1, [r7, #0]
 8003714:	68f8      	ldr	r0, [r7, #12]
 8003716:	f000 fa67 	bl	8003be8 <SPI_EndRxTxTransaction>
 800371a:	4603      	mov	r3, r0
 800371c:	2b00      	cmp	r3, #0
 800371e:	d002      	beq.n	8003726 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	2220      	movs	r2, #32
 8003724:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	689b      	ldr	r3, [r3, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d10a      	bne.n	8003744 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800372e:	2300      	movs	r3, #0
 8003730:	617b      	str	r3, [r7, #20]
 8003732:	68fb      	ldr	r3, [r7, #12]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	68db      	ldr	r3, [r3, #12]
 8003738:	617b      	str	r3, [r7, #20]
 800373a:	68fb      	ldr	r3, [r7, #12]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	617b      	str	r3, [r7, #20]
 8003742:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	2200      	movs	r2, #0
 8003750:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003758:	2b00      	cmp	r3, #0
 800375a:	d001      	beq.n	8003760 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800375c:	2301      	movs	r3, #1
 800375e:	e000      	b.n	8003762 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003760:	2300      	movs	r3, #0
  }
}
 8003762:	4618      	mov	r0, r3
 8003764:	3720      	adds	r7, #32
 8003766:	46bd      	mov	sp, r7
 8003768:	bd80      	pop	{r7, pc}

0800376a <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800376a:	b580      	push	{r7, lr}
 800376c:	b08a      	sub	sp, #40	@ 0x28
 800376e:	af00      	add	r7, sp, #0
 8003770:	60f8      	str	r0, [r7, #12]
 8003772:	60b9      	str	r1, [r7, #8]
 8003774:	607a      	str	r2, [r7, #4]
 8003776:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003778:	2301      	movs	r3, #1
 800377a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800377c:	f7fe f81c 	bl	80017b8 <HAL_GetTick>
 8003780:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003788:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	685b      	ldr	r3, [r3, #4]
 800378e:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003790:	887b      	ldrh	r3, [r7, #2]
 8003792:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003794:	7ffb      	ldrb	r3, [r7, #31]
 8003796:	2b01      	cmp	r3, #1
 8003798:	d00c      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x4a>
 800379a:	69bb      	ldr	r3, [r7, #24]
 800379c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037a0:	d106      	bne.n	80037b0 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	689b      	ldr	r3, [r3, #8]
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d102      	bne.n	80037b0 <HAL_SPI_TransmitReceive+0x46>
 80037aa:	7ffb      	ldrb	r3, [r7, #31]
 80037ac:	2b04      	cmp	r3, #4
 80037ae:	d001      	beq.n	80037b4 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80037b0:	2302      	movs	r3, #2
 80037b2:	e17f      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d005      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0x5c>
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d002      	beq.n	80037c6 <HAL_SPI_TransmitReceive+0x5c>
 80037c0:	887b      	ldrh	r3, [r7, #2]
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d101      	bne.n	80037ca <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e174      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80037ca:	68fb      	ldr	r3, [r7, #12]
 80037cc:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80037d0:	2b01      	cmp	r3, #1
 80037d2:	d101      	bne.n	80037d8 <HAL_SPI_TransmitReceive+0x6e>
 80037d4:	2302      	movs	r3, #2
 80037d6:	e16d      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x34a>
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037e6:	b2db      	uxtb	r3, r3
 80037e8:	2b04      	cmp	r3, #4
 80037ea:	d003      	beq.n	80037f4 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	2205      	movs	r2, #5
 80037f0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	2200      	movs	r2, #0
 80037f8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	687a      	ldr	r2, [r7, #4]
 80037fe:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	887a      	ldrh	r2, [r7, #2]
 8003804:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	887a      	ldrh	r2, [r7, #2]
 800380a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	68ba      	ldr	r2, [r7, #8]
 8003810:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	887a      	ldrh	r2, [r7, #2]
 8003816:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	887a      	ldrh	r2, [r7, #2]
 800381c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	2200      	movs	r2, #0
 8003822:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	2200      	movs	r2, #0
 8003828:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	681b      	ldr	r3, [r3, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003834:	2b40      	cmp	r3, #64	@ 0x40
 8003836:	d007      	beq.n	8003848 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	681a      	ldr	r2, [r3, #0]
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003846:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	68db      	ldr	r3, [r3, #12]
 800384c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003850:	d17e      	bne.n	8003950 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	685b      	ldr	r3, [r3, #4]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d002      	beq.n	8003860 <HAL_SPI_TransmitReceive+0xf6>
 800385a:	8afb      	ldrh	r3, [r7, #22]
 800385c:	2b01      	cmp	r3, #1
 800385e:	d16c      	bne.n	800393a <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003864:	881a      	ldrh	r2, [r3, #0]
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003870:	1c9a      	adds	r2, r3, #2
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800387a:	b29b      	uxth	r3, r3
 800387c:	3b01      	subs	r3, #1
 800387e:	b29a      	uxth	r2, r3
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003884:	e059      	b.n	800393a <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	689b      	ldr	r3, [r3, #8]
 800388c:	f003 0302 	and.w	r3, r3, #2
 8003890:	2b02      	cmp	r3, #2
 8003892:	d11b      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x162>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003898:	b29b      	uxth	r3, r3
 800389a:	2b00      	cmp	r3, #0
 800389c:	d016      	beq.n	80038cc <HAL_SPI_TransmitReceive+0x162>
 800389e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	d113      	bne.n	80038cc <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038a8:	881a      	ldrh	r2, [r3, #0]
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	681b      	ldr	r3, [r3, #0]
 80038ae:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80038b4:	1c9a      	adds	r2, r3, #2
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80038be:	b29b      	uxth	r3, r3
 80038c0:	3b01      	subs	r3, #1
 80038c2:	b29a      	uxth	r2, r3
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80038c8:	2300      	movs	r3, #0
 80038ca:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	689b      	ldr	r3, [r3, #8]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d119      	bne.n	800390e <HAL_SPI_TransmitReceive+0x1a4>
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80038de:	b29b      	uxth	r3, r3
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d014      	beq.n	800390e <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	68da      	ldr	r2, [r3, #12]
 80038ea:	68fb      	ldr	r3, [r7, #12]
 80038ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038ee:	b292      	uxth	r2, r2
 80038f0:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80038f2:	68fb      	ldr	r3, [r7, #12]
 80038f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80038f6:	1c9a      	adds	r2, r3, #2
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003900:	b29b      	uxth	r3, r3
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800390a:	2301      	movs	r3, #1
 800390c:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800390e:	f7fd ff53 	bl	80017b8 <HAL_GetTick>
 8003912:	4602      	mov	r2, r0
 8003914:	6a3b      	ldr	r3, [r7, #32]
 8003916:	1ad3      	subs	r3, r2, r3
 8003918:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800391a:	429a      	cmp	r2, r3
 800391c:	d80d      	bhi.n	800393a <HAL_SPI_TransmitReceive+0x1d0>
 800391e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003920:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003924:	d009      	beq.n	800393a <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	2201      	movs	r2, #1
 800392a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	2200      	movs	r2, #0
 8003932:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003936:	2303      	movs	r3, #3
 8003938:	e0bc      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800393e:	b29b      	uxth	r3, r3
 8003940:	2b00      	cmp	r3, #0
 8003942:	d1a0      	bne.n	8003886 <HAL_SPI_TransmitReceive+0x11c>
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003948:	b29b      	uxth	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d19b      	bne.n	8003886 <HAL_SPI_TransmitReceive+0x11c>
 800394e:	e082      	b.n	8003a56 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	2b00      	cmp	r3, #0
 8003956:	d002      	beq.n	800395e <HAL_SPI_TransmitReceive+0x1f4>
 8003958:	8afb      	ldrh	r3, [r7, #22]
 800395a:	2b01      	cmp	r3, #1
 800395c:	d171      	bne.n	8003a42 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	330c      	adds	r3, #12
 8003968:	7812      	ldrb	r2, [r2, #0]
 800396a:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003970:	1c5a      	adds	r2, r3, #1
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800397a:	b29b      	uxth	r3, r3
 800397c:	3b01      	subs	r3, #1
 800397e:	b29a      	uxth	r2, r3
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003984:	e05d      	b.n	8003a42 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	689b      	ldr	r3, [r3, #8]
 800398c:	f003 0302 	and.w	r3, r3, #2
 8003990:	2b02      	cmp	r3, #2
 8003992:	d11c      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x264>
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003998:	b29b      	uxth	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d017      	beq.n	80039ce <HAL_SPI_TransmitReceive+0x264>
 800399e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039a0:	2b01      	cmp	r3, #1
 80039a2:	d114      	bne.n	80039ce <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	330c      	adds	r3, #12
 80039ae:	7812      	ldrb	r2, [r2, #0]
 80039b0:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039b6:	1c5a      	adds	r2, r3, #1
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039c0:	b29b      	uxth	r3, r3
 80039c2:	3b01      	subs	r3, #1
 80039c4:	b29a      	uxth	r2, r3
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80039ca:	2300      	movs	r3, #0
 80039cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	689b      	ldr	r3, [r3, #8]
 80039d4:	f003 0301 	and.w	r3, r3, #1
 80039d8:	2b01      	cmp	r3, #1
 80039da:	d119      	bne.n	8003a10 <HAL_SPI_TransmitReceive+0x2a6>
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d014      	beq.n	8003a10 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f0:	b2d2      	uxtb	r2, r2
 80039f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80039f8:	1c5a      	adds	r2, r3, #1
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a02:	b29b      	uxth	r3, r3
 8003a04:	3b01      	subs	r3, #1
 8003a06:	b29a      	uxth	r2, r3
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003a10:	f7fd fed2 	bl	80017b8 <HAL_GetTick>
 8003a14:	4602      	mov	r2, r0
 8003a16:	6a3b      	ldr	r3, [r7, #32]
 8003a18:	1ad3      	subs	r3, r2, r3
 8003a1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a1c:	429a      	cmp	r2, r3
 8003a1e:	d803      	bhi.n	8003a28 <HAL_SPI_TransmitReceive+0x2be>
 8003a20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a26:	d102      	bne.n	8003a2e <HAL_SPI_TransmitReceive+0x2c4>
 8003a28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d109      	bne.n	8003a42 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a2e:	68fb      	ldr	r3, [r7, #12]
 8003a30:	2201      	movs	r2, #1
 8003a32:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2200      	movs	r2, #0
 8003a3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a3e:	2303      	movs	r3, #3
 8003a40:	e038      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a46:	b29b      	uxth	r3, r3
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d19c      	bne.n	8003986 <HAL_SPI_TransmitReceive+0x21c>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a50:	b29b      	uxth	r3, r3
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d197      	bne.n	8003986 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003a56:	6a3a      	ldr	r2, [r7, #32]
 8003a58:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f8c4 	bl	8003be8 <SPI_EndRxTxTransaction>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d008      	beq.n	8003a78 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	2220      	movs	r2, #32
 8003a6a:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e01d      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2b00      	cmp	r3, #0
 8003a7e:	d10a      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a80:	2300      	movs	r3, #0
 8003a82:	613b      	str	r3, [r7, #16]
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68db      	ldr	r3, [r3, #12]
 8003a8a:	613b      	str	r3, [r7, #16]
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	613b      	str	r3, [r7, #16]
 8003a94:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	2201      	movs	r2, #1
 8003a9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d001      	beq.n	8003ab2 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003aae:	2301      	movs	r3, #1
 8003ab0:	e000      	b.n	8003ab4 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003ab2:	2300      	movs	r3, #0
  }
}
 8003ab4:	4618      	mov	r0, r3
 8003ab6:	3728      	adds	r7, #40	@ 0x28
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	bd80      	pop	{r7, pc}

08003abc <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(const SPI_HandleTypeDef *hspi)
{
 8003abc:	b480      	push	{r7}
 8003abe:	b083      	sub	sp, #12
 8003ac0:	af00      	add	r7, sp, #0
 8003ac2:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003aca:	b2db      	uxtb	r3, r3
}
 8003acc:	4618      	mov	r0, r3
 8003ace:	370c      	adds	r7, #12
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	b088      	sub	sp, #32
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	603b      	str	r3, [r7, #0]
 8003ae4:	4613      	mov	r3, r2
 8003ae6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003ae8:	f7fd fe66 	bl	80017b8 <HAL_GetTick>
 8003aec:	4602      	mov	r2, r0
 8003aee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003af0:	1a9b      	subs	r3, r3, r2
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	4413      	add	r3, r2
 8003af6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003af8:	f7fd fe5e 	bl	80017b8 <HAL_GetTick>
 8003afc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003afe:	4b39      	ldr	r3, [pc, #228]	@ (8003be4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	015b      	lsls	r3, r3, #5
 8003b04:	0d1b      	lsrs	r3, r3, #20
 8003b06:	69fa      	ldr	r2, [r7, #28]
 8003b08:	fb02 f303 	mul.w	r3, r2, r3
 8003b0c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003b0e:	e055      	b.n	8003bbc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003b10:	683b      	ldr	r3, [r7, #0]
 8003b12:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b16:	d051      	beq.n	8003bbc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003b18:	f7fd fe4e 	bl	80017b8 <HAL_GetTick>
 8003b1c:	4602      	mov	r2, r0
 8003b1e:	69bb      	ldr	r3, [r7, #24]
 8003b20:	1ad3      	subs	r3, r2, r3
 8003b22:	69fa      	ldr	r2, [r7, #28]
 8003b24:	429a      	cmp	r2, r3
 8003b26:	d902      	bls.n	8003b2e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003b28:	69fb      	ldr	r3, [r7, #28]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d13d      	bne.n	8003baa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	685a      	ldr	r2, [r3, #4]
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b3c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b46:	d111      	bne.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	689b      	ldr	r3, [r3, #8]
 8003b4c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003b50:	d004      	beq.n	8003b5c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b5a:	d107      	bne.n	8003b6c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	681a      	ldr	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b6a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b70:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003b74:	d10f      	bne.n	8003b96 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	681a      	ldr	r2, [r3, #0]
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003b84:	601a      	str	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003b94:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e018      	b.n	8003bdc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003baa:	697b      	ldr	r3, [r7, #20]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d102      	bne.n	8003bb6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003bb0:	2300      	movs	r3, #0
 8003bb2:	61fb      	str	r3, [r7, #28]
 8003bb4:	e002      	b.n	8003bbc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003bb6:	697b      	ldr	r3, [r7, #20]
 8003bb8:	3b01      	subs	r3, #1
 8003bba:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	689a      	ldr	r2, [r3, #8]
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	4013      	ands	r3, r2
 8003bc6:	68ba      	ldr	r2, [r7, #8]
 8003bc8:	429a      	cmp	r2, r3
 8003bca:	bf0c      	ite	eq
 8003bcc:	2301      	moveq	r3, #1
 8003bce:	2300      	movne	r3, #0
 8003bd0:	b2db      	uxtb	r3, r3
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	79fb      	ldrb	r3, [r7, #7]
 8003bd6:	429a      	cmp	r2, r3
 8003bd8:	d19a      	bne.n	8003b10 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003bda:	2300      	movs	r3, #0
}
 8003bdc:	4618      	mov	r0, r3
 8003bde:	3720      	adds	r7, #32
 8003be0:	46bd      	mov	sp, r7
 8003be2:	bd80      	pop	{r7, pc}
 8003be4:	20000000 	.word	0x20000000

08003be8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b088      	sub	sp, #32
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	9300      	str	r3, [sp, #0]
 8003bf8:	68bb      	ldr	r3, [r7, #8]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	2102      	movs	r1, #2
 8003bfe:	68f8      	ldr	r0, [r7, #12]
 8003c00:	f7ff ff6a 	bl	8003ad8 <SPI_WaitFlagStateUntilTimeout>
 8003c04:	4603      	mov	r3, r0
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d007      	beq.n	8003c1a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c0e:	f043 0220 	orr.w	r2, r3, #32
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e032      	b.n	8003c80 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003c1a:	4b1b      	ldr	r3, [pc, #108]	@ (8003c88 <SPI_EndRxTxTransaction+0xa0>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	4a1b      	ldr	r2, [pc, #108]	@ (8003c8c <SPI_EndRxTxTransaction+0xa4>)
 8003c20:	fba2 2303 	umull	r2, r3, r2, r3
 8003c24:	0d5b      	lsrs	r3, r3, #21
 8003c26:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003c2a:	fb02 f303 	mul.w	r3, r2, r3
 8003c2e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	685b      	ldr	r3, [r3, #4]
 8003c34:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c38:	d112      	bne.n	8003c60 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	9300      	str	r3, [sp, #0]
 8003c3e:	68bb      	ldr	r3, [r7, #8]
 8003c40:	2200      	movs	r2, #0
 8003c42:	2180      	movs	r1, #128	@ 0x80
 8003c44:	68f8      	ldr	r0, [r7, #12]
 8003c46:	f7ff ff47 	bl	8003ad8 <SPI_WaitFlagStateUntilTimeout>
 8003c4a:	4603      	mov	r3, r0
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d016      	beq.n	8003c7e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c54:	f043 0220 	orr.w	r2, r3, #32
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003c5c:	2303      	movs	r3, #3
 8003c5e:	e00f      	b.n	8003c80 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003c60:	697b      	ldr	r3, [r7, #20]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d00a      	beq.n	8003c7c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003c66:	697b      	ldr	r3, [r7, #20]
 8003c68:	3b01      	subs	r3, #1
 8003c6a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	689b      	ldr	r3, [r3, #8]
 8003c72:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c76:	2b80      	cmp	r3, #128	@ 0x80
 8003c78:	d0f2      	beq.n	8003c60 <SPI_EndRxTxTransaction+0x78>
 8003c7a:	e000      	b.n	8003c7e <SPI_EndRxTxTransaction+0x96>
        break;
 8003c7c:	bf00      	nop
  }

  return HAL_OK;
 8003c7e:	2300      	movs	r3, #0
}
 8003c80:	4618      	mov	r0, r3
 8003c82:	3718      	adds	r7, #24
 8003c84:	46bd      	mov	sp, r7
 8003c86:	bd80      	pop	{r7, pc}
 8003c88:	20000000 	.word	0x20000000
 8003c8c:	165e9f81 	.word	0x165e9f81

08003c90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b082      	sub	sp, #8
 8003c94:	af00      	add	r7, sp, #0
 8003c96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2b00      	cmp	r3, #0
 8003c9c:	d101      	bne.n	8003ca2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c9e:	2301      	movs	r3, #1
 8003ca0:	e042      	b.n	8003d28 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d106      	bne.n	8003cbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cb6:	6878      	ldr	r0, [r7, #4]
 8003cb8:	f7fd fc9e 	bl	80015f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	2224      	movs	r2, #36	@ 0x24
 8003cc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	68da      	ldr	r2, [r3, #12]
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003cd4:	6878      	ldr	r0, [r7, #4]
 8003cd6:	f000 f82b 	bl	8003d30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	691a      	ldr	r2, [r3, #16]
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8003ce8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	695a      	ldr	r2, [r3, #20]
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8003cf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	68da      	ldr	r2, [r3, #12]
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003d08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2220      	movs	r2, #32
 8003d14:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2220      	movs	r2, #32
 8003d1c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2200      	movs	r2, #0
 8003d24:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8003d26:	2300      	movs	r3, #0
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3708      	adds	r7, #8
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}

08003d30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d34:	b0c0      	sub	sp, #256	@ 0x100
 8003d36:	af00      	add	r7, sp, #0
 8003d38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	691b      	ldr	r3, [r3, #16]
 8003d44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8003d48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d4c:	68d9      	ldr	r1, [r3, #12]
 8003d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d52:	681a      	ldr	r2, [r3, #0]
 8003d54:	ea40 0301 	orr.w	r3, r0, r1
 8003d58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d5e:	689a      	ldr	r2, [r3, #8]
 8003d60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d64:	691b      	ldr	r3, [r3, #16]
 8003d66:	431a      	orrs	r2, r3
 8003d68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d6c:	695b      	ldr	r3, [r3, #20]
 8003d6e:	431a      	orrs	r2, r3
 8003d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d74:	69db      	ldr	r3, [r3, #28]
 8003d76:	4313      	orrs	r3, r2
 8003d78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	68db      	ldr	r3, [r3, #12]
 8003d84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8003d88:	f021 010c 	bic.w	r1, r1, #12
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d90:	681a      	ldr	r2, [r3, #0]
 8003d92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8003d96:	430b      	orrs	r3, r1
 8003d98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	695b      	ldr	r3, [r3, #20]
 8003da2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8003da6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003daa:	6999      	ldr	r1, [r3, #24]
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	ea40 0301 	orr.w	r3, r0, r1
 8003db6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dbc:	681a      	ldr	r2, [r3, #0]
 8003dbe:	4b8f      	ldr	r3, [pc, #572]	@ (8003ffc <UART_SetConfig+0x2cc>)
 8003dc0:	429a      	cmp	r2, r3
 8003dc2:	d005      	beq.n	8003dd0 <UART_SetConfig+0xa0>
 8003dc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003dc8:	681a      	ldr	r2, [r3, #0]
 8003dca:	4b8d      	ldr	r3, [pc, #564]	@ (8004000 <UART_SetConfig+0x2d0>)
 8003dcc:	429a      	cmp	r2, r3
 8003dce:	d104      	bne.n	8003dda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003dd0:	f7fe f924 	bl	800201c <HAL_RCC_GetPCLK2Freq>
 8003dd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8003dd8:	e003      	b.n	8003de2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003dda:	f7fe f90b 	bl	8001ff4 <HAL_RCC_GetPCLK1Freq>
 8003dde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003de2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003de6:	69db      	ldr	r3, [r3, #28]
 8003de8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003dec:	f040 810c 	bne.w	8004008 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003df0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003df4:	2200      	movs	r2, #0
 8003df6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8003dfa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8003dfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8003e02:	4622      	mov	r2, r4
 8003e04:	462b      	mov	r3, r5
 8003e06:	1891      	adds	r1, r2, r2
 8003e08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8003e0a:	415b      	adcs	r3, r3
 8003e0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8003e0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8003e12:	4621      	mov	r1, r4
 8003e14:	eb12 0801 	adds.w	r8, r2, r1
 8003e18:	4629      	mov	r1, r5
 8003e1a:	eb43 0901 	adc.w	r9, r3, r1
 8003e1e:	f04f 0200 	mov.w	r2, #0
 8003e22:	f04f 0300 	mov.w	r3, #0
 8003e26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e32:	4690      	mov	r8, r2
 8003e34:	4699      	mov	r9, r3
 8003e36:	4623      	mov	r3, r4
 8003e38:	eb18 0303 	adds.w	r3, r8, r3
 8003e3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8003e40:	462b      	mov	r3, r5
 8003e42:	eb49 0303 	adc.w	r3, r9, r3
 8003e46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8003e4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003e4e:	685b      	ldr	r3, [r3, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8003e56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8003e5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8003e5e:	460b      	mov	r3, r1
 8003e60:	18db      	adds	r3, r3, r3
 8003e62:	653b      	str	r3, [r7, #80]	@ 0x50
 8003e64:	4613      	mov	r3, r2
 8003e66:	eb42 0303 	adc.w	r3, r2, r3
 8003e6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8003e6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8003e70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8003e74:	f7fc fa1c 	bl	80002b0 <__aeabi_uldivmod>
 8003e78:	4602      	mov	r2, r0
 8003e7a:	460b      	mov	r3, r1
 8003e7c:	4b61      	ldr	r3, [pc, #388]	@ (8004004 <UART_SetConfig+0x2d4>)
 8003e7e:	fba3 2302 	umull	r2, r3, r3, r2
 8003e82:	095b      	lsrs	r3, r3, #5
 8003e84:	011c      	lsls	r4, r3, #4
 8003e86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003e8a:	2200      	movs	r2, #0
 8003e8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8003e90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8003e94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8003e98:	4642      	mov	r2, r8
 8003e9a:	464b      	mov	r3, r9
 8003e9c:	1891      	adds	r1, r2, r2
 8003e9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8003ea0:	415b      	adcs	r3, r3
 8003ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003ea4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8003ea8:	4641      	mov	r1, r8
 8003eaa:	eb12 0a01 	adds.w	sl, r2, r1
 8003eae:	4649      	mov	r1, r9
 8003eb0:	eb43 0b01 	adc.w	fp, r3, r1
 8003eb4:	f04f 0200 	mov.w	r2, #0
 8003eb8:	f04f 0300 	mov.w	r3, #0
 8003ebc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003ec0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003ec4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003ec8:	4692      	mov	sl, r2
 8003eca:	469b      	mov	fp, r3
 8003ecc:	4643      	mov	r3, r8
 8003ece:	eb1a 0303 	adds.w	r3, sl, r3
 8003ed2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8003ed6:	464b      	mov	r3, r9
 8003ed8:	eb4b 0303 	adc.w	r3, fp, r3
 8003edc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8003ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8003eec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8003ef0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8003ef4:	460b      	mov	r3, r1
 8003ef6:	18db      	adds	r3, r3, r3
 8003ef8:	643b      	str	r3, [r7, #64]	@ 0x40
 8003efa:	4613      	mov	r3, r2
 8003efc:	eb42 0303 	adc.w	r3, r2, r3
 8003f00:	647b      	str	r3, [r7, #68]	@ 0x44
 8003f02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8003f06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8003f0a:	f7fc f9d1 	bl	80002b0 <__aeabi_uldivmod>
 8003f0e:	4602      	mov	r2, r0
 8003f10:	460b      	mov	r3, r1
 8003f12:	4611      	mov	r1, r2
 8003f14:	4b3b      	ldr	r3, [pc, #236]	@ (8004004 <UART_SetConfig+0x2d4>)
 8003f16:	fba3 2301 	umull	r2, r3, r3, r1
 8003f1a:	095b      	lsrs	r3, r3, #5
 8003f1c:	2264      	movs	r2, #100	@ 0x64
 8003f1e:	fb02 f303 	mul.w	r3, r2, r3
 8003f22:	1acb      	subs	r3, r1, r3
 8003f24:	00db      	lsls	r3, r3, #3
 8003f26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8003f2a:	4b36      	ldr	r3, [pc, #216]	@ (8004004 <UART_SetConfig+0x2d4>)
 8003f2c:	fba3 2302 	umull	r2, r3, r3, r2
 8003f30:	095b      	lsrs	r3, r3, #5
 8003f32:	005b      	lsls	r3, r3, #1
 8003f34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8003f38:	441c      	add	r4, r3
 8003f3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8003f44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8003f48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8003f4c:	4642      	mov	r2, r8
 8003f4e:	464b      	mov	r3, r9
 8003f50:	1891      	adds	r1, r2, r2
 8003f52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8003f54:	415b      	adcs	r3, r3
 8003f56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8003f58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8003f5c:	4641      	mov	r1, r8
 8003f5e:	1851      	adds	r1, r2, r1
 8003f60:	6339      	str	r1, [r7, #48]	@ 0x30
 8003f62:	4649      	mov	r1, r9
 8003f64:	414b      	adcs	r3, r1
 8003f66:	637b      	str	r3, [r7, #52]	@ 0x34
 8003f68:	f04f 0200 	mov.w	r2, #0
 8003f6c:	f04f 0300 	mov.w	r3, #0
 8003f70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8003f74:	4659      	mov	r1, fp
 8003f76:	00cb      	lsls	r3, r1, #3
 8003f78:	4651      	mov	r1, sl
 8003f7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003f7e:	4651      	mov	r1, sl
 8003f80:	00ca      	lsls	r2, r1, #3
 8003f82:	4610      	mov	r0, r2
 8003f84:	4619      	mov	r1, r3
 8003f86:	4603      	mov	r3, r0
 8003f88:	4642      	mov	r2, r8
 8003f8a:	189b      	adds	r3, r3, r2
 8003f8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8003f90:	464b      	mov	r3, r9
 8003f92:	460a      	mov	r2, r1
 8003f94:	eb42 0303 	adc.w	r3, r2, r3
 8003f98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8003f9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003fa0:	685b      	ldr	r3, [r3, #4]
 8003fa2:	2200      	movs	r2, #0
 8003fa4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8003fa8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8003fac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	18db      	adds	r3, r3, r3
 8003fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003fb6:	4613      	mov	r3, r2
 8003fb8:	eb42 0303 	adc.w	r3, r2, r3
 8003fbc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8003fbe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003fc2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8003fc6:	f7fc f973 	bl	80002b0 <__aeabi_uldivmod>
 8003fca:	4602      	mov	r2, r0
 8003fcc:	460b      	mov	r3, r1
 8003fce:	4b0d      	ldr	r3, [pc, #52]	@ (8004004 <UART_SetConfig+0x2d4>)
 8003fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8003fd4:	095b      	lsrs	r3, r3, #5
 8003fd6:	2164      	movs	r1, #100	@ 0x64
 8003fd8:	fb01 f303 	mul.w	r3, r1, r3
 8003fdc:	1ad3      	subs	r3, r2, r3
 8003fde:	00db      	lsls	r3, r3, #3
 8003fe0:	3332      	adds	r3, #50	@ 0x32
 8003fe2:	4a08      	ldr	r2, [pc, #32]	@ (8004004 <UART_SetConfig+0x2d4>)
 8003fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8003fe8:	095b      	lsrs	r3, r3, #5
 8003fea:	f003 0207 	and.w	r2, r3, #7
 8003fee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4422      	add	r2, r4
 8003ff6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003ff8:	e106      	b.n	8004208 <UART_SetConfig+0x4d8>
 8003ffa:	bf00      	nop
 8003ffc:	40011000 	.word	0x40011000
 8004000:	40011400 	.word	0x40011400
 8004004:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004008:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800400c:	2200      	movs	r2, #0
 800400e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004012:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004016:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800401a:	4642      	mov	r2, r8
 800401c:	464b      	mov	r3, r9
 800401e:	1891      	adds	r1, r2, r2
 8004020:	6239      	str	r1, [r7, #32]
 8004022:	415b      	adcs	r3, r3
 8004024:	627b      	str	r3, [r7, #36]	@ 0x24
 8004026:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800402a:	4641      	mov	r1, r8
 800402c:	1854      	adds	r4, r2, r1
 800402e:	4649      	mov	r1, r9
 8004030:	eb43 0501 	adc.w	r5, r3, r1
 8004034:	f04f 0200 	mov.w	r2, #0
 8004038:	f04f 0300 	mov.w	r3, #0
 800403c:	00eb      	lsls	r3, r5, #3
 800403e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004042:	00e2      	lsls	r2, r4, #3
 8004044:	4614      	mov	r4, r2
 8004046:	461d      	mov	r5, r3
 8004048:	4643      	mov	r3, r8
 800404a:	18e3      	adds	r3, r4, r3
 800404c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004050:	464b      	mov	r3, r9
 8004052:	eb45 0303 	adc.w	r3, r5, r3
 8004056:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800405a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800405e:	685b      	ldr	r3, [r3, #4]
 8004060:	2200      	movs	r2, #0
 8004062:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004066:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800406a:	f04f 0200 	mov.w	r2, #0
 800406e:	f04f 0300 	mov.w	r3, #0
 8004072:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004076:	4629      	mov	r1, r5
 8004078:	008b      	lsls	r3, r1, #2
 800407a:	4621      	mov	r1, r4
 800407c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004080:	4621      	mov	r1, r4
 8004082:	008a      	lsls	r2, r1, #2
 8004084:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004088:	f7fc f912 	bl	80002b0 <__aeabi_uldivmod>
 800408c:	4602      	mov	r2, r0
 800408e:	460b      	mov	r3, r1
 8004090:	4b60      	ldr	r3, [pc, #384]	@ (8004214 <UART_SetConfig+0x4e4>)
 8004092:	fba3 2302 	umull	r2, r3, r3, r2
 8004096:	095b      	lsrs	r3, r3, #5
 8004098:	011c      	lsls	r4, r3, #4
 800409a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800409e:	2200      	movs	r2, #0
 80040a0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80040a4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80040a8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80040ac:	4642      	mov	r2, r8
 80040ae:	464b      	mov	r3, r9
 80040b0:	1891      	adds	r1, r2, r2
 80040b2:	61b9      	str	r1, [r7, #24]
 80040b4:	415b      	adcs	r3, r3
 80040b6:	61fb      	str	r3, [r7, #28]
 80040b8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80040bc:	4641      	mov	r1, r8
 80040be:	1851      	adds	r1, r2, r1
 80040c0:	6139      	str	r1, [r7, #16]
 80040c2:	4649      	mov	r1, r9
 80040c4:	414b      	adcs	r3, r1
 80040c6:	617b      	str	r3, [r7, #20]
 80040c8:	f04f 0200 	mov.w	r2, #0
 80040cc:	f04f 0300 	mov.w	r3, #0
 80040d0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80040d4:	4659      	mov	r1, fp
 80040d6:	00cb      	lsls	r3, r1, #3
 80040d8:	4651      	mov	r1, sl
 80040da:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80040de:	4651      	mov	r1, sl
 80040e0:	00ca      	lsls	r2, r1, #3
 80040e2:	4610      	mov	r0, r2
 80040e4:	4619      	mov	r1, r3
 80040e6:	4603      	mov	r3, r0
 80040e8:	4642      	mov	r2, r8
 80040ea:	189b      	adds	r3, r3, r2
 80040ec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80040f0:	464b      	mov	r3, r9
 80040f2:	460a      	mov	r2, r1
 80040f4:	eb42 0303 	adc.w	r3, r2, r3
 80040f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80040fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004100:	685b      	ldr	r3, [r3, #4]
 8004102:	2200      	movs	r2, #0
 8004104:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004106:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004108:	f04f 0200 	mov.w	r2, #0
 800410c:	f04f 0300 	mov.w	r3, #0
 8004110:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004114:	4649      	mov	r1, r9
 8004116:	008b      	lsls	r3, r1, #2
 8004118:	4641      	mov	r1, r8
 800411a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800411e:	4641      	mov	r1, r8
 8004120:	008a      	lsls	r2, r1, #2
 8004122:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004126:	f7fc f8c3 	bl	80002b0 <__aeabi_uldivmod>
 800412a:	4602      	mov	r2, r0
 800412c:	460b      	mov	r3, r1
 800412e:	4611      	mov	r1, r2
 8004130:	4b38      	ldr	r3, [pc, #224]	@ (8004214 <UART_SetConfig+0x4e4>)
 8004132:	fba3 2301 	umull	r2, r3, r3, r1
 8004136:	095b      	lsrs	r3, r3, #5
 8004138:	2264      	movs	r2, #100	@ 0x64
 800413a:	fb02 f303 	mul.w	r3, r2, r3
 800413e:	1acb      	subs	r3, r1, r3
 8004140:	011b      	lsls	r3, r3, #4
 8004142:	3332      	adds	r3, #50	@ 0x32
 8004144:	4a33      	ldr	r2, [pc, #204]	@ (8004214 <UART_SetConfig+0x4e4>)
 8004146:	fba2 2303 	umull	r2, r3, r2, r3
 800414a:	095b      	lsrs	r3, r3, #5
 800414c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004150:	441c      	add	r4, r3
 8004152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004156:	2200      	movs	r2, #0
 8004158:	673b      	str	r3, [r7, #112]	@ 0x70
 800415a:	677a      	str	r2, [r7, #116]	@ 0x74
 800415c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004160:	4642      	mov	r2, r8
 8004162:	464b      	mov	r3, r9
 8004164:	1891      	adds	r1, r2, r2
 8004166:	60b9      	str	r1, [r7, #8]
 8004168:	415b      	adcs	r3, r3
 800416a:	60fb      	str	r3, [r7, #12]
 800416c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004170:	4641      	mov	r1, r8
 8004172:	1851      	adds	r1, r2, r1
 8004174:	6039      	str	r1, [r7, #0]
 8004176:	4649      	mov	r1, r9
 8004178:	414b      	adcs	r3, r1
 800417a:	607b      	str	r3, [r7, #4]
 800417c:	f04f 0200 	mov.w	r2, #0
 8004180:	f04f 0300 	mov.w	r3, #0
 8004184:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004188:	4659      	mov	r1, fp
 800418a:	00cb      	lsls	r3, r1, #3
 800418c:	4651      	mov	r1, sl
 800418e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004192:	4651      	mov	r1, sl
 8004194:	00ca      	lsls	r2, r1, #3
 8004196:	4610      	mov	r0, r2
 8004198:	4619      	mov	r1, r3
 800419a:	4603      	mov	r3, r0
 800419c:	4642      	mov	r2, r8
 800419e:	189b      	adds	r3, r3, r2
 80041a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80041a2:	464b      	mov	r3, r9
 80041a4:	460a      	mov	r2, r1
 80041a6:	eb42 0303 	adc.w	r3, r2, r3
 80041aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80041ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2200      	movs	r2, #0
 80041b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80041b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80041b8:	f04f 0200 	mov.w	r2, #0
 80041bc:	f04f 0300 	mov.w	r3, #0
 80041c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80041c4:	4649      	mov	r1, r9
 80041c6:	008b      	lsls	r3, r1, #2
 80041c8:	4641      	mov	r1, r8
 80041ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80041ce:	4641      	mov	r1, r8
 80041d0:	008a      	lsls	r2, r1, #2
 80041d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80041d6:	f7fc f86b 	bl	80002b0 <__aeabi_uldivmod>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4b0d      	ldr	r3, [pc, #52]	@ (8004214 <UART_SetConfig+0x4e4>)
 80041e0:	fba3 1302 	umull	r1, r3, r3, r2
 80041e4:	095b      	lsrs	r3, r3, #5
 80041e6:	2164      	movs	r1, #100	@ 0x64
 80041e8:	fb01 f303 	mul.w	r3, r1, r3
 80041ec:	1ad3      	subs	r3, r2, r3
 80041ee:	011b      	lsls	r3, r3, #4
 80041f0:	3332      	adds	r3, #50	@ 0x32
 80041f2:	4a08      	ldr	r2, [pc, #32]	@ (8004214 <UART_SetConfig+0x4e4>)
 80041f4:	fba2 2303 	umull	r2, r3, r2, r3
 80041f8:	095b      	lsrs	r3, r3, #5
 80041fa:	f003 020f 	and.w	r2, r3, #15
 80041fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	4422      	add	r2, r4
 8004206:	609a      	str	r2, [r3, #8]
}
 8004208:	bf00      	nop
 800420a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800420e:	46bd      	mov	sp, r7
 8004210:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004214:	51eb851f 	.word	0x51eb851f

08004218 <std>:
 8004218:	2300      	movs	r3, #0
 800421a:	b510      	push	{r4, lr}
 800421c:	4604      	mov	r4, r0
 800421e:	e9c0 3300 	strd	r3, r3, [r0]
 8004222:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004226:	6083      	str	r3, [r0, #8]
 8004228:	8181      	strh	r1, [r0, #12]
 800422a:	6643      	str	r3, [r0, #100]	@ 0x64
 800422c:	81c2      	strh	r2, [r0, #14]
 800422e:	6183      	str	r3, [r0, #24]
 8004230:	4619      	mov	r1, r3
 8004232:	2208      	movs	r2, #8
 8004234:	305c      	adds	r0, #92	@ 0x5c
 8004236:	f000 fa51 	bl	80046dc <memset>
 800423a:	4b0d      	ldr	r3, [pc, #52]	@ (8004270 <std+0x58>)
 800423c:	6263      	str	r3, [r4, #36]	@ 0x24
 800423e:	4b0d      	ldr	r3, [pc, #52]	@ (8004274 <std+0x5c>)
 8004240:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004242:	4b0d      	ldr	r3, [pc, #52]	@ (8004278 <std+0x60>)
 8004244:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8004246:	4b0d      	ldr	r3, [pc, #52]	@ (800427c <std+0x64>)
 8004248:	6323      	str	r3, [r4, #48]	@ 0x30
 800424a:	4b0d      	ldr	r3, [pc, #52]	@ (8004280 <std+0x68>)
 800424c:	6224      	str	r4, [r4, #32]
 800424e:	429c      	cmp	r4, r3
 8004250:	d006      	beq.n	8004260 <std+0x48>
 8004252:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8004256:	4294      	cmp	r4, r2
 8004258:	d002      	beq.n	8004260 <std+0x48>
 800425a:	33d0      	adds	r3, #208	@ 0xd0
 800425c:	429c      	cmp	r4, r3
 800425e:	d105      	bne.n	800426c <std+0x54>
 8004260:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004268:	f000 bab0 	b.w	80047cc <__retarget_lock_init_recursive>
 800426c:	bd10      	pop	{r4, pc}
 800426e:	bf00      	nop
 8004270:	0800452d 	.word	0x0800452d
 8004274:	0800454f 	.word	0x0800454f
 8004278:	08004587 	.word	0x08004587
 800427c:	080045ab 	.word	0x080045ab
 8004280:	200004a8 	.word	0x200004a8

08004284 <stdio_exit_handler>:
 8004284:	4a02      	ldr	r2, [pc, #8]	@ (8004290 <stdio_exit_handler+0xc>)
 8004286:	4903      	ldr	r1, [pc, #12]	@ (8004294 <stdio_exit_handler+0x10>)
 8004288:	4803      	ldr	r0, [pc, #12]	@ (8004298 <stdio_exit_handler+0x14>)
 800428a:	f000 b869 	b.w	8004360 <_fwalk_sglue>
 800428e:	bf00      	nop
 8004290:	2000000c 	.word	0x2000000c
 8004294:	08005335 	.word	0x08005335
 8004298:	2000001c 	.word	0x2000001c

0800429c <cleanup_stdio>:
 800429c:	6841      	ldr	r1, [r0, #4]
 800429e:	4b0c      	ldr	r3, [pc, #48]	@ (80042d0 <cleanup_stdio+0x34>)
 80042a0:	4299      	cmp	r1, r3
 80042a2:	b510      	push	{r4, lr}
 80042a4:	4604      	mov	r4, r0
 80042a6:	d001      	beq.n	80042ac <cleanup_stdio+0x10>
 80042a8:	f001 f844 	bl	8005334 <_fflush_r>
 80042ac:	68a1      	ldr	r1, [r4, #8]
 80042ae:	4b09      	ldr	r3, [pc, #36]	@ (80042d4 <cleanup_stdio+0x38>)
 80042b0:	4299      	cmp	r1, r3
 80042b2:	d002      	beq.n	80042ba <cleanup_stdio+0x1e>
 80042b4:	4620      	mov	r0, r4
 80042b6:	f001 f83d 	bl	8005334 <_fflush_r>
 80042ba:	68e1      	ldr	r1, [r4, #12]
 80042bc:	4b06      	ldr	r3, [pc, #24]	@ (80042d8 <cleanup_stdio+0x3c>)
 80042be:	4299      	cmp	r1, r3
 80042c0:	d004      	beq.n	80042cc <cleanup_stdio+0x30>
 80042c2:	4620      	mov	r0, r4
 80042c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80042c8:	f001 b834 	b.w	8005334 <_fflush_r>
 80042cc:	bd10      	pop	{r4, pc}
 80042ce:	bf00      	nop
 80042d0:	200004a8 	.word	0x200004a8
 80042d4:	20000510 	.word	0x20000510
 80042d8:	20000578 	.word	0x20000578

080042dc <global_stdio_init.part.0>:
 80042dc:	b510      	push	{r4, lr}
 80042de:	4b0b      	ldr	r3, [pc, #44]	@ (800430c <global_stdio_init.part.0+0x30>)
 80042e0:	4c0b      	ldr	r4, [pc, #44]	@ (8004310 <global_stdio_init.part.0+0x34>)
 80042e2:	4a0c      	ldr	r2, [pc, #48]	@ (8004314 <global_stdio_init.part.0+0x38>)
 80042e4:	601a      	str	r2, [r3, #0]
 80042e6:	4620      	mov	r0, r4
 80042e8:	2200      	movs	r2, #0
 80042ea:	2104      	movs	r1, #4
 80042ec:	f7ff ff94 	bl	8004218 <std>
 80042f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80042f4:	2201      	movs	r2, #1
 80042f6:	2109      	movs	r1, #9
 80042f8:	f7ff ff8e 	bl	8004218 <std>
 80042fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8004300:	2202      	movs	r2, #2
 8004302:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004306:	2112      	movs	r1, #18
 8004308:	f7ff bf86 	b.w	8004218 <std>
 800430c:	200005e0 	.word	0x200005e0
 8004310:	200004a8 	.word	0x200004a8
 8004314:	08004285 	.word	0x08004285

08004318 <__sfp_lock_acquire>:
 8004318:	4801      	ldr	r0, [pc, #4]	@ (8004320 <__sfp_lock_acquire+0x8>)
 800431a:	f000 ba58 	b.w	80047ce <__retarget_lock_acquire_recursive>
 800431e:	bf00      	nop
 8004320:	200005e9 	.word	0x200005e9

08004324 <__sfp_lock_release>:
 8004324:	4801      	ldr	r0, [pc, #4]	@ (800432c <__sfp_lock_release+0x8>)
 8004326:	f000 ba53 	b.w	80047d0 <__retarget_lock_release_recursive>
 800432a:	bf00      	nop
 800432c:	200005e9 	.word	0x200005e9

08004330 <__sinit>:
 8004330:	b510      	push	{r4, lr}
 8004332:	4604      	mov	r4, r0
 8004334:	f7ff fff0 	bl	8004318 <__sfp_lock_acquire>
 8004338:	6a23      	ldr	r3, [r4, #32]
 800433a:	b11b      	cbz	r3, 8004344 <__sinit+0x14>
 800433c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004340:	f7ff bff0 	b.w	8004324 <__sfp_lock_release>
 8004344:	4b04      	ldr	r3, [pc, #16]	@ (8004358 <__sinit+0x28>)
 8004346:	6223      	str	r3, [r4, #32]
 8004348:	4b04      	ldr	r3, [pc, #16]	@ (800435c <__sinit+0x2c>)
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	2b00      	cmp	r3, #0
 800434e:	d1f5      	bne.n	800433c <__sinit+0xc>
 8004350:	f7ff ffc4 	bl	80042dc <global_stdio_init.part.0>
 8004354:	e7f2      	b.n	800433c <__sinit+0xc>
 8004356:	bf00      	nop
 8004358:	0800429d 	.word	0x0800429d
 800435c:	200005e0 	.word	0x200005e0

08004360 <_fwalk_sglue>:
 8004360:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004364:	4607      	mov	r7, r0
 8004366:	4688      	mov	r8, r1
 8004368:	4614      	mov	r4, r2
 800436a:	2600      	movs	r6, #0
 800436c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004370:	f1b9 0901 	subs.w	r9, r9, #1
 8004374:	d505      	bpl.n	8004382 <_fwalk_sglue+0x22>
 8004376:	6824      	ldr	r4, [r4, #0]
 8004378:	2c00      	cmp	r4, #0
 800437a:	d1f7      	bne.n	800436c <_fwalk_sglue+0xc>
 800437c:	4630      	mov	r0, r6
 800437e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004382:	89ab      	ldrh	r3, [r5, #12]
 8004384:	2b01      	cmp	r3, #1
 8004386:	d907      	bls.n	8004398 <_fwalk_sglue+0x38>
 8004388:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800438c:	3301      	adds	r3, #1
 800438e:	d003      	beq.n	8004398 <_fwalk_sglue+0x38>
 8004390:	4629      	mov	r1, r5
 8004392:	4638      	mov	r0, r7
 8004394:	47c0      	blx	r8
 8004396:	4306      	orrs	r6, r0
 8004398:	3568      	adds	r5, #104	@ 0x68
 800439a:	e7e9      	b.n	8004370 <_fwalk_sglue+0x10>

0800439c <iprintf>:
 800439c:	b40f      	push	{r0, r1, r2, r3}
 800439e:	b507      	push	{r0, r1, r2, lr}
 80043a0:	4906      	ldr	r1, [pc, #24]	@ (80043bc <iprintf+0x20>)
 80043a2:	ab04      	add	r3, sp, #16
 80043a4:	6808      	ldr	r0, [r1, #0]
 80043a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80043aa:	6881      	ldr	r1, [r0, #8]
 80043ac:	9301      	str	r3, [sp, #4]
 80043ae:	f000 fc99 	bl	8004ce4 <_vfiprintf_r>
 80043b2:	b003      	add	sp, #12
 80043b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80043b8:	b004      	add	sp, #16
 80043ba:	4770      	bx	lr
 80043bc:	20000018 	.word	0x20000018

080043c0 <_puts_r>:
 80043c0:	6a03      	ldr	r3, [r0, #32]
 80043c2:	b570      	push	{r4, r5, r6, lr}
 80043c4:	6884      	ldr	r4, [r0, #8]
 80043c6:	4605      	mov	r5, r0
 80043c8:	460e      	mov	r6, r1
 80043ca:	b90b      	cbnz	r3, 80043d0 <_puts_r+0x10>
 80043cc:	f7ff ffb0 	bl	8004330 <__sinit>
 80043d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043d2:	07db      	lsls	r3, r3, #31
 80043d4:	d405      	bmi.n	80043e2 <_puts_r+0x22>
 80043d6:	89a3      	ldrh	r3, [r4, #12]
 80043d8:	0598      	lsls	r0, r3, #22
 80043da:	d402      	bmi.n	80043e2 <_puts_r+0x22>
 80043dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80043de:	f000 f9f6 	bl	80047ce <__retarget_lock_acquire_recursive>
 80043e2:	89a3      	ldrh	r3, [r4, #12]
 80043e4:	0719      	lsls	r1, r3, #28
 80043e6:	d502      	bpl.n	80043ee <_puts_r+0x2e>
 80043e8:	6923      	ldr	r3, [r4, #16]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d135      	bne.n	800445a <_puts_r+0x9a>
 80043ee:	4621      	mov	r1, r4
 80043f0:	4628      	mov	r0, r5
 80043f2:	f000 f91d 	bl	8004630 <__swsetup_r>
 80043f6:	b380      	cbz	r0, 800445a <_puts_r+0x9a>
 80043f8:	f04f 35ff 	mov.w	r5, #4294967295
 80043fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80043fe:	07da      	lsls	r2, r3, #31
 8004400:	d405      	bmi.n	800440e <_puts_r+0x4e>
 8004402:	89a3      	ldrh	r3, [r4, #12]
 8004404:	059b      	lsls	r3, r3, #22
 8004406:	d402      	bmi.n	800440e <_puts_r+0x4e>
 8004408:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800440a:	f000 f9e1 	bl	80047d0 <__retarget_lock_release_recursive>
 800440e:	4628      	mov	r0, r5
 8004410:	bd70      	pop	{r4, r5, r6, pc}
 8004412:	2b00      	cmp	r3, #0
 8004414:	da04      	bge.n	8004420 <_puts_r+0x60>
 8004416:	69a2      	ldr	r2, [r4, #24]
 8004418:	429a      	cmp	r2, r3
 800441a:	dc17      	bgt.n	800444c <_puts_r+0x8c>
 800441c:	290a      	cmp	r1, #10
 800441e:	d015      	beq.n	800444c <_puts_r+0x8c>
 8004420:	6823      	ldr	r3, [r4, #0]
 8004422:	1c5a      	adds	r2, r3, #1
 8004424:	6022      	str	r2, [r4, #0]
 8004426:	7019      	strb	r1, [r3, #0]
 8004428:	68a3      	ldr	r3, [r4, #8]
 800442a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800442e:	3b01      	subs	r3, #1
 8004430:	60a3      	str	r3, [r4, #8]
 8004432:	2900      	cmp	r1, #0
 8004434:	d1ed      	bne.n	8004412 <_puts_r+0x52>
 8004436:	2b00      	cmp	r3, #0
 8004438:	da11      	bge.n	800445e <_puts_r+0x9e>
 800443a:	4622      	mov	r2, r4
 800443c:	210a      	movs	r1, #10
 800443e:	4628      	mov	r0, r5
 8004440:	f000 f8b7 	bl	80045b2 <__swbuf_r>
 8004444:	3001      	adds	r0, #1
 8004446:	d0d7      	beq.n	80043f8 <_puts_r+0x38>
 8004448:	250a      	movs	r5, #10
 800444a:	e7d7      	b.n	80043fc <_puts_r+0x3c>
 800444c:	4622      	mov	r2, r4
 800444e:	4628      	mov	r0, r5
 8004450:	f000 f8af 	bl	80045b2 <__swbuf_r>
 8004454:	3001      	adds	r0, #1
 8004456:	d1e7      	bne.n	8004428 <_puts_r+0x68>
 8004458:	e7ce      	b.n	80043f8 <_puts_r+0x38>
 800445a:	3e01      	subs	r6, #1
 800445c:	e7e4      	b.n	8004428 <_puts_r+0x68>
 800445e:	6823      	ldr	r3, [r4, #0]
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	6022      	str	r2, [r4, #0]
 8004464:	220a      	movs	r2, #10
 8004466:	701a      	strb	r2, [r3, #0]
 8004468:	e7ee      	b.n	8004448 <_puts_r+0x88>
	...

0800446c <puts>:
 800446c:	4b02      	ldr	r3, [pc, #8]	@ (8004478 <puts+0xc>)
 800446e:	4601      	mov	r1, r0
 8004470:	6818      	ldr	r0, [r3, #0]
 8004472:	f7ff bfa5 	b.w	80043c0 <_puts_r>
 8004476:	bf00      	nop
 8004478:	20000018 	.word	0x20000018

0800447c <sniprintf>:
 800447c:	b40c      	push	{r2, r3}
 800447e:	b530      	push	{r4, r5, lr}
 8004480:	4b18      	ldr	r3, [pc, #96]	@ (80044e4 <sniprintf+0x68>)
 8004482:	1e0c      	subs	r4, r1, #0
 8004484:	681d      	ldr	r5, [r3, #0]
 8004486:	b09d      	sub	sp, #116	@ 0x74
 8004488:	da08      	bge.n	800449c <sniprintf+0x20>
 800448a:	238b      	movs	r3, #139	@ 0x8b
 800448c:	602b      	str	r3, [r5, #0]
 800448e:	f04f 30ff 	mov.w	r0, #4294967295
 8004492:	b01d      	add	sp, #116	@ 0x74
 8004494:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004498:	b002      	add	sp, #8
 800449a:	4770      	bx	lr
 800449c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 80044a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 80044a4:	f04f 0300 	mov.w	r3, #0
 80044a8:	931b      	str	r3, [sp, #108]	@ 0x6c
 80044aa:	bf14      	ite	ne
 80044ac:	f104 33ff 	addne.w	r3, r4, #4294967295
 80044b0:	4623      	moveq	r3, r4
 80044b2:	9304      	str	r3, [sp, #16]
 80044b4:	9307      	str	r3, [sp, #28]
 80044b6:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80044ba:	9002      	str	r0, [sp, #8]
 80044bc:	9006      	str	r0, [sp, #24]
 80044be:	f8ad 3016 	strh.w	r3, [sp, #22]
 80044c2:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 80044c4:	ab21      	add	r3, sp, #132	@ 0x84
 80044c6:	a902      	add	r1, sp, #8
 80044c8:	4628      	mov	r0, r5
 80044ca:	9301      	str	r3, [sp, #4]
 80044cc:	f000 fae4 	bl	8004a98 <_svfiprintf_r>
 80044d0:	1c43      	adds	r3, r0, #1
 80044d2:	bfbc      	itt	lt
 80044d4:	238b      	movlt	r3, #139	@ 0x8b
 80044d6:	602b      	strlt	r3, [r5, #0]
 80044d8:	2c00      	cmp	r4, #0
 80044da:	d0da      	beq.n	8004492 <sniprintf+0x16>
 80044dc:	9b02      	ldr	r3, [sp, #8]
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
 80044e2:	e7d6      	b.n	8004492 <sniprintf+0x16>
 80044e4:	20000018 	.word	0x20000018

080044e8 <siprintf>:
 80044e8:	b40e      	push	{r1, r2, r3}
 80044ea:	b510      	push	{r4, lr}
 80044ec:	b09d      	sub	sp, #116	@ 0x74
 80044ee:	ab1f      	add	r3, sp, #124	@ 0x7c
 80044f0:	9002      	str	r0, [sp, #8]
 80044f2:	9006      	str	r0, [sp, #24]
 80044f4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 80044f8:	480a      	ldr	r0, [pc, #40]	@ (8004524 <siprintf+0x3c>)
 80044fa:	9107      	str	r1, [sp, #28]
 80044fc:	9104      	str	r1, [sp, #16]
 80044fe:	490a      	ldr	r1, [pc, #40]	@ (8004528 <siprintf+0x40>)
 8004500:	f853 2b04 	ldr.w	r2, [r3], #4
 8004504:	9105      	str	r1, [sp, #20]
 8004506:	2400      	movs	r4, #0
 8004508:	a902      	add	r1, sp, #8
 800450a:	6800      	ldr	r0, [r0, #0]
 800450c:	9301      	str	r3, [sp, #4]
 800450e:	941b      	str	r4, [sp, #108]	@ 0x6c
 8004510:	f000 fac2 	bl	8004a98 <_svfiprintf_r>
 8004514:	9b02      	ldr	r3, [sp, #8]
 8004516:	701c      	strb	r4, [r3, #0]
 8004518:	b01d      	add	sp, #116	@ 0x74
 800451a:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800451e:	b003      	add	sp, #12
 8004520:	4770      	bx	lr
 8004522:	bf00      	nop
 8004524:	20000018 	.word	0x20000018
 8004528:	ffff0208 	.word	0xffff0208

0800452c <__sread>:
 800452c:	b510      	push	{r4, lr}
 800452e:	460c      	mov	r4, r1
 8004530:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004534:	f000 f8fc 	bl	8004730 <_read_r>
 8004538:	2800      	cmp	r0, #0
 800453a:	bfab      	itete	ge
 800453c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800453e:	89a3      	ldrhlt	r3, [r4, #12]
 8004540:	181b      	addge	r3, r3, r0
 8004542:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8004546:	bfac      	ite	ge
 8004548:	6563      	strge	r3, [r4, #84]	@ 0x54
 800454a:	81a3      	strhlt	r3, [r4, #12]
 800454c:	bd10      	pop	{r4, pc}

0800454e <__swrite>:
 800454e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004552:	461f      	mov	r7, r3
 8004554:	898b      	ldrh	r3, [r1, #12]
 8004556:	05db      	lsls	r3, r3, #23
 8004558:	4605      	mov	r5, r0
 800455a:	460c      	mov	r4, r1
 800455c:	4616      	mov	r6, r2
 800455e:	d505      	bpl.n	800456c <__swrite+0x1e>
 8004560:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004564:	2302      	movs	r3, #2
 8004566:	2200      	movs	r2, #0
 8004568:	f000 f8d0 	bl	800470c <_lseek_r>
 800456c:	89a3      	ldrh	r3, [r4, #12]
 800456e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004572:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004576:	81a3      	strh	r3, [r4, #12]
 8004578:	4632      	mov	r2, r6
 800457a:	463b      	mov	r3, r7
 800457c:	4628      	mov	r0, r5
 800457e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004582:	f000 b8e7 	b.w	8004754 <_write_r>

08004586 <__sseek>:
 8004586:	b510      	push	{r4, lr}
 8004588:	460c      	mov	r4, r1
 800458a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800458e:	f000 f8bd 	bl	800470c <_lseek_r>
 8004592:	1c43      	adds	r3, r0, #1
 8004594:	89a3      	ldrh	r3, [r4, #12]
 8004596:	bf15      	itete	ne
 8004598:	6560      	strne	r0, [r4, #84]	@ 0x54
 800459a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800459e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80045a2:	81a3      	strheq	r3, [r4, #12]
 80045a4:	bf18      	it	ne
 80045a6:	81a3      	strhne	r3, [r4, #12]
 80045a8:	bd10      	pop	{r4, pc}

080045aa <__sclose>:
 80045aa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80045ae:	f000 b89d 	b.w	80046ec <_close_r>

080045b2 <__swbuf_r>:
 80045b2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045b4:	460e      	mov	r6, r1
 80045b6:	4614      	mov	r4, r2
 80045b8:	4605      	mov	r5, r0
 80045ba:	b118      	cbz	r0, 80045c4 <__swbuf_r+0x12>
 80045bc:	6a03      	ldr	r3, [r0, #32]
 80045be:	b90b      	cbnz	r3, 80045c4 <__swbuf_r+0x12>
 80045c0:	f7ff feb6 	bl	8004330 <__sinit>
 80045c4:	69a3      	ldr	r3, [r4, #24]
 80045c6:	60a3      	str	r3, [r4, #8]
 80045c8:	89a3      	ldrh	r3, [r4, #12]
 80045ca:	071a      	lsls	r2, r3, #28
 80045cc:	d501      	bpl.n	80045d2 <__swbuf_r+0x20>
 80045ce:	6923      	ldr	r3, [r4, #16]
 80045d0:	b943      	cbnz	r3, 80045e4 <__swbuf_r+0x32>
 80045d2:	4621      	mov	r1, r4
 80045d4:	4628      	mov	r0, r5
 80045d6:	f000 f82b 	bl	8004630 <__swsetup_r>
 80045da:	b118      	cbz	r0, 80045e4 <__swbuf_r+0x32>
 80045dc:	f04f 37ff 	mov.w	r7, #4294967295
 80045e0:	4638      	mov	r0, r7
 80045e2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045e4:	6823      	ldr	r3, [r4, #0]
 80045e6:	6922      	ldr	r2, [r4, #16]
 80045e8:	1a98      	subs	r0, r3, r2
 80045ea:	6963      	ldr	r3, [r4, #20]
 80045ec:	b2f6      	uxtb	r6, r6
 80045ee:	4283      	cmp	r3, r0
 80045f0:	4637      	mov	r7, r6
 80045f2:	dc05      	bgt.n	8004600 <__swbuf_r+0x4e>
 80045f4:	4621      	mov	r1, r4
 80045f6:	4628      	mov	r0, r5
 80045f8:	f000 fe9c 	bl	8005334 <_fflush_r>
 80045fc:	2800      	cmp	r0, #0
 80045fe:	d1ed      	bne.n	80045dc <__swbuf_r+0x2a>
 8004600:	68a3      	ldr	r3, [r4, #8]
 8004602:	3b01      	subs	r3, #1
 8004604:	60a3      	str	r3, [r4, #8]
 8004606:	6823      	ldr	r3, [r4, #0]
 8004608:	1c5a      	adds	r2, r3, #1
 800460a:	6022      	str	r2, [r4, #0]
 800460c:	701e      	strb	r6, [r3, #0]
 800460e:	6962      	ldr	r2, [r4, #20]
 8004610:	1c43      	adds	r3, r0, #1
 8004612:	429a      	cmp	r2, r3
 8004614:	d004      	beq.n	8004620 <__swbuf_r+0x6e>
 8004616:	89a3      	ldrh	r3, [r4, #12]
 8004618:	07db      	lsls	r3, r3, #31
 800461a:	d5e1      	bpl.n	80045e0 <__swbuf_r+0x2e>
 800461c:	2e0a      	cmp	r6, #10
 800461e:	d1df      	bne.n	80045e0 <__swbuf_r+0x2e>
 8004620:	4621      	mov	r1, r4
 8004622:	4628      	mov	r0, r5
 8004624:	f000 fe86 	bl	8005334 <_fflush_r>
 8004628:	2800      	cmp	r0, #0
 800462a:	d0d9      	beq.n	80045e0 <__swbuf_r+0x2e>
 800462c:	e7d6      	b.n	80045dc <__swbuf_r+0x2a>
	...

08004630 <__swsetup_r>:
 8004630:	b538      	push	{r3, r4, r5, lr}
 8004632:	4b29      	ldr	r3, [pc, #164]	@ (80046d8 <__swsetup_r+0xa8>)
 8004634:	4605      	mov	r5, r0
 8004636:	6818      	ldr	r0, [r3, #0]
 8004638:	460c      	mov	r4, r1
 800463a:	b118      	cbz	r0, 8004644 <__swsetup_r+0x14>
 800463c:	6a03      	ldr	r3, [r0, #32]
 800463e:	b90b      	cbnz	r3, 8004644 <__swsetup_r+0x14>
 8004640:	f7ff fe76 	bl	8004330 <__sinit>
 8004644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004648:	0719      	lsls	r1, r3, #28
 800464a:	d422      	bmi.n	8004692 <__swsetup_r+0x62>
 800464c:	06da      	lsls	r2, r3, #27
 800464e:	d407      	bmi.n	8004660 <__swsetup_r+0x30>
 8004650:	2209      	movs	r2, #9
 8004652:	602a      	str	r2, [r5, #0]
 8004654:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004658:	81a3      	strh	r3, [r4, #12]
 800465a:	f04f 30ff 	mov.w	r0, #4294967295
 800465e:	e033      	b.n	80046c8 <__swsetup_r+0x98>
 8004660:	0758      	lsls	r0, r3, #29
 8004662:	d512      	bpl.n	800468a <__swsetup_r+0x5a>
 8004664:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004666:	b141      	cbz	r1, 800467a <__swsetup_r+0x4a>
 8004668:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800466c:	4299      	cmp	r1, r3
 800466e:	d002      	beq.n	8004676 <__swsetup_r+0x46>
 8004670:	4628      	mov	r0, r5
 8004672:	f000 f8bd 	bl	80047f0 <_free_r>
 8004676:	2300      	movs	r3, #0
 8004678:	6363      	str	r3, [r4, #52]	@ 0x34
 800467a:	89a3      	ldrh	r3, [r4, #12]
 800467c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004680:	81a3      	strh	r3, [r4, #12]
 8004682:	2300      	movs	r3, #0
 8004684:	6063      	str	r3, [r4, #4]
 8004686:	6923      	ldr	r3, [r4, #16]
 8004688:	6023      	str	r3, [r4, #0]
 800468a:	89a3      	ldrh	r3, [r4, #12]
 800468c:	f043 0308 	orr.w	r3, r3, #8
 8004690:	81a3      	strh	r3, [r4, #12]
 8004692:	6923      	ldr	r3, [r4, #16]
 8004694:	b94b      	cbnz	r3, 80046aa <__swsetup_r+0x7a>
 8004696:	89a3      	ldrh	r3, [r4, #12]
 8004698:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800469c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80046a0:	d003      	beq.n	80046aa <__swsetup_r+0x7a>
 80046a2:	4621      	mov	r1, r4
 80046a4:	4628      	mov	r0, r5
 80046a6:	f000 fe93 	bl	80053d0 <__smakebuf_r>
 80046aa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80046ae:	f013 0201 	ands.w	r2, r3, #1
 80046b2:	d00a      	beq.n	80046ca <__swsetup_r+0x9a>
 80046b4:	2200      	movs	r2, #0
 80046b6:	60a2      	str	r2, [r4, #8]
 80046b8:	6962      	ldr	r2, [r4, #20]
 80046ba:	4252      	negs	r2, r2
 80046bc:	61a2      	str	r2, [r4, #24]
 80046be:	6922      	ldr	r2, [r4, #16]
 80046c0:	b942      	cbnz	r2, 80046d4 <__swsetup_r+0xa4>
 80046c2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80046c6:	d1c5      	bne.n	8004654 <__swsetup_r+0x24>
 80046c8:	bd38      	pop	{r3, r4, r5, pc}
 80046ca:	0799      	lsls	r1, r3, #30
 80046cc:	bf58      	it	pl
 80046ce:	6962      	ldrpl	r2, [r4, #20]
 80046d0:	60a2      	str	r2, [r4, #8]
 80046d2:	e7f4      	b.n	80046be <__swsetup_r+0x8e>
 80046d4:	2000      	movs	r0, #0
 80046d6:	e7f7      	b.n	80046c8 <__swsetup_r+0x98>
 80046d8:	20000018 	.word	0x20000018

080046dc <memset>:
 80046dc:	4402      	add	r2, r0
 80046de:	4603      	mov	r3, r0
 80046e0:	4293      	cmp	r3, r2
 80046e2:	d100      	bne.n	80046e6 <memset+0xa>
 80046e4:	4770      	bx	lr
 80046e6:	f803 1b01 	strb.w	r1, [r3], #1
 80046ea:	e7f9      	b.n	80046e0 <memset+0x4>

080046ec <_close_r>:
 80046ec:	b538      	push	{r3, r4, r5, lr}
 80046ee:	4d06      	ldr	r5, [pc, #24]	@ (8004708 <_close_r+0x1c>)
 80046f0:	2300      	movs	r3, #0
 80046f2:	4604      	mov	r4, r0
 80046f4:	4608      	mov	r0, r1
 80046f6:	602b      	str	r3, [r5, #0]
 80046f8:	f7fc fed7 	bl	80014aa <_close>
 80046fc:	1c43      	adds	r3, r0, #1
 80046fe:	d102      	bne.n	8004706 <_close_r+0x1a>
 8004700:	682b      	ldr	r3, [r5, #0]
 8004702:	b103      	cbz	r3, 8004706 <_close_r+0x1a>
 8004704:	6023      	str	r3, [r4, #0]
 8004706:	bd38      	pop	{r3, r4, r5, pc}
 8004708:	200005e4 	.word	0x200005e4

0800470c <_lseek_r>:
 800470c:	b538      	push	{r3, r4, r5, lr}
 800470e:	4d07      	ldr	r5, [pc, #28]	@ (800472c <_lseek_r+0x20>)
 8004710:	4604      	mov	r4, r0
 8004712:	4608      	mov	r0, r1
 8004714:	4611      	mov	r1, r2
 8004716:	2200      	movs	r2, #0
 8004718:	602a      	str	r2, [r5, #0]
 800471a:	461a      	mov	r2, r3
 800471c:	f7fc feec 	bl	80014f8 <_lseek>
 8004720:	1c43      	adds	r3, r0, #1
 8004722:	d102      	bne.n	800472a <_lseek_r+0x1e>
 8004724:	682b      	ldr	r3, [r5, #0]
 8004726:	b103      	cbz	r3, 800472a <_lseek_r+0x1e>
 8004728:	6023      	str	r3, [r4, #0]
 800472a:	bd38      	pop	{r3, r4, r5, pc}
 800472c:	200005e4 	.word	0x200005e4

08004730 <_read_r>:
 8004730:	b538      	push	{r3, r4, r5, lr}
 8004732:	4d07      	ldr	r5, [pc, #28]	@ (8004750 <_read_r+0x20>)
 8004734:	4604      	mov	r4, r0
 8004736:	4608      	mov	r0, r1
 8004738:	4611      	mov	r1, r2
 800473a:	2200      	movs	r2, #0
 800473c:	602a      	str	r2, [r5, #0]
 800473e:	461a      	mov	r2, r3
 8004740:	f7fc fe96 	bl	8001470 <_read>
 8004744:	1c43      	adds	r3, r0, #1
 8004746:	d102      	bne.n	800474e <_read_r+0x1e>
 8004748:	682b      	ldr	r3, [r5, #0]
 800474a:	b103      	cbz	r3, 800474e <_read_r+0x1e>
 800474c:	6023      	str	r3, [r4, #0]
 800474e:	bd38      	pop	{r3, r4, r5, pc}
 8004750:	200005e4 	.word	0x200005e4

08004754 <_write_r>:
 8004754:	b538      	push	{r3, r4, r5, lr}
 8004756:	4d07      	ldr	r5, [pc, #28]	@ (8004774 <_write_r+0x20>)
 8004758:	4604      	mov	r4, r0
 800475a:	4608      	mov	r0, r1
 800475c:	4611      	mov	r1, r2
 800475e:	2200      	movs	r2, #0
 8004760:	602a      	str	r2, [r5, #0]
 8004762:	461a      	mov	r2, r3
 8004764:	f7fc fba0 	bl	8000ea8 <_write>
 8004768:	1c43      	adds	r3, r0, #1
 800476a:	d102      	bne.n	8004772 <_write_r+0x1e>
 800476c:	682b      	ldr	r3, [r5, #0]
 800476e:	b103      	cbz	r3, 8004772 <_write_r+0x1e>
 8004770:	6023      	str	r3, [r4, #0]
 8004772:	bd38      	pop	{r3, r4, r5, pc}
 8004774:	200005e4 	.word	0x200005e4

08004778 <__errno>:
 8004778:	4b01      	ldr	r3, [pc, #4]	@ (8004780 <__errno+0x8>)
 800477a:	6818      	ldr	r0, [r3, #0]
 800477c:	4770      	bx	lr
 800477e:	bf00      	nop
 8004780:	20000018 	.word	0x20000018

08004784 <__libc_init_array>:
 8004784:	b570      	push	{r4, r5, r6, lr}
 8004786:	4d0d      	ldr	r5, [pc, #52]	@ (80047bc <__libc_init_array+0x38>)
 8004788:	4c0d      	ldr	r4, [pc, #52]	@ (80047c0 <__libc_init_array+0x3c>)
 800478a:	1b64      	subs	r4, r4, r5
 800478c:	10a4      	asrs	r4, r4, #2
 800478e:	2600      	movs	r6, #0
 8004790:	42a6      	cmp	r6, r4
 8004792:	d109      	bne.n	80047a8 <__libc_init_array+0x24>
 8004794:	4d0b      	ldr	r5, [pc, #44]	@ (80047c4 <__libc_init_array+0x40>)
 8004796:	4c0c      	ldr	r4, [pc, #48]	@ (80047c8 <__libc_init_array+0x44>)
 8004798:	f000 fed8 	bl	800554c <_init>
 800479c:	1b64      	subs	r4, r4, r5
 800479e:	10a4      	asrs	r4, r4, #2
 80047a0:	2600      	movs	r6, #0
 80047a2:	42a6      	cmp	r6, r4
 80047a4:	d105      	bne.n	80047b2 <__libc_init_array+0x2e>
 80047a6:	bd70      	pop	{r4, r5, r6, pc}
 80047a8:	f855 3b04 	ldr.w	r3, [r5], #4
 80047ac:	4798      	blx	r3
 80047ae:	3601      	adds	r6, #1
 80047b0:	e7ee      	b.n	8004790 <__libc_init_array+0xc>
 80047b2:	f855 3b04 	ldr.w	r3, [r5], #4
 80047b6:	4798      	blx	r3
 80047b8:	3601      	adds	r6, #1
 80047ba:	e7f2      	b.n	80047a2 <__libc_init_array+0x1e>
 80047bc:	08005684 	.word	0x08005684
 80047c0:	08005684 	.word	0x08005684
 80047c4:	08005684 	.word	0x08005684
 80047c8:	08005688 	.word	0x08005688

080047cc <__retarget_lock_init_recursive>:
 80047cc:	4770      	bx	lr

080047ce <__retarget_lock_acquire_recursive>:
 80047ce:	4770      	bx	lr

080047d0 <__retarget_lock_release_recursive>:
 80047d0:	4770      	bx	lr

080047d2 <memcpy>:
 80047d2:	440a      	add	r2, r1
 80047d4:	4291      	cmp	r1, r2
 80047d6:	f100 33ff 	add.w	r3, r0, #4294967295
 80047da:	d100      	bne.n	80047de <memcpy+0xc>
 80047dc:	4770      	bx	lr
 80047de:	b510      	push	{r4, lr}
 80047e0:	f811 4b01 	ldrb.w	r4, [r1], #1
 80047e4:	f803 4f01 	strb.w	r4, [r3, #1]!
 80047e8:	4291      	cmp	r1, r2
 80047ea:	d1f9      	bne.n	80047e0 <memcpy+0xe>
 80047ec:	bd10      	pop	{r4, pc}
	...

080047f0 <_free_r>:
 80047f0:	b538      	push	{r3, r4, r5, lr}
 80047f2:	4605      	mov	r5, r0
 80047f4:	2900      	cmp	r1, #0
 80047f6:	d041      	beq.n	800487c <_free_r+0x8c>
 80047f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047fc:	1f0c      	subs	r4, r1, #4
 80047fe:	2b00      	cmp	r3, #0
 8004800:	bfb8      	it	lt
 8004802:	18e4      	addlt	r4, r4, r3
 8004804:	f000 f8e0 	bl	80049c8 <__malloc_lock>
 8004808:	4a1d      	ldr	r2, [pc, #116]	@ (8004880 <_free_r+0x90>)
 800480a:	6813      	ldr	r3, [r2, #0]
 800480c:	b933      	cbnz	r3, 800481c <_free_r+0x2c>
 800480e:	6063      	str	r3, [r4, #4]
 8004810:	6014      	str	r4, [r2, #0]
 8004812:	4628      	mov	r0, r5
 8004814:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004818:	f000 b8dc 	b.w	80049d4 <__malloc_unlock>
 800481c:	42a3      	cmp	r3, r4
 800481e:	d908      	bls.n	8004832 <_free_r+0x42>
 8004820:	6820      	ldr	r0, [r4, #0]
 8004822:	1821      	adds	r1, r4, r0
 8004824:	428b      	cmp	r3, r1
 8004826:	bf01      	itttt	eq
 8004828:	6819      	ldreq	r1, [r3, #0]
 800482a:	685b      	ldreq	r3, [r3, #4]
 800482c:	1809      	addeq	r1, r1, r0
 800482e:	6021      	streq	r1, [r4, #0]
 8004830:	e7ed      	b.n	800480e <_free_r+0x1e>
 8004832:	461a      	mov	r2, r3
 8004834:	685b      	ldr	r3, [r3, #4]
 8004836:	b10b      	cbz	r3, 800483c <_free_r+0x4c>
 8004838:	42a3      	cmp	r3, r4
 800483a:	d9fa      	bls.n	8004832 <_free_r+0x42>
 800483c:	6811      	ldr	r1, [r2, #0]
 800483e:	1850      	adds	r0, r2, r1
 8004840:	42a0      	cmp	r0, r4
 8004842:	d10b      	bne.n	800485c <_free_r+0x6c>
 8004844:	6820      	ldr	r0, [r4, #0]
 8004846:	4401      	add	r1, r0
 8004848:	1850      	adds	r0, r2, r1
 800484a:	4283      	cmp	r3, r0
 800484c:	6011      	str	r1, [r2, #0]
 800484e:	d1e0      	bne.n	8004812 <_free_r+0x22>
 8004850:	6818      	ldr	r0, [r3, #0]
 8004852:	685b      	ldr	r3, [r3, #4]
 8004854:	6053      	str	r3, [r2, #4]
 8004856:	4408      	add	r0, r1
 8004858:	6010      	str	r0, [r2, #0]
 800485a:	e7da      	b.n	8004812 <_free_r+0x22>
 800485c:	d902      	bls.n	8004864 <_free_r+0x74>
 800485e:	230c      	movs	r3, #12
 8004860:	602b      	str	r3, [r5, #0]
 8004862:	e7d6      	b.n	8004812 <_free_r+0x22>
 8004864:	6820      	ldr	r0, [r4, #0]
 8004866:	1821      	adds	r1, r4, r0
 8004868:	428b      	cmp	r3, r1
 800486a:	bf04      	itt	eq
 800486c:	6819      	ldreq	r1, [r3, #0]
 800486e:	685b      	ldreq	r3, [r3, #4]
 8004870:	6063      	str	r3, [r4, #4]
 8004872:	bf04      	itt	eq
 8004874:	1809      	addeq	r1, r1, r0
 8004876:	6021      	streq	r1, [r4, #0]
 8004878:	6054      	str	r4, [r2, #4]
 800487a:	e7ca      	b.n	8004812 <_free_r+0x22>
 800487c:	bd38      	pop	{r3, r4, r5, pc}
 800487e:	bf00      	nop
 8004880:	200005f0 	.word	0x200005f0

08004884 <sbrk_aligned>:
 8004884:	b570      	push	{r4, r5, r6, lr}
 8004886:	4e0f      	ldr	r6, [pc, #60]	@ (80048c4 <sbrk_aligned+0x40>)
 8004888:	460c      	mov	r4, r1
 800488a:	6831      	ldr	r1, [r6, #0]
 800488c:	4605      	mov	r5, r0
 800488e:	b911      	cbnz	r1, 8004896 <sbrk_aligned+0x12>
 8004890:	f000 fe16 	bl	80054c0 <_sbrk_r>
 8004894:	6030      	str	r0, [r6, #0]
 8004896:	4621      	mov	r1, r4
 8004898:	4628      	mov	r0, r5
 800489a:	f000 fe11 	bl	80054c0 <_sbrk_r>
 800489e:	1c43      	adds	r3, r0, #1
 80048a0:	d103      	bne.n	80048aa <sbrk_aligned+0x26>
 80048a2:	f04f 34ff 	mov.w	r4, #4294967295
 80048a6:	4620      	mov	r0, r4
 80048a8:	bd70      	pop	{r4, r5, r6, pc}
 80048aa:	1cc4      	adds	r4, r0, #3
 80048ac:	f024 0403 	bic.w	r4, r4, #3
 80048b0:	42a0      	cmp	r0, r4
 80048b2:	d0f8      	beq.n	80048a6 <sbrk_aligned+0x22>
 80048b4:	1a21      	subs	r1, r4, r0
 80048b6:	4628      	mov	r0, r5
 80048b8:	f000 fe02 	bl	80054c0 <_sbrk_r>
 80048bc:	3001      	adds	r0, #1
 80048be:	d1f2      	bne.n	80048a6 <sbrk_aligned+0x22>
 80048c0:	e7ef      	b.n	80048a2 <sbrk_aligned+0x1e>
 80048c2:	bf00      	nop
 80048c4:	200005ec 	.word	0x200005ec

080048c8 <_malloc_r>:
 80048c8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80048cc:	1ccd      	adds	r5, r1, #3
 80048ce:	f025 0503 	bic.w	r5, r5, #3
 80048d2:	3508      	adds	r5, #8
 80048d4:	2d0c      	cmp	r5, #12
 80048d6:	bf38      	it	cc
 80048d8:	250c      	movcc	r5, #12
 80048da:	2d00      	cmp	r5, #0
 80048dc:	4606      	mov	r6, r0
 80048de:	db01      	blt.n	80048e4 <_malloc_r+0x1c>
 80048e0:	42a9      	cmp	r1, r5
 80048e2:	d904      	bls.n	80048ee <_malloc_r+0x26>
 80048e4:	230c      	movs	r3, #12
 80048e6:	6033      	str	r3, [r6, #0]
 80048e8:	2000      	movs	r0, #0
 80048ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80048ee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80049c4 <_malloc_r+0xfc>
 80048f2:	f000 f869 	bl	80049c8 <__malloc_lock>
 80048f6:	f8d8 3000 	ldr.w	r3, [r8]
 80048fa:	461c      	mov	r4, r3
 80048fc:	bb44      	cbnz	r4, 8004950 <_malloc_r+0x88>
 80048fe:	4629      	mov	r1, r5
 8004900:	4630      	mov	r0, r6
 8004902:	f7ff ffbf 	bl	8004884 <sbrk_aligned>
 8004906:	1c43      	adds	r3, r0, #1
 8004908:	4604      	mov	r4, r0
 800490a:	d158      	bne.n	80049be <_malloc_r+0xf6>
 800490c:	f8d8 4000 	ldr.w	r4, [r8]
 8004910:	4627      	mov	r7, r4
 8004912:	2f00      	cmp	r7, #0
 8004914:	d143      	bne.n	800499e <_malloc_r+0xd6>
 8004916:	2c00      	cmp	r4, #0
 8004918:	d04b      	beq.n	80049b2 <_malloc_r+0xea>
 800491a:	6823      	ldr	r3, [r4, #0]
 800491c:	4639      	mov	r1, r7
 800491e:	4630      	mov	r0, r6
 8004920:	eb04 0903 	add.w	r9, r4, r3
 8004924:	f000 fdcc 	bl	80054c0 <_sbrk_r>
 8004928:	4581      	cmp	r9, r0
 800492a:	d142      	bne.n	80049b2 <_malloc_r+0xea>
 800492c:	6821      	ldr	r1, [r4, #0]
 800492e:	1a6d      	subs	r5, r5, r1
 8004930:	4629      	mov	r1, r5
 8004932:	4630      	mov	r0, r6
 8004934:	f7ff ffa6 	bl	8004884 <sbrk_aligned>
 8004938:	3001      	adds	r0, #1
 800493a:	d03a      	beq.n	80049b2 <_malloc_r+0xea>
 800493c:	6823      	ldr	r3, [r4, #0]
 800493e:	442b      	add	r3, r5
 8004940:	6023      	str	r3, [r4, #0]
 8004942:	f8d8 3000 	ldr.w	r3, [r8]
 8004946:	685a      	ldr	r2, [r3, #4]
 8004948:	bb62      	cbnz	r2, 80049a4 <_malloc_r+0xdc>
 800494a:	f8c8 7000 	str.w	r7, [r8]
 800494e:	e00f      	b.n	8004970 <_malloc_r+0xa8>
 8004950:	6822      	ldr	r2, [r4, #0]
 8004952:	1b52      	subs	r2, r2, r5
 8004954:	d420      	bmi.n	8004998 <_malloc_r+0xd0>
 8004956:	2a0b      	cmp	r2, #11
 8004958:	d917      	bls.n	800498a <_malloc_r+0xc2>
 800495a:	1961      	adds	r1, r4, r5
 800495c:	42a3      	cmp	r3, r4
 800495e:	6025      	str	r5, [r4, #0]
 8004960:	bf18      	it	ne
 8004962:	6059      	strne	r1, [r3, #4]
 8004964:	6863      	ldr	r3, [r4, #4]
 8004966:	bf08      	it	eq
 8004968:	f8c8 1000 	streq.w	r1, [r8]
 800496c:	5162      	str	r2, [r4, r5]
 800496e:	604b      	str	r3, [r1, #4]
 8004970:	4630      	mov	r0, r6
 8004972:	f000 f82f 	bl	80049d4 <__malloc_unlock>
 8004976:	f104 000b 	add.w	r0, r4, #11
 800497a:	1d23      	adds	r3, r4, #4
 800497c:	f020 0007 	bic.w	r0, r0, #7
 8004980:	1ac2      	subs	r2, r0, r3
 8004982:	bf1c      	itt	ne
 8004984:	1a1b      	subne	r3, r3, r0
 8004986:	50a3      	strne	r3, [r4, r2]
 8004988:	e7af      	b.n	80048ea <_malloc_r+0x22>
 800498a:	6862      	ldr	r2, [r4, #4]
 800498c:	42a3      	cmp	r3, r4
 800498e:	bf0c      	ite	eq
 8004990:	f8c8 2000 	streq.w	r2, [r8]
 8004994:	605a      	strne	r2, [r3, #4]
 8004996:	e7eb      	b.n	8004970 <_malloc_r+0xa8>
 8004998:	4623      	mov	r3, r4
 800499a:	6864      	ldr	r4, [r4, #4]
 800499c:	e7ae      	b.n	80048fc <_malloc_r+0x34>
 800499e:	463c      	mov	r4, r7
 80049a0:	687f      	ldr	r7, [r7, #4]
 80049a2:	e7b6      	b.n	8004912 <_malloc_r+0x4a>
 80049a4:	461a      	mov	r2, r3
 80049a6:	685b      	ldr	r3, [r3, #4]
 80049a8:	42a3      	cmp	r3, r4
 80049aa:	d1fb      	bne.n	80049a4 <_malloc_r+0xdc>
 80049ac:	2300      	movs	r3, #0
 80049ae:	6053      	str	r3, [r2, #4]
 80049b0:	e7de      	b.n	8004970 <_malloc_r+0xa8>
 80049b2:	230c      	movs	r3, #12
 80049b4:	6033      	str	r3, [r6, #0]
 80049b6:	4630      	mov	r0, r6
 80049b8:	f000 f80c 	bl	80049d4 <__malloc_unlock>
 80049bc:	e794      	b.n	80048e8 <_malloc_r+0x20>
 80049be:	6005      	str	r5, [r0, #0]
 80049c0:	e7d6      	b.n	8004970 <_malloc_r+0xa8>
 80049c2:	bf00      	nop
 80049c4:	200005f0 	.word	0x200005f0

080049c8 <__malloc_lock>:
 80049c8:	4801      	ldr	r0, [pc, #4]	@ (80049d0 <__malloc_lock+0x8>)
 80049ca:	f7ff bf00 	b.w	80047ce <__retarget_lock_acquire_recursive>
 80049ce:	bf00      	nop
 80049d0:	200005e8 	.word	0x200005e8

080049d4 <__malloc_unlock>:
 80049d4:	4801      	ldr	r0, [pc, #4]	@ (80049dc <__malloc_unlock+0x8>)
 80049d6:	f7ff befb 	b.w	80047d0 <__retarget_lock_release_recursive>
 80049da:	bf00      	nop
 80049dc:	200005e8 	.word	0x200005e8

080049e0 <__ssputs_r>:
 80049e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80049e4:	688e      	ldr	r6, [r1, #8]
 80049e6:	461f      	mov	r7, r3
 80049e8:	42be      	cmp	r6, r7
 80049ea:	680b      	ldr	r3, [r1, #0]
 80049ec:	4682      	mov	sl, r0
 80049ee:	460c      	mov	r4, r1
 80049f0:	4690      	mov	r8, r2
 80049f2:	d82d      	bhi.n	8004a50 <__ssputs_r+0x70>
 80049f4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80049f8:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 80049fc:	d026      	beq.n	8004a4c <__ssputs_r+0x6c>
 80049fe:	6965      	ldr	r5, [r4, #20]
 8004a00:	6909      	ldr	r1, [r1, #16]
 8004a02:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8004a06:	eba3 0901 	sub.w	r9, r3, r1
 8004a0a:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004a0e:	1c7b      	adds	r3, r7, #1
 8004a10:	444b      	add	r3, r9
 8004a12:	106d      	asrs	r5, r5, #1
 8004a14:	429d      	cmp	r5, r3
 8004a16:	bf38      	it	cc
 8004a18:	461d      	movcc	r5, r3
 8004a1a:	0553      	lsls	r3, r2, #21
 8004a1c:	d527      	bpl.n	8004a6e <__ssputs_r+0x8e>
 8004a1e:	4629      	mov	r1, r5
 8004a20:	f7ff ff52 	bl	80048c8 <_malloc_r>
 8004a24:	4606      	mov	r6, r0
 8004a26:	b360      	cbz	r0, 8004a82 <__ssputs_r+0xa2>
 8004a28:	6921      	ldr	r1, [r4, #16]
 8004a2a:	464a      	mov	r2, r9
 8004a2c:	f7ff fed1 	bl	80047d2 <memcpy>
 8004a30:	89a3      	ldrh	r3, [r4, #12]
 8004a32:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8004a36:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004a3a:	81a3      	strh	r3, [r4, #12]
 8004a3c:	6126      	str	r6, [r4, #16]
 8004a3e:	6165      	str	r5, [r4, #20]
 8004a40:	444e      	add	r6, r9
 8004a42:	eba5 0509 	sub.w	r5, r5, r9
 8004a46:	6026      	str	r6, [r4, #0]
 8004a48:	60a5      	str	r5, [r4, #8]
 8004a4a:	463e      	mov	r6, r7
 8004a4c:	42be      	cmp	r6, r7
 8004a4e:	d900      	bls.n	8004a52 <__ssputs_r+0x72>
 8004a50:	463e      	mov	r6, r7
 8004a52:	6820      	ldr	r0, [r4, #0]
 8004a54:	4632      	mov	r2, r6
 8004a56:	4641      	mov	r1, r8
 8004a58:	f000 fcf6 	bl	8005448 <memmove>
 8004a5c:	68a3      	ldr	r3, [r4, #8]
 8004a5e:	1b9b      	subs	r3, r3, r6
 8004a60:	60a3      	str	r3, [r4, #8]
 8004a62:	6823      	ldr	r3, [r4, #0]
 8004a64:	4433      	add	r3, r6
 8004a66:	6023      	str	r3, [r4, #0]
 8004a68:	2000      	movs	r0, #0
 8004a6a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004a6e:	462a      	mov	r2, r5
 8004a70:	f000 fd36 	bl	80054e0 <_realloc_r>
 8004a74:	4606      	mov	r6, r0
 8004a76:	2800      	cmp	r0, #0
 8004a78:	d1e0      	bne.n	8004a3c <__ssputs_r+0x5c>
 8004a7a:	6921      	ldr	r1, [r4, #16]
 8004a7c:	4650      	mov	r0, sl
 8004a7e:	f7ff feb7 	bl	80047f0 <_free_r>
 8004a82:	230c      	movs	r3, #12
 8004a84:	f8ca 3000 	str.w	r3, [sl]
 8004a88:	89a3      	ldrh	r3, [r4, #12]
 8004a8a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004a8e:	81a3      	strh	r3, [r4, #12]
 8004a90:	f04f 30ff 	mov.w	r0, #4294967295
 8004a94:	e7e9      	b.n	8004a6a <__ssputs_r+0x8a>
	...

08004a98 <_svfiprintf_r>:
 8004a98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a9c:	4698      	mov	r8, r3
 8004a9e:	898b      	ldrh	r3, [r1, #12]
 8004aa0:	061b      	lsls	r3, r3, #24
 8004aa2:	b09d      	sub	sp, #116	@ 0x74
 8004aa4:	4607      	mov	r7, r0
 8004aa6:	460d      	mov	r5, r1
 8004aa8:	4614      	mov	r4, r2
 8004aaa:	d510      	bpl.n	8004ace <_svfiprintf_r+0x36>
 8004aac:	690b      	ldr	r3, [r1, #16]
 8004aae:	b973      	cbnz	r3, 8004ace <_svfiprintf_r+0x36>
 8004ab0:	2140      	movs	r1, #64	@ 0x40
 8004ab2:	f7ff ff09 	bl	80048c8 <_malloc_r>
 8004ab6:	6028      	str	r0, [r5, #0]
 8004ab8:	6128      	str	r0, [r5, #16]
 8004aba:	b930      	cbnz	r0, 8004aca <_svfiprintf_r+0x32>
 8004abc:	230c      	movs	r3, #12
 8004abe:	603b      	str	r3, [r7, #0]
 8004ac0:	f04f 30ff 	mov.w	r0, #4294967295
 8004ac4:	b01d      	add	sp, #116	@ 0x74
 8004ac6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004aca:	2340      	movs	r3, #64	@ 0x40
 8004acc:	616b      	str	r3, [r5, #20]
 8004ace:	2300      	movs	r3, #0
 8004ad0:	9309      	str	r3, [sp, #36]	@ 0x24
 8004ad2:	2320      	movs	r3, #32
 8004ad4:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004ad8:	f8cd 800c 	str.w	r8, [sp, #12]
 8004adc:	2330      	movs	r3, #48	@ 0x30
 8004ade:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8004c7c <_svfiprintf_r+0x1e4>
 8004ae2:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ae6:	f04f 0901 	mov.w	r9, #1
 8004aea:	4623      	mov	r3, r4
 8004aec:	469a      	mov	sl, r3
 8004aee:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004af2:	b10a      	cbz	r2, 8004af8 <_svfiprintf_r+0x60>
 8004af4:	2a25      	cmp	r2, #37	@ 0x25
 8004af6:	d1f9      	bne.n	8004aec <_svfiprintf_r+0x54>
 8004af8:	ebba 0b04 	subs.w	fp, sl, r4
 8004afc:	d00b      	beq.n	8004b16 <_svfiprintf_r+0x7e>
 8004afe:	465b      	mov	r3, fp
 8004b00:	4622      	mov	r2, r4
 8004b02:	4629      	mov	r1, r5
 8004b04:	4638      	mov	r0, r7
 8004b06:	f7ff ff6b 	bl	80049e0 <__ssputs_r>
 8004b0a:	3001      	adds	r0, #1
 8004b0c:	f000 80a7 	beq.w	8004c5e <_svfiprintf_r+0x1c6>
 8004b10:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004b12:	445a      	add	r2, fp
 8004b14:	9209      	str	r2, [sp, #36]	@ 0x24
 8004b16:	f89a 3000 	ldrb.w	r3, [sl]
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	f000 809f 	beq.w	8004c5e <_svfiprintf_r+0x1c6>
 8004b20:	2300      	movs	r3, #0
 8004b22:	f04f 32ff 	mov.w	r2, #4294967295
 8004b26:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004b2a:	f10a 0a01 	add.w	sl, sl, #1
 8004b2e:	9304      	str	r3, [sp, #16]
 8004b30:	9307      	str	r3, [sp, #28]
 8004b32:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004b36:	931a      	str	r3, [sp, #104]	@ 0x68
 8004b38:	4654      	mov	r4, sl
 8004b3a:	2205      	movs	r2, #5
 8004b3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004b40:	484e      	ldr	r0, [pc, #312]	@ (8004c7c <_svfiprintf_r+0x1e4>)
 8004b42:	f7fb fb65 	bl	8000210 <memchr>
 8004b46:	9a04      	ldr	r2, [sp, #16]
 8004b48:	b9d8      	cbnz	r0, 8004b82 <_svfiprintf_r+0xea>
 8004b4a:	06d0      	lsls	r0, r2, #27
 8004b4c:	bf44      	itt	mi
 8004b4e:	2320      	movmi	r3, #32
 8004b50:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b54:	0711      	lsls	r1, r2, #28
 8004b56:	bf44      	itt	mi
 8004b58:	232b      	movmi	r3, #43	@ 0x2b
 8004b5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004b5e:	f89a 3000 	ldrb.w	r3, [sl]
 8004b62:	2b2a      	cmp	r3, #42	@ 0x2a
 8004b64:	d015      	beq.n	8004b92 <_svfiprintf_r+0xfa>
 8004b66:	9a07      	ldr	r2, [sp, #28]
 8004b68:	4654      	mov	r4, sl
 8004b6a:	2000      	movs	r0, #0
 8004b6c:	f04f 0c0a 	mov.w	ip, #10
 8004b70:	4621      	mov	r1, r4
 8004b72:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004b76:	3b30      	subs	r3, #48	@ 0x30
 8004b78:	2b09      	cmp	r3, #9
 8004b7a:	d94b      	bls.n	8004c14 <_svfiprintf_r+0x17c>
 8004b7c:	b1b0      	cbz	r0, 8004bac <_svfiprintf_r+0x114>
 8004b7e:	9207      	str	r2, [sp, #28]
 8004b80:	e014      	b.n	8004bac <_svfiprintf_r+0x114>
 8004b82:	eba0 0308 	sub.w	r3, r0, r8
 8004b86:	fa09 f303 	lsl.w	r3, r9, r3
 8004b8a:	4313      	orrs	r3, r2
 8004b8c:	9304      	str	r3, [sp, #16]
 8004b8e:	46a2      	mov	sl, r4
 8004b90:	e7d2      	b.n	8004b38 <_svfiprintf_r+0xa0>
 8004b92:	9b03      	ldr	r3, [sp, #12]
 8004b94:	1d19      	adds	r1, r3, #4
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	9103      	str	r1, [sp, #12]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	bfbb      	ittet	lt
 8004b9e:	425b      	neglt	r3, r3
 8004ba0:	f042 0202 	orrlt.w	r2, r2, #2
 8004ba4:	9307      	strge	r3, [sp, #28]
 8004ba6:	9307      	strlt	r3, [sp, #28]
 8004ba8:	bfb8      	it	lt
 8004baa:	9204      	strlt	r2, [sp, #16]
 8004bac:	7823      	ldrb	r3, [r4, #0]
 8004bae:	2b2e      	cmp	r3, #46	@ 0x2e
 8004bb0:	d10a      	bne.n	8004bc8 <_svfiprintf_r+0x130>
 8004bb2:	7863      	ldrb	r3, [r4, #1]
 8004bb4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004bb6:	d132      	bne.n	8004c1e <_svfiprintf_r+0x186>
 8004bb8:	9b03      	ldr	r3, [sp, #12]
 8004bba:	1d1a      	adds	r2, r3, #4
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	9203      	str	r2, [sp, #12]
 8004bc0:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004bc4:	3402      	adds	r4, #2
 8004bc6:	9305      	str	r3, [sp, #20]
 8004bc8:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8004c8c <_svfiprintf_r+0x1f4>
 8004bcc:	7821      	ldrb	r1, [r4, #0]
 8004bce:	2203      	movs	r2, #3
 8004bd0:	4650      	mov	r0, sl
 8004bd2:	f7fb fb1d 	bl	8000210 <memchr>
 8004bd6:	b138      	cbz	r0, 8004be8 <_svfiprintf_r+0x150>
 8004bd8:	9b04      	ldr	r3, [sp, #16]
 8004bda:	eba0 000a 	sub.w	r0, r0, sl
 8004bde:	2240      	movs	r2, #64	@ 0x40
 8004be0:	4082      	lsls	r2, r0
 8004be2:	4313      	orrs	r3, r2
 8004be4:	3401      	adds	r4, #1
 8004be6:	9304      	str	r3, [sp, #16]
 8004be8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004bec:	4824      	ldr	r0, [pc, #144]	@ (8004c80 <_svfiprintf_r+0x1e8>)
 8004bee:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004bf2:	2206      	movs	r2, #6
 8004bf4:	f7fb fb0c 	bl	8000210 <memchr>
 8004bf8:	2800      	cmp	r0, #0
 8004bfa:	d036      	beq.n	8004c6a <_svfiprintf_r+0x1d2>
 8004bfc:	4b21      	ldr	r3, [pc, #132]	@ (8004c84 <_svfiprintf_r+0x1ec>)
 8004bfe:	bb1b      	cbnz	r3, 8004c48 <_svfiprintf_r+0x1b0>
 8004c00:	9b03      	ldr	r3, [sp, #12]
 8004c02:	3307      	adds	r3, #7
 8004c04:	f023 0307 	bic.w	r3, r3, #7
 8004c08:	3308      	adds	r3, #8
 8004c0a:	9303      	str	r3, [sp, #12]
 8004c0c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004c0e:	4433      	add	r3, r6
 8004c10:	9309      	str	r3, [sp, #36]	@ 0x24
 8004c12:	e76a      	b.n	8004aea <_svfiprintf_r+0x52>
 8004c14:	fb0c 3202 	mla	r2, ip, r2, r3
 8004c18:	460c      	mov	r4, r1
 8004c1a:	2001      	movs	r0, #1
 8004c1c:	e7a8      	b.n	8004b70 <_svfiprintf_r+0xd8>
 8004c1e:	2300      	movs	r3, #0
 8004c20:	3401      	adds	r4, #1
 8004c22:	9305      	str	r3, [sp, #20]
 8004c24:	4619      	mov	r1, r3
 8004c26:	f04f 0c0a 	mov.w	ip, #10
 8004c2a:	4620      	mov	r0, r4
 8004c2c:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004c30:	3a30      	subs	r2, #48	@ 0x30
 8004c32:	2a09      	cmp	r2, #9
 8004c34:	d903      	bls.n	8004c3e <_svfiprintf_r+0x1a6>
 8004c36:	2b00      	cmp	r3, #0
 8004c38:	d0c6      	beq.n	8004bc8 <_svfiprintf_r+0x130>
 8004c3a:	9105      	str	r1, [sp, #20]
 8004c3c:	e7c4      	b.n	8004bc8 <_svfiprintf_r+0x130>
 8004c3e:	fb0c 2101 	mla	r1, ip, r1, r2
 8004c42:	4604      	mov	r4, r0
 8004c44:	2301      	movs	r3, #1
 8004c46:	e7f0      	b.n	8004c2a <_svfiprintf_r+0x192>
 8004c48:	ab03      	add	r3, sp, #12
 8004c4a:	9300      	str	r3, [sp, #0]
 8004c4c:	462a      	mov	r2, r5
 8004c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8004c88 <_svfiprintf_r+0x1f0>)
 8004c50:	a904      	add	r1, sp, #16
 8004c52:	4638      	mov	r0, r7
 8004c54:	f3af 8000 	nop.w
 8004c58:	1c42      	adds	r2, r0, #1
 8004c5a:	4606      	mov	r6, r0
 8004c5c:	d1d6      	bne.n	8004c0c <_svfiprintf_r+0x174>
 8004c5e:	89ab      	ldrh	r3, [r5, #12]
 8004c60:	065b      	lsls	r3, r3, #25
 8004c62:	f53f af2d 	bmi.w	8004ac0 <_svfiprintf_r+0x28>
 8004c66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004c68:	e72c      	b.n	8004ac4 <_svfiprintf_r+0x2c>
 8004c6a:	ab03      	add	r3, sp, #12
 8004c6c:	9300      	str	r3, [sp, #0]
 8004c6e:	462a      	mov	r2, r5
 8004c70:	4b05      	ldr	r3, [pc, #20]	@ (8004c88 <_svfiprintf_r+0x1f0>)
 8004c72:	a904      	add	r1, sp, #16
 8004c74:	4638      	mov	r0, r7
 8004c76:	f000 f9bb 	bl	8004ff0 <_printf_i>
 8004c7a:	e7ed      	b.n	8004c58 <_svfiprintf_r+0x1c0>
 8004c7c:	08005648 	.word	0x08005648
 8004c80:	08005652 	.word	0x08005652
 8004c84:	00000000 	.word	0x00000000
 8004c88:	080049e1 	.word	0x080049e1
 8004c8c:	0800564e 	.word	0x0800564e

08004c90 <__sfputc_r>:
 8004c90:	6893      	ldr	r3, [r2, #8]
 8004c92:	3b01      	subs	r3, #1
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	b410      	push	{r4}
 8004c98:	6093      	str	r3, [r2, #8]
 8004c9a:	da08      	bge.n	8004cae <__sfputc_r+0x1e>
 8004c9c:	6994      	ldr	r4, [r2, #24]
 8004c9e:	42a3      	cmp	r3, r4
 8004ca0:	db01      	blt.n	8004ca6 <__sfputc_r+0x16>
 8004ca2:	290a      	cmp	r1, #10
 8004ca4:	d103      	bne.n	8004cae <__sfputc_r+0x1e>
 8004ca6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004caa:	f7ff bc82 	b.w	80045b2 <__swbuf_r>
 8004cae:	6813      	ldr	r3, [r2, #0]
 8004cb0:	1c58      	adds	r0, r3, #1
 8004cb2:	6010      	str	r0, [r2, #0]
 8004cb4:	7019      	strb	r1, [r3, #0]
 8004cb6:	4608      	mov	r0, r1
 8004cb8:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004cbc:	4770      	bx	lr

08004cbe <__sfputs_r>:
 8004cbe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004cc0:	4606      	mov	r6, r0
 8004cc2:	460f      	mov	r7, r1
 8004cc4:	4614      	mov	r4, r2
 8004cc6:	18d5      	adds	r5, r2, r3
 8004cc8:	42ac      	cmp	r4, r5
 8004cca:	d101      	bne.n	8004cd0 <__sfputs_r+0x12>
 8004ccc:	2000      	movs	r0, #0
 8004cce:	e007      	b.n	8004ce0 <__sfputs_r+0x22>
 8004cd0:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004cd4:	463a      	mov	r2, r7
 8004cd6:	4630      	mov	r0, r6
 8004cd8:	f7ff ffda 	bl	8004c90 <__sfputc_r>
 8004cdc:	1c43      	adds	r3, r0, #1
 8004cde:	d1f3      	bne.n	8004cc8 <__sfputs_r+0xa>
 8004ce0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004ce4 <_vfiprintf_r>:
 8004ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ce8:	460d      	mov	r5, r1
 8004cea:	b09d      	sub	sp, #116	@ 0x74
 8004cec:	4614      	mov	r4, r2
 8004cee:	4698      	mov	r8, r3
 8004cf0:	4606      	mov	r6, r0
 8004cf2:	b118      	cbz	r0, 8004cfc <_vfiprintf_r+0x18>
 8004cf4:	6a03      	ldr	r3, [r0, #32]
 8004cf6:	b90b      	cbnz	r3, 8004cfc <_vfiprintf_r+0x18>
 8004cf8:	f7ff fb1a 	bl	8004330 <__sinit>
 8004cfc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004cfe:	07d9      	lsls	r1, r3, #31
 8004d00:	d405      	bmi.n	8004d0e <_vfiprintf_r+0x2a>
 8004d02:	89ab      	ldrh	r3, [r5, #12]
 8004d04:	059a      	lsls	r2, r3, #22
 8004d06:	d402      	bmi.n	8004d0e <_vfiprintf_r+0x2a>
 8004d08:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d0a:	f7ff fd60 	bl	80047ce <__retarget_lock_acquire_recursive>
 8004d0e:	89ab      	ldrh	r3, [r5, #12]
 8004d10:	071b      	lsls	r3, r3, #28
 8004d12:	d501      	bpl.n	8004d18 <_vfiprintf_r+0x34>
 8004d14:	692b      	ldr	r3, [r5, #16]
 8004d16:	b99b      	cbnz	r3, 8004d40 <_vfiprintf_r+0x5c>
 8004d18:	4629      	mov	r1, r5
 8004d1a:	4630      	mov	r0, r6
 8004d1c:	f7ff fc88 	bl	8004630 <__swsetup_r>
 8004d20:	b170      	cbz	r0, 8004d40 <_vfiprintf_r+0x5c>
 8004d22:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004d24:	07dc      	lsls	r4, r3, #31
 8004d26:	d504      	bpl.n	8004d32 <_vfiprintf_r+0x4e>
 8004d28:	f04f 30ff 	mov.w	r0, #4294967295
 8004d2c:	b01d      	add	sp, #116	@ 0x74
 8004d2e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d32:	89ab      	ldrh	r3, [r5, #12]
 8004d34:	0598      	lsls	r0, r3, #22
 8004d36:	d4f7      	bmi.n	8004d28 <_vfiprintf_r+0x44>
 8004d38:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004d3a:	f7ff fd49 	bl	80047d0 <__retarget_lock_release_recursive>
 8004d3e:	e7f3      	b.n	8004d28 <_vfiprintf_r+0x44>
 8004d40:	2300      	movs	r3, #0
 8004d42:	9309      	str	r3, [sp, #36]	@ 0x24
 8004d44:	2320      	movs	r3, #32
 8004d46:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004d4a:	f8cd 800c 	str.w	r8, [sp, #12]
 8004d4e:	2330      	movs	r3, #48	@ 0x30
 8004d50:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8004f00 <_vfiprintf_r+0x21c>
 8004d54:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004d58:	f04f 0901 	mov.w	r9, #1
 8004d5c:	4623      	mov	r3, r4
 8004d5e:	469a      	mov	sl, r3
 8004d60:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004d64:	b10a      	cbz	r2, 8004d6a <_vfiprintf_r+0x86>
 8004d66:	2a25      	cmp	r2, #37	@ 0x25
 8004d68:	d1f9      	bne.n	8004d5e <_vfiprintf_r+0x7a>
 8004d6a:	ebba 0b04 	subs.w	fp, sl, r4
 8004d6e:	d00b      	beq.n	8004d88 <_vfiprintf_r+0xa4>
 8004d70:	465b      	mov	r3, fp
 8004d72:	4622      	mov	r2, r4
 8004d74:	4629      	mov	r1, r5
 8004d76:	4630      	mov	r0, r6
 8004d78:	f7ff ffa1 	bl	8004cbe <__sfputs_r>
 8004d7c:	3001      	adds	r0, #1
 8004d7e:	f000 80a7 	beq.w	8004ed0 <_vfiprintf_r+0x1ec>
 8004d82:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004d84:	445a      	add	r2, fp
 8004d86:	9209      	str	r2, [sp, #36]	@ 0x24
 8004d88:	f89a 3000 	ldrb.w	r3, [sl]
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	f000 809f 	beq.w	8004ed0 <_vfiprintf_r+0x1ec>
 8004d92:	2300      	movs	r3, #0
 8004d94:	f04f 32ff 	mov.w	r2, #4294967295
 8004d98:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004d9c:	f10a 0a01 	add.w	sl, sl, #1
 8004da0:	9304      	str	r3, [sp, #16]
 8004da2:	9307      	str	r3, [sp, #28]
 8004da4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004da8:	931a      	str	r3, [sp, #104]	@ 0x68
 8004daa:	4654      	mov	r4, sl
 8004dac:	2205      	movs	r2, #5
 8004dae:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004db2:	4853      	ldr	r0, [pc, #332]	@ (8004f00 <_vfiprintf_r+0x21c>)
 8004db4:	f7fb fa2c 	bl	8000210 <memchr>
 8004db8:	9a04      	ldr	r2, [sp, #16]
 8004dba:	b9d8      	cbnz	r0, 8004df4 <_vfiprintf_r+0x110>
 8004dbc:	06d1      	lsls	r1, r2, #27
 8004dbe:	bf44      	itt	mi
 8004dc0:	2320      	movmi	r3, #32
 8004dc2:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dc6:	0713      	lsls	r3, r2, #28
 8004dc8:	bf44      	itt	mi
 8004dca:	232b      	movmi	r3, #43	@ 0x2b
 8004dcc:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004dd0:	f89a 3000 	ldrb.w	r3, [sl]
 8004dd4:	2b2a      	cmp	r3, #42	@ 0x2a
 8004dd6:	d015      	beq.n	8004e04 <_vfiprintf_r+0x120>
 8004dd8:	9a07      	ldr	r2, [sp, #28]
 8004dda:	4654      	mov	r4, sl
 8004ddc:	2000      	movs	r0, #0
 8004dde:	f04f 0c0a 	mov.w	ip, #10
 8004de2:	4621      	mov	r1, r4
 8004de4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004de8:	3b30      	subs	r3, #48	@ 0x30
 8004dea:	2b09      	cmp	r3, #9
 8004dec:	d94b      	bls.n	8004e86 <_vfiprintf_r+0x1a2>
 8004dee:	b1b0      	cbz	r0, 8004e1e <_vfiprintf_r+0x13a>
 8004df0:	9207      	str	r2, [sp, #28]
 8004df2:	e014      	b.n	8004e1e <_vfiprintf_r+0x13a>
 8004df4:	eba0 0308 	sub.w	r3, r0, r8
 8004df8:	fa09 f303 	lsl.w	r3, r9, r3
 8004dfc:	4313      	orrs	r3, r2
 8004dfe:	9304      	str	r3, [sp, #16]
 8004e00:	46a2      	mov	sl, r4
 8004e02:	e7d2      	b.n	8004daa <_vfiprintf_r+0xc6>
 8004e04:	9b03      	ldr	r3, [sp, #12]
 8004e06:	1d19      	adds	r1, r3, #4
 8004e08:	681b      	ldr	r3, [r3, #0]
 8004e0a:	9103      	str	r1, [sp, #12]
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	bfbb      	ittet	lt
 8004e10:	425b      	neglt	r3, r3
 8004e12:	f042 0202 	orrlt.w	r2, r2, #2
 8004e16:	9307      	strge	r3, [sp, #28]
 8004e18:	9307      	strlt	r3, [sp, #28]
 8004e1a:	bfb8      	it	lt
 8004e1c:	9204      	strlt	r2, [sp, #16]
 8004e1e:	7823      	ldrb	r3, [r4, #0]
 8004e20:	2b2e      	cmp	r3, #46	@ 0x2e
 8004e22:	d10a      	bne.n	8004e3a <_vfiprintf_r+0x156>
 8004e24:	7863      	ldrb	r3, [r4, #1]
 8004e26:	2b2a      	cmp	r3, #42	@ 0x2a
 8004e28:	d132      	bne.n	8004e90 <_vfiprintf_r+0x1ac>
 8004e2a:	9b03      	ldr	r3, [sp, #12]
 8004e2c:	1d1a      	adds	r2, r3, #4
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	9203      	str	r2, [sp, #12]
 8004e32:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004e36:	3402      	adds	r4, #2
 8004e38:	9305      	str	r3, [sp, #20]
 8004e3a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8004f10 <_vfiprintf_r+0x22c>
 8004e3e:	7821      	ldrb	r1, [r4, #0]
 8004e40:	2203      	movs	r2, #3
 8004e42:	4650      	mov	r0, sl
 8004e44:	f7fb f9e4 	bl	8000210 <memchr>
 8004e48:	b138      	cbz	r0, 8004e5a <_vfiprintf_r+0x176>
 8004e4a:	9b04      	ldr	r3, [sp, #16]
 8004e4c:	eba0 000a 	sub.w	r0, r0, sl
 8004e50:	2240      	movs	r2, #64	@ 0x40
 8004e52:	4082      	lsls	r2, r0
 8004e54:	4313      	orrs	r3, r2
 8004e56:	3401      	adds	r4, #1
 8004e58:	9304      	str	r3, [sp, #16]
 8004e5a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e5e:	4829      	ldr	r0, [pc, #164]	@ (8004f04 <_vfiprintf_r+0x220>)
 8004e60:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004e64:	2206      	movs	r2, #6
 8004e66:	f7fb f9d3 	bl	8000210 <memchr>
 8004e6a:	2800      	cmp	r0, #0
 8004e6c:	d03f      	beq.n	8004eee <_vfiprintf_r+0x20a>
 8004e6e:	4b26      	ldr	r3, [pc, #152]	@ (8004f08 <_vfiprintf_r+0x224>)
 8004e70:	bb1b      	cbnz	r3, 8004eba <_vfiprintf_r+0x1d6>
 8004e72:	9b03      	ldr	r3, [sp, #12]
 8004e74:	3307      	adds	r3, #7
 8004e76:	f023 0307 	bic.w	r3, r3, #7
 8004e7a:	3308      	adds	r3, #8
 8004e7c:	9303      	str	r3, [sp, #12]
 8004e7e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e80:	443b      	add	r3, r7
 8004e82:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e84:	e76a      	b.n	8004d5c <_vfiprintf_r+0x78>
 8004e86:	fb0c 3202 	mla	r2, ip, r2, r3
 8004e8a:	460c      	mov	r4, r1
 8004e8c:	2001      	movs	r0, #1
 8004e8e:	e7a8      	b.n	8004de2 <_vfiprintf_r+0xfe>
 8004e90:	2300      	movs	r3, #0
 8004e92:	3401      	adds	r4, #1
 8004e94:	9305      	str	r3, [sp, #20]
 8004e96:	4619      	mov	r1, r3
 8004e98:	f04f 0c0a 	mov.w	ip, #10
 8004e9c:	4620      	mov	r0, r4
 8004e9e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004ea2:	3a30      	subs	r2, #48	@ 0x30
 8004ea4:	2a09      	cmp	r2, #9
 8004ea6:	d903      	bls.n	8004eb0 <_vfiprintf_r+0x1cc>
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d0c6      	beq.n	8004e3a <_vfiprintf_r+0x156>
 8004eac:	9105      	str	r1, [sp, #20]
 8004eae:	e7c4      	b.n	8004e3a <_vfiprintf_r+0x156>
 8004eb0:	fb0c 2101 	mla	r1, ip, r1, r2
 8004eb4:	4604      	mov	r4, r0
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e7f0      	b.n	8004e9c <_vfiprintf_r+0x1b8>
 8004eba:	ab03      	add	r3, sp, #12
 8004ebc:	9300      	str	r3, [sp, #0]
 8004ebe:	462a      	mov	r2, r5
 8004ec0:	4b12      	ldr	r3, [pc, #72]	@ (8004f0c <_vfiprintf_r+0x228>)
 8004ec2:	a904      	add	r1, sp, #16
 8004ec4:	4630      	mov	r0, r6
 8004ec6:	f3af 8000 	nop.w
 8004eca:	4607      	mov	r7, r0
 8004ecc:	1c78      	adds	r0, r7, #1
 8004ece:	d1d6      	bne.n	8004e7e <_vfiprintf_r+0x19a>
 8004ed0:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004ed2:	07d9      	lsls	r1, r3, #31
 8004ed4:	d405      	bmi.n	8004ee2 <_vfiprintf_r+0x1fe>
 8004ed6:	89ab      	ldrh	r3, [r5, #12]
 8004ed8:	059a      	lsls	r2, r3, #22
 8004eda:	d402      	bmi.n	8004ee2 <_vfiprintf_r+0x1fe>
 8004edc:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004ede:	f7ff fc77 	bl	80047d0 <__retarget_lock_release_recursive>
 8004ee2:	89ab      	ldrh	r3, [r5, #12]
 8004ee4:	065b      	lsls	r3, r3, #25
 8004ee6:	f53f af1f 	bmi.w	8004d28 <_vfiprintf_r+0x44>
 8004eea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004eec:	e71e      	b.n	8004d2c <_vfiprintf_r+0x48>
 8004eee:	ab03      	add	r3, sp, #12
 8004ef0:	9300      	str	r3, [sp, #0]
 8004ef2:	462a      	mov	r2, r5
 8004ef4:	4b05      	ldr	r3, [pc, #20]	@ (8004f0c <_vfiprintf_r+0x228>)
 8004ef6:	a904      	add	r1, sp, #16
 8004ef8:	4630      	mov	r0, r6
 8004efa:	f000 f879 	bl	8004ff0 <_printf_i>
 8004efe:	e7e4      	b.n	8004eca <_vfiprintf_r+0x1e6>
 8004f00:	08005648 	.word	0x08005648
 8004f04:	08005652 	.word	0x08005652
 8004f08:	00000000 	.word	0x00000000
 8004f0c:	08004cbf 	.word	0x08004cbf
 8004f10:	0800564e 	.word	0x0800564e

08004f14 <_printf_common>:
 8004f14:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004f18:	4616      	mov	r6, r2
 8004f1a:	4698      	mov	r8, r3
 8004f1c:	688a      	ldr	r2, [r1, #8]
 8004f1e:	690b      	ldr	r3, [r1, #16]
 8004f20:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8004f24:	4293      	cmp	r3, r2
 8004f26:	bfb8      	it	lt
 8004f28:	4613      	movlt	r3, r2
 8004f2a:	6033      	str	r3, [r6, #0]
 8004f2c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8004f30:	4607      	mov	r7, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	b10a      	cbz	r2, 8004f3a <_printf_common+0x26>
 8004f36:	3301      	adds	r3, #1
 8004f38:	6033      	str	r3, [r6, #0]
 8004f3a:	6823      	ldr	r3, [r4, #0]
 8004f3c:	0699      	lsls	r1, r3, #26
 8004f3e:	bf42      	ittt	mi
 8004f40:	6833      	ldrmi	r3, [r6, #0]
 8004f42:	3302      	addmi	r3, #2
 8004f44:	6033      	strmi	r3, [r6, #0]
 8004f46:	6825      	ldr	r5, [r4, #0]
 8004f48:	f015 0506 	ands.w	r5, r5, #6
 8004f4c:	d106      	bne.n	8004f5c <_printf_common+0x48>
 8004f4e:	f104 0a19 	add.w	sl, r4, #25
 8004f52:	68e3      	ldr	r3, [r4, #12]
 8004f54:	6832      	ldr	r2, [r6, #0]
 8004f56:	1a9b      	subs	r3, r3, r2
 8004f58:	42ab      	cmp	r3, r5
 8004f5a:	dc26      	bgt.n	8004faa <_printf_common+0x96>
 8004f5c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8004f60:	6822      	ldr	r2, [r4, #0]
 8004f62:	3b00      	subs	r3, #0
 8004f64:	bf18      	it	ne
 8004f66:	2301      	movne	r3, #1
 8004f68:	0692      	lsls	r2, r2, #26
 8004f6a:	d42b      	bmi.n	8004fc4 <_printf_common+0xb0>
 8004f6c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8004f70:	4641      	mov	r1, r8
 8004f72:	4638      	mov	r0, r7
 8004f74:	47c8      	blx	r9
 8004f76:	3001      	adds	r0, #1
 8004f78:	d01e      	beq.n	8004fb8 <_printf_common+0xa4>
 8004f7a:	6823      	ldr	r3, [r4, #0]
 8004f7c:	6922      	ldr	r2, [r4, #16]
 8004f7e:	f003 0306 	and.w	r3, r3, #6
 8004f82:	2b04      	cmp	r3, #4
 8004f84:	bf02      	ittt	eq
 8004f86:	68e5      	ldreq	r5, [r4, #12]
 8004f88:	6833      	ldreq	r3, [r6, #0]
 8004f8a:	1aed      	subeq	r5, r5, r3
 8004f8c:	68a3      	ldr	r3, [r4, #8]
 8004f8e:	bf0c      	ite	eq
 8004f90:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004f94:	2500      	movne	r5, #0
 8004f96:	4293      	cmp	r3, r2
 8004f98:	bfc4      	itt	gt
 8004f9a:	1a9b      	subgt	r3, r3, r2
 8004f9c:	18ed      	addgt	r5, r5, r3
 8004f9e:	2600      	movs	r6, #0
 8004fa0:	341a      	adds	r4, #26
 8004fa2:	42b5      	cmp	r5, r6
 8004fa4:	d11a      	bne.n	8004fdc <_printf_common+0xc8>
 8004fa6:	2000      	movs	r0, #0
 8004fa8:	e008      	b.n	8004fbc <_printf_common+0xa8>
 8004faa:	2301      	movs	r3, #1
 8004fac:	4652      	mov	r2, sl
 8004fae:	4641      	mov	r1, r8
 8004fb0:	4638      	mov	r0, r7
 8004fb2:	47c8      	blx	r9
 8004fb4:	3001      	adds	r0, #1
 8004fb6:	d103      	bne.n	8004fc0 <_printf_common+0xac>
 8004fb8:	f04f 30ff 	mov.w	r0, #4294967295
 8004fbc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004fc0:	3501      	adds	r5, #1
 8004fc2:	e7c6      	b.n	8004f52 <_printf_common+0x3e>
 8004fc4:	18e1      	adds	r1, r4, r3
 8004fc6:	1c5a      	adds	r2, r3, #1
 8004fc8:	2030      	movs	r0, #48	@ 0x30
 8004fca:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004fce:	4422      	add	r2, r4
 8004fd0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8004fd4:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004fd8:	3302      	adds	r3, #2
 8004fda:	e7c7      	b.n	8004f6c <_printf_common+0x58>
 8004fdc:	2301      	movs	r3, #1
 8004fde:	4622      	mov	r2, r4
 8004fe0:	4641      	mov	r1, r8
 8004fe2:	4638      	mov	r0, r7
 8004fe4:	47c8      	blx	r9
 8004fe6:	3001      	adds	r0, #1
 8004fe8:	d0e6      	beq.n	8004fb8 <_printf_common+0xa4>
 8004fea:	3601      	adds	r6, #1
 8004fec:	e7d9      	b.n	8004fa2 <_printf_common+0x8e>
	...

08004ff0 <_printf_i>:
 8004ff0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004ff4:	7e0f      	ldrb	r7, [r1, #24]
 8004ff6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8004ff8:	2f78      	cmp	r7, #120	@ 0x78
 8004ffa:	4691      	mov	r9, r2
 8004ffc:	4680      	mov	r8, r0
 8004ffe:	460c      	mov	r4, r1
 8005000:	469a      	mov	sl, r3
 8005002:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005006:	d807      	bhi.n	8005018 <_printf_i+0x28>
 8005008:	2f62      	cmp	r7, #98	@ 0x62
 800500a:	d80a      	bhi.n	8005022 <_printf_i+0x32>
 800500c:	2f00      	cmp	r7, #0
 800500e:	f000 80d1 	beq.w	80051b4 <_printf_i+0x1c4>
 8005012:	2f58      	cmp	r7, #88	@ 0x58
 8005014:	f000 80b8 	beq.w	8005188 <_printf_i+0x198>
 8005018:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800501c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005020:	e03a      	b.n	8005098 <_printf_i+0xa8>
 8005022:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005026:	2b15      	cmp	r3, #21
 8005028:	d8f6      	bhi.n	8005018 <_printf_i+0x28>
 800502a:	a101      	add	r1, pc, #4	@ (adr r1, 8005030 <_printf_i+0x40>)
 800502c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005030:	08005089 	.word	0x08005089
 8005034:	0800509d 	.word	0x0800509d
 8005038:	08005019 	.word	0x08005019
 800503c:	08005019 	.word	0x08005019
 8005040:	08005019 	.word	0x08005019
 8005044:	08005019 	.word	0x08005019
 8005048:	0800509d 	.word	0x0800509d
 800504c:	08005019 	.word	0x08005019
 8005050:	08005019 	.word	0x08005019
 8005054:	08005019 	.word	0x08005019
 8005058:	08005019 	.word	0x08005019
 800505c:	0800519b 	.word	0x0800519b
 8005060:	080050c7 	.word	0x080050c7
 8005064:	08005155 	.word	0x08005155
 8005068:	08005019 	.word	0x08005019
 800506c:	08005019 	.word	0x08005019
 8005070:	080051bd 	.word	0x080051bd
 8005074:	08005019 	.word	0x08005019
 8005078:	080050c7 	.word	0x080050c7
 800507c:	08005019 	.word	0x08005019
 8005080:	08005019 	.word	0x08005019
 8005084:	0800515d 	.word	0x0800515d
 8005088:	6833      	ldr	r3, [r6, #0]
 800508a:	1d1a      	adds	r2, r3, #4
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	6032      	str	r2, [r6, #0]
 8005090:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005094:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8005098:	2301      	movs	r3, #1
 800509a:	e09c      	b.n	80051d6 <_printf_i+0x1e6>
 800509c:	6833      	ldr	r3, [r6, #0]
 800509e:	6820      	ldr	r0, [r4, #0]
 80050a0:	1d19      	adds	r1, r3, #4
 80050a2:	6031      	str	r1, [r6, #0]
 80050a4:	0606      	lsls	r6, r0, #24
 80050a6:	d501      	bpl.n	80050ac <_printf_i+0xbc>
 80050a8:	681d      	ldr	r5, [r3, #0]
 80050aa:	e003      	b.n	80050b4 <_printf_i+0xc4>
 80050ac:	0645      	lsls	r5, r0, #25
 80050ae:	d5fb      	bpl.n	80050a8 <_printf_i+0xb8>
 80050b0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80050b4:	2d00      	cmp	r5, #0
 80050b6:	da03      	bge.n	80050c0 <_printf_i+0xd0>
 80050b8:	232d      	movs	r3, #45	@ 0x2d
 80050ba:	426d      	negs	r5, r5
 80050bc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80050c0:	4858      	ldr	r0, [pc, #352]	@ (8005224 <_printf_i+0x234>)
 80050c2:	230a      	movs	r3, #10
 80050c4:	e011      	b.n	80050ea <_printf_i+0xfa>
 80050c6:	6821      	ldr	r1, [r4, #0]
 80050c8:	6833      	ldr	r3, [r6, #0]
 80050ca:	0608      	lsls	r0, r1, #24
 80050cc:	f853 5b04 	ldr.w	r5, [r3], #4
 80050d0:	d402      	bmi.n	80050d8 <_printf_i+0xe8>
 80050d2:	0649      	lsls	r1, r1, #25
 80050d4:	bf48      	it	mi
 80050d6:	b2ad      	uxthmi	r5, r5
 80050d8:	2f6f      	cmp	r7, #111	@ 0x6f
 80050da:	4852      	ldr	r0, [pc, #328]	@ (8005224 <_printf_i+0x234>)
 80050dc:	6033      	str	r3, [r6, #0]
 80050de:	bf14      	ite	ne
 80050e0:	230a      	movne	r3, #10
 80050e2:	2308      	moveq	r3, #8
 80050e4:	2100      	movs	r1, #0
 80050e6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80050ea:	6866      	ldr	r6, [r4, #4]
 80050ec:	60a6      	str	r6, [r4, #8]
 80050ee:	2e00      	cmp	r6, #0
 80050f0:	db05      	blt.n	80050fe <_printf_i+0x10e>
 80050f2:	6821      	ldr	r1, [r4, #0]
 80050f4:	432e      	orrs	r6, r5
 80050f6:	f021 0104 	bic.w	r1, r1, #4
 80050fa:	6021      	str	r1, [r4, #0]
 80050fc:	d04b      	beq.n	8005196 <_printf_i+0x1a6>
 80050fe:	4616      	mov	r6, r2
 8005100:	fbb5 f1f3 	udiv	r1, r5, r3
 8005104:	fb03 5711 	mls	r7, r3, r1, r5
 8005108:	5dc7      	ldrb	r7, [r0, r7]
 800510a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800510e:	462f      	mov	r7, r5
 8005110:	42bb      	cmp	r3, r7
 8005112:	460d      	mov	r5, r1
 8005114:	d9f4      	bls.n	8005100 <_printf_i+0x110>
 8005116:	2b08      	cmp	r3, #8
 8005118:	d10b      	bne.n	8005132 <_printf_i+0x142>
 800511a:	6823      	ldr	r3, [r4, #0]
 800511c:	07df      	lsls	r7, r3, #31
 800511e:	d508      	bpl.n	8005132 <_printf_i+0x142>
 8005120:	6923      	ldr	r3, [r4, #16]
 8005122:	6861      	ldr	r1, [r4, #4]
 8005124:	4299      	cmp	r1, r3
 8005126:	bfde      	ittt	le
 8005128:	2330      	movle	r3, #48	@ 0x30
 800512a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800512e:	f106 36ff 	addle.w	r6, r6, #4294967295
 8005132:	1b92      	subs	r2, r2, r6
 8005134:	6122      	str	r2, [r4, #16]
 8005136:	f8cd a000 	str.w	sl, [sp]
 800513a:	464b      	mov	r3, r9
 800513c:	aa03      	add	r2, sp, #12
 800513e:	4621      	mov	r1, r4
 8005140:	4640      	mov	r0, r8
 8005142:	f7ff fee7 	bl	8004f14 <_printf_common>
 8005146:	3001      	adds	r0, #1
 8005148:	d14a      	bne.n	80051e0 <_printf_i+0x1f0>
 800514a:	f04f 30ff 	mov.w	r0, #4294967295
 800514e:	b004      	add	sp, #16
 8005150:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005154:	6823      	ldr	r3, [r4, #0]
 8005156:	f043 0320 	orr.w	r3, r3, #32
 800515a:	6023      	str	r3, [r4, #0]
 800515c:	4832      	ldr	r0, [pc, #200]	@ (8005228 <_printf_i+0x238>)
 800515e:	2778      	movs	r7, #120	@ 0x78
 8005160:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005164:	6823      	ldr	r3, [r4, #0]
 8005166:	6831      	ldr	r1, [r6, #0]
 8005168:	061f      	lsls	r7, r3, #24
 800516a:	f851 5b04 	ldr.w	r5, [r1], #4
 800516e:	d402      	bmi.n	8005176 <_printf_i+0x186>
 8005170:	065f      	lsls	r7, r3, #25
 8005172:	bf48      	it	mi
 8005174:	b2ad      	uxthmi	r5, r5
 8005176:	6031      	str	r1, [r6, #0]
 8005178:	07d9      	lsls	r1, r3, #31
 800517a:	bf44      	itt	mi
 800517c:	f043 0320 	orrmi.w	r3, r3, #32
 8005180:	6023      	strmi	r3, [r4, #0]
 8005182:	b11d      	cbz	r5, 800518c <_printf_i+0x19c>
 8005184:	2310      	movs	r3, #16
 8005186:	e7ad      	b.n	80050e4 <_printf_i+0xf4>
 8005188:	4826      	ldr	r0, [pc, #152]	@ (8005224 <_printf_i+0x234>)
 800518a:	e7e9      	b.n	8005160 <_printf_i+0x170>
 800518c:	6823      	ldr	r3, [r4, #0]
 800518e:	f023 0320 	bic.w	r3, r3, #32
 8005192:	6023      	str	r3, [r4, #0]
 8005194:	e7f6      	b.n	8005184 <_printf_i+0x194>
 8005196:	4616      	mov	r6, r2
 8005198:	e7bd      	b.n	8005116 <_printf_i+0x126>
 800519a:	6833      	ldr	r3, [r6, #0]
 800519c:	6825      	ldr	r5, [r4, #0]
 800519e:	6961      	ldr	r1, [r4, #20]
 80051a0:	1d18      	adds	r0, r3, #4
 80051a2:	6030      	str	r0, [r6, #0]
 80051a4:	062e      	lsls	r6, r5, #24
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	d501      	bpl.n	80051ae <_printf_i+0x1be>
 80051aa:	6019      	str	r1, [r3, #0]
 80051ac:	e002      	b.n	80051b4 <_printf_i+0x1c4>
 80051ae:	0668      	lsls	r0, r5, #25
 80051b0:	d5fb      	bpl.n	80051aa <_printf_i+0x1ba>
 80051b2:	8019      	strh	r1, [r3, #0]
 80051b4:	2300      	movs	r3, #0
 80051b6:	6123      	str	r3, [r4, #16]
 80051b8:	4616      	mov	r6, r2
 80051ba:	e7bc      	b.n	8005136 <_printf_i+0x146>
 80051bc:	6833      	ldr	r3, [r6, #0]
 80051be:	1d1a      	adds	r2, r3, #4
 80051c0:	6032      	str	r2, [r6, #0]
 80051c2:	681e      	ldr	r6, [r3, #0]
 80051c4:	6862      	ldr	r2, [r4, #4]
 80051c6:	2100      	movs	r1, #0
 80051c8:	4630      	mov	r0, r6
 80051ca:	f7fb f821 	bl	8000210 <memchr>
 80051ce:	b108      	cbz	r0, 80051d4 <_printf_i+0x1e4>
 80051d0:	1b80      	subs	r0, r0, r6
 80051d2:	6060      	str	r0, [r4, #4]
 80051d4:	6863      	ldr	r3, [r4, #4]
 80051d6:	6123      	str	r3, [r4, #16]
 80051d8:	2300      	movs	r3, #0
 80051da:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051de:	e7aa      	b.n	8005136 <_printf_i+0x146>
 80051e0:	6923      	ldr	r3, [r4, #16]
 80051e2:	4632      	mov	r2, r6
 80051e4:	4649      	mov	r1, r9
 80051e6:	4640      	mov	r0, r8
 80051e8:	47d0      	blx	sl
 80051ea:	3001      	adds	r0, #1
 80051ec:	d0ad      	beq.n	800514a <_printf_i+0x15a>
 80051ee:	6823      	ldr	r3, [r4, #0]
 80051f0:	079b      	lsls	r3, r3, #30
 80051f2:	d413      	bmi.n	800521c <_printf_i+0x22c>
 80051f4:	68e0      	ldr	r0, [r4, #12]
 80051f6:	9b03      	ldr	r3, [sp, #12]
 80051f8:	4298      	cmp	r0, r3
 80051fa:	bfb8      	it	lt
 80051fc:	4618      	movlt	r0, r3
 80051fe:	e7a6      	b.n	800514e <_printf_i+0x15e>
 8005200:	2301      	movs	r3, #1
 8005202:	4632      	mov	r2, r6
 8005204:	4649      	mov	r1, r9
 8005206:	4640      	mov	r0, r8
 8005208:	47d0      	blx	sl
 800520a:	3001      	adds	r0, #1
 800520c:	d09d      	beq.n	800514a <_printf_i+0x15a>
 800520e:	3501      	adds	r5, #1
 8005210:	68e3      	ldr	r3, [r4, #12]
 8005212:	9903      	ldr	r1, [sp, #12]
 8005214:	1a5b      	subs	r3, r3, r1
 8005216:	42ab      	cmp	r3, r5
 8005218:	dcf2      	bgt.n	8005200 <_printf_i+0x210>
 800521a:	e7eb      	b.n	80051f4 <_printf_i+0x204>
 800521c:	2500      	movs	r5, #0
 800521e:	f104 0619 	add.w	r6, r4, #25
 8005222:	e7f5      	b.n	8005210 <_printf_i+0x220>
 8005224:	08005659 	.word	0x08005659
 8005228:	0800566a 	.word	0x0800566a

0800522c <__sflush_r>:
 800522c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005230:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005234:	0716      	lsls	r6, r2, #28
 8005236:	4605      	mov	r5, r0
 8005238:	460c      	mov	r4, r1
 800523a:	d454      	bmi.n	80052e6 <__sflush_r+0xba>
 800523c:	684b      	ldr	r3, [r1, #4]
 800523e:	2b00      	cmp	r3, #0
 8005240:	dc02      	bgt.n	8005248 <__sflush_r+0x1c>
 8005242:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005244:	2b00      	cmp	r3, #0
 8005246:	dd48      	ble.n	80052da <__sflush_r+0xae>
 8005248:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800524a:	2e00      	cmp	r6, #0
 800524c:	d045      	beq.n	80052da <__sflush_r+0xae>
 800524e:	2300      	movs	r3, #0
 8005250:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005254:	682f      	ldr	r7, [r5, #0]
 8005256:	6a21      	ldr	r1, [r4, #32]
 8005258:	602b      	str	r3, [r5, #0]
 800525a:	d030      	beq.n	80052be <__sflush_r+0x92>
 800525c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800525e:	89a3      	ldrh	r3, [r4, #12]
 8005260:	0759      	lsls	r1, r3, #29
 8005262:	d505      	bpl.n	8005270 <__sflush_r+0x44>
 8005264:	6863      	ldr	r3, [r4, #4]
 8005266:	1ad2      	subs	r2, r2, r3
 8005268:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800526a:	b10b      	cbz	r3, 8005270 <__sflush_r+0x44>
 800526c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800526e:	1ad2      	subs	r2, r2, r3
 8005270:	2300      	movs	r3, #0
 8005272:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005274:	6a21      	ldr	r1, [r4, #32]
 8005276:	4628      	mov	r0, r5
 8005278:	47b0      	blx	r6
 800527a:	1c43      	adds	r3, r0, #1
 800527c:	89a3      	ldrh	r3, [r4, #12]
 800527e:	d106      	bne.n	800528e <__sflush_r+0x62>
 8005280:	6829      	ldr	r1, [r5, #0]
 8005282:	291d      	cmp	r1, #29
 8005284:	d82b      	bhi.n	80052de <__sflush_r+0xb2>
 8005286:	4a2a      	ldr	r2, [pc, #168]	@ (8005330 <__sflush_r+0x104>)
 8005288:	40ca      	lsrs	r2, r1
 800528a:	07d6      	lsls	r6, r2, #31
 800528c:	d527      	bpl.n	80052de <__sflush_r+0xb2>
 800528e:	2200      	movs	r2, #0
 8005290:	6062      	str	r2, [r4, #4]
 8005292:	04d9      	lsls	r1, r3, #19
 8005294:	6922      	ldr	r2, [r4, #16]
 8005296:	6022      	str	r2, [r4, #0]
 8005298:	d504      	bpl.n	80052a4 <__sflush_r+0x78>
 800529a:	1c42      	adds	r2, r0, #1
 800529c:	d101      	bne.n	80052a2 <__sflush_r+0x76>
 800529e:	682b      	ldr	r3, [r5, #0]
 80052a0:	b903      	cbnz	r3, 80052a4 <__sflush_r+0x78>
 80052a2:	6560      	str	r0, [r4, #84]	@ 0x54
 80052a4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80052a6:	602f      	str	r7, [r5, #0]
 80052a8:	b1b9      	cbz	r1, 80052da <__sflush_r+0xae>
 80052aa:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80052ae:	4299      	cmp	r1, r3
 80052b0:	d002      	beq.n	80052b8 <__sflush_r+0x8c>
 80052b2:	4628      	mov	r0, r5
 80052b4:	f7ff fa9c 	bl	80047f0 <_free_r>
 80052b8:	2300      	movs	r3, #0
 80052ba:	6363      	str	r3, [r4, #52]	@ 0x34
 80052bc:	e00d      	b.n	80052da <__sflush_r+0xae>
 80052be:	2301      	movs	r3, #1
 80052c0:	4628      	mov	r0, r5
 80052c2:	47b0      	blx	r6
 80052c4:	4602      	mov	r2, r0
 80052c6:	1c50      	adds	r0, r2, #1
 80052c8:	d1c9      	bne.n	800525e <__sflush_r+0x32>
 80052ca:	682b      	ldr	r3, [r5, #0]
 80052cc:	2b00      	cmp	r3, #0
 80052ce:	d0c6      	beq.n	800525e <__sflush_r+0x32>
 80052d0:	2b1d      	cmp	r3, #29
 80052d2:	d001      	beq.n	80052d8 <__sflush_r+0xac>
 80052d4:	2b16      	cmp	r3, #22
 80052d6:	d11e      	bne.n	8005316 <__sflush_r+0xea>
 80052d8:	602f      	str	r7, [r5, #0]
 80052da:	2000      	movs	r0, #0
 80052dc:	e022      	b.n	8005324 <__sflush_r+0xf8>
 80052de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80052e2:	b21b      	sxth	r3, r3
 80052e4:	e01b      	b.n	800531e <__sflush_r+0xf2>
 80052e6:	690f      	ldr	r7, [r1, #16]
 80052e8:	2f00      	cmp	r7, #0
 80052ea:	d0f6      	beq.n	80052da <__sflush_r+0xae>
 80052ec:	0793      	lsls	r3, r2, #30
 80052ee:	680e      	ldr	r6, [r1, #0]
 80052f0:	bf08      	it	eq
 80052f2:	694b      	ldreq	r3, [r1, #20]
 80052f4:	600f      	str	r7, [r1, #0]
 80052f6:	bf18      	it	ne
 80052f8:	2300      	movne	r3, #0
 80052fa:	eba6 0807 	sub.w	r8, r6, r7
 80052fe:	608b      	str	r3, [r1, #8]
 8005300:	f1b8 0f00 	cmp.w	r8, #0
 8005304:	dde9      	ble.n	80052da <__sflush_r+0xae>
 8005306:	6a21      	ldr	r1, [r4, #32]
 8005308:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800530a:	4643      	mov	r3, r8
 800530c:	463a      	mov	r2, r7
 800530e:	4628      	mov	r0, r5
 8005310:	47b0      	blx	r6
 8005312:	2800      	cmp	r0, #0
 8005314:	dc08      	bgt.n	8005328 <__sflush_r+0xfc>
 8005316:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800531a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800531e:	81a3      	strh	r3, [r4, #12]
 8005320:	f04f 30ff 	mov.w	r0, #4294967295
 8005324:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005328:	4407      	add	r7, r0
 800532a:	eba8 0800 	sub.w	r8, r8, r0
 800532e:	e7e7      	b.n	8005300 <__sflush_r+0xd4>
 8005330:	20400001 	.word	0x20400001

08005334 <_fflush_r>:
 8005334:	b538      	push	{r3, r4, r5, lr}
 8005336:	690b      	ldr	r3, [r1, #16]
 8005338:	4605      	mov	r5, r0
 800533a:	460c      	mov	r4, r1
 800533c:	b913      	cbnz	r3, 8005344 <_fflush_r+0x10>
 800533e:	2500      	movs	r5, #0
 8005340:	4628      	mov	r0, r5
 8005342:	bd38      	pop	{r3, r4, r5, pc}
 8005344:	b118      	cbz	r0, 800534e <_fflush_r+0x1a>
 8005346:	6a03      	ldr	r3, [r0, #32]
 8005348:	b90b      	cbnz	r3, 800534e <_fflush_r+0x1a>
 800534a:	f7fe fff1 	bl	8004330 <__sinit>
 800534e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005352:	2b00      	cmp	r3, #0
 8005354:	d0f3      	beq.n	800533e <_fflush_r+0xa>
 8005356:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005358:	07d0      	lsls	r0, r2, #31
 800535a:	d404      	bmi.n	8005366 <_fflush_r+0x32>
 800535c:	0599      	lsls	r1, r3, #22
 800535e:	d402      	bmi.n	8005366 <_fflush_r+0x32>
 8005360:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005362:	f7ff fa34 	bl	80047ce <__retarget_lock_acquire_recursive>
 8005366:	4628      	mov	r0, r5
 8005368:	4621      	mov	r1, r4
 800536a:	f7ff ff5f 	bl	800522c <__sflush_r>
 800536e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005370:	07da      	lsls	r2, r3, #31
 8005372:	4605      	mov	r5, r0
 8005374:	d4e4      	bmi.n	8005340 <_fflush_r+0xc>
 8005376:	89a3      	ldrh	r3, [r4, #12]
 8005378:	059b      	lsls	r3, r3, #22
 800537a:	d4e1      	bmi.n	8005340 <_fflush_r+0xc>
 800537c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800537e:	f7ff fa27 	bl	80047d0 <__retarget_lock_release_recursive>
 8005382:	e7dd      	b.n	8005340 <_fflush_r+0xc>

08005384 <__swhatbuf_r>:
 8005384:	b570      	push	{r4, r5, r6, lr}
 8005386:	460c      	mov	r4, r1
 8005388:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800538c:	2900      	cmp	r1, #0
 800538e:	b096      	sub	sp, #88	@ 0x58
 8005390:	4615      	mov	r5, r2
 8005392:	461e      	mov	r6, r3
 8005394:	da0d      	bge.n	80053b2 <__swhatbuf_r+0x2e>
 8005396:	89a3      	ldrh	r3, [r4, #12]
 8005398:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800539c:	f04f 0100 	mov.w	r1, #0
 80053a0:	bf14      	ite	ne
 80053a2:	2340      	movne	r3, #64	@ 0x40
 80053a4:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80053a8:	2000      	movs	r0, #0
 80053aa:	6031      	str	r1, [r6, #0]
 80053ac:	602b      	str	r3, [r5, #0]
 80053ae:	b016      	add	sp, #88	@ 0x58
 80053b0:	bd70      	pop	{r4, r5, r6, pc}
 80053b2:	466a      	mov	r2, sp
 80053b4:	f000 f862 	bl	800547c <_fstat_r>
 80053b8:	2800      	cmp	r0, #0
 80053ba:	dbec      	blt.n	8005396 <__swhatbuf_r+0x12>
 80053bc:	9901      	ldr	r1, [sp, #4]
 80053be:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80053c2:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80053c6:	4259      	negs	r1, r3
 80053c8:	4159      	adcs	r1, r3
 80053ca:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80053ce:	e7eb      	b.n	80053a8 <__swhatbuf_r+0x24>

080053d0 <__smakebuf_r>:
 80053d0:	898b      	ldrh	r3, [r1, #12]
 80053d2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80053d4:	079d      	lsls	r5, r3, #30
 80053d6:	4606      	mov	r6, r0
 80053d8:	460c      	mov	r4, r1
 80053da:	d507      	bpl.n	80053ec <__smakebuf_r+0x1c>
 80053dc:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80053e0:	6023      	str	r3, [r4, #0]
 80053e2:	6123      	str	r3, [r4, #16]
 80053e4:	2301      	movs	r3, #1
 80053e6:	6163      	str	r3, [r4, #20]
 80053e8:	b003      	add	sp, #12
 80053ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80053ec:	ab01      	add	r3, sp, #4
 80053ee:	466a      	mov	r2, sp
 80053f0:	f7ff ffc8 	bl	8005384 <__swhatbuf_r>
 80053f4:	9f00      	ldr	r7, [sp, #0]
 80053f6:	4605      	mov	r5, r0
 80053f8:	4639      	mov	r1, r7
 80053fa:	4630      	mov	r0, r6
 80053fc:	f7ff fa64 	bl	80048c8 <_malloc_r>
 8005400:	b948      	cbnz	r0, 8005416 <__smakebuf_r+0x46>
 8005402:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005406:	059a      	lsls	r2, r3, #22
 8005408:	d4ee      	bmi.n	80053e8 <__smakebuf_r+0x18>
 800540a:	f023 0303 	bic.w	r3, r3, #3
 800540e:	f043 0302 	orr.w	r3, r3, #2
 8005412:	81a3      	strh	r3, [r4, #12]
 8005414:	e7e2      	b.n	80053dc <__smakebuf_r+0xc>
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	6020      	str	r0, [r4, #0]
 800541a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800541e:	81a3      	strh	r3, [r4, #12]
 8005420:	9b01      	ldr	r3, [sp, #4]
 8005422:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8005426:	b15b      	cbz	r3, 8005440 <__smakebuf_r+0x70>
 8005428:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800542c:	4630      	mov	r0, r6
 800542e:	f000 f837 	bl	80054a0 <_isatty_r>
 8005432:	b128      	cbz	r0, 8005440 <__smakebuf_r+0x70>
 8005434:	89a3      	ldrh	r3, [r4, #12]
 8005436:	f023 0303 	bic.w	r3, r3, #3
 800543a:	f043 0301 	orr.w	r3, r3, #1
 800543e:	81a3      	strh	r3, [r4, #12]
 8005440:	89a3      	ldrh	r3, [r4, #12]
 8005442:	431d      	orrs	r5, r3
 8005444:	81a5      	strh	r5, [r4, #12]
 8005446:	e7cf      	b.n	80053e8 <__smakebuf_r+0x18>

08005448 <memmove>:
 8005448:	4288      	cmp	r0, r1
 800544a:	b510      	push	{r4, lr}
 800544c:	eb01 0402 	add.w	r4, r1, r2
 8005450:	d902      	bls.n	8005458 <memmove+0x10>
 8005452:	4284      	cmp	r4, r0
 8005454:	4623      	mov	r3, r4
 8005456:	d807      	bhi.n	8005468 <memmove+0x20>
 8005458:	1e43      	subs	r3, r0, #1
 800545a:	42a1      	cmp	r1, r4
 800545c:	d008      	beq.n	8005470 <memmove+0x28>
 800545e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005462:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005466:	e7f8      	b.n	800545a <memmove+0x12>
 8005468:	4402      	add	r2, r0
 800546a:	4601      	mov	r1, r0
 800546c:	428a      	cmp	r2, r1
 800546e:	d100      	bne.n	8005472 <memmove+0x2a>
 8005470:	bd10      	pop	{r4, pc}
 8005472:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8005476:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800547a:	e7f7      	b.n	800546c <memmove+0x24>

0800547c <_fstat_r>:
 800547c:	b538      	push	{r3, r4, r5, lr}
 800547e:	4d07      	ldr	r5, [pc, #28]	@ (800549c <_fstat_r+0x20>)
 8005480:	2300      	movs	r3, #0
 8005482:	4604      	mov	r4, r0
 8005484:	4608      	mov	r0, r1
 8005486:	4611      	mov	r1, r2
 8005488:	602b      	str	r3, [r5, #0]
 800548a:	f7fc f81a 	bl	80014c2 <_fstat>
 800548e:	1c43      	adds	r3, r0, #1
 8005490:	d102      	bne.n	8005498 <_fstat_r+0x1c>
 8005492:	682b      	ldr	r3, [r5, #0]
 8005494:	b103      	cbz	r3, 8005498 <_fstat_r+0x1c>
 8005496:	6023      	str	r3, [r4, #0]
 8005498:	bd38      	pop	{r3, r4, r5, pc}
 800549a:	bf00      	nop
 800549c:	200005e4 	.word	0x200005e4

080054a0 <_isatty_r>:
 80054a0:	b538      	push	{r3, r4, r5, lr}
 80054a2:	4d06      	ldr	r5, [pc, #24]	@ (80054bc <_isatty_r+0x1c>)
 80054a4:	2300      	movs	r3, #0
 80054a6:	4604      	mov	r4, r0
 80054a8:	4608      	mov	r0, r1
 80054aa:	602b      	str	r3, [r5, #0]
 80054ac:	f7fc f819 	bl	80014e2 <_isatty>
 80054b0:	1c43      	adds	r3, r0, #1
 80054b2:	d102      	bne.n	80054ba <_isatty_r+0x1a>
 80054b4:	682b      	ldr	r3, [r5, #0]
 80054b6:	b103      	cbz	r3, 80054ba <_isatty_r+0x1a>
 80054b8:	6023      	str	r3, [r4, #0]
 80054ba:	bd38      	pop	{r3, r4, r5, pc}
 80054bc:	200005e4 	.word	0x200005e4

080054c0 <_sbrk_r>:
 80054c0:	b538      	push	{r3, r4, r5, lr}
 80054c2:	4d06      	ldr	r5, [pc, #24]	@ (80054dc <_sbrk_r+0x1c>)
 80054c4:	2300      	movs	r3, #0
 80054c6:	4604      	mov	r4, r0
 80054c8:	4608      	mov	r0, r1
 80054ca:	602b      	str	r3, [r5, #0]
 80054cc:	f7fc f822 	bl	8001514 <_sbrk>
 80054d0:	1c43      	adds	r3, r0, #1
 80054d2:	d102      	bne.n	80054da <_sbrk_r+0x1a>
 80054d4:	682b      	ldr	r3, [r5, #0]
 80054d6:	b103      	cbz	r3, 80054da <_sbrk_r+0x1a>
 80054d8:	6023      	str	r3, [r4, #0]
 80054da:	bd38      	pop	{r3, r4, r5, pc}
 80054dc:	200005e4 	.word	0x200005e4

080054e0 <_realloc_r>:
 80054e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80054e4:	4607      	mov	r7, r0
 80054e6:	4614      	mov	r4, r2
 80054e8:	460d      	mov	r5, r1
 80054ea:	b921      	cbnz	r1, 80054f6 <_realloc_r+0x16>
 80054ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80054f0:	4611      	mov	r1, r2
 80054f2:	f7ff b9e9 	b.w	80048c8 <_malloc_r>
 80054f6:	b92a      	cbnz	r2, 8005504 <_realloc_r+0x24>
 80054f8:	f7ff f97a 	bl	80047f0 <_free_r>
 80054fc:	4625      	mov	r5, r4
 80054fe:	4628      	mov	r0, r5
 8005500:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005504:	f000 f81a 	bl	800553c <_malloc_usable_size_r>
 8005508:	4284      	cmp	r4, r0
 800550a:	4606      	mov	r6, r0
 800550c:	d802      	bhi.n	8005514 <_realloc_r+0x34>
 800550e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8005512:	d8f4      	bhi.n	80054fe <_realloc_r+0x1e>
 8005514:	4621      	mov	r1, r4
 8005516:	4638      	mov	r0, r7
 8005518:	f7ff f9d6 	bl	80048c8 <_malloc_r>
 800551c:	4680      	mov	r8, r0
 800551e:	b908      	cbnz	r0, 8005524 <_realloc_r+0x44>
 8005520:	4645      	mov	r5, r8
 8005522:	e7ec      	b.n	80054fe <_realloc_r+0x1e>
 8005524:	42b4      	cmp	r4, r6
 8005526:	4622      	mov	r2, r4
 8005528:	4629      	mov	r1, r5
 800552a:	bf28      	it	cs
 800552c:	4632      	movcs	r2, r6
 800552e:	f7ff f950 	bl	80047d2 <memcpy>
 8005532:	4629      	mov	r1, r5
 8005534:	4638      	mov	r0, r7
 8005536:	f7ff f95b 	bl	80047f0 <_free_r>
 800553a:	e7f1      	b.n	8005520 <_realloc_r+0x40>

0800553c <_malloc_usable_size_r>:
 800553c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005540:	1f18      	subs	r0, r3, #4
 8005542:	2b00      	cmp	r3, #0
 8005544:	bfbc      	itt	lt
 8005546:	580b      	ldrlt	r3, [r1, r0]
 8005548:	18c0      	addlt	r0, r0, r3
 800554a:	4770      	bx	lr

0800554c <_init>:
 800554c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800554e:	bf00      	nop
 8005550:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005552:	bc08      	pop	{r3}
 8005554:	469e      	mov	lr, r3
 8005556:	4770      	bx	lr

08005558 <_fini>:
 8005558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800555a:	bf00      	nop
 800555c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800555e:	bc08      	pop	{r3}
 8005560:	469e      	mov	lr, r3
 8005562:	4770      	bx	lr
